
test-app.elf:     file format elf32-tricore

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .CPU2.ustack  00000800  50014e00  50014e00  00000274  2**0
                  ALLOC
  1 .CPU2.istack  00000400  50015700  50015700  00000274  2**0
                  ALLOC
  2 .CPU2.csa     00002000  50015c00  50015c00  00000274  2**0
                  ALLOC
  3 .CPU1.ustack  00000800  60038e00  60038e00  00000274  2**0
                  ALLOC
  4 .CPU1.istack  00000400  60039700  60039700  00000274  2**0
                  ALLOC
  5 .CPU1.csa     00002000  60039c00  60039c00  00000274  2**0
                  ALLOC
  6 .CPU0.ustack  00000800  70038e00  70038e00  00000274  2**0
                  ALLOC
  7 .CPU0.istack  00000400  70039700  70039700  00000274  2**0
                  ALLOC
  8 .CPU0.csa     00002000  70039c00  70039c00  00000274  2**0
                  ALLOC
  9 .start_tc0    0000000c  a0300000  a0300000  00004e48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .traptab_tc0  00000100  80300100  80300100  00000280  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 11 .traptab_tc1  00000100  80300200  80300200  00000380  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 12 .traptab_tc2  00000100  80300300  80300300  00000480  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 13 .start_tc1    0000000c  a0306400  a0306400  00004e54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .start_tc2    0000000c  a0306420  a0306420  00004e60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .inttab_tc0_000 00000000  80300400  80300400  00004e6c  2**0
                  CONTENTS
 16 .inttab_tc0_001 00000000  80300420  80300420  00004e6c  2**0
                  CONTENTS
 17 .inttab_tc0_002 00000000  80300440  80300440  00004e6c  2**0
                  CONTENTS
 18 .inttab_tc0_003 00000000  80300460  80300460  00004e6c  2**0
                  CONTENTS
 19 .inttab_tc0_004 00000000  80300480  80300480  00004e6c  2**0
                  CONTENTS
 20 .inttab_tc0_005 00000000  803004a0  803004a0  00004e6c  2**0
                  CONTENTS
 21 .inttab_tc0_006 00000000  803004c0  803004c0  00004e6c  2**0
                  CONTENTS
 22 .inttab_tc0_007 00000000  803004e0  803004e0  00004e6c  2**0
                  CONTENTS
 23 .inttab_tc0_008 00000000  80300500  80300500  00004e6c  2**0
                  CONTENTS
 24 .inttab_tc0_009 00000000  80300520  80300520  00004e6c  2**0
                  CONTENTS
 25 .inttab_tc0_00A 00000000  80300540  80300540  00004e6c  2**0
                  CONTENTS
 26 .inttab_tc0_00B 00000000  80300560  80300560  00004e6c  2**0
                  CONTENTS
 27 .inttab_tc0_00C 00000000  80300580  80300580  00004e6c  2**0
                  CONTENTS
 28 .inttab_tc0_00D 00000000  803005a0  803005a0  00004e6c  2**0
                  CONTENTS
 29 .inttab_tc0_00E 00000000  803005c0  803005c0  00004e6c  2**0
                  CONTENTS
 30 .inttab_tc0_00F 00000000  803005e0  803005e0  00004e6c  2**0
                  CONTENTS
 31 .inttab_tc0_010 00000000  80300600  80300600  00004e6c  2**0
                  CONTENTS
 32 .inttab_tc0_011 00000000  80300620  80300620  00004e6c  2**0
                  CONTENTS
 33 .inttab_tc0_012 00000000  80300640  80300640  00004e6c  2**0
                  CONTENTS
 34 .inttab_tc0_013 00000000  80300660  80300660  00004e6c  2**0
                  CONTENTS
 35 .inttab_tc0_014 00000000  80300680  80300680  00004e6c  2**0
                  CONTENTS
 36 .inttab_tc0_015 00000000  803006a0  803006a0  00004e6c  2**0
                  CONTENTS
 37 .inttab_tc0_016 00000000  803006c0  803006c0  00004e6c  2**0
                  CONTENTS
 38 .inttab_tc0_017 00000000  803006e0  803006e0  00004e6c  2**0
                  CONTENTS
 39 .inttab_tc0_018 00000000  80300700  80300700  00004e6c  2**0
                  CONTENTS
 40 .inttab_tc0_019 00000000  80300720  80300720  00004e6c  2**0
                  CONTENTS
 41 .inttab_tc0_01A 00000000  80300740  80300740  00004e6c  2**0
                  CONTENTS
 42 .inttab_tc0_01B 00000000  80300760  80300760  00004e6c  2**0
                  CONTENTS
 43 .inttab_tc0_01C 00000000  80300780  80300780  00004e6c  2**0
                  CONTENTS
 44 .inttab_tc0_01D 00000000  803007a0  803007a0  00004e6c  2**0
                  CONTENTS
 45 .inttab_tc0_01E 00000000  803007c0  803007c0  00004e6c  2**0
                  CONTENTS
 46 .inttab_tc0_01F 00000000  803007e0  803007e0  00004e6c  2**0
                  CONTENTS
 47 .inttab_tc0_020 00000000  80300800  80300800  00004e6c  2**0
                  CONTENTS
 48 .inttab_tc0_021 00000000  80300820  80300820  00004e6c  2**0
                  CONTENTS
 49 .inttab_tc0_022 00000000  80300840  80300840  00004e6c  2**0
                  CONTENTS
 50 .inttab_tc0_023 00000000  80300860  80300860  00004e6c  2**0
                  CONTENTS
 51 .inttab_tc0_024 00000000  80300880  80300880  00004e6c  2**0
                  CONTENTS
 52 .inttab_tc0_025 00000000  803008a0  803008a0  00004e6c  2**0
                  CONTENTS
 53 .inttab_tc0_026 00000000  803008c0  803008c0  00004e6c  2**0
                  CONTENTS
 54 .inttab_tc0_027 00000000  803008e0  803008e0  00004e6c  2**0
                  CONTENTS
 55 .inttab_tc0_028 00000000  80300900  80300900  00004e6c  2**0
                  CONTENTS
 56 .inttab_tc0_029 00000000  80300920  80300920  00004e6c  2**0
                  CONTENTS
 57 .inttab_tc0_02A 00000000  80300940  80300940  00004e6c  2**0
                  CONTENTS
 58 .inttab_tc0_02B 00000000  80300960  80300960  00004e6c  2**0
                  CONTENTS
 59 .inttab_tc0_02C 00000000  80300980  80300980  00004e6c  2**0
                  CONTENTS
 60 .inttab_tc0_02D 00000000  803009a0  803009a0  00004e6c  2**0
                  CONTENTS
 61 .inttab_tc0_02E 00000000  803009c0  803009c0  00004e6c  2**0
                  CONTENTS
 62 .inttab_tc0_02F 00000000  803009e0  803009e0  00004e6c  2**0
                  CONTENTS
 63 .inttab_tc0_030 00000000  80300a00  80300a00  00004e6c  2**0
                  CONTENTS
 64 .inttab_tc0_031 00000000  80300a20  80300a20  00004e6c  2**0
                  CONTENTS
 65 .inttab_tc0_032 00000000  80300a40  80300a40  00004e6c  2**0
                  CONTENTS
 66 .inttab_tc0_033 00000000  80300a60  80300a60  00004e6c  2**0
                  CONTENTS
 67 .inttab_tc0_034 00000000  80300a80  80300a80  00004e6c  2**0
                  CONTENTS
 68 .inttab_tc0_035 00000000  80300aa0  80300aa0  00004e6c  2**0
                  CONTENTS
 69 .inttab_tc0_036 00000000  80300ac0  80300ac0  00004e6c  2**0
                  CONTENTS
 70 .inttab_tc0_037 00000000  80300ae0  80300ae0  00004e6c  2**0
                  CONTENTS
 71 .inttab_tc0_038 00000000  80300b00  80300b00  00004e6c  2**0
                  CONTENTS
 72 .inttab_tc0_039 00000000  80300b20  80300b20  00004e6c  2**0
                  CONTENTS
 73 .inttab_tc0_03A 00000000  80300b40  80300b40  00004e6c  2**0
                  CONTENTS
 74 .inttab_tc0_03B 00000000  80300b60  80300b60  00004e6c  2**0
                  CONTENTS
 75 .inttab_tc0_03C 00000000  80300b80  80300b80  00004e6c  2**0
                  CONTENTS
 76 .inttab_tc0_03D 00000000  80300ba0  80300ba0  00004e6c  2**0
                  CONTENTS
 77 .inttab_tc0_03E 00000000  80300bc0  80300bc0  00004e6c  2**0
                  CONTENTS
 78 .inttab_tc0_03F 00000000  80300be0  80300be0  00004e6c  2**0
                  CONTENTS
 79 .inttab_tc0_040 00000000  80300c00  80300c00  00004e6c  2**0
                  CONTENTS
 80 .inttab_tc0_041 00000000  80300c20  80300c20  00004e6c  2**0
                  CONTENTS
 81 .inttab_tc0_042 00000000  80300c40  80300c40  00004e6c  2**0
                  CONTENTS
 82 .inttab_tc0_043 00000000  80300c60  80300c60  00004e6c  2**0
                  CONTENTS
 83 .inttab_tc0_044 00000000  80300c80  80300c80  00004e6c  2**0
                  CONTENTS
 84 .inttab_tc0_045 00000000  80300ca0  80300ca0  00004e6c  2**0
                  CONTENTS
 85 .inttab_tc0_046 00000000  80300cc0  80300cc0  00004e6c  2**0
                  CONTENTS
 86 .inttab_tc0_047 00000000  80300ce0  80300ce0  00004e6c  2**0
                  CONTENTS
 87 .inttab_tc0_048 00000000  80300d00  80300d00  00004e6c  2**0
                  CONTENTS
 88 .inttab_tc0_049 00000000  80300d20  80300d20  00004e6c  2**0
                  CONTENTS
 89 .inttab_tc0_04A 00000000  80300d40  80300d40  00004e6c  2**0
                  CONTENTS
 90 .inttab_tc0_04B 00000000  80300d60  80300d60  00004e6c  2**0
                  CONTENTS
 91 .inttab_tc0_04C 00000000  80300d80  80300d80  00004e6c  2**0
                  CONTENTS
 92 .inttab_tc0_04D 00000000  80300da0  80300da0  00004e6c  2**0
                  CONTENTS
 93 .inttab_tc0_04E 00000000  80300dc0  80300dc0  00004e6c  2**0
                  CONTENTS
 94 .inttab_tc0_04F 00000000  80300de0  80300de0  00004e6c  2**0
                  CONTENTS
 95 .inttab_tc0_050 00000000  80300e00  80300e00  00004e6c  2**0
                  CONTENTS
 96 .inttab_tc0_051 00000000  80300e20  80300e20  00004e6c  2**0
                  CONTENTS
 97 .inttab_tc0_052 00000000  80300e40  80300e40  00004e6c  2**0
                  CONTENTS
 98 .inttab_tc0_053 00000000  80300e60  80300e60  00004e6c  2**0
                  CONTENTS
 99 .inttab_tc0_054 00000000  80300e80  80300e80  00004e6c  2**0
                  CONTENTS
100 .inttab_tc0_055 00000000  80300ea0  80300ea0  00004e6c  2**0
                  CONTENTS
101 .inttab_tc0_056 00000000  80300ec0  80300ec0  00004e6c  2**0
                  CONTENTS
102 .inttab_tc0_057 00000000  80300ee0  80300ee0  00004e6c  2**0
                  CONTENTS
103 .inttab_tc0_058 00000000  80300f00  80300f00  00004e6c  2**0
                  CONTENTS
104 .inttab_tc0_059 00000000  80300f20  80300f20  00004e6c  2**0
                  CONTENTS
105 .inttab_tc0_05A 00000000  80300f40  80300f40  00004e6c  2**0
                  CONTENTS
106 .inttab_tc0_05B 00000000  80300f60  80300f60  00004e6c  2**0
                  CONTENTS
107 .inttab_tc0_05C 00000000  80300f80  80300f80  00004e6c  2**0
                  CONTENTS
108 .inttab_tc0_05D 00000000  80300fa0  80300fa0  00004e6c  2**0
                  CONTENTS
109 .inttab_tc0_05E 00000000  80300fc0  80300fc0  00004e6c  2**0
                  CONTENTS
110 .inttab_tc0_05F 00000000  80300fe0  80300fe0  00004e6c  2**0
                  CONTENTS
111 .inttab_tc0_060 00000000  80301000  80301000  00004e6c  2**0
                  CONTENTS
112 .inttab_tc0_061 00000000  80301020  80301020  00004e6c  2**0
                  CONTENTS
113 .inttab_tc0_062 00000000  80301040  80301040  00004e6c  2**0
                  CONTENTS
114 .inttab_tc0_063 00000000  80301060  80301060  00004e6c  2**0
                  CONTENTS
115 .inttab_tc0_064 00000000  80301080  80301080  00004e6c  2**0
                  CONTENTS
116 .inttab_tc0_065 00000000  803010a0  803010a0  00004e6c  2**0
                  CONTENTS
117 .inttab_tc0_066 00000000  803010c0  803010c0  00004e6c  2**0
                  CONTENTS
118 .inttab_tc0_067 00000000  803010e0  803010e0  00004e6c  2**0
                  CONTENTS
119 .inttab_tc0_068 00000000  80301100  80301100  00004e6c  2**0
                  CONTENTS
120 .inttab_tc0_069 00000000  80301120  80301120  00004e6c  2**0
                  CONTENTS
121 .inttab_tc0_06A 00000000  80301140  80301140  00004e6c  2**0
                  CONTENTS
122 .inttab_tc0_06B 00000000  80301160  80301160  00004e6c  2**0
                  CONTENTS
123 .inttab_tc0_06C 00000000  80301180  80301180  00004e6c  2**0
                  CONTENTS
124 .inttab_tc0_06D 00000000  803011a0  803011a0  00004e6c  2**0
                  CONTENTS
125 .inttab_tc0_06E 00000000  803011c0  803011c0  00004e6c  2**0
                  CONTENTS
126 .inttab_tc0_06F 00000000  803011e0  803011e0  00004e6c  2**0
                  CONTENTS
127 .inttab_tc0_070 00000000  80301200  80301200  00004e6c  2**0
                  CONTENTS
128 .inttab_tc0_071 00000000  80301220  80301220  00004e6c  2**0
                  CONTENTS
129 .inttab_tc0_072 00000000  80301240  80301240  00004e6c  2**0
                  CONTENTS
130 .inttab_tc0_073 00000000  80301260  80301260  00004e6c  2**0
                  CONTENTS
131 .inttab_tc0_074 00000000  80301280  80301280  00004e6c  2**0
                  CONTENTS
132 .inttab_tc0_075 00000000  803012a0  803012a0  00004e6c  2**0
                  CONTENTS
133 .inttab_tc0_076 00000000  803012c0  803012c0  00004e6c  2**0
                  CONTENTS
134 .inttab_tc0_077 00000000  803012e0  803012e0  00004e6c  2**0
                  CONTENTS
135 .inttab_tc0_078 00000000  80301300  80301300  00004e6c  2**0
                  CONTENTS
136 .inttab_tc0_079 00000000  80301320  80301320  00004e6c  2**0
                  CONTENTS
137 .inttab_tc0_07A 00000000  80301340  80301340  00004e6c  2**0
                  CONTENTS
138 .inttab_tc0_07B 00000000  80301360  80301360  00004e6c  2**0
                  CONTENTS
139 .inttab_tc0_07C 00000000  80301380  80301380  00004e6c  2**0
                  CONTENTS
140 .inttab_tc0_07D 00000000  803013a0  803013a0  00004e6c  2**0
                  CONTENTS
141 .inttab_tc0_07E 00000000  803013c0  803013c0  00004e6c  2**0
                  CONTENTS
142 .inttab_tc0_07F 00000000  803013e0  803013e0  00004e6c  2**0
                  CONTENTS
143 .inttab_tc0_080 00000000  80301400  80301400  00004e6c  2**0
                  CONTENTS
144 .inttab_tc0_081 00000000  80301420  80301420  00004e6c  2**0
                  CONTENTS
145 .inttab_tc0_082 00000000  80301440  80301440  00004e6c  2**0
                  CONTENTS
146 .inttab_tc0_083 00000000  80301460  80301460  00004e6c  2**0
                  CONTENTS
147 .inttab_tc0_084 00000000  80301480  80301480  00004e6c  2**0
                  CONTENTS
148 .inttab_tc0_085 00000000  803014a0  803014a0  00004e6c  2**0
                  CONTENTS
149 .inttab_tc0_086 00000000  803014c0  803014c0  00004e6c  2**0
                  CONTENTS
150 .inttab_tc0_087 00000000  803014e0  803014e0  00004e6c  2**0
                  CONTENTS
151 .inttab_tc0_088 00000000  80301500  80301500  00004e6c  2**0
                  CONTENTS
152 .inttab_tc0_089 00000000  80301520  80301520  00004e6c  2**0
                  CONTENTS
153 .inttab_tc0_08A 00000000  80301540  80301540  00004e6c  2**0
                  CONTENTS
154 .inttab_tc0_08B 00000000  80301560  80301560  00004e6c  2**0
                  CONTENTS
155 .inttab_tc0_08C 00000000  80301580  80301580  00004e6c  2**0
                  CONTENTS
156 .inttab_tc0_08D 00000000  803015a0  803015a0  00004e6c  2**0
                  CONTENTS
157 .inttab_tc0_08E 00000000  803015c0  803015c0  00004e6c  2**0
                  CONTENTS
158 .inttab_tc0_08F 00000000  803015e0  803015e0  00004e6c  2**0
                  CONTENTS
159 .inttab_tc0_090 00000000  80301600  80301600  00004e6c  2**0
                  CONTENTS
160 .inttab_tc0_091 00000000  80301620  80301620  00004e6c  2**0
                  CONTENTS
161 .inttab_tc0_092 00000000  80301640  80301640  00004e6c  2**0
                  CONTENTS
162 .inttab_tc0_093 00000000  80301660  80301660  00004e6c  2**0
                  CONTENTS
163 .inttab_tc0_094 00000000  80301680  80301680  00004e6c  2**0
                  CONTENTS
164 .inttab_tc0_095 00000000  803016a0  803016a0  00004e6c  2**0
                  CONTENTS
165 .inttab_tc0_096 00000000  803016c0  803016c0  00004e6c  2**0
                  CONTENTS
166 .inttab_tc0_097 00000000  803016e0  803016e0  00004e6c  2**0
                  CONTENTS
167 .inttab_tc0_098 00000000  80301700  80301700  00004e6c  2**0
                  CONTENTS
168 .inttab_tc0_099 00000000  80301720  80301720  00004e6c  2**0
                  CONTENTS
169 .inttab_tc0_09A 00000000  80301740  80301740  00004e6c  2**0
                  CONTENTS
170 .inttab_tc0_09B 00000000  80301760  80301760  00004e6c  2**0
                  CONTENTS
171 .inttab_tc0_09C 00000000  80301780  80301780  00004e6c  2**0
                  CONTENTS
172 .inttab_tc0_09D 00000000  803017a0  803017a0  00004e6c  2**0
                  CONTENTS
173 .inttab_tc0_09E 00000000  803017c0  803017c0  00004e6c  2**0
                  CONTENTS
174 .inttab_tc0_09F 00000000  803017e0  803017e0  00004e6c  2**0
                  CONTENTS
175 .inttab_tc0_0A0 00000000  80301800  80301800  00004e6c  2**0
                  CONTENTS
176 .inttab_tc0_0A1 00000000  80301820  80301820  00004e6c  2**0
                  CONTENTS
177 .inttab_tc0_0A2 00000000  80301840  80301840  00004e6c  2**0
                  CONTENTS
178 .inttab_tc0_0A3 00000000  80301860  80301860  00004e6c  2**0
                  CONTENTS
179 .inttab_tc0_0A4 00000000  80301880  80301880  00004e6c  2**0
                  CONTENTS
180 .inttab_tc0_0A5 00000000  803018a0  803018a0  00004e6c  2**0
                  CONTENTS
181 .inttab_tc0_0A6 00000000  803018c0  803018c0  00004e6c  2**0
                  CONTENTS
182 .inttab_tc0_0A7 00000000  803018e0  803018e0  00004e6c  2**0
                  CONTENTS
183 .inttab_tc0_0A8 00000000  80301900  80301900  00004e6c  2**0
                  CONTENTS
184 .inttab_tc0_0A9 00000000  80301920  80301920  00004e6c  2**0
                  CONTENTS
185 .inttab_tc0_0AA 00000000  80301940  80301940  00004e6c  2**0
                  CONTENTS
186 .inttab_tc0_0AB 00000000  80301960  80301960  00004e6c  2**0
                  CONTENTS
187 .inttab_tc0_0AC 00000000  80301980  80301980  00004e6c  2**0
                  CONTENTS
188 .inttab_tc0_0AD 00000000  803019a0  803019a0  00004e6c  2**0
                  CONTENTS
189 .inttab_tc0_0AE 00000000  803019c0  803019c0  00004e6c  2**0
                  CONTENTS
190 .inttab_tc0_0AF 00000000  803019e0  803019e0  00004e6c  2**0
                  CONTENTS
191 .inttab_tc0_0B0 00000000  80301a00  80301a00  00004e6c  2**0
                  CONTENTS
192 .inttab_tc0_0B1 00000000  80301a20  80301a20  00004e6c  2**0
                  CONTENTS
193 .inttab_tc0_0B2 00000000  80301a40  80301a40  00004e6c  2**0
                  CONTENTS
194 .inttab_tc0_0B3 00000000  80301a60  80301a60  00004e6c  2**0
                  CONTENTS
195 .inttab_tc0_0B4 00000000  80301a80  80301a80  00004e6c  2**0
                  CONTENTS
196 .inttab_tc0_0B5 00000000  80301aa0  80301aa0  00004e6c  2**0
                  CONTENTS
197 .inttab_tc0_0B6 00000000  80301ac0  80301ac0  00004e6c  2**0
                  CONTENTS
198 .inttab_tc0_0B7 00000000  80301ae0  80301ae0  00004e6c  2**0
                  CONTENTS
199 .inttab_tc0_0B8 00000000  80301b00  80301b00  00004e6c  2**0
                  CONTENTS
200 .inttab_tc0_0B9 00000000  80301b20  80301b20  00004e6c  2**0
                  CONTENTS
201 .inttab_tc0_0BA 00000000  80301b40  80301b40  00004e6c  2**0
                  CONTENTS
202 .inttab_tc0_0BB 00000000  80301b60  80301b60  00004e6c  2**0
                  CONTENTS
203 .inttab_tc0_0BC 00000000  80301b80  80301b80  00004e6c  2**0
                  CONTENTS
204 .inttab_tc0_0BD 00000000  80301ba0  80301ba0  00004e6c  2**0
                  CONTENTS
205 .inttab_tc0_0BE 00000000  80301bc0  80301bc0  00004e6c  2**0
                  CONTENTS
206 .inttab_tc0_0BF 00000000  80301be0  80301be0  00004e6c  2**0
                  CONTENTS
207 .inttab_tc0_0C0 00000000  80301c00  80301c00  00004e6c  2**0
                  CONTENTS
208 .inttab_tc0_0C1 00000000  80301c20  80301c20  00004e6c  2**0
                  CONTENTS
209 .inttab_tc0_0C2 00000000  80301c40  80301c40  00004e6c  2**0
                  CONTENTS
210 .inttab_tc0_0C3 00000000  80301c60  80301c60  00004e6c  2**0
                  CONTENTS
211 .inttab_tc0_0C4 00000000  80301c80  80301c80  00004e6c  2**0
                  CONTENTS
212 .inttab_tc0_0C5 00000000  80301ca0  80301ca0  00004e6c  2**0
                  CONTENTS
213 .inttab_tc0_0C6 00000000  80301cc0  80301cc0  00004e6c  2**0
                  CONTENTS
214 .inttab_tc0_0C7 00000000  80301ce0  80301ce0  00004e6c  2**0
                  CONTENTS
215 .inttab_tc0_0C8 00000000  80301d00  80301d00  00004e6c  2**0
                  CONTENTS
216 .inttab_tc0_0C9 00000000  80301d20  80301d20  00004e6c  2**0
                  CONTENTS
217 .inttab_tc0_0CA 00000000  80301d40  80301d40  00004e6c  2**0
                  CONTENTS
218 .inttab_tc0_0CB 00000000  80301d60  80301d60  00004e6c  2**0
                  CONTENTS
219 .inttab_tc0_0CC 00000000  80301d80  80301d80  00004e6c  2**0
                  CONTENTS
220 .inttab_tc0_0CD 00000000  80301da0  80301da0  00004e6c  2**0
                  CONTENTS
221 .inttab_tc0_0CE 00000000  80301dc0  80301dc0  00004e6c  2**0
                  CONTENTS
222 .inttab_tc0_0CF 00000000  80301de0  80301de0  00004e6c  2**0
                  CONTENTS
223 .inttab_tc0_0D0 00000000  80301e00  80301e00  00004e6c  2**0
                  CONTENTS
224 .inttab_tc0_0D1 00000000  80301e20  80301e20  00004e6c  2**0
                  CONTENTS
225 .inttab_tc0_0D2 00000000  80301e40  80301e40  00004e6c  2**0
                  CONTENTS
226 .inttab_tc0_0D3 00000000  80301e60  80301e60  00004e6c  2**0
                  CONTENTS
227 .inttab_tc0_0D4 00000000  80301e80  80301e80  00004e6c  2**0
                  CONTENTS
228 .inttab_tc0_0D5 00000000  80301ea0  80301ea0  00004e6c  2**0
                  CONTENTS
229 .inttab_tc0_0D6 00000000  80301ec0  80301ec0  00004e6c  2**0
                  CONTENTS
230 .inttab_tc0_0D7 00000000  80301ee0  80301ee0  00004e6c  2**0
                  CONTENTS
231 .inttab_tc0_0D8 00000000  80301f00  80301f00  00004e6c  2**0
                  CONTENTS
232 .inttab_tc0_0D9 00000000  80301f20  80301f20  00004e6c  2**0
                  CONTENTS
233 .inttab_tc0_0DA 00000000  80301f40  80301f40  00004e6c  2**0
                  CONTENTS
234 .inttab_tc0_0DB 00000000  80301f60  80301f60  00004e6c  2**0
                  CONTENTS
235 .inttab_tc0_0DC 00000000  80301f80  80301f80  00004e6c  2**0
                  CONTENTS
236 .inttab_tc0_0DD 00000000  80301fa0  80301fa0  00004e6c  2**0
                  CONTENTS
237 .inttab_tc0_0DE 00000000  80301fc0  80301fc0  00004e6c  2**0
                  CONTENTS
238 .inttab_tc0_0DF 00000000  80301fe0  80301fe0  00004e6c  2**0
                  CONTENTS
239 .inttab_tc0_0E0 00000000  80302000  80302000  00004e6c  2**0
                  CONTENTS
240 .inttab_tc0_0E1 00000000  80302020  80302020  00004e6c  2**0
                  CONTENTS
241 .inttab_tc0_0E2 00000000  80302040  80302040  00004e6c  2**0
                  CONTENTS
242 .inttab_tc0_0E3 00000000  80302060  80302060  00004e6c  2**0
                  CONTENTS
243 .inttab_tc0_0E4 00000000  80302080  80302080  00004e6c  2**0
                  CONTENTS
244 .inttab_tc0_0E5 00000000  803020a0  803020a0  00004e6c  2**0
                  CONTENTS
245 .inttab_tc0_0E6 00000000  803020c0  803020c0  00004e6c  2**0
                  CONTENTS
246 .inttab_tc0_0E7 00000000  803020e0  803020e0  00004e6c  2**0
                  CONTENTS
247 .inttab_tc0_0E8 00000000  80302100  80302100  00004e6c  2**0
                  CONTENTS
248 .inttab_tc0_0E9 00000000  80302120  80302120  00004e6c  2**0
                  CONTENTS
249 .inttab_tc0_0EA 00000000  80302140  80302140  00004e6c  2**0
                  CONTENTS
250 .inttab_tc0_0EB 00000000  80302160  80302160  00004e6c  2**0
                  CONTENTS
251 .inttab_tc0_0EC 00000000  80302180  80302180  00004e6c  2**0
                  CONTENTS
252 .inttab_tc0_0ED 00000000  803021a0  803021a0  00004e6c  2**0
                  CONTENTS
253 .inttab_tc0_0EE 00000000  803021c0  803021c0  00004e6c  2**0
                  CONTENTS
254 .inttab_tc0_0EF 00000000  803021e0  803021e0  00004e6c  2**0
                  CONTENTS
255 .inttab_tc0_0F0 00000000  80302200  80302200  00004e6c  2**0
                  CONTENTS
256 .inttab_tc0_0F1 00000000  80302220  80302220  00004e6c  2**0
                  CONTENTS
257 .inttab_tc0_0F2 00000000  80302240  80302240  00004e6c  2**0
                  CONTENTS
258 .inttab_tc0_0F3 00000000  80302260  80302260  00004e6c  2**0
                  CONTENTS
259 .inttab_tc0_0F4 00000000  80302280  80302280  00004e6c  2**0
                  CONTENTS
260 .inttab_tc0_0F5 00000000  803022a0  803022a0  00004e6c  2**0
                  CONTENTS
261 .inttab_tc0_0F6 00000000  803022c0  803022c0  00004e6c  2**0
                  CONTENTS
262 .inttab_tc0_0F7 00000000  803022e0  803022e0  00004e6c  2**0
                  CONTENTS
263 .inttab_tc0_0F8 00000000  80302300  80302300  00004e6c  2**0
                  CONTENTS
264 .inttab_tc0_0F9 00000000  80302320  80302320  00004e6c  2**0
                  CONTENTS
265 .inttab_tc0_0FA 00000000  80302340  80302340  00004e6c  2**0
                  CONTENTS
266 .inttab_tc0_0FB 00000000  80302360  80302360  00004e6c  2**0
                  CONTENTS
267 .inttab_tc0_0FC 00000000  80302380  80302380  00004e6c  2**0
                  CONTENTS
268 .inttab_tc0_0FD 00000000  803023a0  803023a0  00004e6c  2**0
                  CONTENTS
269 .inttab_tc0_0FE 00000000  803023c0  803023c0  00004e6c  2**0
                  CONTENTS
270 .inttab_tc0_0FF 00000000  803023e0  803023e0  00004e6c  2**0
                  CONTENTS
271 .inttab_tc1_000 00000000  80302400  80302400  00004e6c  2**0
                  CONTENTS
272 .inttab_tc1_001 00000000  80302420  80302420  00004e6c  2**0
                  CONTENTS
273 .inttab_tc1_002 00000000  80302440  80302440  00004e6c  2**0
                  CONTENTS
274 .inttab_tc1_003 00000000  80302460  80302460  00004e6c  2**0
                  CONTENTS
275 .inttab_tc1_004 00000000  80302480  80302480  00004e6c  2**0
                  CONTENTS
276 .inttab_tc1_005 00000000  803024a0  803024a0  00004e6c  2**0
                  CONTENTS
277 .inttab_tc1_006 00000000  803024c0  803024c0  00004e6c  2**0
                  CONTENTS
278 .inttab_tc1_007 00000000  803024e0  803024e0  00004e6c  2**0
                  CONTENTS
279 .inttab_tc1_008 00000000  80302500  80302500  00004e6c  2**0
                  CONTENTS
280 .inttab_tc1_009 00000000  80302520  80302520  00004e6c  2**0
                  CONTENTS
281 .inttab_tc1_00A 00000000  80302540  80302540  00004e6c  2**0
                  CONTENTS
282 .inttab_tc1_00B 00000000  80302560  80302560  00004e6c  2**0
                  CONTENTS
283 .inttab_tc1_00C 00000000  80302580  80302580  00004e6c  2**0
                  CONTENTS
284 .inttab_tc1_00D 00000000  803025a0  803025a0  00004e6c  2**0
                  CONTENTS
285 .inttab_tc1_00E 00000000  803025c0  803025c0  00004e6c  2**0
                  CONTENTS
286 .inttab_tc1_00F 00000000  803025e0  803025e0  00004e6c  2**0
                  CONTENTS
287 .inttab_tc1_010 00000000  80302600  80302600  00004e6c  2**0
                  CONTENTS
288 .inttab_tc1_011 00000000  80302620  80302620  00004e6c  2**0
                  CONTENTS
289 .inttab_tc1_012 00000000  80302640  80302640  00004e6c  2**0
                  CONTENTS
290 .inttab_tc1_013 00000000  80302660  80302660  00004e6c  2**0
                  CONTENTS
291 .inttab_tc1_014 00000000  80302680  80302680  00004e6c  2**0
                  CONTENTS
292 .inttab_tc1_015 00000000  803026a0  803026a0  00004e6c  2**0
                  CONTENTS
293 .inttab_tc1_016 00000000  803026c0  803026c0  00004e6c  2**0
                  CONTENTS
294 .inttab_tc1_017 00000000  803026e0  803026e0  00004e6c  2**0
                  CONTENTS
295 .inttab_tc1_018 00000000  80302700  80302700  00004e6c  2**0
                  CONTENTS
296 .inttab_tc1_019 00000000  80302720  80302720  00004e6c  2**0
                  CONTENTS
297 .inttab_tc1_01A 00000000  80302740  80302740  00004e6c  2**0
                  CONTENTS
298 .inttab_tc1_01B 00000000  80302760  80302760  00004e6c  2**0
                  CONTENTS
299 .inttab_tc1_01C 00000000  80302780  80302780  00004e6c  2**0
                  CONTENTS
300 .inttab_tc1_01D 00000000  803027a0  803027a0  00004e6c  2**0
                  CONTENTS
301 .inttab_tc1_01E 00000000  803027c0  803027c0  00004e6c  2**0
                  CONTENTS
302 .inttab_tc1_01F 00000000  803027e0  803027e0  00004e6c  2**0
                  CONTENTS
303 .inttab_tc1_020 00000000  80302800  80302800  00004e6c  2**0
                  CONTENTS
304 .inttab_tc1_021 00000000  80302820  80302820  00004e6c  2**0
                  CONTENTS
305 .inttab_tc1_022 00000000  80302840  80302840  00004e6c  2**0
                  CONTENTS
306 .inttab_tc1_023 00000000  80302860  80302860  00004e6c  2**0
                  CONTENTS
307 .inttab_tc1_024 00000000  80302880  80302880  00004e6c  2**0
                  CONTENTS
308 .inttab_tc1_025 00000000  803028a0  803028a0  00004e6c  2**0
                  CONTENTS
309 .inttab_tc1_026 00000000  803028c0  803028c0  00004e6c  2**0
                  CONTENTS
310 .inttab_tc1_027 00000000  803028e0  803028e0  00004e6c  2**0
                  CONTENTS
311 .inttab_tc1_028 00000000  80302900  80302900  00004e6c  2**0
                  CONTENTS
312 .inttab_tc1_029 00000000  80302920  80302920  00004e6c  2**0
                  CONTENTS
313 .inttab_tc1_02A 00000000  80302940  80302940  00004e6c  2**0
                  CONTENTS
314 .inttab_tc1_02B 00000000  80302960  80302960  00004e6c  2**0
                  CONTENTS
315 .inttab_tc1_02C 00000000  80302980  80302980  00004e6c  2**0
                  CONTENTS
316 .inttab_tc1_02D 00000000  803029a0  803029a0  00004e6c  2**0
                  CONTENTS
317 .inttab_tc1_02E 00000000  803029c0  803029c0  00004e6c  2**0
                  CONTENTS
318 .inttab_tc1_02F 00000000  803029e0  803029e0  00004e6c  2**0
                  CONTENTS
319 .inttab_tc1_030 00000000  80302a00  80302a00  00004e6c  2**0
                  CONTENTS
320 .inttab_tc1_031 00000000  80302a20  80302a20  00004e6c  2**0
                  CONTENTS
321 .inttab_tc1_032 00000000  80302a40  80302a40  00004e6c  2**0
                  CONTENTS
322 .inttab_tc1_033 00000000  80302a60  80302a60  00004e6c  2**0
                  CONTENTS
323 .inttab_tc1_034 00000000  80302a80  80302a80  00004e6c  2**0
                  CONTENTS
324 .inttab_tc1_035 00000000  80302aa0  80302aa0  00004e6c  2**0
                  CONTENTS
325 .inttab_tc1_036 00000000  80302ac0  80302ac0  00004e6c  2**0
                  CONTENTS
326 .inttab_tc1_037 00000000  80302ae0  80302ae0  00004e6c  2**0
                  CONTENTS
327 .inttab_tc1_038 00000000  80302b00  80302b00  00004e6c  2**0
                  CONTENTS
328 .inttab_tc1_039 00000000  80302b20  80302b20  00004e6c  2**0
                  CONTENTS
329 .inttab_tc1_03A 00000000  80302b40  80302b40  00004e6c  2**0
                  CONTENTS
330 .inttab_tc1_03B 00000000  80302b60  80302b60  00004e6c  2**0
                  CONTENTS
331 .inttab_tc1_03C 00000000  80302b80  80302b80  00004e6c  2**0
                  CONTENTS
332 .inttab_tc1_03D 00000000  80302ba0  80302ba0  00004e6c  2**0
                  CONTENTS
333 .inttab_tc1_03E 00000000  80302bc0  80302bc0  00004e6c  2**0
                  CONTENTS
334 .inttab_tc1_03F 00000000  80302be0  80302be0  00004e6c  2**0
                  CONTENTS
335 .inttab_tc1_040 00000000  80302c00  80302c00  00004e6c  2**0
                  CONTENTS
336 .inttab_tc1_041 00000000  80302c20  80302c20  00004e6c  2**0
                  CONTENTS
337 .inttab_tc1_042 00000000  80302c40  80302c40  00004e6c  2**0
                  CONTENTS
338 .inttab_tc1_043 00000000  80302c60  80302c60  00004e6c  2**0
                  CONTENTS
339 .inttab_tc1_044 00000000  80302c80  80302c80  00004e6c  2**0
                  CONTENTS
340 .inttab_tc1_045 00000000  80302ca0  80302ca0  00004e6c  2**0
                  CONTENTS
341 .inttab_tc1_046 00000000  80302cc0  80302cc0  00004e6c  2**0
                  CONTENTS
342 .inttab_tc1_047 00000000  80302ce0  80302ce0  00004e6c  2**0
                  CONTENTS
343 .inttab_tc1_048 00000000  80302d00  80302d00  00004e6c  2**0
                  CONTENTS
344 .inttab_tc1_049 00000000  80302d20  80302d20  00004e6c  2**0
                  CONTENTS
345 .inttab_tc1_04A 00000000  80302d40  80302d40  00004e6c  2**0
                  CONTENTS
346 .inttab_tc1_04B 00000000  80302d60  80302d60  00004e6c  2**0
                  CONTENTS
347 .inttab_tc1_04C 00000000  80302d80  80302d80  00004e6c  2**0
                  CONTENTS
348 .inttab_tc1_04D 00000000  80302da0  80302da0  00004e6c  2**0
                  CONTENTS
349 .inttab_tc1_04E 00000000  80302dc0  80302dc0  00004e6c  2**0
                  CONTENTS
350 .inttab_tc1_04F 00000000  80302de0  80302de0  00004e6c  2**0
                  CONTENTS
351 .inttab_tc1_050 00000000  80302e00  80302e00  00004e6c  2**0
                  CONTENTS
352 .inttab_tc1_051 00000000  80302e20  80302e20  00004e6c  2**0
                  CONTENTS
353 .inttab_tc1_052 00000000  80302e40  80302e40  00004e6c  2**0
                  CONTENTS
354 .inttab_tc1_053 00000000  80302e60  80302e60  00004e6c  2**0
                  CONTENTS
355 .inttab_tc1_054 00000000  80302e80  80302e80  00004e6c  2**0
                  CONTENTS
356 .inttab_tc1_055 00000000  80302ea0  80302ea0  00004e6c  2**0
                  CONTENTS
357 .inttab_tc1_056 00000000  80302ec0  80302ec0  00004e6c  2**0
                  CONTENTS
358 .inttab_tc1_057 00000000  80302ee0  80302ee0  00004e6c  2**0
                  CONTENTS
359 .inttab_tc1_058 00000000  80302f00  80302f00  00004e6c  2**0
                  CONTENTS
360 .inttab_tc1_059 00000000  80302f20  80302f20  00004e6c  2**0
                  CONTENTS
361 .inttab_tc1_05A 00000000  80302f40  80302f40  00004e6c  2**0
                  CONTENTS
362 .inttab_tc1_05B 00000000  80302f60  80302f60  00004e6c  2**0
                  CONTENTS
363 .inttab_tc1_05C 00000000  80302f80  80302f80  00004e6c  2**0
                  CONTENTS
364 .inttab_tc1_05D 00000000  80302fa0  80302fa0  00004e6c  2**0
                  CONTENTS
365 .inttab_tc1_05E 00000000  80302fc0  80302fc0  00004e6c  2**0
                  CONTENTS
366 .inttab_tc1_05F 00000000  80302fe0  80302fe0  00004e6c  2**0
                  CONTENTS
367 .inttab_tc1_060 00000000  80303000  80303000  00004e6c  2**0
                  CONTENTS
368 .inttab_tc1_061 00000000  80303020  80303020  00004e6c  2**0
                  CONTENTS
369 .inttab_tc1_062 00000000  80303040  80303040  00004e6c  2**0
                  CONTENTS
370 .inttab_tc1_063 00000000  80303060  80303060  00004e6c  2**0
                  CONTENTS
371 .inttab_tc1_064 00000000  80303080  80303080  00004e6c  2**0
                  CONTENTS
372 .inttab_tc1_065 00000000  803030a0  803030a0  00004e6c  2**0
                  CONTENTS
373 .inttab_tc1_066 00000000  803030c0  803030c0  00004e6c  2**0
                  CONTENTS
374 .inttab_tc1_067 00000000  803030e0  803030e0  00004e6c  2**0
                  CONTENTS
375 .inttab_tc1_068 00000000  80303100  80303100  00004e6c  2**0
                  CONTENTS
376 .inttab_tc1_069 00000000  80303120  80303120  00004e6c  2**0
                  CONTENTS
377 .inttab_tc1_06A 00000000  80303140  80303140  00004e6c  2**0
                  CONTENTS
378 .inttab_tc1_06B 00000000  80303160  80303160  00004e6c  2**0
                  CONTENTS
379 .inttab_tc1_06C 00000000  80303180  80303180  00004e6c  2**0
                  CONTENTS
380 .inttab_tc1_06D 00000000  803031a0  803031a0  00004e6c  2**0
                  CONTENTS
381 .inttab_tc1_06E 00000000  803031c0  803031c0  00004e6c  2**0
                  CONTENTS
382 .inttab_tc1_06F 00000000  803031e0  803031e0  00004e6c  2**0
                  CONTENTS
383 .inttab_tc1_070 00000000  80303200  80303200  00004e6c  2**0
                  CONTENTS
384 .inttab_tc1_071 00000000  80303220  80303220  00004e6c  2**0
                  CONTENTS
385 .inttab_tc1_072 00000000  80303240  80303240  00004e6c  2**0
                  CONTENTS
386 .inttab_tc1_073 00000000  80303260  80303260  00004e6c  2**0
                  CONTENTS
387 .inttab_tc1_074 00000000  80303280  80303280  00004e6c  2**0
                  CONTENTS
388 .inttab_tc1_075 00000000  803032a0  803032a0  00004e6c  2**0
                  CONTENTS
389 .inttab_tc1_076 00000000  803032c0  803032c0  00004e6c  2**0
                  CONTENTS
390 .inttab_tc1_077 00000000  803032e0  803032e0  00004e6c  2**0
                  CONTENTS
391 .inttab_tc1_078 00000000  80303300  80303300  00004e6c  2**0
                  CONTENTS
392 .inttab_tc1_079 00000000  80303320  80303320  00004e6c  2**0
                  CONTENTS
393 .inttab_tc1_07A 00000000  80303340  80303340  00004e6c  2**0
                  CONTENTS
394 .inttab_tc1_07B 00000000  80303360  80303360  00004e6c  2**0
                  CONTENTS
395 .inttab_tc1_07C 00000000  80303380  80303380  00004e6c  2**0
                  CONTENTS
396 .inttab_tc1_07D 00000000  803033a0  803033a0  00004e6c  2**0
                  CONTENTS
397 .inttab_tc1_07E 00000000  803033c0  803033c0  00004e6c  2**0
                  CONTENTS
398 .inttab_tc1_07F 00000000  803033e0  803033e0  00004e6c  2**0
                  CONTENTS
399 .inttab_tc1_080 00000000  80303400  80303400  00004e6c  2**0
                  CONTENTS
400 .inttab_tc1_081 00000000  80303420  80303420  00004e6c  2**0
                  CONTENTS
401 .inttab_tc1_082 00000000  80303440  80303440  00004e6c  2**0
                  CONTENTS
402 .inttab_tc1_083 00000000  80303460  80303460  00004e6c  2**0
                  CONTENTS
403 .inttab_tc1_084 00000000  80303480  80303480  00004e6c  2**0
                  CONTENTS
404 .inttab_tc1_085 00000000  803034a0  803034a0  00004e6c  2**0
                  CONTENTS
405 .inttab_tc1_086 00000000  803034c0  803034c0  00004e6c  2**0
                  CONTENTS
406 .inttab_tc1_087 00000000  803034e0  803034e0  00004e6c  2**0
                  CONTENTS
407 .inttab_tc1_088 00000000  80303500  80303500  00004e6c  2**0
                  CONTENTS
408 .inttab_tc1_089 00000000  80303520  80303520  00004e6c  2**0
                  CONTENTS
409 .inttab_tc1_08A 00000000  80303540  80303540  00004e6c  2**0
                  CONTENTS
410 .inttab_tc1_08B 00000000  80303560  80303560  00004e6c  2**0
                  CONTENTS
411 .inttab_tc1_08C 00000000  80303580  80303580  00004e6c  2**0
                  CONTENTS
412 .inttab_tc1_08D 00000000  803035a0  803035a0  00004e6c  2**0
                  CONTENTS
413 .inttab_tc1_08E 00000000  803035c0  803035c0  00004e6c  2**0
                  CONTENTS
414 .inttab_tc1_08F 00000000  803035e0  803035e0  00004e6c  2**0
                  CONTENTS
415 .inttab_tc1_090 00000000  80303600  80303600  00004e6c  2**0
                  CONTENTS
416 .inttab_tc1_091 00000000  80303620  80303620  00004e6c  2**0
                  CONTENTS
417 .inttab_tc1_092 00000000  80303640  80303640  00004e6c  2**0
                  CONTENTS
418 .inttab_tc1_093 00000000  80303660  80303660  00004e6c  2**0
                  CONTENTS
419 .inttab_tc1_094 00000000  80303680  80303680  00004e6c  2**0
                  CONTENTS
420 .inttab_tc1_095 00000000  803036a0  803036a0  00004e6c  2**0
                  CONTENTS
421 .inttab_tc1_096 00000000  803036c0  803036c0  00004e6c  2**0
                  CONTENTS
422 .inttab_tc1_097 00000000  803036e0  803036e0  00004e6c  2**0
                  CONTENTS
423 .inttab_tc1_098 00000000  80303700  80303700  00004e6c  2**0
                  CONTENTS
424 .inttab_tc1_099 00000000  80303720  80303720  00004e6c  2**0
                  CONTENTS
425 .inttab_tc1_09A 00000000  80303740  80303740  00004e6c  2**0
                  CONTENTS
426 .inttab_tc1_09B 00000000  80303760  80303760  00004e6c  2**0
                  CONTENTS
427 .inttab_tc1_09C 00000000  80303780  80303780  00004e6c  2**0
                  CONTENTS
428 .inttab_tc1_09D 00000000  803037a0  803037a0  00004e6c  2**0
                  CONTENTS
429 .inttab_tc1_09E 00000000  803037c0  803037c0  00004e6c  2**0
                  CONTENTS
430 .inttab_tc1_09F 00000000  803037e0  803037e0  00004e6c  2**0
                  CONTENTS
431 .inttab_tc1_0A0 00000000  80303800  80303800  00004e6c  2**0
                  CONTENTS
432 .inttab_tc1_0A1 00000000  80303820  80303820  00004e6c  2**0
                  CONTENTS
433 .inttab_tc1_0A2 00000000  80303840  80303840  00004e6c  2**0
                  CONTENTS
434 .inttab_tc1_0A3 00000000  80303860  80303860  00004e6c  2**0
                  CONTENTS
435 .inttab_tc1_0A4 00000000  80303880  80303880  00004e6c  2**0
                  CONTENTS
436 .inttab_tc1_0A5 00000000  803038a0  803038a0  00004e6c  2**0
                  CONTENTS
437 .inttab_tc1_0A6 00000000  803038c0  803038c0  00004e6c  2**0
                  CONTENTS
438 .inttab_tc1_0A7 00000000  803038e0  803038e0  00004e6c  2**0
                  CONTENTS
439 .inttab_tc1_0A8 00000000  80303900  80303900  00004e6c  2**0
                  CONTENTS
440 .inttab_tc1_0A9 00000000  80303920  80303920  00004e6c  2**0
                  CONTENTS
441 .inttab_tc1_0AA 00000000  80303940  80303940  00004e6c  2**0
                  CONTENTS
442 .inttab_tc1_0AB 00000000  80303960  80303960  00004e6c  2**0
                  CONTENTS
443 .inttab_tc1_0AC 00000000  80303980  80303980  00004e6c  2**0
                  CONTENTS
444 .inttab_tc1_0AD 00000000  803039a0  803039a0  00004e6c  2**0
                  CONTENTS
445 .inttab_tc1_0AE 00000000  803039c0  803039c0  00004e6c  2**0
                  CONTENTS
446 .inttab_tc1_0AF 00000000  803039e0  803039e0  00004e6c  2**0
                  CONTENTS
447 .inttab_tc1_0B0 00000000  80303a00  80303a00  00004e6c  2**0
                  CONTENTS
448 .inttab_tc1_0B1 00000000  80303a20  80303a20  00004e6c  2**0
                  CONTENTS
449 .inttab_tc1_0B2 00000000  80303a40  80303a40  00004e6c  2**0
                  CONTENTS
450 .inttab_tc1_0B3 00000000  80303a60  80303a60  00004e6c  2**0
                  CONTENTS
451 .inttab_tc1_0B4 00000000  80303a80  80303a80  00004e6c  2**0
                  CONTENTS
452 .inttab_tc1_0B5 00000000  80303aa0  80303aa0  00004e6c  2**0
                  CONTENTS
453 .inttab_tc1_0B6 00000000  80303ac0  80303ac0  00004e6c  2**0
                  CONTENTS
454 .inttab_tc1_0B7 00000000  80303ae0  80303ae0  00004e6c  2**0
                  CONTENTS
455 .inttab_tc1_0B8 00000000  80303b00  80303b00  00004e6c  2**0
                  CONTENTS
456 .inttab_tc1_0B9 00000000  80303b20  80303b20  00004e6c  2**0
                  CONTENTS
457 .inttab_tc1_0BA 00000000  80303b40  80303b40  00004e6c  2**0
                  CONTENTS
458 .inttab_tc1_0BB 00000000  80303b60  80303b60  00004e6c  2**0
                  CONTENTS
459 .inttab_tc1_0BC 00000000  80303b80  80303b80  00004e6c  2**0
                  CONTENTS
460 .inttab_tc1_0BD 00000000  80303ba0  80303ba0  00004e6c  2**0
                  CONTENTS
461 .inttab_tc1_0BE 00000000  80303bc0  80303bc0  00004e6c  2**0
                  CONTENTS
462 .inttab_tc1_0BF 00000000  80303be0  80303be0  00004e6c  2**0
                  CONTENTS
463 .inttab_tc1_0C0 00000000  80303c00  80303c00  00004e6c  2**0
                  CONTENTS
464 .inttab_tc1_0C1 00000000  80303c20  80303c20  00004e6c  2**0
                  CONTENTS
465 .inttab_tc1_0C2 00000000  80303c40  80303c40  00004e6c  2**0
                  CONTENTS
466 .inttab_tc1_0C3 00000000  80303c60  80303c60  00004e6c  2**0
                  CONTENTS
467 .inttab_tc1_0C4 00000000  80303c80  80303c80  00004e6c  2**0
                  CONTENTS
468 .inttab_tc1_0C5 00000000  80303ca0  80303ca0  00004e6c  2**0
                  CONTENTS
469 .inttab_tc1_0C6 00000000  80303cc0  80303cc0  00004e6c  2**0
                  CONTENTS
470 .inttab_tc1_0C7 00000000  80303ce0  80303ce0  00004e6c  2**0
                  CONTENTS
471 .inttab_tc1_0C8 00000000  80303d00  80303d00  00004e6c  2**0
                  CONTENTS
472 .inttab_tc1_0C9 00000000  80303d20  80303d20  00004e6c  2**0
                  CONTENTS
473 .inttab_tc1_0CA 00000000  80303d40  80303d40  00004e6c  2**0
                  CONTENTS
474 .inttab_tc1_0CB 00000000  80303d60  80303d60  00004e6c  2**0
                  CONTENTS
475 .inttab_tc1_0CC 00000000  80303d80  80303d80  00004e6c  2**0
                  CONTENTS
476 .inttab_tc1_0CD 00000000  80303da0  80303da0  00004e6c  2**0
                  CONTENTS
477 .inttab_tc1_0CE 00000000  80303dc0  80303dc0  00004e6c  2**0
                  CONTENTS
478 .inttab_tc1_0CF 00000000  80303de0  80303de0  00004e6c  2**0
                  CONTENTS
479 .inttab_tc1_0D0 00000000  80303e00  80303e00  00004e6c  2**0
                  CONTENTS
480 .inttab_tc1_0D1 00000000  80303e20  80303e20  00004e6c  2**0
                  CONTENTS
481 .inttab_tc1_0D2 00000000  80303e40  80303e40  00004e6c  2**0
                  CONTENTS
482 .inttab_tc1_0D3 00000000  80303e60  80303e60  00004e6c  2**0
                  CONTENTS
483 .inttab_tc1_0D4 00000000  80303e80  80303e80  00004e6c  2**0
                  CONTENTS
484 .inttab_tc1_0D5 00000000  80303ea0  80303ea0  00004e6c  2**0
                  CONTENTS
485 .inttab_tc1_0D6 00000000  80303ec0  80303ec0  00004e6c  2**0
                  CONTENTS
486 .inttab_tc1_0D7 00000000  80303ee0  80303ee0  00004e6c  2**0
                  CONTENTS
487 .inttab_tc1_0D8 00000000  80303f00  80303f00  00004e6c  2**0
                  CONTENTS
488 .inttab_tc1_0D9 00000000  80303f20  80303f20  00004e6c  2**0
                  CONTENTS
489 .inttab_tc1_0DA 00000000  80303f40  80303f40  00004e6c  2**0
                  CONTENTS
490 .inttab_tc1_0DB 00000000  80303f60  80303f60  00004e6c  2**0
                  CONTENTS
491 .inttab_tc1_0DC 00000000  80303f80  80303f80  00004e6c  2**0
                  CONTENTS
492 .inttab_tc1_0DD 00000000  80303fa0  80303fa0  00004e6c  2**0
                  CONTENTS
493 .inttab_tc1_0DE 00000000  80303fc0  80303fc0  00004e6c  2**0
                  CONTENTS
494 .inttab_tc1_0DF 00000000  80303fe0  80303fe0  00004e6c  2**0
                  CONTENTS
495 .inttab_tc1_0E0 00000000  80304000  80304000  00004e6c  2**0
                  CONTENTS
496 .inttab_tc1_0E1 00000000  80304020  80304020  00004e6c  2**0
                  CONTENTS
497 .inttab_tc1_0E2 00000000  80304040  80304040  00004e6c  2**0
                  CONTENTS
498 .inttab_tc1_0E3 00000000  80304060  80304060  00004e6c  2**0
                  CONTENTS
499 .inttab_tc1_0E4 00000000  80304080  80304080  00004e6c  2**0
                  CONTENTS
500 .inttab_tc1_0E5 00000000  803040a0  803040a0  00004e6c  2**0
                  CONTENTS
501 .inttab_tc1_0E6 00000000  803040c0  803040c0  00004e6c  2**0
                  CONTENTS
502 .inttab_tc1_0E7 00000000  803040e0  803040e0  00004e6c  2**0
                  CONTENTS
503 .inttab_tc1_0E8 00000000  80304100  80304100  00004e6c  2**0
                  CONTENTS
504 .inttab_tc1_0E9 00000000  80304120  80304120  00004e6c  2**0
                  CONTENTS
505 .inttab_tc1_0EA 00000000  80304140  80304140  00004e6c  2**0
                  CONTENTS
506 .inttab_tc1_0EB 00000000  80304160  80304160  00004e6c  2**0
                  CONTENTS
507 .inttab_tc1_0EC 00000000  80304180  80304180  00004e6c  2**0
                  CONTENTS
508 .inttab_tc1_0ED 00000000  803041a0  803041a0  00004e6c  2**0
                  CONTENTS
509 .inttab_tc1_0EE 00000000  803041c0  803041c0  00004e6c  2**0
                  CONTENTS
510 .inttab_tc1_0EF 00000000  803041e0  803041e0  00004e6c  2**0
                  CONTENTS
511 .inttab_tc1_0F0 00000000  80304200  80304200  00004e6c  2**0
                  CONTENTS
512 .inttab_tc1_0F1 00000000  80304220  80304220  00004e6c  2**0
                  CONTENTS
513 .inttab_tc1_0F2 00000000  80304240  80304240  00004e6c  2**0
                  CONTENTS
514 .inttab_tc1_0F3 00000000  80304260  80304260  00004e6c  2**0
                  CONTENTS
515 .inttab_tc1_0F4 00000000  80304280  80304280  00004e6c  2**0
                  CONTENTS
516 .inttab_tc1_0F5 00000000  803042a0  803042a0  00004e6c  2**0
                  CONTENTS
517 .inttab_tc1_0F6 00000000  803042c0  803042c0  00004e6c  2**0
                  CONTENTS
518 .inttab_tc1_0F7 00000000  803042e0  803042e0  00004e6c  2**0
                  CONTENTS
519 .inttab_tc1_0F8 00000000  80304300  80304300  00004e6c  2**0
                  CONTENTS
520 .inttab_tc1_0F9 00000000  80304320  80304320  00004e6c  2**0
                  CONTENTS
521 .inttab_tc1_0FA 00000000  80304340  80304340  00004e6c  2**0
                  CONTENTS
522 .inttab_tc1_0FB 00000000  80304360  80304360  00004e6c  2**0
                  CONTENTS
523 .inttab_tc1_0FC 00000000  80304380  80304380  00004e6c  2**0
                  CONTENTS
524 .inttab_tc1_0FD 00000000  803043a0  803043a0  00004e6c  2**0
                  CONTENTS
525 .inttab_tc1_0FE 00000000  803043c0  803043c0  00004e6c  2**0
                  CONTENTS
526 .inttab_tc1_0FF 00000000  803043e0  803043e0  00004e6c  2**0
                  CONTENTS
527 .inttab_tc2_000 00000000  80304400  80304400  00004e6c  2**0
                  CONTENTS
528 .inttab_tc2_001 00000000  80304420  80304420  00004e6c  2**0
                  CONTENTS
529 .inttab_tc2_002 00000000  80304440  80304440  00004e6c  2**0
                  CONTENTS
530 .inttab_tc2_003 00000000  80304460  80304460  00004e6c  2**0
                  CONTENTS
531 .inttab_tc2_004 00000000  80304480  80304480  00004e6c  2**0
                  CONTENTS
532 .inttab_tc2_005 00000000  803044a0  803044a0  00004e6c  2**0
                  CONTENTS
533 .inttab_tc2_006 00000000  803044c0  803044c0  00004e6c  2**0
                  CONTENTS
534 .inttab_tc2_007 00000000  803044e0  803044e0  00004e6c  2**0
                  CONTENTS
535 .inttab_tc2_008 00000000  80304500  80304500  00004e6c  2**0
                  CONTENTS
536 .inttab_tc2_009 00000000  80304520  80304520  00004e6c  2**0
                  CONTENTS
537 .inttab_tc2_00A 00000000  80304540  80304540  00004e6c  2**0
                  CONTENTS
538 .inttab_tc2_00B 00000000  80304560  80304560  00004e6c  2**0
                  CONTENTS
539 .inttab_tc2_00C 00000000  80304580  80304580  00004e6c  2**0
                  CONTENTS
540 .inttab_tc2_00D 00000000  803045a0  803045a0  00004e6c  2**0
                  CONTENTS
541 .inttab_tc2_00E 00000000  803045c0  803045c0  00004e6c  2**0
                  CONTENTS
542 .inttab_tc2_00F 00000000  803045e0  803045e0  00004e6c  2**0
                  CONTENTS
543 .inttab_tc2_010 00000000  80304600  80304600  00004e6c  2**0
                  CONTENTS
544 .inttab_tc2_011 00000000  80304620  80304620  00004e6c  2**0
                  CONTENTS
545 .inttab_tc2_012 00000000  80304640  80304640  00004e6c  2**0
                  CONTENTS
546 .inttab_tc2_013 00000000  80304660  80304660  00004e6c  2**0
                  CONTENTS
547 .inttab_tc2_014 00000000  80304680  80304680  00004e6c  2**0
                  CONTENTS
548 .inttab_tc2_015 00000000  803046a0  803046a0  00004e6c  2**0
                  CONTENTS
549 .inttab_tc2_016 00000000  803046c0  803046c0  00004e6c  2**0
                  CONTENTS
550 .inttab_tc2_017 00000000  803046e0  803046e0  00004e6c  2**0
                  CONTENTS
551 .inttab_tc2_018 00000000  80304700  80304700  00004e6c  2**0
                  CONTENTS
552 .inttab_tc2_019 00000000  80304720  80304720  00004e6c  2**0
                  CONTENTS
553 .inttab_tc2_01A 00000000  80304740  80304740  00004e6c  2**0
                  CONTENTS
554 .inttab_tc2_01B 00000000  80304760  80304760  00004e6c  2**0
                  CONTENTS
555 .inttab_tc2_01C 00000000  80304780  80304780  00004e6c  2**0
                  CONTENTS
556 .inttab_tc2_01D 00000000  803047a0  803047a0  00004e6c  2**0
                  CONTENTS
557 .inttab_tc2_01E 00000000  803047c0  803047c0  00004e6c  2**0
                  CONTENTS
558 .inttab_tc2_01F 00000000  803047e0  803047e0  00004e6c  2**0
                  CONTENTS
559 .inttab_tc2_020 00000000  80304800  80304800  00004e6c  2**0
                  CONTENTS
560 .inttab_tc2_021 00000000  80304820  80304820  00004e6c  2**0
                  CONTENTS
561 .inttab_tc2_022 00000000  80304840  80304840  00004e6c  2**0
                  CONTENTS
562 .inttab_tc2_023 00000000  80304860  80304860  00004e6c  2**0
                  CONTENTS
563 .inttab_tc2_024 00000000  80304880  80304880  00004e6c  2**0
                  CONTENTS
564 .inttab_tc2_025 00000000  803048a0  803048a0  00004e6c  2**0
                  CONTENTS
565 .inttab_tc2_026 00000000  803048c0  803048c0  00004e6c  2**0
                  CONTENTS
566 .inttab_tc2_027 00000000  803048e0  803048e0  00004e6c  2**0
                  CONTENTS
567 .inttab_tc2_028 00000000  80304900  80304900  00004e6c  2**0
                  CONTENTS
568 .inttab_tc2_029 00000000  80304920  80304920  00004e6c  2**0
                  CONTENTS
569 .inttab_tc2_02A 00000000  80304940  80304940  00004e6c  2**0
                  CONTENTS
570 .inttab_tc2_02B 00000000  80304960  80304960  00004e6c  2**0
                  CONTENTS
571 .inttab_tc2_02C 00000000  80304980  80304980  00004e6c  2**0
                  CONTENTS
572 .inttab_tc2_02D 00000000  803049a0  803049a0  00004e6c  2**0
                  CONTENTS
573 .inttab_tc2_02E 00000000  803049c0  803049c0  00004e6c  2**0
                  CONTENTS
574 .inttab_tc2_02F 00000000  803049e0  803049e0  00004e6c  2**0
                  CONTENTS
575 .inttab_tc2_030 00000000  80304a00  80304a00  00004e6c  2**0
                  CONTENTS
576 .inttab_tc2_031 00000000  80304a20  80304a20  00004e6c  2**0
                  CONTENTS
577 .inttab_tc2_032 00000000  80304a40  80304a40  00004e6c  2**0
                  CONTENTS
578 .inttab_tc2_033 00000000  80304a60  80304a60  00004e6c  2**0
                  CONTENTS
579 .inttab_tc2_034 00000000  80304a80  80304a80  00004e6c  2**0
                  CONTENTS
580 .inttab_tc2_035 00000000  80304aa0  80304aa0  00004e6c  2**0
                  CONTENTS
581 .inttab_tc2_036 00000000  80304ac0  80304ac0  00004e6c  2**0
                  CONTENTS
582 .inttab_tc2_037 00000000  80304ae0  80304ae0  00004e6c  2**0
                  CONTENTS
583 .inttab_tc2_038 00000000  80304b00  80304b00  00004e6c  2**0
                  CONTENTS
584 .inttab_tc2_039 00000000  80304b20  80304b20  00004e6c  2**0
                  CONTENTS
585 .inttab_tc2_03A 00000000  80304b40  80304b40  00004e6c  2**0
                  CONTENTS
586 .inttab_tc2_03B 00000000  80304b60  80304b60  00004e6c  2**0
                  CONTENTS
587 .inttab_tc2_03C 00000000  80304b80  80304b80  00004e6c  2**0
                  CONTENTS
588 .inttab_tc2_03D 00000000  80304ba0  80304ba0  00004e6c  2**0
                  CONTENTS
589 .inttab_tc2_03E 00000000  80304bc0  80304bc0  00004e6c  2**0
                  CONTENTS
590 .inttab_tc2_03F 00000000  80304be0  80304be0  00004e6c  2**0
                  CONTENTS
591 .inttab_tc2_040 00000000  80304c00  80304c00  00004e6c  2**0
                  CONTENTS
592 .inttab_tc2_041 00000000  80304c20  80304c20  00004e6c  2**0
                  CONTENTS
593 .inttab_tc2_042 00000000  80304c40  80304c40  00004e6c  2**0
                  CONTENTS
594 .inttab_tc2_043 00000000  80304c60  80304c60  00004e6c  2**0
                  CONTENTS
595 .inttab_tc2_044 00000000  80304c80  80304c80  00004e6c  2**0
                  CONTENTS
596 .inttab_tc2_045 00000000  80304ca0  80304ca0  00004e6c  2**0
                  CONTENTS
597 .inttab_tc2_046 00000000  80304cc0  80304cc0  00004e6c  2**0
                  CONTENTS
598 .inttab_tc2_047 00000000  80304ce0  80304ce0  00004e6c  2**0
                  CONTENTS
599 .inttab_tc2_048 00000000  80304d00  80304d00  00004e6c  2**0
                  CONTENTS
600 .inttab_tc2_049 00000000  80304d20  80304d20  00004e6c  2**0
                  CONTENTS
601 .inttab_tc2_04A 00000000  80304d40  80304d40  00004e6c  2**0
                  CONTENTS
602 .inttab_tc2_04B 00000000  80304d60  80304d60  00004e6c  2**0
                  CONTENTS
603 .inttab_tc2_04C 00000000  80304d80  80304d80  00004e6c  2**0
                  CONTENTS
604 .inttab_tc2_04D 00000000  80304da0  80304da0  00004e6c  2**0
                  CONTENTS
605 .inttab_tc2_04E 00000000  80304dc0  80304dc0  00004e6c  2**0
                  CONTENTS
606 .inttab_tc2_04F 00000000  80304de0  80304de0  00004e6c  2**0
                  CONTENTS
607 .inttab_tc2_050 00000000  80304e00  80304e00  00004e6c  2**0
                  CONTENTS
608 .inttab_tc2_051 00000000  80304e20  80304e20  00004e6c  2**0
                  CONTENTS
609 .inttab_tc2_052 00000000  80304e40  80304e40  00004e6c  2**0
                  CONTENTS
610 .inttab_tc2_053 00000000  80304e60  80304e60  00004e6c  2**0
                  CONTENTS
611 .inttab_tc2_054 00000000  80304e80  80304e80  00004e6c  2**0
                  CONTENTS
612 .inttab_tc2_055 00000000  80304ea0  80304ea0  00004e6c  2**0
                  CONTENTS
613 .inttab_tc2_056 00000000  80304ec0  80304ec0  00004e6c  2**0
                  CONTENTS
614 .inttab_tc2_057 00000000  80304ee0  80304ee0  00004e6c  2**0
                  CONTENTS
615 .inttab_tc2_058 00000000  80304f00  80304f00  00004e6c  2**0
                  CONTENTS
616 .inttab_tc2_059 00000000  80304f20  80304f20  00004e6c  2**0
                  CONTENTS
617 .inttab_tc2_05A 00000000  80304f40  80304f40  00004e6c  2**0
                  CONTENTS
618 .inttab_tc2_05B 00000000  80304f60  80304f60  00004e6c  2**0
                  CONTENTS
619 .inttab_tc2_05C 00000000  80304f80  80304f80  00004e6c  2**0
                  CONTENTS
620 .inttab_tc2_05D 00000000  80304fa0  80304fa0  00004e6c  2**0
                  CONTENTS
621 .inttab_tc2_05E 00000000  80304fc0  80304fc0  00004e6c  2**0
                  CONTENTS
622 .inttab_tc2_05F 00000000  80304fe0  80304fe0  00004e6c  2**0
                  CONTENTS
623 .inttab_tc2_060 00000000  80305000  80305000  00004e6c  2**0
                  CONTENTS
624 .inttab_tc2_061 00000000  80305020  80305020  00004e6c  2**0
                  CONTENTS
625 .inttab_tc2_062 00000000  80305040  80305040  00004e6c  2**0
                  CONTENTS
626 .inttab_tc2_063 00000000  80305060  80305060  00004e6c  2**0
                  CONTENTS
627 .inttab_tc2_064 00000000  80305080  80305080  00004e6c  2**0
                  CONTENTS
628 .inttab_tc2_065 00000000  803050a0  803050a0  00004e6c  2**0
                  CONTENTS
629 .inttab_tc2_066 00000000  803050c0  803050c0  00004e6c  2**0
                  CONTENTS
630 .inttab_tc2_067 00000000  803050e0  803050e0  00004e6c  2**0
                  CONTENTS
631 .inttab_tc2_068 00000000  80305100  80305100  00004e6c  2**0
                  CONTENTS
632 .inttab_tc2_069 00000000  80305120  80305120  00004e6c  2**0
                  CONTENTS
633 .inttab_tc2_06A 00000000  80305140  80305140  00004e6c  2**0
                  CONTENTS
634 .inttab_tc2_06B 00000000  80305160  80305160  00004e6c  2**0
                  CONTENTS
635 .inttab_tc2_06C 00000000  80305180  80305180  00004e6c  2**0
                  CONTENTS
636 .inttab_tc2_06D 00000000  803051a0  803051a0  00004e6c  2**0
                  CONTENTS
637 .inttab_tc2_06E 00000000  803051c0  803051c0  00004e6c  2**0
                  CONTENTS
638 .inttab_tc2_06F 00000000  803051e0  803051e0  00004e6c  2**0
                  CONTENTS
639 .inttab_tc2_070 00000000  80305200  80305200  00004e6c  2**0
                  CONTENTS
640 .inttab_tc2_071 00000000  80305220  80305220  00004e6c  2**0
                  CONTENTS
641 .inttab_tc2_072 00000000  80305240  80305240  00004e6c  2**0
                  CONTENTS
642 .inttab_tc2_073 00000000  80305260  80305260  00004e6c  2**0
                  CONTENTS
643 .inttab_tc2_074 00000000  80305280  80305280  00004e6c  2**0
                  CONTENTS
644 .inttab_tc2_075 00000000  803052a0  803052a0  00004e6c  2**0
                  CONTENTS
645 .inttab_tc2_076 00000000  803052c0  803052c0  00004e6c  2**0
                  CONTENTS
646 .inttab_tc2_077 00000000  803052e0  803052e0  00004e6c  2**0
                  CONTENTS
647 .inttab_tc2_078 00000000  80305300  80305300  00004e6c  2**0
                  CONTENTS
648 .inttab_tc2_079 00000000  80305320  80305320  00004e6c  2**0
                  CONTENTS
649 .inttab_tc2_07A 00000000  80305340  80305340  00004e6c  2**0
                  CONTENTS
650 .inttab_tc2_07B 00000000  80305360  80305360  00004e6c  2**0
                  CONTENTS
651 .inttab_tc2_07C 00000000  80305380  80305380  00004e6c  2**0
                  CONTENTS
652 .inttab_tc2_07D 00000000  803053a0  803053a0  00004e6c  2**0
                  CONTENTS
653 .inttab_tc2_07E 00000000  803053c0  803053c0  00004e6c  2**0
                  CONTENTS
654 .inttab_tc2_07F 00000000  803053e0  803053e0  00004e6c  2**0
                  CONTENTS
655 .inttab_tc2_080 00000000  80305400  80305400  00004e6c  2**0
                  CONTENTS
656 .inttab_tc2_081 00000000  80305420  80305420  00004e6c  2**0
                  CONTENTS
657 .inttab_tc2_082 00000000  80305440  80305440  00004e6c  2**0
                  CONTENTS
658 .inttab_tc2_083 00000000  80305460  80305460  00004e6c  2**0
                  CONTENTS
659 .inttab_tc2_084 00000000  80305480  80305480  00004e6c  2**0
                  CONTENTS
660 .inttab_tc2_085 00000000  803054a0  803054a0  00004e6c  2**0
                  CONTENTS
661 .inttab_tc2_086 00000000  803054c0  803054c0  00004e6c  2**0
                  CONTENTS
662 .inttab_tc2_087 00000000  803054e0  803054e0  00004e6c  2**0
                  CONTENTS
663 .inttab_tc2_088 00000000  80305500  80305500  00004e6c  2**0
                  CONTENTS
664 .inttab_tc2_089 00000000  80305520  80305520  00004e6c  2**0
                  CONTENTS
665 .inttab_tc2_08A 00000000  80305540  80305540  00004e6c  2**0
                  CONTENTS
666 .inttab_tc2_08B 00000000  80305560  80305560  00004e6c  2**0
                  CONTENTS
667 .inttab_tc2_08C 00000000  80305580  80305580  00004e6c  2**0
                  CONTENTS
668 .inttab_tc2_08D 00000000  803055a0  803055a0  00004e6c  2**0
                  CONTENTS
669 .inttab_tc2_08E 00000000  803055c0  803055c0  00004e6c  2**0
                  CONTENTS
670 .inttab_tc2_08F 00000000  803055e0  803055e0  00004e6c  2**0
                  CONTENTS
671 .inttab_tc2_090 00000000  80305600  80305600  00004e6c  2**0
                  CONTENTS
672 .inttab_tc2_091 00000000  80305620  80305620  00004e6c  2**0
                  CONTENTS
673 .inttab_tc2_092 00000000  80305640  80305640  00004e6c  2**0
                  CONTENTS
674 .inttab_tc2_093 00000000  80305660  80305660  00004e6c  2**0
                  CONTENTS
675 .inttab_tc2_094 00000000  80305680  80305680  00004e6c  2**0
                  CONTENTS
676 .inttab_tc2_095 00000000  803056a0  803056a0  00004e6c  2**0
                  CONTENTS
677 .inttab_tc2_096 00000000  803056c0  803056c0  00004e6c  2**0
                  CONTENTS
678 .inttab_tc2_097 00000000  803056e0  803056e0  00004e6c  2**0
                  CONTENTS
679 .inttab_tc2_098 00000000  80305700  80305700  00004e6c  2**0
                  CONTENTS
680 .inttab_tc2_099 00000000  80305720  80305720  00004e6c  2**0
                  CONTENTS
681 .inttab_tc2_09A 00000000  80305740  80305740  00004e6c  2**0
                  CONTENTS
682 .inttab_tc2_09B 00000000  80305760  80305760  00004e6c  2**0
                  CONTENTS
683 .inttab_tc2_09C 00000000  80305780  80305780  00004e6c  2**0
                  CONTENTS
684 .inttab_tc2_09D 00000000  803057a0  803057a0  00004e6c  2**0
                  CONTENTS
685 .inttab_tc2_09E 00000000  803057c0  803057c0  00004e6c  2**0
                  CONTENTS
686 .inttab_tc2_09F 00000000  803057e0  803057e0  00004e6c  2**0
                  CONTENTS
687 .inttab_tc2_0A0 00000000  80305800  80305800  00004e6c  2**0
                  CONTENTS
688 .inttab_tc2_0A1 00000000  80305820  80305820  00004e6c  2**0
                  CONTENTS
689 .inttab_tc2_0A2 00000000  80305840  80305840  00004e6c  2**0
                  CONTENTS
690 .inttab_tc2_0A3 00000000  80305860  80305860  00004e6c  2**0
                  CONTENTS
691 .inttab_tc2_0A4 00000000  80305880  80305880  00004e6c  2**0
                  CONTENTS
692 .inttab_tc2_0A5 00000000  803058a0  803058a0  00004e6c  2**0
                  CONTENTS
693 .inttab_tc2_0A6 00000000  803058c0  803058c0  00004e6c  2**0
                  CONTENTS
694 .inttab_tc2_0A7 00000000  803058e0  803058e0  00004e6c  2**0
                  CONTENTS
695 .inttab_tc2_0A8 00000000  80305900  80305900  00004e6c  2**0
                  CONTENTS
696 .inttab_tc2_0A9 00000000  80305920  80305920  00004e6c  2**0
                  CONTENTS
697 .inttab_tc2_0AA 00000000  80305940  80305940  00004e6c  2**0
                  CONTENTS
698 .inttab_tc2_0AB 00000000  80305960  80305960  00004e6c  2**0
                  CONTENTS
699 .inttab_tc2_0AC 00000000  80305980  80305980  00004e6c  2**0
                  CONTENTS
700 .inttab_tc2_0AD 00000000  803059a0  803059a0  00004e6c  2**0
                  CONTENTS
701 .inttab_tc2_0AE 00000000  803059c0  803059c0  00004e6c  2**0
                  CONTENTS
702 .inttab_tc2_0AF 00000000  803059e0  803059e0  00004e6c  2**0
                  CONTENTS
703 .inttab_tc2_0B0 00000000  80305a00  80305a00  00004e6c  2**0
                  CONTENTS
704 .inttab_tc2_0B1 00000000  80305a20  80305a20  00004e6c  2**0
                  CONTENTS
705 .inttab_tc2_0B2 00000000  80305a40  80305a40  00004e6c  2**0
                  CONTENTS
706 .inttab_tc2_0B3 00000000  80305a60  80305a60  00004e6c  2**0
                  CONTENTS
707 .inttab_tc2_0B4 00000000  80305a80  80305a80  00004e6c  2**0
                  CONTENTS
708 .inttab_tc2_0B5 00000000  80305aa0  80305aa0  00004e6c  2**0
                  CONTENTS
709 .inttab_tc2_0B6 00000000  80305ac0  80305ac0  00004e6c  2**0
                  CONTENTS
710 .inttab_tc2_0B7 00000000  80305ae0  80305ae0  00004e6c  2**0
                  CONTENTS
711 .inttab_tc2_0B8 00000000  80305b00  80305b00  00004e6c  2**0
                  CONTENTS
712 .inttab_tc2_0B9 00000000  80305b20  80305b20  00004e6c  2**0
                  CONTENTS
713 .inttab_tc2_0BA 00000000  80305b40  80305b40  00004e6c  2**0
                  CONTENTS
714 .inttab_tc2_0BB 00000000  80305b60  80305b60  00004e6c  2**0
                  CONTENTS
715 .inttab_tc2_0BC 00000000  80305b80  80305b80  00004e6c  2**0
                  CONTENTS
716 .inttab_tc2_0BD 00000000  80305ba0  80305ba0  00004e6c  2**0
                  CONTENTS
717 .inttab_tc2_0BE 00000000  80305bc0  80305bc0  00004e6c  2**0
                  CONTENTS
718 .inttab_tc2_0BF 00000000  80305be0  80305be0  00004e6c  2**0
                  CONTENTS
719 .inttab_tc2_0C0 00000000  80305c00  80305c00  00004e6c  2**0
                  CONTENTS
720 .inttab_tc2_0C1 00000000  80305c20  80305c20  00004e6c  2**0
                  CONTENTS
721 .inttab_tc2_0C2 00000000  80305c40  80305c40  00004e6c  2**0
                  CONTENTS
722 .inttab_tc2_0C3 00000000  80305c60  80305c60  00004e6c  2**0
                  CONTENTS
723 .inttab_tc2_0C4 00000000  80305c80  80305c80  00004e6c  2**0
                  CONTENTS
724 .inttab_tc2_0C5 00000000  80305ca0  80305ca0  00004e6c  2**0
                  CONTENTS
725 .inttab_tc2_0C6 00000000  80305cc0  80305cc0  00004e6c  2**0
                  CONTENTS
726 .inttab_tc2_0C7 00000000  80305ce0  80305ce0  00004e6c  2**0
                  CONTENTS
727 .inttab_tc2_0C8 00000000  80305d00  80305d00  00004e6c  2**0
                  CONTENTS
728 .inttab_tc2_0C9 00000000  80305d20  80305d20  00004e6c  2**0
                  CONTENTS
729 .inttab_tc2_0CA 00000000  80305d40  80305d40  00004e6c  2**0
                  CONTENTS
730 .inttab_tc2_0CB 00000000  80305d60  80305d60  00004e6c  2**0
                  CONTENTS
731 .inttab_tc2_0CC 00000000  80305d80  80305d80  00004e6c  2**0
                  CONTENTS
732 .inttab_tc2_0CD 00000000  80305da0  80305da0  00004e6c  2**0
                  CONTENTS
733 .inttab_tc2_0CE 00000000  80305dc0  80305dc0  00004e6c  2**0
                  CONTENTS
734 .inttab_tc2_0CF 00000000  80305de0  80305de0  00004e6c  2**0
                  CONTENTS
735 .inttab_tc2_0D0 00000000  80305e00  80305e00  00004e6c  2**0
                  CONTENTS
736 .inttab_tc2_0D1 00000000  80305e20  80305e20  00004e6c  2**0
                  CONTENTS
737 .inttab_tc2_0D2 00000000  80305e40  80305e40  00004e6c  2**0
                  CONTENTS
738 .inttab_tc2_0D3 00000000  80305e60  80305e60  00004e6c  2**0
                  CONTENTS
739 .inttab_tc2_0D4 00000000  80305e80  80305e80  00004e6c  2**0
                  CONTENTS
740 .inttab_tc2_0D5 00000000  80305ea0  80305ea0  00004e6c  2**0
                  CONTENTS
741 .inttab_tc2_0D6 00000000  80305ec0  80305ec0  00004e6c  2**0
                  CONTENTS
742 .inttab_tc2_0D7 00000000  80305ee0  80305ee0  00004e6c  2**0
                  CONTENTS
743 .inttab_tc2_0D8 00000000  80305f00  80305f00  00004e6c  2**0
                  CONTENTS
744 .inttab_tc2_0D9 00000000  80305f20  80305f20  00004e6c  2**0
                  CONTENTS
745 .inttab_tc2_0DA 00000000  80305f40  80305f40  00004e6c  2**0
                  CONTENTS
746 .inttab_tc2_0DB 00000000  80305f60  80305f60  00004e6c  2**0
                  CONTENTS
747 .inttab_tc2_0DC 00000000  80305f80  80305f80  00004e6c  2**0
                  CONTENTS
748 .inttab_tc2_0DD 00000000  80305fa0  80305fa0  00004e6c  2**0
                  CONTENTS
749 .inttab_tc2_0DE 00000000  80305fc0  80305fc0  00004e6c  2**0
                  CONTENTS
750 .inttab_tc2_0DF 00000000  80305fe0  80305fe0  00004e6c  2**0
                  CONTENTS
751 .inttab_tc2_0E0 00000000  80306000  80306000  00004e6c  2**0
                  CONTENTS
752 .inttab_tc2_0E1 00000000  80306020  80306020  00004e6c  2**0
                  CONTENTS
753 .inttab_tc2_0E2 00000000  80306040  80306040  00004e6c  2**0
                  CONTENTS
754 .inttab_tc2_0E3 00000000  80306060  80306060  00004e6c  2**0
                  CONTENTS
755 .inttab_tc2_0E4 00000000  80306080  80306080  00004e6c  2**0
                  CONTENTS
756 .inttab_tc2_0E5 00000000  803060a0  803060a0  00004e6c  2**0
                  CONTENTS
757 .inttab_tc2_0E6 00000000  803060c0  803060c0  00004e6c  2**0
                  CONTENTS
758 .inttab_tc2_0E7 00000000  803060e0  803060e0  00004e6c  2**0
                  CONTENTS
759 .inttab_tc2_0E8 00000000  80306100  80306100  00004e6c  2**0
                  CONTENTS
760 .inttab_tc2_0E9 00000000  80306120  80306120  00004e6c  2**0
                  CONTENTS
761 .inttab_tc2_0EA 00000000  80306140  80306140  00004e6c  2**0
                  CONTENTS
762 .inttab_tc2_0EB 00000000  80306160  80306160  00004e6c  2**0
                  CONTENTS
763 .inttab_tc2_0EC 00000000  80306180  80306180  00004e6c  2**0
                  CONTENTS
764 .inttab_tc2_0ED 00000000  803061a0  803061a0  00004e6c  2**0
                  CONTENTS
765 .inttab_tc2_0EE 00000000  803061c0  803061c0  00004e6c  2**0
                  CONTENTS
766 .inttab_tc2_0EF 00000000  803061e0  803061e0  00004e6c  2**0
                  CONTENTS
767 .inttab_tc2_0F0 00000000  80306200  80306200  00004e6c  2**0
                  CONTENTS
768 .inttab_tc2_0F1 00000000  80306220  80306220  00004e6c  2**0
                  CONTENTS
769 .inttab_tc2_0F2 00000000  80306240  80306240  00004e6c  2**0
                  CONTENTS
770 .inttab_tc2_0F3 00000000  80306260  80306260  00004e6c  2**0
                  CONTENTS
771 .inttab_tc2_0F4 00000000  80306280  80306280  00004e6c  2**0
                  CONTENTS
772 .inttab_tc2_0F5 00000000  803062a0  803062a0  00004e6c  2**0
                  CONTENTS
773 .inttab_tc2_0F6 00000000  803062c0  803062c0  00004e6c  2**0
                  CONTENTS
774 .inttab_tc2_0F7 00000000  803062e0  803062e0  00004e6c  2**0
                  CONTENTS
775 .inttab_tc2_0F8 00000000  80306300  80306300  00004e6c  2**0
                  CONTENTS
776 .inttab_tc2_0F9 00000000  80306320  80306320  00004e6c  2**0
                  CONTENTS
777 .inttab_tc2_0FA 00000000  80306340  80306340  00004e6c  2**0
                  CONTENTS
778 .inttab_tc2_0FB 00000000  80306360  80306360  00004e6c  2**0
                  CONTENTS
779 .inttab_tc2_0FC 00000000  80306380  80306380  00004e6c  2**0
                  CONTENTS
780 .inttab_tc2_0FD 00000000  803063a0  803063a0  00004e6c  2**0
                  CONTENTS
781 .inttab_tc2_0FE 00000000  803063c0  803063c0  00004e6c  2**0
                  CONTENTS
782 .inttab_tc2_0FF 00000000  803063e0  803063e0  00004e6c  2**0
                  CONTENTS
783 .CPU2.zdata   00000000  50000000  50000000  00004e6c  2**0
                  CONTENTS
784 .CPU1.zdata   00000000  60000000  60000000  00004e6c  2**0
                  CONTENTS
785 .CPU0.zdata   00000000  70000000  70000000  00004e6c  2**0
                  CONTENTS
786 .zdata_powerOn 00000000  70000000  70000000  00004e6c  2**0
                  CONTENTS
787 .zdata        00000000  70000000  70000000  00004e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
788 .lmuzdata     00000000  90000000  90000000  00004e6c  2**0
                  CONTENTS
789 .sdata        00000000  70000000  70000000  00004e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
790 .CPU2.data    00000000  50000000  50000000  00004e6c  2**0
                  CONTENTS
791 .CPU2.lmudata 00000000  90020000  90020000  00004e6c  2**0
                  CONTENTS
792 .CPU1.data    00000000  60000000  60000000  00004e6c  2**0
                  CONTENTS
793 .CPU1.lmudata 00000000  90010000  90010000  00004e6c  2**0
                  CONTENTS
794 .CPU0.data    00000000  70000000  70000000  00004e6c  2**0
                  CONTENTS
795 .CPU0.lmudata 00000000  90000000  90000000  00004e6c  2**0
                  CONTENTS
796 .sdata4       00000000  90000000  90000000  00004e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
797 .data         00000000  70000000  70000000  00004e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
798 .bss          0000000c  70000000  8030642c  00000580  2**3
                  ALLOC
799 .heap         00001000  7000000c  8030642c  00000580  2**0
                  ALLOC
800 .lmudata      00000000  90000000  90000000  00004e6c  2**0
                  CONTENTS
801 .rodata       0000047c  8030642c  8030642c  00000580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
802 .CPU0.psram_text 00000000  70100000  70100000  00004e6c  2**0
                  CONTENTS
803 .CPU1.psram_text 00000000  60100000  60100000  00004e6c  2**0
                  CONTENTS
804 .CPU2.psram_text 00000000  50100000  50100000  00004e6c  2**0
                  CONTENTS
805 .CPU0.text    000003c8  803068a8  803068a8  000009fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
806 .init         00000010  80306c70  80306c70  00000dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
807 .fini         00000008  80306c80  80306c80  00000dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
808 .CPU1.text    000001fe  80306c88  80306c88  00000ddc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
809 .CPU2.text    000001ec  80306e86  80306e86  00000fda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
810 .text         00003c62  80307072  80307072  000011c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
811 .eh_frame     00000004  8030acd4  8030acd4  00004e28  2**0
                  ALLOC
812 .gcc_except_table 00000000  8030acd8  8030acd8  00004e6c  2**0
                  CONTENTS
813 .ctors        00000010  8030acd8  8030acd8  00004e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
814 .dtors        00000010  8030ace8  8030ace8  00004e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
815 .comment      0000001b  00000000  00000000  00004e6c  2**0
                  CONTENTS, READONLY
816 .debug_aranges 00000830  00000000  00000000  00004e88  2**3
                  CONTENTS, READONLY, DEBUGGING
817 .debug_info   00070f05  00000000  00000000  000056b8  2**0
                  CONTENTS, READONLY, DEBUGGING
818 .debug_abbrev 00003f25  00000000  00000000  000765bd  2**0
                  CONTENTS, READONLY, DEBUGGING
819 .debug_line   0000d61e  00000000  00000000  0007a4e2  2**0
                  CONTENTS, READONLY, DEBUGGING
820 .debug_frame  00001158  00000000  00000000  00087b00  2**2
                  CONTENTS, READONLY, DEBUGGING
821 .debug_str    000018e1  00000000  00000000  00088c58  2**0
                  CONTENTS, READONLY, DEBUGGING
822 .debug_loc    00000ef9  00000000  00000000  0008a539  2**0
                  CONTENTS, READONLY, DEBUGGING
823 .debug_ranges 000000b0  00000000  00000000  0008b438  2**3
                  CONTENTS, READONLY, DEBUGGING
824 .debug_rnglists 0000065b  00000000  00000000  0008b4e8  2**0
                  CONTENTS, READONLY, DEBUGGING
825 .debug_macro  00017081  00000000  00000000  0008bb43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .start_tc0:

a0300000 <_START>:
}


IFX_SSW_INLINE void Ifx_Ssw_jumpToFunction(void (*fun)(void))
{
    __asm__ volatile ("ji %0" ::"a" (fun));
a0300000:	91 00 03 28 	movh.a %a2,32816
a0300004:	d9 22 ac 26 	lea %a2,[%a2]26796 <803068ac <__StartUpSoftware>>
a0300008:	dc 02       	ji %a2
#endif

void _START(void)
{
    Ifx_Ssw_jumpToFunction(__StartUpSoftware);
}
a030000a:	00 90       	ret 

Disassembly of section .traptab_tc0:

80300100 <IfxCpu_Trap_vectorTable0>:
#pragma ghs section
#pragma ghs section text=".traptab_cpu0"
#endif
void IfxCpu_Trap_vectorTable0(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80300100:	0d 00 00 02 	svlcx 
80300104:	02 f4       	mov %d4,%d15
80300106:	91 10 03 28 	movh.a %a2,32817
8030010a:	d9 22 ae 69 	lea %a2,[%a2]-26194 <803099ae <IfxCpu_Trap_memoryManagementError>>
8030010e:	dc 02       	ji %a2
80300110:	00 80       	rfe 
	...
8030011e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80300120:	0d 00 00 02 	svlcx 
80300124:	02 f4       	mov %d4,%d15
80300126:	91 10 03 28 	movh.a %a2,32817
8030012a:	d9 22 b0 89 	lea %a2,[%a2]-26064 <80309a30 <IfxCpu_Trap_internalProtectionError>>
8030012e:	dc 02       	ji %a2
80300130:	00 80       	rfe 
	...
8030013e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80300140:	0d 00 00 02 	svlcx 
80300144:	02 f4       	mov %d4,%d15
80300146:	91 10 03 28 	movh.a %a2,32817
8030014a:	d9 22 b2 a9 	lea %a2,[%a2]-25934 <80309ab2 <IfxCpu_Trap_instructionError>>
8030014e:	dc 02       	ji %a2
80300150:	00 80       	rfe 
	...
8030015e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80300160:	02 f4       	mov %d4,%d15
80300162:	91 10 03 28 	movh.a %a2,32817
80300166:	d9 22 b4 c9 	lea %a2,[%a2]-25804 <80309b34 <IfxCpu_Trap_contextManagementError>>
8030016a:	dc 02       	ji %a2
8030016c:	00 80       	rfe 
	...
8030017e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80300180:	0d 00 00 02 	svlcx 
80300184:	02 f4       	mov %d4,%d15
80300186:	91 10 03 28 	movh.a %a2,32817
8030018a:	d9 22 b6 e9 	lea %a2,[%a2]-25674 <80309bb6 <IfxCpu_Trap_busError>>
8030018e:	dc 02       	ji %a2
80300190:	00 80       	rfe 
	...
8030019e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
803001a0:	0d 00 00 02 	svlcx 
803001a4:	02 f4       	mov %d4,%d15
803001a6:	91 10 03 28 	movh.a %a2,32817
803001aa:	d9 22 f8 09 	lea %a2,[%a2]-25544 <80309c38 <IfxCpu_Trap_assertion>>
803001ae:	dc 02       	ji %a2
803001b0:	00 80       	rfe 
	...
803001be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu0);
803001c0:	0d 00 00 02 	svlcx 
803001c4:	02 f4       	mov %d4,%d15
803001c6:	91 10 03 28 	movh.a %a2,32817
803001ca:	d9 22 fa 29 	lea %a2,[%a2]-25414 <80309cba <IfxCpu_Trap_systemCall_Cpu0>>
803001ce:	dc 02       	ji %a2
803001d0:	00 80       	rfe 
	...
803001de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
803001e0:	0d 00 00 02 	svlcx 
803001e4:	02 f4       	mov %d4,%d15
803001e6:	91 10 03 28 	movh.a %a2,32817
803001ea:	d9 22 f4 89 	lea %a2,[%a2]-25036 <80309e34 <IfxCpu_Trap_nonMaskableInterrupt>>
803001ee:	dc 02       	ji %a2
803001f0:	00 80       	rfe 
}
803001f2:	00 90       	ret 

803001f4 <IfxCpu_Trap_vectorTable0_end>:
	...

Disassembly of section .traptab_tc1:

80300200 <IfxCpu_Trap_vectorTable1>:
#pragma ghs section
#pragma ghs section text=".traptab_cpu1"
#endif
void IfxCpu_Trap_vectorTable1(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80300200:	0d 00 00 02 	svlcx 
80300204:	02 f4       	mov %d4,%d15
80300206:	91 10 03 28 	movh.a %a2,32817
8030020a:	d9 22 ae 69 	lea %a2,[%a2]-26194 <803099ae <IfxCpu_Trap_memoryManagementError>>
8030020e:	dc 02       	ji %a2
80300210:	00 80       	rfe 
	...
8030021e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80300220:	0d 00 00 02 	svlcx 
80300224:	02 f4       	mov %d4,%d15
80300226:	91 10 03 28 	movh.a %a2,32817
8030022a:	d9 22 b0 89 	lea %a2,[%a2]-26064 <80309a30 <IfxCpu_Trap_internalProtectionError>>
8030022e:	dc 02       	ji %a2
80300230:	00 80       	rfe 
	...
8030023e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80300240:	0d 00 00 02 	svlcx 
80300244:	02 f4       	mov %d4,%d15
80300246:	91 10 03 28 	movh.a %a2,32817
8030024a:	d9 22 b2 a9 	lea %a2,[%a2]-25934 <80309ab2 <IfxCpu_Trap_instructionError>>
8030024e:	dc 02       	ji %a2
80300250:	00 80       	rfe 
	...
8030025e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80300260:	02 f4       	mov %d4,%d15
80300262:	91 10 03 28 	movh.a %a2,32817
80300266:	d9 22 b4 c9 	lea %a2,[%a2]-25804 <80309b34 <IfxCpu_Trap_contextManagementError>>
8030026a:	dc 02       	ji %a2
8030026c:	00 80       	rfe 
	...
8030027e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80300280:	0d 00 00 02 	svlcx 
80300284:	02 f4       	mov %d4,%d15
80300286:	91 10 03 28 	movh.a %a2,32817
8030028a:	d9 22 b6 e9 	lea %a2,[%a2]-25674 <80309bb6 <IfxCpu_Trap_busError>>
8030028e:	dc 02       	ji %a2
80300290:	00 80       	rfe 
	...
8030029e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
803002a0:	0d 00 00 02 	svlcx 
803002a4:	02 f4       	mov %d4,%d15
803002a6:	91 10 03 28 	movh.a %a2,32817
803002aa:	d9 22 f8 09 	lea %a2,[%a2]-25544 <80309c38 <IfxCpu_Trap_assertion>>
803002ae:	dc 02       	ji %a2
803002b0:	00 80       	rfe 
	...
803002be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu1);
803002c0:	0d 00 00 02 	svlcx 
803002c4:	02 f4       	mov %d4,%d15
803002c6:	91 10 03 28 	movh.a %a2,32817
803002ca:	d9 22 f8 49 	lea %a2,[%a2]-25288 <80309d38 <IfxCpu_Trap_systemCall_Cpu1>>
803002ce:	dc 02       	ji %a2
803002d0:	00 80       	rfe 
	...
803002de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
803002e0:	0d 00 00 02 	svlcx 
803002e4:	02 f4       	mov %d4,%d15
803002e6:	91 10 03 28 	movh.a %a2,32817
803002ea:	d9 22 f4 89 	lea %a2,[%a2]-25036 <80309e34 <IfxCpu_Trap_nonMaskableInterrupt>>
803002ee:	dc 02       	ji %a2
803002f0:	00 80       	rfe 
}
803002f2:	00 90       	ret 

803002f4 <IfxCpu_Trap_vectorTable1_end>:
	...

Disassembly of section .traptab_tc2:

80300300 <IfxCpu_Trap_vectorTable2>:
#pragma ghs section text=".traptab_cpu2"
#endif

void IfxCpu_Trap_vectorTable2(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80300300:	0d 00 00 02 	svlcx 
80300304:	02 f4       	mov %d4,%d15
80300306:	91 10 03 28 	movh.a %a2,32817
8030030a:	d9 22 ae 69 	lea %a2,[%a2]-26194 <803099ae <IfxCpu_Trap_memoryManagementError>>
8030030e:	dc 02       	ji %a2
80300310:	00 80       	rfe 
	...
8030031e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80300320:	0d 00 00 02 	svlcx 
80300324:	02 f4       	mov %d4,%d15
80300326:	91 10 03 28 	movh.a %a2,32817
8030032a:	d9 22 b0 89 	lea %a2,[%a2]-26064 <80309a30 <IfxCpu_Trap_internalProtectionError>>
8030032e:	dc 02       	ji %a2
80300330:	00 80       	rfe 
	...
8030033e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80300340:	0d 00 00 02 	svlcx 
80300344:	02 f4       	mov %d4,%d15
80300346:	91 10 03 28 	movh.a %a2,32817
8030034a:	d9 22 b2 a9 	lea %a2,[%a2]-25934 <80309ab2 <IfxCpu_Trap_instructionError>>
8030034e:	dc 02       	ji %a2
80300350:	00 80       	rfe 
	...
8030035e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80300360:	02 f4       	mov %d4,%d15
80300362:	91 10 03 28 	movh.a %a2,32817
80300366:	d9 22 b4 c9 	lea %a2,[%a2]-25804 <80309b34 <IfxCpu_Trap_contextManagementError>>
8030036a:	dc 02       	ji %a2
8030036c:	00 80       	rfe 
	...
8030037e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80300380:	0d 00 00 02 	svlcx 
80300384:	02 f4       	mov %d4,%d15
80300386:	91 10 03 28 	movh.a %a2,32817
8030038a:	d9 22 b6 e9 	lea %a2,[%a2]-25674 <80309bb6 <IfxCpu_Trap_busError>>
8030038e:	dc 02       	ji %a2
80300390:	00 80       	rfe 
	...
8030039e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
803003a0:	0d 00 00 02 	svlcx 
803003a4:	02 f4       	mov %d4,%d15
803003a6:	91 10 03 28 	movh.a %a2,32817
803003aa:	d9 22 f8 09 	lea %a2,[%a2]-25544 <80309c38 <IfxCpu_Trap_assertion>>
803003ae:	dc 02       	ji %a2
803003b0:	00 80       	rfe 
	...
803003be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu2);
803003c0:	0d 00 00 02 	svlcx 
803003c4:	02 f4       	mov %d4,%d15
803003c6:	91 10 03 28 	movh.a %a2,32817
803003ca:	d9 22 f6 69 	lea %a2,[%a2]-25162 <80309db6 <IfxCpu_Trap_systemCall_Cpu2>>
803003ce:	dc 02       	ji %a2
803003d0:	00 80       	rfe 
	...
803003de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
803003e0:	0d 00 00 02 	svlcx 
803003e4:	02 f4       	mov %d4,%d15
803003e6:	91 10 03 28 	movh.a %a2,32817
803003ea:	d9 22 f4 89 	lea %a2,[%a2]-25036 <80309e34 <IfxCpu_Trap_nonMaskableInterrupt>>
803003ee:	dc 02       	ji %a2
803003f0:	00 80       	rfe 
}
803003f2:	00 90       	ret 

803003f4 <IfxCpu_Trap_vectorTable2_end>:
	...

Disassembly of section .start_tc1:

a0306400 <_START1>:
a0306400:	91 00 03 28 	movh.a %a2,32816
a0306404:	d9 22 c8 26 	lea %a2,[%a2]27784 <80306c88 <__Core1_start>>
a0306408:	dc 02       	ji %a2
#endif

void _START1(void)
{
    Ifx_Ssw_jumpToFunction(__Core1_start);
}
a030640a:	00 90       	ret 

Disassembly of section .start_tc2:

a0306420 <_START2>:
a0306420:	91 00 03 28 	movh.a %a2,32816
a0306424:	d9 22 c6 a6 	lea %a2,[%a2]28294 <80306e86 <__Core2_start>>
a0306428:	dc 02       	ji %a2
#endif

void _START2(void)
{
    Ifx_Ssw_jumpToFunction(__Core2_start);
}
a030642a:	00 90       	ret 

Disassembly of section .CPU0.text:

803068a8 <hardware_init_hook>:
{}
803068a8:	00 90       	ret 

803068aa <software_init_hook>:
{}
803068aa:	00 90       	ret 

803068ac <__StartUpSoftware>:
    Ifx_Ssw_setAddressReg(a1, __SDATA2(0));
803068ac:	91 10 00 18 	movh.a %a1,32769
803068b0:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
803068b4:	3b 00 98 20 	mov %d2,2432
803068b8:	cd 42 e0 0f 	mtcr $psw,%d2
#endif

IFX_SSW_INLINE unsigned char Ifx_Ssw_isApplicationReset(void)
{
    unsigned char returnVal;
    unsigned int  tempValue = SCU_RSTSTAT.U;
803068bc:	91 30 00 2f 	movh.a %a2,61443
803068c0:	19 22 10 16 	ld.w %d2,[%a2]24656 <f0036050 <_START2_end+0x4fd2fc24>>

    if ((tempValue & IFX_SSW_POWERONRESET_MASK) > 0U)
803068c4:	7b d0 38 31 	movh %d3,5005
803068c8:	26 23       	and %d3,%d2
    unsigned int  tempValue = SCU_RSTSTAT.U;
803068ca:	d9 22 10 16 	lea %a2,[%a2]24656 <f0036050 <_START2_end+0x4fd2fc24>>
    if ((tempValue & IFX_SSW_POWERONRESET_MASK) > 0U)
803068ce:	df 03 15 80 	jne %d3,0,803068f8 <__StartUpSoftware+0x4c>
    {
        returnVal = 0U;
    }
    else if ((tempValue & IFX_SSW_APPLICATIONRESET_MASK) > 0U)
803068d2:	8f b2 0f 31 	and %d3,%d2,251
803068d6:	df 03 17 00 	jeq %d3,0,80306904 <__StartUpSoftware+0x58>
    {
        /* get the bit which is set at RSTSTAT (assumption: RSTSTAT register was cleared before and only one bit can be set) */
        tempValue = tempValue & IFX_SSW_APPLICATIONRESET_MASK;
        tempValue = (SCU_RSTCON.U >> ((31U - Ifx_Ssw_CLZ(tempValue)) << 1U)) & 3U;
803068da:	91 30 00 2f 	movh.a %a2,61443
803068de:	0f 03 b0 21 	clz %d2,%d3
803068e2:	8b f2 01 21 	rsub %d2,%d2,31
803068e6:	19 23 18 16 	ld.w %d3,[%a2]24664 <f0036058 <_START2_end+0x4fd2fc2c>>
803068ea:	06 12       	sh %d2,1
803068ec:	57 03 62 22 	extr.u %d2,%d3,%d2,2
803068f0:	d9 22 18 16 	lea %a2,[%a2]24664 <f0036058 <_START2_end+0x4fd2fc2c>>

        if (tempValue == IFX_SSW_APPLICATIONRESET)
803068f4:	df 22 0a 00 	jeq %d2,2,80306908 <__StartUpSoftware+0x5c>
803068f8:	91 00 03 28 	movh.a %a2,32816
803068fc:	d9 22 ac 46 	lea %a2,[%a2]26924 <8030692c <__StartUpSoftware_Phase2>>
80306900:	dc 02       	ji %a2
}
80306902:	00 90       	ret 
        else
        {
            returnVal = 0U;
        }
    }
    else if (((unsigned int)tempValue & ((unsigned int)IFX_SCU_RSTSTAT_CB3_MSK << IFX_SCU_RSTSTAT_CB3_OFF)))
80306904:	ef 42 08 00 	jz.t %d2,20,80306914 <__StartUpSoftware+0x68>
    __asm__ volatile ("ji %0" ::"a" (fun));
80306908:	91 00 03 28 	movh.a %a2,32816
8030690c:	d9 22 b6 76 	lea %a2,[%a2]27126 <803069f6 <__StartUpSoftware_Phase3ApplicationResetPath>>
80306910:	dc 02       	ji %a2
}
80306912:	00 90       	ret 
    {
        /* CB3 reset is not configurable and is always application reset */
        returnVal = 1U;
    }
    else if (CPU0_KRST0.B.RSTSTAT != 0)   /*CPU0 KRST status */
80306914:	91 10 88 2f 	movh.a %a2,63617
80306918:	19 22 00 0d 	ld.w %d2,[%a2]-12288 <f880d000 <_START2_end+0x58506bd4>>
8030691c:	d9 22 00 0d 	lea %a2,[%a2]-12288 <f880d000 <_START2_end+0x58506bd4>>
80306920:	37 02 e2 20 	extr.u %d2,%d2,1,2
80306924:	df 02 f2 ff 	jne %d2,0,80306908 <__StartUpSoftware+0x5c>
80306928:	1d ff e8 ff 	j 803068f8 <__StartUpSoftware+0x4c>

8030692c <__StartUpSoftware_Phase2>:


IFX_SSW_INLINE void Ifx_Ssw_jumpToFunctionWithLink(void *fun)
{
    __asm__ volatile ("jli %0" ::"a" (fun));
8030692c:	91 10 03 28 	movh.a %a2,32817
80306930:	d9 22 b6 7a 	lea %a2,[%a2]-22026 <8030a9f6 <Ifx_Ssw_Pms_Init>>
80306934:	2d 02 20 00 	jli %a2
80306938:	91 10 03 28 	movh.a %a2,32817
8030693c:	d9 22 9c ca 	lea %a2,[%a2]-21732 <8030ab1c <Ifx_Ssw_Pms_InitCheck>>
80306940:	2d 02 20 00 	jli %a2
    __asm__ volatile ("ji %0" ::"a" (fun));
80306944:	91 00 03 28 	movh.a %a2,32816
80306948:	d9 22 90 56 	lea %a2,[%a2]26960 <80306950 <__StartUpSoftware_Phase3PowerOnResetPath>>
8030694c:	dc 02       	ji %a2
}
8030694e:	00 90       	ret 

80306950 <__StartUpSoftware_Phase3PowerOnResetPath>:
    IFX_SSW_INIT_CONTEXT();
80306950:	91 40 00 a7 	movh.a %sp,28676
80306954:	d9 aa 40 89 	lea %sp,[%sp]-27136 <70039600 <__USTACK0>>
    __asm__ volatile ("dsync" : : : "memory");
80306958:	0d 00 80 04 	dsync 
{
    unsigned int  k;
    unsigned int  nxt_cxi_val = 0U;
    unsigned int *prvCsa      = csaBegin;
    unsigned int *nxtCsa      = csaBegin;
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
8030695c:	91 40 00 37 	movh.a %a3,28676
80306960:	91 40 00 27 	movh.a %a2,28676
80306964:	d9 33 c0 09 	lea %a3,[%a3]-25600 <70039c00 <__CSA0>>
80306968:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <7003bc00 <__CSA0_END>>
8030696c:	01 32 20 20 	sub.a %a2,%a2,%a3
80306970:	80 22       	mov.d %d2,%a2
80306972:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
80306976:	40 32       	mov.aa %a2,%a3
        else
        {
            *prvCsa = nxt_cxi_val;
        }

        if (k == (numOfCsa - 3U))
80306978:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
8030697c:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
8030697e:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80306980:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
80306984:	df 06 2d 00 	jeq %d6,0,803069de <__StartUpSoftware_Phase3PowerOnResetPath+0x8e>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80306988:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
8030698c:	8f 42 1f 50 	sh %d5,%d2,-12
80306990:	26 75       	and %d5,%d7
80306992:	a6 54       	or %d4,%d5
        if (k == 0U)
80306994:	df 03 14 00 	jeq %d3,0,803069bc <__StartUpSoftware_Phase3PowerOnResetPath+0x6c>
            *prvCsa = nxt_cxi_val;
80306998:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
8030699a:	5f 03 15 00 	jeq %d3,%d0,803069c4 <__StartUpSoftware_Phase3PowerOnResetPath+0x74>
    for (k = 0U; k < numOfCsa; k++)
8030699e:	c2 13       	add %d3,1
803069a0:	60 22       	mov.a %a2,%d2
        {
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
        }

        prvCsa  = (unsigned int *)nxtCsa;
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
803069a2:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
803069a6:	5f 36 17 00 	jeq %d6,%d3,803069d4 <__StartUpSoftware_Phase3PowerOnResetPath+0x84>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
803069aa:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
803069ac:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
803069b0:	8f 42 1f 50 	sh %d5,%d2,-12
803069b4:	26 75       	and %d5,%d7
803069b6:	a6 54       	or %d4,%d5
        if (k == 0U)
803069b8:	df 03 f0 ff 	jne %d3,0,80306998 <__StartUpSoftware_Phase3PowerOnResetPath+0x48>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
803069bc:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
803069c0:	5f 03 ef ff 	jne %d3,%d0,8030699e <__StartUpSoftware_Phase3PowerOnResetPath+0x4e>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
803069c4:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
803069c8:	c2 13       	add %d3,1
803069ca:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
803069cc:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
803069d0:	5f 36 ed ff 	jne %d6,%d3,803069aa <__StartUpSoftware_Phase3PowerOnResetPath+0x5a>
803069d4:	1b f6 ff 2f 	addi %d2,%d6,-1
803069d8:	06 62       	sh %d2,6
803069da:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    }

    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
803069de:	82 02       	mov %d2,0
803069e0:	74 22       	st.w [%a2],%d2
803069e2:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
803069e6:	0d 00 c0 04 	isync 
    __asm__ volatile ("ji %0" ::"a" (fun));
803069ea:	91 00 03 28 	movh.a %a2,32816
803069ee:	d9 22 9c a6 	lea %a2,[%a2]27292 <80306a9c <__StartUpSoftware_Phase4>>
803069f2:	dc 02       	ji %a2
}
803069f4:	00 90       	ret 

803069f6 <__StartUpSoftware_Phase3ApplicationResetPath>:
    IFX_SSW_INIT_CONTEXT();
803069f6:	91 40 00 a7 	movh.a %sp,28676
803069fa:	d9 aa 40 89 	lea %sp,[%sp]-27136 <70039600 <__USTACK0>>
    __asm__ volatile ("dsync" : : : "memory");
803069fe:	0d 00 80 04 	dsync 
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
80306a02:	91 40 00 37 	movh.a %a3,28676
80306a06:	91 40 00 27 	movh.a %a2,28676
80306a0a:	d9 33 c0 09 	lea %a3,[%a3]-25600 <70039c00 <__CSA0>>
80306a0e:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <7003bc00 <__CSA0_END>>
80306a12:	01 32 20 20 	sub.a %a2,%a2,%a3
80306a16:	80 22       	mov.d %d2,%a2
80306a18:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
80306a1c:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80306a1e:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80306a22:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
80306a24:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80306a26:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
80306a2a:	df 06 2d 00 	jeq %d6,0,80306a84 <__StartUpSoftware_Phase3ApplicationResetPath+0x8e>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80306a2e:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80306a32:	8f 42 1f 50 	sh %d5,%d2,-12
80306a36:	26 75       	and %d5,%d7
80306a38:	a6 54       	or %d4,%d5
        if (k == 0U)
80306a3a:	df 03 14 00 	jeq %d3,0,80306a62 <__StartUpSoftware_Phase3ApplicationResetPath+0x6c>
            *prvCsa = nxt_cxi_val;
80306a3e:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80306a40:	5f 03 15 00 	jeq %d3,%d0,80306a6a <__StartUpSoftware_Phase3ApplicationResetPath+0x74>
    for (k = 0U; k < numOfCsa; k++)
80306a44:	c2 13       	add %d3,1
80306a46:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80306a48:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80306a4c:	5f 36 17 00 	jeq %d6,%d3,80306a7a <__StartUpSoftware_Phase3ApplicationResetPath+0x84>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80306a50:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80306a52:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80306a56:	8f 42 1f 50 	sh %d5,%d2,-12
80306a5a:	26 75       	and %d5,%d7
80306a5c:	a6 54       	or %d4,%d5
        if (k == 0U)
80306a5e:	df 03 f0 ff 	jne %d3,0,80306a3e <__StartUpSoftware_Phase3ApplicationResetPath+0x48>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80306a62:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
80306a66:	5f 03 ef ff 	jne %d3,%d0,80306a44 <__StartUpSoftware_Phase3ApplicationResetPath+0x4e>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80306a6a:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
80306a6e:	c2 13       	add %d3,1
80306a70:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80306a72:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80306a76:	5f 36 ed ff 	jne %d6,%d3,80306a50 <__StartUpSoftware_Phase3ApplicationResetPath+0x5a>
80306a7a:	1b f6 ff 2f 	addi %d2,%d6,-1
80306a7e:	06 62       	sh %d2,6
80306a80:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
80306a84:	82 02       	mov %d2,0
80306a86:	74 22       	st.w [%a2],%d2
80306a88:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
80306a8c:	0d 00 c0 04 	isync 
    __asm__ volatile ("ji %0" ::"a" (fun));
80306a90:	91 00 03 28 	movh.a %a2,32816
80306a94:	d9 22 aa b6 	lea %a2,[%a2]27370 <80306aea <__StartUpSoftware_Phase5>>
80306a98:	dc 02       	ji %a2
}
80306a9a:	00 90       	ret 

80306a9c <__StartUpSoftware_Phase4>:
    password  = watchdog->CON0.B.PW;
80306a9c:	91 30 00 4f 	movh.a %a4,61443
80306aa0:	19 44 0c 96 	ld.w %d4,[%a4]25164 <f003624c <_START2_end+0x4fd2fe20>>
    password  = watchdog->CON0.B.PW;
80306aa4:	91 30 00 2f 	movh.a %a2,61443
80306aa8:	19 28 28 a6 	ld.w %d8,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
    password  = watchdog->CON0.B.PW;
80306aac:	37 04 6e 41 	extr.u %d4,%d4,2,14
80306ab0:	d9 44 0c 96 	lea %a4,[%a4]25164 <f003624c <_START2_end+0x4fd2fe20>>
    password  = watchdog->CON0.B.PW;
80306ab4:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
        Ifx_Ssw_serviceCpuWatchdog(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
80306ab8:	8f f4 83 41 	xor %d4,%d4,63
80306abc:	37 08 6e 81 	extr.u %d8,%d8,2,14
80306ac0:	6d 00 9c 1c 	call 8030a3f8 <Ifx_Ssw_serviceCpuWatchdog>
        Ifx_Ssw_serviceSafetyWatchdog(safetyWdtPassword);
80306ac4:	8f f8 83 41 	xor %d4,%d8,63
80306ac8:	6d 00 db 1c 	call 8030a47e <Ifx_Ssw_serviceSafetyWatchdog>
    IFX_CFG_SSW_CALLOUT_PLL_INIT();
80306acc:	91 00 03 48 	movh.a %a4,32816
80306ad0:	d9 44 78 16 	lea %a4,[%a4]25720 <80306478 <IfxScuCcu_defaultClockConfig>>
80306ad4:	6d 00 f1 0a 	call 803080b6 <IfxScuCcu_init>
80306ad8:	df 12 03 80 	jne %d2,1,80306ade <__StartUpSoftware_Phase4+0x42>

/** Insert DEBUG instruction
 */
IFX_INLINE void Ifx__debug(void)
{
    __asm__ volatile ("debug" : : : "memory");
80306adc:	00 a0       	debug 
80306ade:	91 00 03 28 	movh.a %a2,32816
80306ae2:	d9 22 aa b6 	lea %a2,[%a2]27370 <80306aea <__StartUpSoftware_Phase5>>
80306ae6:	dc 02       	ji %a2
}
80306ae8:	00 90       	ret 

80306aea <__StartUpSoftware_Phase5>:
80306aea:	91 00 03 28 	movh.a %a2,32816
80306aee:	d9 22 b6 b6 	lea %a2,[%a2]27382 <80306af6 <__StartUpSoftware_Phase6>>
80306af2:	dc 02       	ji %a2
}
80306af4:	00 90       	ret 

80306af6 <__StartUpSoftware_Phase6>:
    Ifx_Ssw_startCore(&MODULE_CPU1, (unsigned int)__START(1));           /*The status returned by function call is ignored */
80306af6:	91 00 03 2a 	movh.a %a2,41008
80306afa:	80 22       	mov.d %d2,%a2
80306afc:	1b 02 40 46 	addi %d4,%d2,25600
80306b00:	91 20 88 4f 	movh.a %a4,63618
80306b04:	6d 00 ce 1d 	call 8030a6a0 <Ifx_Ssw_startCore>
80306b08:	91 00 03 28 	movh.a %a2,32816
80306b0c:	d9 22 94 c6 	lea %a2,[%a2]27412 <80306b14 <__Core0_start>>
80306b10:	dc 02       	ji %a2
}
80306b12:	00 90       	ret 

80306b14 <__Core0_start>:
    password  = watchdog->CON0.B.PW;
80306b14:	91 30 00 2f 	movh.a %a2,61443
    password  = watchdog->CON0.B.PW;
80306b18:	91 30 00 3f 	movh.a %a3,61443
    password  = watchdog->CON0.B.PW;
80306b1c:	19 23 0c 96 	ld.w %d3,[%a2]25164 <f003624c <_START2_end+0x4fd2fe20>>
    password  = watchdog->CON0.B.PW;
80306b20:	19 32 28 a6 	ld.w %d2,[%a3]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
    password  = watchdog->CON0.B.PW;
80306b24:	37 03 6e 31 	extr.u %d3,%d3,2,14
    password  = watchdog->CON0.B.PW;
80306b28:	37 02 6e 21 	extr.u %d2,%d2,2,14
    if (watchdog->CON0.B.LCK)
80306b2c:	19 24 0c 96 	ld.w %d4,[%a2]25164 <f003624c <_START2_end+0x4fd2fe20>>
80306b30:	8f f3 83 81 	xor %d8,%d3,63
    password  = watchdog->CON0.B.PW;
80306b34:	d9 22 0c 96 	lea %a2,[%a2]25164 <f003624c <_START2_end+0x4fd2fe20>>
    password  = watchdog->CON0.B.PW;
80306b38:	d9 33 28 a6 	lea %a3,[%a3]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80306b3c:	8f f2 83 91 	xor %d9,%d2,63
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80306b40:	8f 28 00 20 	sh %d2,%d8,2
    if (watchdog->CON0.B.LCK)
80306b44:	6f 14 0b 00 	jz.t %d4,1,80306b5a <__Core0_start+0x46>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80306b48:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80306b4a:	8f 28 00 20 	sh %d2,%d8,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80306b4e:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80306b52:	a6 23       	or %d3,%d2
80306b54:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80306b58:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80306b5a:	91 30 00 2f 	movh.a %a2,61443
80306b5e:	19 24 0c 96 	ld.w %d4,[%a2]25164 <f003624c <_START2_end+0x4fd2fe20>>
80306b62:	d9 22 0c 96 	lea %a2,[%a2]25164 <f003624c <_START2_end+0x4fd2fe20>>
80306b66:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
80306b6a:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80306b6c:	a6 24       	or %d4,%d2
80306b6e:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80306b72:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
80306b74:	54 24       	ld.w %d4,[%a2]
80306b76:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
80306b7a:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
80306b7e:	cd 03 04 09 	mtcr $dcon0,%d3
80306b82:	0d 00 c0 04 	isync 
    Ifx_Ssw_setAddressReg(a0, __SDATA1(0));
80306b86:	91 10 00 07 	movh.a %a0,28673
80306b8a:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(0));
80306b8e:	91 10 00 88 	movh.a %a8,32769
80306b92:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(0));
80306b96:	91 10 00 99 	movh.a %a9,36865
80306b9a:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(0));
80306b9e:	91 00 03 38 	movh.a %a3,32816
80306ba2:	80 33       	mov.d %d3,%a3
80306ba4:	1b 03 10 30 	addi %d3,%d3,256
80306ba8:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(0));
80306bac:	91 00 03 38 	movh.a %a3,32816
80306bb0:	80 33       	mov.d %d3,%a3
80306bb2:	1b 03 40 30 	addi %d3,%d3,1024
80306bb6:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(0));
80306bba:	91 40 00 37 	movh.a %a3,28676
80306bbe:	80 33       	mov.d %d3,%a3
80306bc0:	1b 03 b0 39 	addi %d3,%d3,-25856
80306bc4:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
80306bc8:	54 23       	ld.w %d3,[%a2]
80306bca:	6f 13 09 00 	jz.t %d3,1,80306bdc <__Core0_start+0xc8>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80306bce:	54 23       	ld.w %d3,[%a2]
80306bd0:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80306bd4:	a6 23       	or %d3,%d2
80306bd6:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80306bda:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80306bdc:	91 30 00 cf 	movh.a %a12,61443
80306be0:	19 c3 0c 96 	ld.w %d3,[%a12]25164 <f003624c <_START2_end+0x4fd2fe20>>
80306be4:	d9 cc 0c 96 	lea %a12,[%a12]25164 <f003624c <_START2_end+0x4fd2fe20>>
80306be8:	b7 03 10 30 	insert %d3,%d3,0,0,16
    Ifx_Ssw_disableCpuWatchdog(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
80306bec:	40 c4       	mov.aa %a4,%a12
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80306bee:	a6 32       	or %d2,%d3
80306bf0:	8f 32 40 21 	or %d2,%d2,3
80306bf4:	02 84       	mov %d4,%d8
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80306bf6:	74 c2       	st.w [%a12],%d2
    watchdog->CON0.U;
80306bf8:	54 c2       	ld.w %d2,[%a12]
80306bfa:	6d 00 8b 1c 	call 8030a510 <Ifx_Ssw_disableCpuWatchdog>
    Ifx_Ssw_disableSafetyWatchdog(safetyWdtPassword);
80306bfe:	02 94       	mov %d4,%d9
80306c00:	6d 00 1e 1d 	call 8030a63c <Ifx_Ssw_disableSafetyWatchdog>
		hardware_init_hook();
80306c04:	6d ff 52 fe 	call 803068a8 <hardware_init_hook>
		software_init_hook();
80306c08:	6d ff 51 fe 	call 803068aa <software_init_hook>
	(void)Ifx_Ssw_doCppInit();
80306c0c:	6d 00 05 1e 	call 8030a816 <Ifx_Ssw_doCppInit>
    Ifx_Ssw_enableSafetyWatchdog(safetyWdtPassword);
80306c10:	02 94       	mov %d4,%d9
80306c12:	6d 00 2e 1d 	call 8030a66e <Ifx_Ssw_enableSafetyWatchdog>
    Ifx_Ssw_enableCpuWatchdog(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
80306c16:	02 84       	mov %d4,%d8
80306c18:	40 c4       	mov.aa %a4,%a12
80306c1a:	6d 00 c6 1c 	call 8030a5a6 <Ifx_Ssw_enableCpuWatchdog>
    __asm__ volatile ("ji %0" ::"a" (fun));
80306c1e:	91 00 03 28 	movh.a %a2,32816
80306c22:	d9 22 ee 06 	lea %a2,[%a2]27694 <80306c2e <core0_main>>
80306c26:	dc 02       	ji %a2

80306c28 <x>:
    __asm__ volatile ("ji %a11");
}

IFX_SSW_INLINE void Ifx_Ssw_infiniteLoop(void)
{
    __asm("x: loopu\t x");
80306c28:	fd 00 00 80 	loopu 80306c28 <x>
}
80306c2c:	00 90       	ret 

80306c2e <core0_main>:
#include "Blinky_LED.h"

IFX_ALIGN(4) IfxCpu_syncEvent g_cpuSyncEvent = 0;

void core0_main(void)
{
80306c2e:	40 ae       	mov.aa %a14,%sp
}


IFX_INLINE void IfxCpu_enableInterrupts(void)
{
    __enable();
80306c30:	0d 00 00 03 	enable 
}
80306c34:	00 00       	nop 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80306c36:	6d 00 6c 15 	call 8030970e <IfxScuWdt_getCpuWatchdogPassword>
80306c3a:	02 24       	mov %d4,%d2
80306c3c:	6d 00 2a 14 	call 80309490 <IfxScuWdt_disableCpuWatchdog>
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
80306c40:	6d 00 91 15 	call 80309762 <IfxScuWdt_getSafetyWatchdogPassword>
80306c44:	02 24       	mov %d4,%d2
80306c46:	6d 00 ca 14 	call 803095da <IfxScuWdt_disableSafetyWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80306c4a:	91 00 00 27 	movh.a %a2,28672
80306c4e:	d9 24 08 00 	lea %a4,[%a2]8 <70000008 <g_cpuSyncEvent>>
80306c52:	6d 00 9c 19 	call 80309f8a <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80306c56:	82 14       	mov %d4,1
80306c58:	91 00 00 27 	movh.a %a2,28672
80306c5c:	d9 24 08 00 	lea %a4,[%a2]8 <70000008 <g_cpuSyncEvent>>
80306c60:	6d 00 29 19 	call 80309eb2 <IfxCpu_waitEvent>
    
    initLED();
80306c64:	6d 00 90 1f 	call 8030ab84 <initLED>
    
    while(1)
    {
        blinkLED();
80306c68:	6d 00 d1 1f 	call 8030ac0a <blinkLED>
80306c6c:	1d ff fe ff 	j 80306c68 <core0_main+0x3a>

Disassembly of section .init:

80306c70 <_init>:
80306c70:	6d 00 66 02 	call 8030713c <frame_dummy>
80306c74:	6d 00 5d 07 	call 80307b2e <__do_global_ctors_aux>
80306c78:	00 90       	ret 
80306c7a:	00 00       	nop 
80306c7c:	00 00       	nop 
	...

Disassembly of section .fini:

80306c80 <_fini>:
80306c80:	6d 00 2b 02 	call 803070d6 <__do_global_dtors_aux>
80306c84:	00 90       	ret 
	...

Disassembly of section .CPU1.text:

80306c88 <__Core1_start>:
    password  = watchdog->CON0.B.PW;
80306c88:	91 30 00 2f 	movh.a %a2,61443
80306c8c:	d9 22 18 96 	lea %a2,[%a2]25176 <f0036258 <_START2_end+0x4fd2fe2c>>
    unsigned int   stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
80306c90:	85 f8 10 01 	ld.w %d8,f0001010 <_START2_end+0x4fcfabe4>
80306c94:	54 22       	ld.w %d2,[%a2]
80306c96:	37 02 6e 21 	extr.u %d2,%d2,2,14
80306c9a:	8f f2 83 21 	xor %d2,%d2,63
    Ifx_Ssw_setAddressReg(sp, __USTACK(1));
80306c9e:	91 40 00 a6 	movh.a %sp,24580
80306ca2:	d9 aa 40 89 	lea %sp,[%sp]-27136 <60039600 <__USTACK1>>
    __asm__ volatile ("dsync" : : : "memory");
80306ca6:	0d 00 80 04 	dsync 
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
80306caa:	3b 00 98 30 	mov %d3,2432
80306cae:	cd 43 e0 0f 	mtcr $psw,%d3
    if (watchdog->CON0.B.LCK)
80306cb2:	54 23       	ld.w %d3,[%a2]
80306cb4:	6f 13 c7 80 	jnz.t %d3,1,80306e42 <x+0x6>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80306cb8:	06 22       	sh %d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80306cba:	91 30 00 2f 	movh.a %a2,61443
80306cbe:	19 24 18 96 	ld.w %d4,[%a2]25176 <f0036258 <_START2_end+0x4fd2fe2c>>
80306cc2:	d9 22 18 96 	lea %a2,[%a2]25176 <f0036258 <_START2_end+0x4fd2fe2c>>
80306cc6:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
80306cca:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80306ccc:	a6 24       	or %d4,%d2
80306cce:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80306cd2:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
80306cd4:	54 24       	ld.w %d4,[%a2]
80306cd6:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
80306cda:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
80306cde:	cd 03 04 09 	mtcr $dcon0,%d3
80306ce2:	0d 00 c0 04 	isync 
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(1));
80306ce6:	91 00 03 38 	movh.a %a3,32816
80306cea:	80 33       	mov.d %d3,%a3
80306cec:	1b 03 20 30 	addi %d3,%d3,512
80306cf0:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(1));
80306cf4:	91 00 03 38 	movh.a %a3,32816
80306cf8:	80 33       	mov.d %d3,%a3
80306cfa:	1b 03 40 32 	addi %d3,%d3,9216
80306cfe:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(1));
80306d02:	91 40 00 36 	movh.a %a3,24580
80306d06:	80 33       	mov.d %d3,%a3
80306d08:	1b 03 b0 39 	addi %d3,%d3,-25856
80306d0c:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
80306d10:	54 23       	ld.w %d3,[%a2]
80306d12:	6f 13 09 00 	jz.t %d3,1,80306d24 <__Core1_start+0x9c>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80306d16:	54 23       	ld.w %d3,[%a2]
80306d18:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80306d1c:	a6 23       	or %d3,%d2
80306d1e:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80306d22:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80306d24:	91 30 00 2f 	movh.a %a2,61443
80306d28:	19 23 18 96 	ld.w %d3,[%a2]25176 <f0036258 <_START2_end+0x4fd2fe2c>>
80306d2c:	d9 22 18 96 	lea %a2,[%a2]25176 <f0036258 <_START2_end+0x4fd2fe2c>>
80306d30:	b7 03 10 30 	insert %d3,%d3,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80306d34:	a6 32       	or %d2,%d3
80306d36:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80306d3a:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
80306d3c:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setAddressReg(a0, __SDATA1(1));
80306d3e:	91 10 00 07 	movh.a %a0,28673
80306d42:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a1, __SDATA2(1));
80306d46:	91 10 00 18 	movh.a %a1,32769
80306d4a:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(1));
80306d4e:	91 10 00 88 	movh.a %a8,32769
80306d52:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(1));
80306d56:	91 10 00 99 	movh.a %a9,36865
80306d5a:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
80306d5e:	91 40 00 36 	movh.a %a3,24580
80306d62:	91 40 00 26 	movh.a %a2,24580
80306d66:	d9 33 c0 09 	lea %a3,[%a3]-25600 <60039c00 <__CSA1>>
80306d6a:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <6003bc00 <__CSA1_END>>
80306d6e:	01 32 20 20 	sub.a %a2,%a2,%a3
80306d72:	80 22       	mov.d %d2,%a2
80306d74:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
80306d78:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80306d7a:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80306d7e:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
80306d80:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80306d82:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
80306d86:	df 06 2d 00 	jeq %d6,0,80306de0 <__Core1_start+0x158>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80306d8a:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80306d8e:	8f 42 1f 50 	sh %d5,%d2,-12
80306d92:	26 75       	and %d5,%d7
80306d94:	a6 54       	or %d4,%d5
        if (k == 0U)
80306d96:	df 03 14 00 	jeq %d3,0,80306dbe <__Core1_start+0x136>
            *prvCsa = nxt_cxi_val;
80306d9a:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80306d9c:	5f 03 15 00 	jeq %d3,%d0,80306dc6 <__Core1_start+0x13e>
    for (k = 0U; k < numOfCsa; k++)
80306da0:	c2 13       	add %d3,1
80306da2:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80306da4:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80306da8:	5f 36 17 00 	jeq %d6,%d3,80306dd6 <__Core1_start+0x14e>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80306dac:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80306dae:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80306db2:	8f 42 1f 50 	sh %d5,%d2,-12
80306db6:	26 75       	and %d5,%d7
80306db8:	a6 54       	or %d4,%d5
        if (k == 0U)
80306dba:	df 03 f0 ff 	jne %d3,0,80306d9a <__Core1_start+0x112>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80306dbe:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
80306dc2:	5f 03 ef ff 	jne %d3,%d0,80306da0 <__Core1_start+0x118>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80306dc6:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
80306dca:	c2 13       	add %d3,1
80306dcc:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80306dce:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80306dd2:	5f 36 ed ff 	jne %d6,%d3,80306dac <__Core1_start+0x124>
80306dd6:	1b f6 ff 2f 	addi %d2,%d6,-1
80306dda:	06 62       	sh %d2,6
80306ddc:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
80306de0:	82 02       	mov %d2,0
80306de2:	74 22       	st.w [%a2],%d2
    __asm__ volatile ("dsync" : : : "memory");
80306de4:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
80306de8:	0d 00 c0 04 	isync 
    stmCount = (unsigned int)(Ifx_Ssw_getStmFrequency() * IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS);
80306dec:	6d 00 97 1c 	call 8030a71a <Ifx_Ssw_getStmFrequency>
80306df0:	02 24       	mov %d4,%d2
80306df2:	6d 00 c5 01 	call 8030717c <__extendsfdf2>
80306df6:	0b 23 10 48 	mov %e4,%d3,%d2
80306dfa:	7b c0 b1 6e 	movh %d6,60188
80306dfe:	7b a0 f1 73 	movh %d7,16154
80306e02:	1b d6 32 64 	addi %d6,%d6,17197
80306e06:	1b 27 6e 73 	addi %d7,%d7,14050
80306e0a:	6d 00 3e 03 	call 80307486 <__muldf3>
80306e0e:	0b 23 10 48 	mov %e4,%d3,%d2
80306e12:	6d 00 99 01 	call 80307144 <__fixunsdfsi>
    while ((unsigned int)(STM0_TIM0.U - stmCountBegin) < stmCount)
80306e16:	85 f3 10 01 	ld.w %d3,f0001010 <_START2_end+0x4fcfabe4>
80306e1a:	a2 83       	sub %d3,%d8
80306e1c:	3f 23 fd ff 	jlt.u %d3,%d2,80306e16 <__Core1_start+0x18e>
    (void)Ifx_Ssw_startCore(&MODULE_CPU2, (unsigned int)__START(2));       /*The status returned by function call is ignored */
80306e20:	91 00 03 2a 	movh.a %a2,41008
80306e24:	80 22       	mov.d %d2,%a2
80306e26:	1b 02 42 46 	addi %d4,%d2,25632
80306e2a:	91 40 88 4f 	movh.a %a4,63620
80306e2e:	6d 00 39 1c 	call 8030a6a0 <Ifx_Ssw_startCore>
    __asm__ volatile ("ji %0" ::"a" (fun));
80306e32:	91 00 03 28 	movh.a %a2,32816
80306e36:	d9 22 d6 96 	lea %a2,[%a2]28246 <80306e56 <core1_main>>
80306e3a:	dc 02       	ji %a2

80306e3c <x>:
    __asm("x: loopu\t x");
80306e3c:	fd 00 00 80 	loopu 80306e3c <x>
}
80306e40:	00 90       	ret 
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80306e42:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80306e44:	06 22       	sh %d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80306e46:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80306e4a:	a6 23       	or %d3,%d2
80306e4c:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80306e50:	74 23       	st.w [%a2],%d3
80306e52:	1d ff 34 ff 	j 80306cba <__Core1_start+0x32>

80306e56 <core1_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core1_main(void)
{
80306e56:	40 ae       	mov.aa %a14,%sp
    __enable();
80306e58:	0d 00 00 03 	enable 
}
80306e5c:	00 00       	nop 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG1 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80306e5e:	6d 00 58 14 	call 8030970e <IfxScuWdt_getCpuWatchdogPassword>
80306e62:	02 24       	mov %d4,%d2
80306e64:	6d 00 16 13 	call 80309490 <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80306e68:	91 00 00 27 	movh.a %a2,28672
80306e6c:	d9 24 08 00 	lea %a4,[%a2]8 <70000008 <g_cpuSyncEvent>>
80306e70:	6d 00 8d 18 	call 80309f8a <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80306e74:	82 14       	mov %d4,1
80306e76:	91 00 00 27 	movh.a %a2,28672
80306e7a:	d9 24 08 00 	lea %a4,[%a2]8 <70000008 <g_cpuSyncEvent>>
80306e7e:	6d 00 1a 18 	call 80309eb2 <IfxCpu_waitEvent>
    
    while(1)
80306e82:	1d 00 00 00 	j 80306e82 <core1_main+0x2c>

Disassembly of section .CPU2.text:

80306e86 <__Core2_start>:
    password  = watchdog->CON0.B.PW;
80306e86:	91 30 00 2f 	movh.a %a2,61443
80306e8a:	d9 22 24 96 	lea %a2,[%a2]25188 <f0036264 <_START2_end+0x4fd2fe38>>
    unsigned int   stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
80306e8e:	85 f8 10 01 	ld.w %d8,f0001010 <_START2_end+0x4fcfabe4>
80306e92:	54 22       	ld.w %d2,[%a2]
80306e94:	37 02 6e 21 	extr.u %d2,%d2,2,14
80306e98:	8f f2 83 21 	xor %d2,%d2,63
    Ifx_Ssw_setAddressReg(sp, __USTACK(2));
80306e9c:	91 10 00 a5 	movh.a %sp,20481
80306ea0:	d9 aa 40 85 	lea %sp,[%sp]22016 <50015600 <__USTACK2>>
    __asm__ volatile ("dsync" : : : "memory");
80306ea4:	0d 00 80 04 	dsync 
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
80306ea8:	3b 00 98 30 	mov %d3,2432
80306eac:	cd 43 e0 0f 	mtcr $psw,%d3
    if (watchdog->CON0.B.LCK)
80306eb0:	54 23       	ld.w %d3,[%a2]
80306eb2:	6f 13 be 80 	jnz.t %d3,1,8030702e <x+0x6>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80306eb6:	06 22       	sh %d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80306eb8:	91 30 00 2f 	movh.a %a2,61443
80306ebc:	19 24 24 96 	ld.w %d4,[%a2]25188 <f0036264 <_START2_end+0x4fd2fe38>>
80306ec0:	d9 22 24 96 	lea %a2,[%a2]25188 <f0036264 <_START2_end+0x4fd2fe38>>
80306ec4:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
80306ec8:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80306eca:	a6 24       	or %d4,%d2
80306ecc:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80306ed0:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
80306ed2:	54 24       	ld.w %d4,[%a2]
80306ed4:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
80306ed8:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
80306edc:	cd 03 04 09 	mtcr $dcon0,%d3
80306ee0:	0d 00 c0 04 	isync 
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(2));
80306ee4:	91 00 03 38 	movh.a %a3,32816
80306ee8:	80 33       	mov.d %d3,%a3
80306eea:	1b 03 30 30 	addi %d3,%d3,768
80306eee:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(2));
80306ef2:	91 00 03 38 	movh.a %a3,32816
80306ef6:	80 33       	mov.d %d3,%a3
80306ef8:	1b 03 40 34 	addi %d3,%d3,17408
80306efc:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(2));
80306f00:	91 10 00 35 	movh.a %a3,20481
80306f04:	80 33       	mov.d %d3,%a3
80306f06:	1b 03 b0 35 	addi %d3,%d3,23296
80306f0a:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
80306f0e:	54 23       	ld.w %d3,[%a2]
80306f10:	6f 13 09 00 	jz.t %d3,1,80306f22 <__Core2_start+0x9c>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80306f14:	54 23       	ld.w %d3,[%a2]
80306f16:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80306f1a:	a6 23       	or %d3,%d2
80306f1c:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80306f20:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80306f22:	91 30 00 2f 	movh.a %a2,61443
80306f26:	19 23 24 96 	ld.w %d3,[%a2]25188 <f0036264 <_START2_end+0x4fd2fe38>>
80306f2a:	d9 22 24 96 	lea %a2,[%a2]25188 <f0036264 <_START2_end+0x4fd2fe38>>
80306f2e:	b7 03 10 30 	insert %d3,%d3,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80306f32:	a6 32       	or %d2,%d3
80306f34:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80306f38:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
80306f3a:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setAddressReg(a0, __SDATA1(2));
80306f3c:	91 10 00 07 	movh.a %a0,28673
80306f40:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a1, __SDATA2(2));
80306f44:	91 10 00 18 	movh.a %a1,32769
80306f48:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(2));
80306f4c:	91 10 00 88 	movh.a %a8,32769
80306f50:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(2));
80306f54:	91 10 00 99 	movh.a %a9,36865
80306f58:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
80306f5c:	91 10 00 35 	movh.a %a3,20481
80306f60:	91 10 00 25 	movh.a %a2,20481
80306f64:	d9 33 c0 05 	lea %a3,[%a3]23552 <50015c00 <__CSA2>>
80306f68:	d9 22 c0 07 	lea %a2,[%a2]31744 <50017c00 <__CSA2_END>>
80306f6c:	01 32 20 20 	sub.a %a2,%a2,%a3
80306f70:	80 22       	mov.d %d2,%a2
80306f72:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
80306f76:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80306f78:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80306f7c:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
80306f7e:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80306f80:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
80306f84:	df 06 2d 00 	jeq %d6,0,80306fde <__Core2_start+0x158>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80306f88:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80306f8c:	8f 42 1f 50 	sh %d5,%d2,-12
80306f90:	26 75       	and %d5,%d7
80306f92:	a6 54       	or %d4,%d5
        if (k == 0U)
80306f94:	df 03 14 00 	jeq %d3,0,80306fbc <__Core2_start+0x136>
            *prvCsa = nxt_cxi_val;
80306f98:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80306f9a:	5f 03 15 00 	jeq %d3,%d0,80306fc4 <__Core2_start+0x13e>
    for (k = 0U; k < numOfCsa; k++)
80306f9e:	c2 13       	add %d3,1
80306fa0:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80306fa2:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80306fa6:	5f 36 17 00 	jeq %d6,%d3,80306fd4 <__Core2_start+0x14e>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80306faa:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80306fac:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80306fb0:	8f 42 1f 50 	sh %d5,%d2,-12
80306fb4:	26 75       	and %d5,%d7
80306fb6:	a6 54       	or %d4,%d5
        if (k == 0U)
80306fb8:	df 03 f0 ff 	jne %d3,0,80306f98 <__Core2_start+0x112>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80306fbc:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
80306fc0:	5f 03 ef ff 	jne %d3,%d0,80306f9e <__Core2_start+0x118>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80306fc4:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
80306fc8:	c2 13       	add %d3,1
80306fca:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80306fcc:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80306fd0:	5f 36 ed ff 	jne %d6,%d3,80306faa <__Core2_start+0x124>
80306fd4:	1b f6 ff 2f 	addi %d2,%d6,-1
80306fd8:	06 62       	sh %d2,6
80306fda:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
80306fde:	82 02       	mov %d2,0
80306fe0:	74 22       	st.w [%a2],%d2
    __asm__ volatile ("dsync" : : : "memory");
80306fe2:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
80306fe6:	0d 00 c0 04 	isync 
    stmCount = (unsigned int)(Ifx_Ssw_getStmFrequency() * IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS);
80306fea:	6d 00 98 1b 	call 8030a71a <Ifx_Ssw_getStmFrequency>
80306fee:	02 24       	mov %d4,%d2
80306ff0:	6d 00 c6 00 	call 8030717c <__extendsfdf2>
80306ff4:	0b 23 10 48 	mov %e4,%d3,%d2
80306ff8:	7b c0 b1 6e 	movh %d6,60188
80306ffc:	7b a0 f1 73 	movh %d7,16154
80307000:	1b d6 32 64 	addi %d6,%d6,17197
80307004:	1b 27 6e 73 	addi %d7,%d7,14050
80307008:	6d 00 3f 02 	call 80307486 <__muldf3>
8030700c:	0b 23 10 48 	mov %e4,%d3,%d2
80307010:	6d 00 9a 00 	call 80307144 <__fixunsdfsi>
    while ((unsigned int)(STM0_TIM0.U - stmCountBegin) < stmCount)
80307014:	85 f3 10 01 	ld.w %d3,f0001010 <_START2_end+0x4fcfabe4>
80307018:	a2 83       	sub %d3,%d8
8030701a:	3f 23 fd ff 	jlt.u %d3,%d2,80307014 <__Core2_start+0x18e>
    __asm__ volatile ("ji %0" ::"a" (fun));
8030701e:	91 00 03 28 	movh.a %a2,32816
80307022:	d9 22 02 17 	lea %a2,[%a2]28738 <80307042 <core2_main>>
80307026:	dc 02       	ji %a2

80307028 <x>:
    __asm("x: loopu\t x");
80307028:	fd 00 00 80 	loopu 80307028 <x>
}
8030702c:	00 90       	ret 
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8030702e:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80307030:	06 22       	sh %d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80307032:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80307036:	a6 23       	or %d3,%d2
80307038:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8030703c:	74 23       	st.w [%a2],%d3
8030703e:	1d ff 3d ff 	j 80306eb8 <__Core2_start+0x32>

80307042 <core2_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core2_main(void)
{
80307042:	40 ae       	mov.aa %a14,%sp
    __enable();
80307044:	0d 00 00 03 	enable 
}
80307048:	00 00       	nop 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG2 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
8030704a:	6d 00 62 13 	call 8030970e <IfxScuWdt_getCpuWatchdogPassword>
8030704e:	02 24       	mov %d4,%d2
80307050:	6d 00 20 12 	call 80309490 <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80307054:	91 00 00 27 	movh.a %a2,28672
80307058:	d9 24 08 00 	lea %a4,[%a2]8 <70000008 <g_cpuSyncEvent>>
8030705c:	6d 00 97 17 	call 80309f8a <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80307060:	82 14       	mov %d4,1
80307062:	91 00 00 27 	movh.a %a2,28672
80307066:	d9 24 08 00 	lea %a4,[%a2]8 <70000008 <g_cpuSyncEvent>>
8030706a:	6d 00 24 17 	call 80309eb2 <IfxCpu_waitEvent>
    
    while(1)
8030706e:	1d 00 00 00 	j 8030706e <core2_main+0x2c>

Disassembly of section .text:

80307072 <deregister_tm_clones>:
80307072:	7b 00 00 27 	movh %d2,28672
80307076:	1b 02 00 20 	addi %d2,%d2,0
8030707a:	91 00 00 47 	movh.a %a4,28672
8030707e:	60 22       	mov.a %a2,%d2
80307080:	d9 44 00 00 	lea %a4,[%a4]0 <70000000 <__TMC_END__>>
80307084:	7d 42 0a 00 	jeq.a %a2,%a4,80307098 <deregister_tm_clones+0x26>
80307088:	91 00 00 20 	movh.a %a2,0
8030708c:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x380>>
80307090:	bd 02 04 00 	jz.a %a2,80307098 <deregister_tm_clones+0x26>
80307094:	2d 02 00 00 	calli %a2
80307098:	00 90       	ret 

8030709a <register_tm_clones>:
8030709a:	7b 00 00 27 	movh %d2,28672
8030709e:	1b 02 00 20 	addi %d2,%d2,0
803070a2:	91 00 00 47 	movh.a %a4,28672
803070a6:	60 22       	mov.a %a2,%d2
803070a8:	d9 44 00 00 	lea %a4,[%a4]0 <70000000 <__TMC_END__>>
803070ac:	01 42 20 20 	sub.a %a2,%a2,%a4
803070b0:	80 22       	mov.d %d2,%a2
803070b2:	8f e2 3f 30 	sha %d3,%d2,-2
803070b6:	8f 12 1e 20 	sh %d2,%d2,-31
803070ba:	42 32       	add %d2,%d3
803070bc:	8f f2 3f 40 	sha %d4,%d2,-1
803070c0:	df 04 0a 00 	jeq %d4,0,803070d4 <register_tm_clones+0x3a>
803070c4:	91 00 00 20 	movh.a %a2,0
803070c8:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x380>>
803070cc:	bd 02 04 00 	jz.a %a2,803070d4 <register_tm_clones+0x3a>
803070d0:	2d 02 00 00 	calli %a2
803070d4:	00 90       	ret 

803070d6 <__do_global_dtors_aux>:
803070d6:	91 00 00 e7 	movh.a %a14,28672
803070da:	39 e2 00 00 	ld.bu %d2,[%a14]0 <70000000 <__TMC_END__>>
803070de:	df 02 2d 80 	jne %d2,0,80307138 <__do_global_dtors_aux+0x62>
803070e2:	91 10 03 38 	movh.a %a3,32817
803070e6:	91 10 03 28 	movh.a %a2,32817
803070ea:	d9 33 f8 3a 	lea %a3,[%a3]-21256 <8030acf8 <__DTOR_END__>>
803070ee:	d9 22 ec 3a 	lea %a2,[%a2]-21268 <8030acec <__DTOR_LIST__>>
803070f2:	01 23 20 20 	sub.a %a2,%a3,%a2
803070f6:	80 22       	mov.d %d2,%a2
803070f8:	86 e2       	sha %d2,-2
803070fa:	1b f2 ff 8f 	addi %d8,%d2,-1
803070fe:	91 00 00 c7 	movh.a %a12,28672
80307102:	7b 10 03 28 	movh %d2,32817
80307106:	1b c2 ce 2a 	addi %d2,%d2,-21268
8030710a:	60 2d       	mov.a %a13,%d2
8030710c:	19 c2 04 00 	ld.w %d2,[%a12]4 <70000004 <dtor_idx.0>>
80307110:	7f 82 0f 80 	jge.u %d2,%d8,8030712e <__do_global_dtors_aux+0x58>
80307114:	d9 cc 04 00 	lea %a12,[%a12]4 <70000004 <dtor_idx.0>>
80307118:	c2 12       	add %d2,1
8030711a:	74 c2       	st.w [%a12],%d2
8030711c:	06 22       	sh %d2,2
8030711e:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80307122:	d4 22       	ld.a %a2,[%a2]
80307124:	2d 02 00 00 	calli %a2
80307128:	54 c2       	ld.w %d2,[%a12]
8030712a:	3f 82 f7 ff 	jlt.u %d2,%d8,80307118 <__do_global_dtors_aux+0x42>
8030712e:	6d ff a2 ff 	call 80307072 <deregister_tm_clones>
80307132:	82 12       	mov %d2,1
80307134:	e9 e2 00 00 	st.b [%a14]0 <70000000 <__TMC_END__>>,%d2
80307138:	00 90       	ret 

8030713a <call___do_global_dtors_aux>:
8030713a:	00 90       	ret 

8030713c <frame_dummy>:
8030713c:	6d ff af ff 	call 8030709a <register_tm_clones>
80307140:	00 90       	ret 

80307142 <call_frame_dummy>:
80307142:	00 90       	ret 

80307144 <__fixunsdfsi>:
80307144:	82 06       	mov %d6,0
80307146:	7b 00 1e 74 	movh %d7,16864
8030714a:	60 4d       	mov.a %a13,%d4
8030714c:	60 5c       	mov.a %a12,%d5
8030714e:	6d 00 ae 02 	call 803076aa <__gedf2>
80307152:	ff 02 07 00 	jge %d2,0,80307160 <__fixunsdfsi+0x1c>
80307156:	80 d4       	mov.d %d4,%a13
80307158:	80 c5       	mov.d %d5,%a12
8030715a:	6d 00 c8 02 	call 803076ea <__fixdfsi>
8030715e:	00 90       	ret 
80307160:	82 06       	mov %d6,0
80307162:	7b 00 1e 74 	movh %d7,16864
80307166:	80 d4       	mov.d %d4,%a13
80307168:	80 c5       	mov.d %d5,%a12
8030716a:	6d 00 6b 01 	call 80307440 <__subdf3>
8030716e:	0b 23 10 48 	mov %e4,%d3,%d2
80307172:	6d 00 bc 02 	call 803076ea <__fixdfsi>
80307176:	9b 02 00 28 	addih %d2,%d2,32768
8030717a:	00 90       	ret 

8030717c <__extendsfdf2>:
8030717c:	20 20       	sub.a %sp,32
8030717e:	d9 a5 10 00 	lea %a5,[%sp]16
80307182:	d9 a4 0c 00 	lea %a4,[%sp]12
80307186:	59 a4 0c 00 	st.w [%sp]12,%d4
8030718a:	6d 00 fe 02 	call 80307786 <__unpack_f>
8030718e:	19 a2 1c 00 	ld.w %d2,[%sp]28
80307192:	19 a6 18 00 	ld.w %d6,[%sp]24
80307196:	53 12 40 40 	mul.u %e4,%d2,1
8030719a:	77 45 00 3f 	dextr %d3,%d5,%d4,30
8030719e:	8f e4 01 20 	sh %d2,%d4,30
803071a2:	19 a5 14 00 	ld.w %d5,[%sp]20
803071a6:	19 a4 10 00 	ld.w %d4,[%sp]16
803071aa:	74 a2       	st.w [%sp],%d2
803071ac:	59 a3 04 00 	st.w [%sp]4,%d3
803071b0:	6d 00 db 02 	call 80307766 <__make_dp>
803071b4:	00 90       	ret 

803071b6 <_fpadd_parts>:
803071b6:	54 42       	ld.w %d2,[%a4]
803071b8:	40 42       	mov.aa %a2,%a4
803071ba:	bf 22 c2 80 	jlt.u %d2,2,8030733e <_fpadd_parts+0x188>
803071be:	54 53       	ld.w %d3,[%a5]
803071c0:	40 52       	mov.aa %a2,%a5
803071c2:	bf 23 be 80 	jlt.u %d3,2,8030733e <_fpadd_parts+0x188>
803071c6:	df 42 e3 00 	jeq %d2,4,8030738c <_fpadd_parts+0x1d6>
803071ca:	df 43 ba 00 	jeq %d3,4,8030733e <_fpadd_parts+0x188>
803071ce:	df 23 b9 00 	jeq %d3,2,80307340 <_fpadd_parts+0x18a>
803071d2:	df 22 b6 00 	jeq %d2,2,8030733e <_fpadd_parts+0x188>
803071d6:	19 40 08 00 	ld.w %d0,[%a4]8
803071da:	19 57 08 00 	ld.w %d7,[%a5]8
803071de:	09 44 4c 09 	ld.d %e4,[%a4]12
803071e2:	0b 70 80 60 	sub %d6,%d0,%d7
803071e6:	09 52 4c 09 	ld.d %e2,[%a5]12
803071ea:	bf 06 c2 00 	jlt %d6,0,8030736e <_fpadd_parts+0x1b8>
803071ee:	8b 06 84 12 	ge %d1,%d6,64
803071f2:	df 01 c4 80 	jne %d1,0,8030737a <_fpadd_parts+0x1c4>
803071f6:	df 06 2a 00 	jeq %d6,0,8030724a <_fpadd_parts+0x94>
803071fa:	8b 06 82 72 	ge %d7,%d6,32
803071fe:	2b 32 50 97 	seln %d9,%d7,%d2,%d3
80307202:	ab 03 a0 87 	seln %d8,%d7,%d3,0
80307206:	8f f6 01 71 	and %d7,%d6,31
8030720a:	8b 07 02 11 	rsub %d1,%d7,32
8030720e:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
80307212:	2b 91 40 17 	sel %d1,%d7,%d1,%d9
80307216:	8b 06 82 a2 	ge %d10,%d6,32
8030721a:	32 57       	rsub %d7
8030721c:	02 19       	mov %d9,%d1
8030721e:	8f f6 01 61 	and %d6,%d6,31
80307222:	82 f1       	mov %d1,-1
80307224:	0f 78 00 80 	sh %d8,%d8,%d7
80307228:	17 11 80 76 	dextr %d7,%d1,%d1,%d6
8030722c:	0f 61 00 60 	sh %d6,%d1,%d6
80307230:	2b 67 50 7a 	seln %d7,%d10,%d7,%d6
80307234:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
80307238:	0f 62 e0 10 	andn %d1,%d2,%d6
8030723c:	0f 73 e0 60 	andn %d6,%d3,%d7
80307240:	a6 16       	or %d6,%d1
80307242:	8b 06 00 95 	or.ne %d9,%d6,0
80307246:	0b 98 10 28 	mov %e2,%d8,%d9
8030724a:	19 41 04 00 	ld.w %d1,[%a4]4
8030724e:	19 56 04 00 	ld.w %d6,[%a5]4
80307252:	5f 61 4c 00 	jeq %d1,%d6,803072ea <_fpadd_parts+0x134>
80307256:	0b 24 c0 60 	subx %d6,%d4,%d2
8030725a:	0b 35 d0 70 	subc %d7,%d5,%d3
8030725e:	df 01 06 00 	jeq %d1,0,8030726a <_fpadd_parts+0xb4>
80307262:	0b 42 c0 60 	subx %d6,%d2,%d4
80307266:	0b 53 d0 70 	subc %d7,%d3,%d5
8030726a:	8b 07 00 31 	rsub %d3,%d7,0
8030726e:	8b 06 00 91 	rsub %d9,%d6,0
80307272:	ab f3 1f 36 	cadd %d3,%d6,%d3,-1
80307276:	82 12       	mov %d2,1
80307278:	bf 07 05 00 	jlt %d7,0,80307282 <_fpadd_parts+0xcc>
8030727c:	02 69       	mov %d9,%d6
8030727e:	02 73       	mov %d3,%d7
80307280:	82 02       	mov %d2,0
80307282:	8b f9 9f 70 	addx %d7,%d9,-1
80307286:	82 f5       	mov %d5,-1
80307288:	8b f3 bf 60 	addc %d6,%d3,-1
8030728c:	06 c5       	sh %d5,-4
8030728e:	59 62 04 00 	st.w [%a6]4,%d2
80307292:	82 e1       	mov %d1,-2
80307294:	0b 56 00 21 	eq %d2,%d6,%d5
80307298:	0b 71 30 22 	and.lt.u %d2,%d1,%d7
8030729c:	59 60 08 00 	st.w [%a6]8,%d0
803072a0:	59 69 0c 00 	st.w [%a6]12,%d9
803072a4:	59 63 10 00 	st.w [%a6]16,%d3
803072a8:	0b 65 a0 22 	or.lt.u %d2,%d5,%d6
803072ac:	df 02 2b 80 	jne %d2,0,80307302 <_fpadd_parts+0x14c>
803072b0:	1b f0 ff 7f 	addi %d7,%d0,-1
803072b4:	77 93 80 30 	dextr %d3,%d3,%d9,1
803072b8:	06 19       	sh %d9,1
803072ba:	8b f9 9f 00 	addx %d0,%d9,-1
803072be:	8b f3 bf 60 	addc %d6,%d3,-1
803072c2:	0b 56 00 21 	eq %d2,%d6,%d5
803072c6:	0b 01 50 22 	and.ge.u %d2,%d1,%d0
803072ca:	0b 56 a0 22 	or.lt.u %d2,%d6,%d5
803072ce:	02 78       	mov %d8,%d7
803072d0:	c2 f7       	add %d7,-1
803072d2:	df 02 f1 ff 	jne %d2,0,803072b4 <_fpadd_parts+0xfe>
803072d6:	82 32       	mov %d2,3
803072d8:	59 69 0c 00 	st.w [%a6]12,%d9
803072dc:	59 63 10 00 	st.w [%a6]16,%d3
803072e0:	59 68 08 00 	st.w [%a6]8,%d8
803072e4:	74 62       	st.w [%a6],%d2
803072e6:	40 62       	mov.aa %a2,%a6
803072e8:	00 90       	ret 
803072ea:	0b 24 40 90 	addx %d9,%d4,%d2
803072ee:	0b 35 50 30 	addc %d3,%d5,%d3
803072f2:	59 61 04 00 	st.w [%a6]4,%d1
803072f6:	59 60 08 00 	st.w [%a6]8,%d0
803072fa:	59 69 0c 00 	st.w [%a6]12,%d9
803072fe:	59 63 10 00 	st.w [%a6]16,%d3
80307302:	82 32       	mov %d2,3
80307304:	7b 00 00 52 	movh %d5,8192
80307308:	40 62       	mov.aa %a2,%a6
8030730a:	74 62       	st.w [%a6],%d2
8030730c:	0b 53 00 21 	eq %d2,%d3,%d5
80307310:	b7 02 01 20 	insert %d2,%d2,0,0,1
80307314:	0b 53 a0 22 	or.lt.u %d2,%d3,%d5
80307318:	df 02 13 80 	jne %d2,0,8030733e <_fpadd_parts+0x188>
8030731c:	8f f3 1f 20 	sh %d2,%d3,-1
80307320:	77 93 80 5f 	dextr %d5,%d3,%d9,31
80307324:	8f 19 00 31 	and %d3,%d9,1
80307328:	59 62 10 00 	st.w [%a6]16,%d2
8030732c:	19 62 08 00 	ld.w %d2,[%a6]8
80307330:	a6 53       	or %d3,%d5
80307332:	c2 12       	add %d2,1
80307334:	d9 63 08 00 	lea %a3,[%a6]8
80307338:	59 63 0c 00 	st.w [%a6]12,%d3
8030733c:	74 32       	st.w [%a3],%d2
8030733e:	00 90       	ret 
80307340:	40 42       	mov.aa %a2,%a4
80307342:	df 22 fe ff 	jne %d2,2,8030733e <_fpadd_parts+0x188>
80307346:	40 63       	mov.aa %a3,%a6
80307348:	09 44 48 01 	ld.d %e4,[%a4+]8
8030734c:	89 34 48 01 	st.d [%a3+]8,%e4
80307350:	09 44 48 01 	ld.d %e4,[%a4+]8
80307354:	89 34 48 01 	st.d [%a3+]8,%e4
80307358:	44 44       	ld.w %d4,[%a4+]
8030735a:	64 34       	st.w [%a3+],%d4
8030735c:	19 23 04 00 	ld.w %d3,[%a2]4
80307360:	19 52 04 00 	ld.w %d2,[%a5]4
80307364:	40 62       	mov.aa %a2,%a6
80307366:	26 32       	and %d2,%d3
80307368:	59 62 04 00 	st.w [%a6]4,%d2
8030736c:	00 90       	ret 
8030736e:	0b 07 80 60 	sub %d6,%d7,%d0
80307372:	8b 06 44 12 	lt %d1,%d6,64
80307376:	df 01 1d 80 	jne %d1,0,803073b0 <_fpadd_parts+0x1fa>
8030737a:	3f 07 06 00 	jlt %d7,%d0,80307386 <_fpadd_parts+0x1d0>
8030737e:	d2 04       	mov %e4,0
80307380:	02 70       	mov %d0,%d7
80307382:	1d ff 64 ff 	j 8030724a <_fpadd_parts+0x94>
80307386:	d2 02       	mov %e2,0
80307388:	1d ff 61 ff 	j 8030724a <_fpadd_parts+0x94>
8030738c:	40 42       	mov.aa %a2,%a4
8030738e:	df 43 d8 ff 	jne %d3,4,8030733e <_fpadd_parts+0x188>
80307392:	19 43 04 00 	ld.w %d3,[%a4]4
80307396:	19 52 04 00 	ld.w %d2,[%a5]4
8030739a:	7b 00 03 48 	movh %d4,32816
8030739e:	0b 23 10 21 	ne %d2,%d3,%d2
803073a2:	1b c4 42 46 	addi %d4,%d4,25644
803073a6:	80 43       	mov.d %d3,%a4
803073a8:	2b 43 50 22 	seln %d2,%d2,%d3,%d4
803073ac:	60 22       	mov.a %a2,%d2
803073ae:	00 90       	ret 
803073b0:	8b 06 82 02 	ge %d0,%d6,32
803073b4:	2b 54 50 90 	seln %d9,%d0,%d4,%d5
803073b8:	ab 05 a0 80 	seln %d8,%d0,%d5,0
803073bc:	8f f6 01 01 	and %d0,%d6,31
803073c0:	8b 00 02 11 	rsub %d1,%d0,32
803073c4:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
803073c8:	2b 91 40 10 	sel %d1,%d0,%d1,%d9
803073cc:	8b 06 82 a2 	ge %d10,%d6,32
803073d0:	32 50       	rsub %d0
803073d2:	02 19       	mov %d9,%d1
803073d4:	8f f6 01 61 	and %d6,%d6,31
803073d8:	82 f1       	mov %d1,-1
803073da:	0f 08 00 80 	sh %d8,%d8,%d0
803073de:	17 11 80 06 	dextr %d0,%d1,%d1,%d6
803073e2:	0f 61 00 60 	sh %d6,%d1,%d6
803073e6:	2b 60 50 0a 	seln %d0,%d10,%d0,%d6
803073ea:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
803073ee:	0f 64 e0 10 	andn %d1,%d4,%d6
803073f2:	0f 05 e0 60 	andn %d6,%d5,%d0
803073f6:	a6 16       	or %d6,%d1
803073f8:	8b 06 00 95 	or.ne %d9,%d6,0
803073fc:	0b 98 10 48 	mov %e4,%d8,%d9
80307400:	02 70       	mov %d0,%d7
80307402:	1d ff 24 ff 	j 8030724a <_fpadd_parts+0x94>

80307406 <__adddf3>:
80307406:	20 50       	sub.a %sp,80
80307408:	d9 a5 14 00 	lea %a5,[%sp]20
8030740c:	d9 a4 04 00 	lea %a4,[%sp]4
80307410:	89 a4 44 09 	st.d [%sp]4,%e4
80307414:	89 a6 4c 09 	st.d [%sp]12,%e6
80307418:	6d 00 ca 02 	call 803079ac <__unpack_d>
8030741c:	d9 a5 28 00 	lea %a5,[%sp]40
80307420:	d9 a4 0c 00 	lea %a4,[%sp]12
80307424:	6d 00 c4 02 	call 803079ac <__unpack_d>
80307428:	d9 a4 14 00 	lea %a4,[%sp]20
8030742c:	d9 a6 3c 00 	lea %a6,[%sp]60
80307430:	d9 a5 28 00 	lea %a5,[%sp]40
80307434:	6d ff c1 fe 	call 803071b6 <_fpadd_parts>
80307438:	40 24       	mov.aa %a4,%a2
8030743a:	6d 00 ea 01 	call 8030780e <__pack_d>
8030743e:	00 90       	ret 

80307440 <__subdf3>:
80307440:	20 50       	sub.a %sp,80
80307442:	d9 a5 14 00 	lea %a5,[%sp]20
80307446:	d9 a4 04 00 	lea %a4,[%sp]4
8030744a:	89 a4 44 09 	st.d [%sp]4,%e4
8030744e:	89 a6 4c 09 	st.d [%sp]12,%e6
80307452:	6d 00 ad 02 	call 803079ac <__unpack_d>
80307456:	d9 a5 28 00 	lea %a5,[%sp]40
8030745a:	d9 a4 0c 00 	lea %a4,[%sp]12
8030745e:	6d 00 a7 02 	call 803079ac <__unpack_d>
80307462:	19 a2 2c 00 	ld.w %d2,[%sp]44
80307466:	d9 a4 14 00 	lea %a4,[%sp]20
8030746a:	8f 12 80 21 	xor %d2,%d2,1
8030746e:	d9 a6 3c 00 	lea %a6,[%sp]60
80307472:	d9 a5 28 00 	lea %a5,[%sp]40
80307476:	59 a2 2c 00 	st.w [%sp]44,%d2
8030747a:	6d ff 9e fe 	call 803071b6 <_fpadd_parts>
8030747e:	40 24       	mov.aa %a4,%a2
80307480:	6d 00 c7 01 	call 8030780e <__pack_d>
80307484:	00 90       	ret 

80307486 <__muldf3>:
80307486:	20 50       	sub.a %sp,80
80307488:	d9 a5 14 00 	lea %a5,[%sp]20
8030748c:	d9 a4 04 00 	lea %a4,[%sp]4
80307490:	89 a4 44 09 	st.d [%sp]4,%e4
80307494:	89 a6 4c 09 	st.d [%sp]12,%e6
80307498:	6d 00 8a 02 	call 803079ac <__unpack_d>
8030749c:	d9 a5 28 00 	lea %a5,[%sp]40
803074a0:	d9 a4 0c 00 	lea %a4,[%sp]12
803074a4:	6d 00 84 02 	call 803079ac <__unpack_d>
803074a8:	19 a2 14 00 	ld.w %d2,[%sp]20
803074ac:	ff 22 0f 80 	jge.u %d2,2,803074ca <__muldf3+0x44>
803074b0:	19 a3 18 00 	ld.w %d3,[%sp]24
803074b4:	19 a2 2c 00 	ld.w %d2,[%sp]44
803074b8:	d9 a4 14 00 	lea %a4,[%sp]20
803074bc:	0b 23 10 21 	ne %d2,%d3,%d2
803074c0:	59 a2 18 00 	st.w [%sp]24,%d2
803074c4:	6d 00 a5 01 	call 8030780e <__pack_d>
803074c8:	00 90       	ret 
803074ca:	19 a3 28 00 	ld.w %d3,[%sp]40
803074ce:	bf 23 14 80 	jlt.u %d3,2,803074f6 <__muldf3+0x70>
803074d2:	df 42 0a 80 	jne %d2,4,803074e6 <__muldf3+0x60>
803074d6:	91 00 03 48 	movh.a %a4,32816
803074da:	d9 44 6c 06 	lea %a4,[%a4]25644 <8030642c <__thenan_df>>
803074de:	df 23 f3 7f 	jeq %d3,2,803074c4 <__muldf3+0x3e>
803074e2:	1d ff e7 ff 	j 803074b0 <__muldf3+0x2a>
803074e6:	df 43 15 80 	jne %d3,4,80307510 <__muldf3+0x8a>
803074ea:	91 00 03 48 	movh.a %a4,32816
803074ee:	d9 44 6c 06 	lea %a4,[%a4]25644 <8030642c <__thenan_df>>
803074f2:	df 22 e9 7f 	jeq %d2,2,803074c4 <__muldf3+0x3e>
803074f6:	19 a2 2c 00 	ld.w %d2,[%sp]44
803074fa:	19 a3 18 00 	ld.w %d3,[%sp]24
803074fe:	d9 a4 28 00 	lea %a4,[%sp]40
80307502:	0b 23 10 21 	ne %d2,%d3,%d2
80307506:	59 a2 2c 00 	st.w [%sp]44,%d2
8030750a:	6d 00 82 01 	call 8030780e <__pack_d>
8030750e:	00 90       	ret 
80307510:	19 a5 2c 00 	ld.w %d5,[%sp]44
80307514:	19 a4 18 00 	ld.w %d4,[%sp]24
80307518:	0b 45 10 a1 	ne %d10,%d5,%d4
8030751c:	df 22 aa 00 	jeq %d2,2,80307670 <__muldf3+0x1ea>
80307520:	df 23 ae 00 	jeq %d3,2,8030767c <__muldf3+0x1f6>
80307524:	19 a6 34 00 	ld.w %d6,[%sp]52
80307528:	19 a4 20 00 	ld.w %d4,[%sp]32
8030752c:	82 03       	mov %d3,0
8030752e:	73 46 68 00 	mul.u %e0,%d6,%d4
80307532:	19 a2 38 00 	ld.w %d2,[%sp]56
80307536:	82 0b       	mov %d11,0
80307538:	03 36 0a 11 	madd %d1,%d1,%d6,%d3
8030753c:	02 48       	mov %d8,%d4
8030753e:	19 a7 24 00 	ld.w %d7,[%sp]36
80307542:	03 4b 0a 11 	madd %d1,%d1,%d11,%d4
80307546:	73 42 68 40 	mul.u %e4,%d2,%d4
8030754a:	82 0d       	mov %d13,0
8030754c:	82 0c       	mov %d12,0
8030754e:	03 32 0a 55 	madd %d5,%d5,%d2,%d3
80307552:	03 8d 0a 55 	madd %d5,%d5,%d13,%d8
80307556:	73 27 68 80 	mul.u %e8,%d7,%d2
8030755a:	03 d7 0a 99 	madd %d9,%d9,%d7,%d13
8030755e:	03 2c 0a 99 	madd %d9,%d9,%d12,%d2
80307562:	03 67 68 24 	madd.u %e2,%e4,%d7,%d6
80307566:	03 b7 0a 33 	madd %d3,%d3,%d7,%d11
8030756a:	03 6c 0a 33 	madd %d3,%d3,%d12,%d6
8030756e:	0b 35 00 61 	eq %d6,%d5,%d3
80307572:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
80307576:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
8030757a:	02 67       	mov %d7,%d6
8030757c:	82 06       	mov %d6,0
8030757e:	0b 06 40 60 	addx %d6,%d6,%d0
80307582:	0b 12 50 50 	addc %d5,%d2,%d1
80307586:	0b 51 00 41 	eq %d4,%d1,%d5
8030758a:	0b 06 50 42 	and.ge.u %d4,%d6,%d0
8030758e:	0b 51 a0 42 	or.lt.u %d4,%d1,%d5
80307592:	df 04 06 80 	jne %d4,0,8030759e <__muldf3+0x118>
80307596:	8b 1b 80 b0 	addx %d11,%d11,1
8030759a:	8b 07 a0 70 	addc %d7,%d7,0
8030759e:	82 04       	mov %d4,0
803075a0:	0b 83 40 30 	addx %d3,%d3,%d8
803075a4:	0b 94 50 20 	addc %d2,%d4,%d9
803075a8:	0b b3 40 30 	addx %d3,%d3,%d11
803075ac:	0b 72 50 20 	addc %d2,%d2,%d7
803075b0:	19 a4 1c 00 	ld.w %d4,[%sp]28
803075b4:	19 a7 30 00 	ld.w %d7,[%sp]48
803075b8:	59 aa 00 10 	st.w [%sp]64,%d10
803075bc:	0b 74 00 10 	add %d1,%d4,%d7
803075c0:	7b 00 00 42 	movh %d4,8192
803075c4:	1b 41 00 00 	addi %d0,%d1,4
803075c8:	0b 42 00 71 	eq %d7,%d2,%d4
803075cc:	b7 07 01 70 	insert %d7,%d7,0,0,1
803075d0:	59 a0 04 10 	st.w [%sp]68,%d0
803075d4:	0b 42 a0 72 	or.lt.u %d7,%d2,%d4
803075d8:	df 07 2b 80 	jne %d7,0,8030762e <__muldf3+0x1a8>
803075dc:	1b 51 00 70 	addi %d7,%d1,5
803075e0:	8f 13 00 01 	and %d0,%d3,1
803075e4:	02 71       	mov %d1,%d7
803075e6:	df 00 07 00 	jeq %d0,0,803075f4 <__muldf3+0x16e>
803075ea:	77 65 80 6f 	dextr %d6,%d5,%d6,31
803075ee:	06 f5       	sh %d5,-1
803075f0:	b7 f5 81 5f 	insert %d5,%d5,15,31,1
803075f4:	77 32 80 3f 	dextr %d3,%d2,%d3,31
803075f8:	06 f2       	sh %d2,-1
803075fa:	0b 24 30 01 	lt.u %d0,%d4,%d2
803075fe:	0b 24 70 02 	or.eq %d0,%d4,%d2
80307602:	c2 17       	add %d7,1
80307604:	df 00 ee ff 	jne %d0,0,803075e0 <__muldf3+0x15a>
80307608:	59 a1 04 10 	st.w [%sp]68,%d1
8030760c:	8f f3 0f 41 	and %d4,%d3,255
80307610:	8b 04 28 42 	ne %d4,%d4,128
80307614:	df 04 3a 00 	jeq %d4,0,80307688 <__muldf3+0x202>
80307618:	59 a2 0c 10 	st.w [%sp]76,%d2
8030761c:	82 32       	mov %d2,3
8030761e:	59 a3 08 10 	st.w [%sp]72,%d3
80307622:	d9 a4 3c 00 	lea %a4,[%sp]60
80307626:	59 a2 3c 00 	st.w [%sp]60,%d2
8030762a:	1d ff 4d ff 	j 803074c4 <__muldf3+0x3e>
8030762e:	7b 00 00 71 	movh %d7,4096
80307632:	0b 27 30 41 	lt.u %d4,%d7,%d2
80307636:	0b 27 70 42 	or.eq %d4,%d7,%d2
8030763a:	df 04 e9 ff 	jne %d4,0,8030760c <__muldf3+0x186>
8030763e:	77 32 80 20 	dextr %d2,%d2,%d3,1
80307642:	c2 f0       	add %d0,-1
80307644:	06 13       	sh %d3,1
80307646:	ff 05 06 00 	jge %d5,0,80307652 <__muldf3+0x1cc>
8030764a:	8f 13 40 11 	or %d1,%d3,1
8030764e:	0b 21 10 28 	mov %e2,%d1,%d2
80307652:	0b 72 00 41 	eq %d4,%d2,%d7
80307656:	b7 04 01 40 	insert %d4,%d4,0,0,1
8030765a:	77 65 80 50 	dextr %d5,%d5,%d6,1
8030765e:	0b 72 a0 42 	or.lt.u %d4,%d2,%d7
80307662:	06 16       	sh %d6,1
80307664:	df 04 ed ff 	jne %d4,0,8030763e <__muldf3+0x1b8>
80307668:	59 a0 04 10 	st.w [%sp]68,%d0
8030766c:	1d ff d0 ff 	j 8030760c <__muldf3+0x186>
80307670:	59 aa 18 00 	st.w [%sp]24,%d10
80307674:	d9 a4 14 00 	lea %a4,[%sp]20
80307678:	1d ff 26 ff 	j 803074c4 <__muldf3+0x3e>
8030767c:	59 aa 2c 00 	st.w [%sp]44,%d10
80307680:	d9 a4 28 00 	lea %a4,[%sp]40
80307684:	1d ff 20 ff 	j 803074c4 <__muldf3+0x3e>
80307688:	77 32 00 4c 	dextr %d4,%d2,%d3,24
8030768c:	a6 65       	or %d5,%d6
8030768e:	8b 05 20 52 	ne %d5,%d5,0
80307692:	0f 45 e0 40 	andn %d4,%d5,%d4
80307696:	df 04 c1 7f 	jeq %d4,0,80307618 <__muldf3+0x192>
8030769a:	8b 03 88 30 	addx %d3,%d3,128
8030769e:	8b 02 a0 20 	addc %d2,%d2,0
803076a2:	8f f3 cf 31 	andn %d3,%d3,255
803076a6:	1d ff b9 ff 	j 80307618 <__muldf3+0x192>

803076aa <__gedf2>:
803076aa:	20 38       	sub.a %sp,56
803076ac:	d9 a5 10 00 	lea %a5,[%sp]16
803076b0:	40 a4       	mov.aa %a4,%sp
803076b2:	89 a4 40 09 	st.d [%sp],%e4
803076b6:	89 a6 48 09 	st.d [%sp]8,%e6
803076ba:	6d 00 79 01 	call 803079ac <__unpack_d>
803076be:	d9 a5 24 00 	lea %a5,[%sp]36
803076c2:	d9 a4 08 00 	lea %a4,[%sp]8
803076c6:	6d 00 73 01 	call 803079ac <__unpack_d>
803076ca:	19 a3 10 00 	ld.w %d3,[%sp]16
803076ce:	82 f2       	mov %d2,-1
803076d0:	bf 23 0c 80 	jlt.u %d3,2,803076e8 <__gedf2+0x3e>
803076d4:	19 a3 24 00 	ld.w %d3,[%sp]36
803076d8:	bf 23 08 80 	jlt.u %d3,2,803076e8 <__gedf2+0x3e>
803076dc:	d9 a5 24 00 	lea %a5,[%sp]36
803076e0:	d9 a4 10 00 	lea %a4,[%sp]16
803076e4:	6d 00 c3 01 	call 80307a6a <__fpcmp_parts_d>
803076e8:	00 90       	ret 

803076ea <__fixdfsi>:
803076ea:	20 20       	sub.a %sp,32
803076ec:	d9 a5 0c 00 	lea %a5,[%sp]12
803076f0:	d9 a4 04 00 	lea %a4,[%sp]4
803076f4:	89 a4 44 09 	st.d [%sp]4,%e4
803076f8:	6d 00 5a 01 	call 803079ac <__unpack_d>
803076fc:	19 a3 0c 00 	ld.w %d3,[%sp]12
80307700:	82 02       	mov %d2,0
80307702:	bf 33 25 80 	jlt.u %d3,3,8030774c <__fixdfsi+0x62>
80307706:	df 43 29 00 	jeq %d3,4,80307758 <__fixdfsi+0x6e>
8030770a:	19 a3 14 00 	ld.w %d3,[%sp]20
8030770e:	bf 03 1f 00 	jlt %d3,0,8030774c <__fixdfsi+0x62>
80307712:	8b f3 41 22 	lt %d2,%d3,31
80307716:	19 a6 10 00 	ld.w %d6,[%sp]16
8030771a:	df 02 1a 00 	jeq %d2,0,8030774e <__fixdfsi+0x64>
8030771e:	8b c3 03 21 	rsub %d2,%d3,60
80307722:	19 a5 1c 00 	ld.w %d5,[%sp]28
80307726:	19 a4 18 00 	ld.w %d4,[%sp]24
8030772a:	8b 02 82 32 	ge %d3,%d2,32
8030772e:	2b 54 50 43 	seln %d4,%d3,%d4,%d5
80307732:	ab 05 a0 53 	seln %d5,%d3,%d5,0
80307736:	8f f2 01 31 	and %d3,%d2,31
8030773a:	8b 03 02 21 	rsub %d2,%d3,32
8030773e:	17 45 80 22 	dextr %d2,%d5,%d4,%d2
80307742:	2b 42 40 23 	sel %d2,%d3,%d2,%d4
80307746:	df 06 03 00 	jeq %d6,0,8030774c <__fixdfsi+0x62>
8030774a:	32 52       	rsub %d2
8030774c:	00 90       	ret 
8030774e:	82 f2       	mov %d2,-1
80307750:	06 f2       	sh %d2,-1
80307752:	ab 12 00 26 	cadd %d2,%d6,%d2,1
80307756:	00 90       	ret 
80307758:	19 a3 10 00 	ld.w %d3,[%sp]16
8030775c:	82 f2       	mov %d2,-1
8030775e:	06 f2       	sh %d2,-1
80307760:	ab 12 00 23 	cadd %d2,%d3,%d2,1
80307764:	00 90       	ret 

80307766 <__make_dp>:
80307766:	20 18       	sub.a %sp,24
80307768:	09 a2 d8 09 	ld.da %a2,[%sp]24
8030776c:	d9 a4 04 00 	lea %a4,[%sp]4
80307770:	59 a4 04 00 	st.w [%sp]4,%d4
80307774:	59 a5 08 00 	st.w [%sp]8,%d5
80307778:	59 a6 0c 00 	st.w [%sp]12,%d6
8030777c:	89 a2 d0 09 	st.da [%sp]16,%a2
80307780:	6d 00 47 00 	call 8030780e <__pack_d>
80307784:	00 90       	ret 

80307786 <__unpack_f>:
80307786:	54 42       	ld.w %d2,[%a4]
80307788:	8f 12 1e 50 	sh %d5,%d2,-31
8030778c:	37 02 e8 3b 	extr.u %d3,%d2,23,8
80307790:	b7 02 89 4b 	insert %d4,%d2,0,23,9
80307794:	59 55 04 00 	st.w [%a5]4,%d5
80307798:	df 03 16 80 	jne %d3,0,803077c4 <__unpack_f+0x3e>
8030779c:	df 04 25 00 	jeq %d4,0,803077e6 <__unpack_f+0x60>
803077a0:	82 33       	mov %d3,3
803077a2:	8f 74 00 20 	sh %d2,%d4,7
803077a6:	7b 00 00 54 	movh %d5,16384
803077aa:	74 53       	st.w [%a5],%d3
803077ac:	3b 10 f8 3f 	mov %d3,-127
803077b0:	06 12       	sh %d2,1
803077b2:	02 34       	mov %d4,%d3
803077b4:	c2 f3       	add %d3,-1
803077b6:	3f 52 fd ff 	jlt.u %d2,%d5,803077b0 <__unpack_f+0x2a>
803077ba:	59 54 08 00 	st.w [%a5]8,%d4
803077be:	59 52 0c 00 	st.w [%a5]12,%d2
803077c2:	00 90       	ret 
803077c4:	8b f3 2f 52 	ne %d5,%d3,255
803077c8:	df 05 12 00 	jeq %d5,0,803077ec <__unpack_f+0x66>
803077cc:	82 32       	mov %d2,3
803077ce:	1b 13 f8 3f 	addi %d3,%d3,-127
803077d2:	74 52       	st.w [%a5],%d2
803077d4:	8f 74 00 20 	sh %d2,%d4,7
803077d8:	b7 f2 01 2f 	insert %d2,%d2,15,30,1
803077dc:	59 53 08 00 	st.w [%a5]8,%d3
803077e0:	59 52 0c 00 	st.w [%a5]12,%d2
803077e4:	00 90       	ret 
803077e6:	82 22       	mov %d2,2
803077e8:	74 52       	st.w [%a5],%d2
803077ea:	00 90       	ret 
803077ec:	df 04 05 80 	jne %d4,0,803077f6 <__unpack_f+0x70>
803077f0:	82 42       	mov %d2,4
803077f2:	74 52       	st.w [%a5],%d2
803077f4:	00 90       	ret 
803077f6:	37 02 61 3b 	extr.u %d3,%d2,22,1
803077fa:	06 72       	sh %d2,7
803077fc:	74 53       	st.w [%a5],%d3
803077fe:	7b 00 00 32 	movh %d3,8192
80307802:	1b 03 f8 3f 	addi %d3,%d3,-128
80307806:	26 32       	and %d2,%d3
80307808:	59 52 0c 00 	st.w [%a5]12,%d2
8030780c:	00 90       	ret 

8030780e <__pack_d>:
8030780e:	54 44       	ld.w %d4,[%a4]
80307810:	19 43 0c 00 	ld.w %d3,[%a4]12
80307814:	19 42 10 00 	ld.w %d2,[%a4]16
80307818:	19 41 04 00 	ld.w %d1,[%a4]4
8030781c:	bf 24 56 80 	jlt.u %d4,2,803078c8 <__pack_d+0xba>
80307820:	7b 00 ff 57 	movh %d5,32752
80307824:	d2 06       	mov %e6,0
80307826:	df 44 0b 00 	jeq %d4,4,8030783c <__pack_d+0x2e>
8030782a:	0f 23 a0 50 	or %d5,%d3,%d2
8030782e:	8b 05 00 02 	eq %d0,%d5,0
80307832:	8b 24 e0 04 	or.eq %d0,%d4,2
80307836:	82 05       	mov %d5,0
80307838:	df 00 0c 00 	jeq %d0,0,80307850 <__pack_d+0x42>
8030783c:	0b 10 00 28 	mov %e2,%d1
80307840:	a6 75       	or %d5,%d7
80307842:	8f f2 01 20 	sh %d2,%d2,31
80307846:	0f 25 a0 40 	or %d4,%d5,%d2
8030784a:	02 43       	mov %d3,%d4
8030784c:	02 62       	mov %d2,%d6
8030784e:	00 90       	ret 
80307850:	19 44 08 00 	ld.w %d4,[%a4]8
80307854:	3b 20 c0 0f 	mov %d0,-1022
80307858:	3f 04 41 00 	jlt %d4,%d0,803078da <__pack_d+0xcc>
8030785c:	3b 00 40 00 	mov %d0,1024
80307860:	7b 00 ff 57 	movh %d5,32752
80307864:	7f 04 ec 7f 	jge %d4,%d0,8030783c <__pack_d+0x2e>
80307868:	8f f3 0f 51 	and %d5,%d3,255
8030786c:	8b 05 28 52 	ne %d5,%d5,128
80307870:	df 05 1b 00 	jeq %d5,0,803078a6 <__pack_d+0x98>
80307874:	8b f3 87 30 	addx %d3,%d3,127
80307878:	8b 02 a0 20 	addc %d2,%d2,0
8030787c:	7b 00 00 52 	movh %d5,8192
80307880:	0b 25 30 61 	lt.u %d6,%d5,%d2
80307884:	0b 25 70 62 	or.eq %d6,%d5,%d2
80307888:	df 06 19 80 	jne %d6,0,803078ba <__pack_d+0xac>
8030788c:	1b f4 3f 40 	addi %d4,%d4,1023
80307890:	0b 40 00 48 	mov %e4,%d4
80307894:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80307898:	06 82       	sh %d2,-8
8030789a:	b7 02 0c 7a 	insert %d7,%d2,0,20,12
8030789e:	8f 44 01 50 	sh %d5,%d4,20
803078a2:	1d ff cd ff 	j 8030783c <__pack_d+0x2e>
803078a6:	8f 03 10 51 	and %d5,%d3,256
803078aa:	df 05 e9 7f 	jeq %d5,0,8030787c <__pack_d+0x6e>
803078ae:	8b 03 88 30 	addx %d3,%d3,128
803078b2:	8b 02 a0 20 	addc %d2,%d2,0
803078b6:	1d ff e3 ff 	j 8030787c <__pack_d+0x6e>
803078ba:	77 32 80 3f 	dextr %d3,%d2,%d3,31
803078be:	1b 04 40 40 	addi %d4,%d4,1024
803078c2:	06 f2       	sh %d2,-1
803078c4:	1d ff e6 ff 	j 80307890 <__pack_d+0x82>
803078c8:	77 32 00 6c 	dextr %d6,%d2,%d3,24
803078cc:	06 82       	sh %d2,-8
803078ce:	b7 12 8d 79 	insert %d7,%d2,1,19,13
803078d2:	7b 00 ff 57 	movh %d5,32752
803078d6:	1d ff b3 ff 	j 8030783c <__pack_d+0x2e>
803078da:	0b 40 80 40 	sub %d4,%d0,%d4
803078de:	8b 94 83 02 	ge %d0,%d4,57
803078e2:	df 00 ad ff 	jne %d0,0,8030783c <__pack_d+0x2e>
803078e6:	8b 04 82 52 	ge %d5,%d4,32
803078ea:	2b 23 50 05 	seln %d0,%d5,%d3,%d2
803078ee:	ab 02 a0 75 	seln %d7,%d5,%d2,0
803078f2:	8f f4 01 51 	and %d5,%d4,31
803078f6:	8b 05 02 61 	rsub %d6,%d5,32
803078fa:	17 07 80 66 	dextr %d6,%d7,%d0,%d6
803078fe:	2b 06 40 65 	sel %d6,%d5,%d6,%d0
80307902:	8b 04 82 82 	ge %d8,%d4,32
80307906:	32 55       	rsub %d5
80307908:	02 60       	mov %d0,%d6
8030790a:	8f f4 01 41 	and %d4,%d4,31
8030790e:	82 f6       	mov %d6,-1
80307910:	0f 57 00 70 	sh %d7,%d7,%d5
80307914:	17 66 80 54 	dextr %d5,%d6,%d6,%d4
80307918:	0f 46 00 40 	sh %d4,%d6,%d4
8030791c:	2b 45 50 58 	seln %d5,%d8,%d5,%d4
80307920:	ab 04 a0 48 	seln %d4,%d8,%d4,0
80307924:	0f 43 e0 30 	andn %d3,%d3,%d4
80307928:	0f 52 e0 20 	andn %d2,%d2,%d5
8030792c:	a6 32       	or %d2,%d3
8030792e:	02 03       	mov %d3,%d0
80307930:	8b 02 00 35 	or.ne %d3,%d2,0
80307934:	8f f3 0f 51 	and %d5,%d3,255
80307938:	82 12       	mov %d2,1
8030793a:	8b 05 08 24 	and.eq %d2,%d5,128
8030793e:	02 74       	mov %d4,%d7
80307940:	df 02 14 80 	jne %d2,0,80307968 <__pack_d+0x15a>
80307944:	8b f3 87 30 	addx %d3,%d3,127
80307948:	8b 07 a0 20 	addc %d2,%d7,0
8030794c:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80307950:	7b 00 00 31 	movh %d3,4096
80307954:	8f 82 1f 70 	sh %d7,%d2,-8
80307958:	0b 32 50 21 	ge.u %d2,%d2,%d3
8030795c:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
80307960:	8f 42 01 50 	sh %d5,%d2,20
80307964:	1d ff 6c ff 	j 8030783c <__pack_d+0x2e>
80307968:	8b 03 88 60 	addx %d6,%d3,128
8030796c:	8b 07 a0 20 	addc %d2,%d7,0
80307970:	7b 00 00 a1 	movh %d10,4096
80307974:	8f 82 1f 70 	sh %d7,%d2,-8
80307978:	77 62 00 6c 	dextr %d6,%d2,%d6,24
8030797c:	0b a2 50 21 	ge.u %d2,%d2,%d10
80307980:	53 12 40 80 	mul.u %e8,%d2,1
80307984:	8f 03 10 01 	and %d0,%d3,256
80307988:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
8030798c:	8f 48 01 50 	sh %d5,%d8,20
80307990:	df 00 56 ff 	jne %d0,0,8030783c <__pack_d+0x2e>
80307994:	8f 84 1f 70 	sh %d7,%d4,-8
80307998:	0b a4 50 21 	ge.u %d2,%d4,%d10
8030799c:	77 34 00 6c 	dextr %d6,%d4,%d3,24
803079a0:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
803079a4:	8f 42 01 50 	sh %d5,%d2,20
803079a8:	1d ff 4a ff 	j 8030783c <__pack_d+0x2e>

803079ac <__unpack_d>:
803079ac:	09 48 40 09 	ld.d %e8,[%a4]
803079b0:	3b f0 7f 00 	mov %d0,2047
803079b4:	8f 19 1e 70 	sh %d7,%d9,-31
803079b8:	37 09 6b 5a 	extr.u %d5,%d9,20,11
803079bc:	b7 09 0c 6a 	insert %d6,%d9,0,20,12
803079c0:	59 57 04 00 	st.w [%a5]4,%d7
803079c4:	df 05 26 80 	jne %d5,0,80307a10 <__unpack_d+0x64>
803079c8:	8b 08 20 22 	ne %d2,%d8,0
803079cc:	8b 06 00 25 	or.ne %d2,%d6,0
803079d0:	df 02 33 00 	jeq %d2,0,80307a36 <__unpack_d+0x8a>
803079d4:	82 32       	mov %d2,3
803079d6:	77 86 00 34 	dextr %d3,%d6,%d8,8
803079da:	8f 88 00 40 	sh %d4,%d8,8
803079de:	74 52       	st.w [%a5],%d2
803079e0:	3b 10 c0 5f 	mov %d5,-1023
803079e4:	7b 00 00 61 	movh %d6,4096
803079e8:	77 43 80 30 	dextr %d3,%d3,%d4,1
803079ec:	02 57       	mov %d7,%d5
803079ee:	0b 63 00 21 	eq %d2,%d3,%d6
803079f2:	b7 02 01 20 	insert %d2,%d2,0,0,1
803079f6:	06 14       	sh %d4,1
803079f8:	0b 63 a0 22 	or.lt.u %d2,%d3,%d6
803079fc:	c2 f5       	add %d5,-1
803079fe:	df 02 f5 ff 	jne %d2,0,803079e8 <__unpack_d+0x3c>
80307a02:	59 57 08 00 	st.w [%a5]8,%d7
80307a06:	59 54 0c 00 	st.w [%a5]12,%d4
80307a0a:	59 53 10 00 	st.w [%a5]16,%d3
80307a0e:	00 90       	ret 
80307a10:	5f 05 16 00 	jeq %d5,%d0,80307a3c <__unpack_d+0x90>
80307a14:	82 32       	mov %d2,3
80307a16:	1b 15 c0 5f 	addi %d5,%d5,-1023
80307a1a:	8f 88 00 40 	sh %d4,%d8,8
80307a1e:	74 52       	st.w [%a5],%d2
80307a20:	77 86 00 24 	dextr %d2,%d6,%d8,8
80307a24:	59 55 08 00 	st.w [%a5]8,%d5
80307a28:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
80307a2c:	59 54 0c 00 	st.w [%a5]12,%d4
80307a30:	59 52 10 00 	st.w [%a5]16,%d2
80307a34:	00 90       	ret 
80307a36:	82 22       	mov %d2,2
80307a38:	74 52       	st.w [%a5],%d2
80307a3a:	00 90       	ret 
80307a3c:	8b 08 20 52 	ne %d5,%d8,0
80307a40:	8b 06 00 55 	or.ne %d5,%d6,0
80307a44:	df 05 05 80 	jne %d5,0,80307a4e <__unpack_d+0xa2>
80307a48:	82 42       	mov %d2,4
80307a4a:	74 52       	st.w [%a5],%d2
80307a4c:	00 90       	ret 
80307a4e:	77 89 00 34 	dextr %d3,%d9,%d8,8
80307a52:	37 09 e1 49 	extr.u %d4,%d9,19,1
80307a56:	b7 03 85 3d 	insert %d3,%d3,0,27,5
80307a5a:	8f 88 00 20 	sh %d2,%d8,8
80307a5e:	74 54       	st.w [%a5],%d4
80307a60:	59 52 0c 00 	st.w [%a5]12,%d2
80307a64:	59 53 10 00 	st.w [%a5]16,%d3
80307a68:	00 90       	ret 

80307a6a <__fpcmp_parts_d>:
80307a6a:	54 43       	ld.w %d3,[%a4]
80307a6c:	82 12       	mov %d2,1
80307a6e:	bf 23 45 80 	jlt.u %d3,2,80307af8 <__fpcmp_parts_d+0x8e>
80307a72:	54 54       	ld.w %d4,[%a5]
80307a74:	bf 24 42 80 	jlt.u %d4,2,80307af8 <__fpcmp_parts_d+0x8e>
80307a78:	8b 44 00 52 	eq %d5,%d4,4
80307a7c:	8b 43 00 54 	and.eq %d5,%d3,4
80307a80:	df 05 50 80 	jne %d5,0,80307b20 <__fpcmp_parts_d+0xb6>
80307a84:	df 43 45 00 	jeq %d3,4,80307b0e <__fpcmp_parts_d+0xa4>
80307a88:	df 44 3d 00 	jeq %d4,4,80307b02 <__fpcmp_parts_d+0x98>
80307a8c:	8b 24 00 52 	eq %d5,%d4,2
80307a90:	8b 23 00 54 	and.eq %d5,%d3,2
80307a94:	82 02       	mov %d2,0
80307a96:	df 05 31 80 	jne %d5,0,80307af8 <__fpcmp_parts_d+0x8e>
80307a9a:	df 23 34 00 	jeq %d3,2,80307b02 <__fpcmp_parts_d+0x98>
80307a9e:	19 42 04 00 	ld.w %d2,[%a4]4
80307aa2:	df 24 2c 00 	jeq %d4,2,80307afa <__fpcmp_parts_d+0x90>
80307aa6:	19 53 04 00 	ld.w %d3,[%a5]4
80307aaa:	5f 23 28 80 	jne %d3,%d2,80307afa <__fpcmp_parts_d+0x90>
80307aae:	19 44 08 00 	ld.w %d4,[%a4]8
80307ab2:	19 53 08 00 	ld.w %d3,[%a5]8
80307ab6:	3f 43 22 00 	jlt %d3,%d4,80307afa <__fpcmp_parts_d+0x90>
80307aba:	3f 34 2f 00 	jlt %d4,%d3,80307b18 <__fpcmp_parts_d+0xae>
80307abe:	19 45 10 00 	ld.w %d5,[%a4]16
80307ac2:	19 56 10 00 	ld.w %d6,[%a5]16
80307ac6:	19 40 0c 00 	ld.w %d0,[%a4]12
80307aca:	0b 65 00 41 	eq %d4,%d5,%d6
80307ace:	19 57 0c 00 	ld.w %d7,[%a5]12
80307ad2:	02 43       	mov %d3,%d4
80307ad4:	0b 07 50 32 	and.ge.u %d3,%d7,%d0
80307ad8:	0b 70 50 42 	and.ge.u %d4,%d0,%d7
80307adc:	0b 65 a0 32 	or.lt.u %d3,%d5,%d6
80307ae0:	0b 56 a0 42 	or.lt.u %d4,%d6,%d5
80307ae4:	82 f5       	mov %d5,-1
80307ae6:	ab 15 a0 52 	seln %d5,%d2,%d5,1
80307aea:	82 16       	mov %d6,1
80307aec:	ab f6 bf 22 	seln %d2,%d2,%d6,-1
80307af0:	ab 05 a0 44 	seln %d4,%d4,%d5,0
80307af4:	2b 24 40 23 	sel %d2,%d3,%d4,%d2
80307af8:	00 90       	ret 
80307afa:	82 13       	mov %d3,1
80307afc:	ab f3 bf 22 	seln %d2,%d2,%d3,-1
80307b00:	00 90       	ret 
80307b02:	19 53 04 00 	ld.w %d3,[%a5]4
80307b06:	82 f2       	mov %d2,-1
80307b08:	ab 12 a0 23 	seln %d2,%d3,%d2,1
80307b0c:	00 90       	ret 
80307b0e:	19 43 04 00 	ld.w %d3,[%a4]4
80307b12:	ab f2 bf 23 	seln %d2,%d3,%d2,-1
80307b16:	00 90       	ret 
80307b18:	82 f3       	mov %d3,-1
80307b1a:	ab 13 a0 22 	seln %d2,%d2,%d3,1
80307b1e:	00 90       	ret 
80307b20:	19 53 04 00 	ld.w %d3,[%a5]4
80307b24:	19 42 04 00 	ld.w %d2,[%a4]4
80307b28:	0b 23 80 20 	sub %d2,%d3,%d2
80307b2c:	00 90       	ret 

80307b2e <__do_global_ctors_aux>:
80307b2e:	91 10 03 28 	movh.a %a2,32817
80307b32:	d9 22 e0 3a 	lea %a2,[%a2]-21280 <8030ace0 <__CTOR_END__>>
80307b36:	19 22 fc ff 	ld.w %d2,[%a2]-4 <8030fffc <__DTOR_END__+0x5304>>
80307b3a:	d9 23 fc ff 	lea %a3,[%a2]-4 <8030fffc <__DTOR_END__+0x5304>>
80307b3e:	df f2 0a 00 	jeq %d2,-1,80307b52 <__do_global_ctors_aux+0x24>
80307b42:	40 3c       	mov.aa %a12,%a3
80307b44:	60 22       	mov.a %a2,%d2
80307b46:	b0 cc       	add.a %a12,-4
80307b48:	2d 02 00 00 	calli %a2
80307b4c:	54 c2       	ld.w %d2,[%a12]
80307b4e:	df f2 fb ff 	jne %d2,-1,80307b44 <__do_global_ctors_aux+0x16>
80307b52:	00 90       	ret 

80307b54 <call___do_global_ctors_aux>:
80307b54:	00 90       	ret 

80307b56 <IfxScuCcu_calRGainParameters>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxScuCcu_calRGainParameters(IfxScuCcu_ModulationAmplitude modamp, IfxScuCcu_RGain_Values *RGain_P)
{
80307b56:	40 ae       	mov.aa %a14,%sp
80307b58:	20 28       	sub.a %sp,40
80307b5a:	59 e4 dc ff 	st.w [%a14]-36,%d4
80307b5e:	b5 e4 d8 ff 	st.a [%a14]-40,%a4
    float32  mod_amp       = IfxScuCcu_MA_percent[modamp];
80307b62:	91 00 03 28 	movh.a %a2,32816
80307b66:	d9 22 60 16 	lea %a2,[%a2]25696 <80306460 <IfxScuCcu_MA_percent>>
80307b6a:	19 e2 dc ff 	ld.w %d2,[%a14]-36 <80306460 <IfxScuCcu_MA_percent>>
80307b6e:	06 22       	sh %d2,2
80307b70:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80307b74:	54 22       	ld.w %d2,[%a2]
80307b76:	59 e2 fc ff 	st.w [%a14]-4,%d2
    float32 *RGainNom_Temp = &(RGain_P->RGainNom);
80307b7a:	19 e2 d8 ff 	ld.w %d2,[%a14]-40
80307b7e:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    uint16  *RGain_Temp    = &(RGain_P->RGainHex);
80307b82:	19 e2 d8 ff 	ld.w %d2,[%a14]-40
80307b86:	c2 42       	add %d2,4
80307b88:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    Ifx_SCU *scu           = &MODULE_SCU;
80307b8c:	7b 30 00 2f 	movh %d2,61443
80307b90:	1b 02 00 26 	addi %d2,%d2,24576
80307b94:	59 e2 f0 ff 	st.w [%a14]-16,%d2

IFX_INLINE float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
80307b98:	91 30 00 2f 	movh.a %a2,61443
80307b9c:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
80307ba0:	54 22       	ld.w %d2,[%a2]
80307ba2:	37 02 62 2f 	extr.u %d2,%d2,30,2
80307ba6:	8f f2 0f 21 	and %d2,%d2,255
80307baa:	df 02 0a 80 	jne %d2,0,80307bbe <IfxScuCcu_calRGainParameters+0x68>
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80307bae:	7b f0 cb 24 	movh %d2,19647
80307bb2:	1b 02 c2 2b 	addi %d2,%d2,-17376
80307bb6:	59 e2 e4 ff 	st.w [%a14]-28,%d2
80307bba:	1d 00 2b 00 	j 80307c10 <IfxScuCcu_calRGainParameters+0xba>
    }
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
80307bbe:	91 30 00 2f 	movh.a %a2,61443
80307bc2:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
80307bc6:	54 22       	ld.w %d2,[%a2]
80307bc8:	37 02 62 2f 	extr.u %d2,%d2,30,2
80307bcc:	8f f2 0f 21 	and %d2,%d2,255
80307bd0:	df 12 0a 80 	jne %d2,1,80307be4 <IfxScuCcu_calRGainParameters+0x8e>
    {
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
80307bd4:	7b 90 b9 24 	movh %d2,19353
80307bd8:	1b 02 68 29 	addi %d2,%d2,-27008
80307bdc:	59 e2 e4 ff 	st.w [%a14]-28,%d2
80307be0:	1d 00 18 00 	j 80307c10 <IfxScuCcu_calRGainParameters+0xba>
    }
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
80307be4:	91 30 00 2f 	movh.a %a2,61443
80307be8:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
80307bec:	54 22       	ld.w %d2,[%a2]
80307bee:	37 02 62 2f 	extr.u %d2,%d2,30,2
80307bf2:	8f f2 0f 21 	and %d2,%d2,255
80307bf6:	df 22 0a 80 	jne %d2,2,80307c0a <IfxScuCcu_calRGainParameters+0xb4>
    {
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
80307bfa:	7b 90 b9 24 	movh %d2,19353
80307bfe:	1b 02 68 29 	addi %d2,%d2,-27008
80307c02:	59 e2 e4 ff 	st.w [%a14]-28,%d2
80307c06:	1d 00 05 00 	j 80307c10 <IfxScuCcu_calRGainParameters+0xba>
    }
    else
    {
        /* Reserved values, this */
        freq = 0.0f;
80307c0a:	82 02       	mov %d2,0
80307c0c:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    }

    return freq;
80307c10:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
    float32  Fosc_Hz       = IfxScuCcu_getOscFrequency();
80307c14:	59 e2 ec ff 	st.w [%a14]-20,%d2
    float32  Fdco_hz       = (Fosc_Hz * (scu->SYSPLLCON0.B.NDIV + 1)) / (scu->SYSPLLCON0.B.PDIV + 1);
80307c18:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80307c1c:	d9 22 18 00 	lea %a2,[%a2]24
80307c20:	54 22       	ld.w %d2,[%a2]
80307c22:	37 02 e7 24 	extr.u %d2,%d2,9,7
80307c26:	8f f2 0f 21 	and %d2,%d2,255
80307c2a:	c2 12       	add %d2,1
80307c2c:	4b 02 41 31 	itof %d3,%d2
80307c30:	19 e2 ec ff 	ld.w %d2,[%a14]-20
80307c34:	4b 23 41 30 	mul.f %d3,%d3,%d2
80307c38:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80307c3c:	d9 22 18 00 	lea %a2,[%a2]24
80307c40:	54 22       	ld.w %d2,[%a2]
80307c42:	37 02 63 2c 	extr.u %d2,%d2,24,3
80307c46:	8f f2 0f 21 	and %d2,%d2,255
80307c4a:	c2 12       	add %d2,1
80307c4c:	4b 02 41 21 	itof %d2,%d2
80307c50:	4b 23 51 20 	div.f %d2,%d3,%d2
80307c54:	59 e2 e8 ff 	st.w [%a14]-24,%d2

    *RGainNom_Temp = IFXSCUCCU_GET_RGAIN_NOM(mod_amp, Fdco_hz);
80307c58:	19 e2 fc ff 	ld.w %d2,[%a14]-4
80307c5c:	7b 80 2c 34 	movh %d3,17096
80307c60:	4b 32 51 20 	div.f %d2,%d2,%d3
80307c64:	6b 02 21 32 	add.f %d3,%d2,%d2
80307c68:	19 e2 e8 ff 	ld.w %d2,[%a14]-24
80307c6c:	7b c0 a5 44 	movh %d4,19036
80307c70:	1b 04 a0 4b 	addi %d4,%d4,-17920
80307c74:	4b 42 51 20 	div.f %d2,%d2,%d4
80307c78:	4b 23 41 20 	mul.f %d2,%d3,%d2
80307c7c:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80307c80:	74 22       	st.w [%a2],%d2
    *RGain_Temp    = IFXSCUCCU_GET_RGAIN_HEX(*RGainNom_Temp);
80307c82:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80307c86:	54 22       	ld.w %d2,[%a2]
80307c88:	7b 00 20 34 	movh %d3,16896
80307c8c:	4b 32 41 20 	mul.f %d2,%d2,%d3
80307c90:	7b 00 f0 33 	movh %d3,16128
80307c94:	6b 03 21 22 	add.f %d2,%d2,%d3
80307c98:	4b 02 71 21 	ftouz %d2,%d2
80307c9c:	37 02 70 20 	extr.u %d2,%d2,0,16
80307ca0:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
80307ca4:	b4 22       	st.h [%a2],%d2
}
80307ca6:	00 00       	nop 
80307ca8:	00 90       	ret 

80307caa <IfxScuCcu_getPerPllFrequency1>:
    return mscFreq;
}


float32 IfxScuCcu_getPerPllFrequency1(void)
{
80307caa:	40 ae       	mov.aa %a14,%sp
80307cac:	20 10       	sub.a %sp,16
    Ifx_SCU *scu = &MODULE_SCU;
80307cae:	7b 30 00 2f 	movh %d2,61443
80307cb2:	1b 02 00 26 	addi %d2,%d2,24576
80307cb6:	59 e2 fc ff 	st.w [%a14]-4,%d2
    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
80307cba:	91 30 00 2f 	movh.a %a2,61443
80307cbe:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
80307cc2:	54 22       	ld.w %d2,[%a2]
80307cc4:	37 02 62 2f 	extr.u %d2,%d2,30,2
80307cc8:	8f f2 0f 21 	and %d2,%d2,255
80307ccc:	df 02 0a 80 	jne %d2,0,80307ce0 <IfxScuCcu_getPerPllFrequency1+0x36>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80307cd0:	7b f0 cb 24 	movh %d2,19647
80307cd4:	1b 02 c2 2b 	addi %d2,%d2,-17376
80307cd8:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80307cdc:	1d 00 2b 00 	j 80307d32 <IfxScuCcu_getPerPllFrequency1+0x88>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
80307ce0:	91 30 00 2f 	movh.a %a2,61443
80307ce4:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
80307ce8:	54 22       	ld.w %d2,[%a2]
80307cea:	37 02 62 2f 	extr.u %d2,%d2,30,2
80307cee:	8f f2 0f 21 	and %d2,%d2,255
80307cf2:	df 12 0a 80 	jne %d2,1,80307d06 <IfxScuCcu_getPerPllFrequency1+0x5c>
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
80307cf6:	7b 90 b9 24 	movh %d2,19353
80307cfa:	1b 02 68 29 	addi %d2,%d2,-27008
80307cfe:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80307d02:	1d 00 18 00 	j 80307d32 <IfxScuCcu_getPerPllFrequency1+0x88>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
80307d06:	91 30 00 2f 	movh.a %a2,61443
80307d0a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
80307d0e:	54 22       	ld.w %d2,[%a2]
80307d10:	37 02 62 2f 	extr.u %d2,%d2,30,2
80307d14:	8f f2 0f 21 	and %d2,%d2,255
80307d18:	df 22 0a 80 	jne %d2,2,80307d2c <IfxScuCcu_getPerPllFrequency1+0x82>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
80307d1c:	7b 90 b9 24 	movh %d2,19353
80307d20:	1b 02 68 29 	addi %d2,%d2,-27008
80307d24:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80307d28:	1d 00 05 00 	j 80307d32 <IfxScuCcu_getPerPllFrequency1+0x88>
        freq = 0.0f;
80307d2c:	82 02       	mov %d2,0
80307d2e:	59 e2 f0 ff 	st.w [%a14]-16,%d2
    return freq;
80307d32:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
    float32  pllFrequency1;
    float32  oscFreq;
    oscFreq       = IfxScuCcu_getOscFrequency();
80307d36:	59 e2 f8 ff 	st.w [%a14]-8,%d2

    pllFrequency1 = (oscFreq * (scu->PERPLLCON0.B.NDIV + 1)) / ((scu->PERPLLCON0.B.PDIV + 1) * (scu->PERPLLCON1.B.K2DIV + 1));
80307d3a:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80307d3e:	d9 22 28 00 	lea %a2,[%a2]40
80307d42:	54 22       	ld.w %d2,[%a2]
80307d44:	37 02 e7 24 	extr.u %d2,%d2,9,7
80307d48:	8f f2 0f 21 	and %d2,%d2,255
80307d4c:	c2 12       	add %d2,1
80307d4e:	4b 02 41 31 	itof %d3,%d2
80307d52:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80307d56:	4b 23 41 30 	mul.f %d3,%d3,%d2
80307d5a:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80307d5e:	d9 22 28 00 	lea %a2,[%a2]40
80307d62:	54 22       	ld.w %d2,[%a2]
80307d64:	37 02 63 2c 	extr.u %d2,%d2,24,3
80307d68:	8f f2 0f 21 	and %d2,%d2,255
80307d6c:	1b 12 00 40 	addi %d4,%d2,1
80307d70:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80307d74:	d9 22 2c 00 	lea %a2,[%a2]44
80307d78:	54 22       	ld.w %d2,[%a2]
80307d7a:	37 02 63 20 	extr.u %d2,%d2,0,3
80307d7e:	8f f2 0f 21 	and %d2,%d2,255
80307d82:	c2 12       	add %d2,1
80307d84:	e2 42       	mul %d2,%d4
80307d86:	4b 02 41 21 	itof %d2,%d2
80307d8a:	4b 23 51 20 	div.f %d2,%d3,%d2
80307d8e:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    return pllFrequency1;
80307d92:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
}
80307d96:	00 90       	ret 

80307d98 <IfxScuCcu_getPerPllFrequency2>:


float32 IfxScuCcu_getPerPllFrequency2(void)
{
80307d98:	40 ae       	mov.aa %a14,%sp
80307d9a:	20 10       	sub.a %sp,16
    Ifx_SCU *scu = &MODULE_SCU;
80307d9c:	7b 30 00 2f 	movh %d2,61443
80307da0:	1b 02 00 26 	addi %d2,%d2,24576
80307da4:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
80307da8:	91 30 00 2f 	movh.a %a2,61443
80307dac:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
80307db0:	54 22       	ld.w %d2,[%a2]
80307db2:	37 02 62 2f 	extr.u %d2,%d2,30,2
80307db6:	8f f2 0f 21 	and %d2,%d2,255
80307dba:	df 02 0a 80 	jne %d2,0,80307dce <IfxScuCcu_getPerPllFrequency2+0x36>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80307dbe:	7b f0 cb 24 	movh %d2,19647
80307dc2:	1b 02 c2 2b 	addi %d2,%d2,-17376
80307dc6:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80307dca:	1d 00 2b 00 	j 80307e20 <IfxScuCcu_getPerPllFrequency2+0x88>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
80307dce:	91 30 00 2f 	movh.a %a2,61443
80307dd2:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
80307dd6:	54 22       	ld.w %d2,[%a2]
80307dd8:	37 02 62 2f 	extr.u %d2,%d2,30,2
80307ddc:	8f f2 0f 21 	and %d2,%d2,255
80307de0:	df 12 0a 80 	jne %d2,1,80307df4 <IfxScuCcu_getPerPllFrequency2+0x5c>
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
80307de4:	7b 90 b9 24 	movh %d2,19353
80307de8:	1b 02 68 29 	addi %d2,%d2,-27008
80307dec:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80307df0:	1d 00 18 00 	j 80307e20 <IfxScuCcu_getPerPllFrequency2+0x88>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
80307df4:	91 30 00 2f 	movh.a %a2,61443
80307df8:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
80307dfc:	54 22       	ld.w %d2,[%a2]
80307dfe:	37 02 62 2f 	extr.u %d2,%d2,30,2
80307e02:	8f f2 0f 21 	and %d2,%d2,255
80307e06:	df 22 0a 80 	jne %d2,2,80307e1a <IfxScuCcu_getPerPllFrequency2+0x82>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
80307e0a:	7b 90 b9 24 	movh %d2,19353
80307e0e:	1b 02 68 29 	addi %d2,%d2,-27008
80307e12:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80307e16:	1d 00 05 00 	j 80307e20 <IfxScuCcu_getPerPllFrequency2+0x88>
        freq = 0.0f;
80307e1a:	82 02       	mov %d2,0
80307e1c:	59 e2 f0 ff 	st.w [%a14]-16,%d2
    return freq;
80307e20:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
    float32  pllFrequency2;
    float32  oscFreq;
    oscFreq = IfxScuCcu_getOscFrequency();
80307e24:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    if (!(scu->PERPLLCON0.B.DIVBY))
80307e28:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80307e2c:	d9 22 28 00 	lea %a2,[%a2]40
80307e30:	54 22       	ld.w %d2,[%a2]
80307e32:	37 02 61 20 	extr.u %d2,%d2,0,1
80307e36:	8f f2 0f 21 	and %d2,%d2,255
80307e3a:	df 02 36 80 	jne %d2,0,80307ea6 <IfxScuCcu_getPerPllFrequency2+0x10e>
    {
        pllFrequency2 = (oscFreq * (scu->PERPLLCON0.B.NDIV + 1)) / ((scu->PERPLLCON0.B.PDIV + 1) * (scu->PERPLLCON1.B.K3DIV + 1) * 1.6f);
80307e3e:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80307e42:	d9 22 28 00 	lea %a2,[%a2]40
80307e46:	54 22       	ld.w %d2,[%a2]
80307e48:	37 02 e7 24 	extr.u %d2,%d2,9,7
80307e4c:	8f f2 0f 21 	and %d2,%d2,255
80307e50:	c2 12       	add %d2,1
80307e52:	4b 02 41 31 	itof %d3,%d2
80307e56:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
80307e5a:	4b 23 41 30 	mul.f %d3,%d3,%d2
80307e5e:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80307e62:	d9 22 28 00 	lea %a2,[%a2]40
80307e66:	54 22       	ld.w %d2,[%a2]
80307e68:	37 02 63 2c 	extr.u %d2,%d2,24,3
80307e6c:	8f f2 0f 21 	and %d2,%d2,255
80307e70:	1b 12 00 40 	addi %d4,%d2,1
80307e74:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80307e78:	d9 22 2c 00 	lea %a2,[%a2]44
80307e7c:	54 22       	ld.w %d2,[%a2]
80307e7e:	37 02 63 24 	extr.u %d2,%d2,8,3
80307e82:	8f f2 0f 21 	and %d2,%d2,255
80307e86:	c2 12       	add %d2,1
80307e88:	e2 42       	mul %d2,%d4
80307e8a:	4b 02 41 21 	itof %d2,%d2
80307e8e:	7b d0 fc 43 	movh %d4,16333
80307e92:	1b d4 cc 4c 	addi %d4,%d4,-13107
80307e96:	4b 42 41 20 	mul.f %d2,%d2,%d4
80307e9a:	4b 23 51 20 	div.f %d2,%d3,%d2
80307e9e:	59 e2 fc ff 	st.w [%a14]-4,%d2
80307ea2:	1d 00 2f 00 	j 80307f00 <IfxScuCcu_getPerPllFrequency2+0x168>
    }
    else
    {
        pllFrequency2 = (oscFreq * (scu->PERPLLCON0.B.NDIV + 1)) / ((scu->PERPLLCON0.B.PDIV + 1) * (scu->PERPLLCON1.B.K3DIV + 1) * 2);
80307ea6:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80307eaa:	d9 22 28 00 	lea %a2,[%a2]40
80307eae:	54 22       	ld.w %d2,[%a2]
80307eb0:	37 02 e7 24 	extr.u %d2,%d2,9,7
80307eb4:	8f f2 0f 21 	and %d2,%d2,255
80307eb8:	c2 12       	add %d2,1
80307eba:	4b 02 41 31 	itof %d3,%d2
80307ebe:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
80307ec2:	4b 23 41 30 	mul.f %d3,%d3,%d2
80307ec6:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80307eca:	d9 22 28 00 	lea %a2,[%a2]40
80307ece:	54 22       	ld.w %d2,[%a2]
80307ed0:	37 02 63 2c 	extr.u %d2,%d2,24,3
80307ed4:	8f f2 0f 21 	and %d2,%d2,255
80307ed8:	1b 12 00 40 	addi %d4,%d2,1
80307edc:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80307ee0:	d9 22 2c 00 	lea %a2,[%a2]44
80307ee4:	54 22       	ld.w %d2,[%a2]
80307ee6:	37 02 63 24 	extr.u %d2,%d2,8,3
80307eea:	8f f2 0f 21 	and %d2,%d2,255
80307eee:	c2 12       	add %d2,1
80307ef0:	e2 42       	mul %d2,%d4
80307ef2:	06 12       	sh %d2,1
80307ef4:	4b 02 41 21 	itof %d2,%d2
80307ef8:	4b 23 51 20 	div.f %d2,%d3,%d2
80307efc:	59 e2 fc ff 	st.w [%a14]-4,%d2
    }

    return pllFrequency2;
80307f00:	19 e2 fc ff 	ld.w %d2,[%a14]-4
}
80307f04:	00 90       	ret 

80307f06 <IfxScuCcu_getPllFrequency>:


float32 IfxScuCcu_getPllFrequency(void)
{
80307f06:	40 ae       	mov.aa %a14,%sp
80307f08:	20 10       	sub.a %sp,16
    Ifx_SCU *scu = &MODULE_SCU;
80307f0a:	7b 30 00 2f 	movh %d2,61443
80307f0e:	1b 02 00 26 	addi %d2,%d2,24576
80307f12:	59 e2 fc ff 	st.w [%a14]-4,%d2
    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
80307f16:	91 30 00 2f 	movh.a %a2,61443
80307f1a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
80307f1e:	54 22       	ld.w %d2,[%a2]
80307f20:	37 02 62 2f 	extr.u %d2,%d2,30,2
80307f24:	8f f2 0f 21 	and %d2,%d2,255
80307f28:	df 02 0a 80 	jne %d2,0,80307f3c <IfxScuCcu_getPllFrequency+0x36>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80307f2c:	7b f0 cb 24 	movh %d2,19647
80307f30:	1b 02 c2 2b 	addi %d2,%d2,-17376
80307f34:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80307f38:	1d 00 2b 00 	j 80307f8e <IfxScuCcu_getPllFrequency+0x88>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
80307f3c:	91 30 00 2f 	movh.a %a2,61443
80307f40:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
80307f44:	54 22       	ld.w %d2,[%a2]
80307f46:	37 02 62 2f 	extr.u %d2,%d2,30,2
80307f4a:	8f f2 0f 21 	and %d2,%d2,255
80307f4e:	df 12 0a 80 	jne %d2,1,80307f62 <IfxScuCcu_getPllFrequency+0x5c>
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
80307f52:	7b 90 b9 24 	movh %d2,19353
80307f56:	1b 02 68 29 	addi %d2,%d2,-27008
80307f5a:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80307f5e:	1d 00 18 00 	j 80307f8e <IfxScuCcu_getPllFrequency+0x88>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
80307f62:	91 30 00 2f 	movh.a %a2,61443
80307f66:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
80307f6a:	54 22       	ld.w %d2,[%a2]
80307f6c:	37 02 62 2f 	extr.u %d2,%d2,30,2
80307f70:	8f f2 0f 21 	and %d2,%d2,255
80307f74:	df 22 0a 80 	jne %d2,2,80307f88 <IfxScuCcu_getPllFrequency+0x82>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
80307f78:	7b 90 b9 24 	movh %d2,19353
80307f7c:	1b 02 68 29 	addi %d2,%d2,-27008
80307f80:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80307f84:	1d 00 05 00 	j 80307f8e <IfxScuCcu_getPllFrequency+0x88>
        freq = 0.0f;
80307f88:	82 02       	mov %d2,0
80307f8a:	59 e2 f0 ff 	st.w [%a14]-16,%d2
    return freq;
80307f8e:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
80307f92:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    freq    = (oscFreq * (scu->SYSPLLCON0.B.NDIV + 1)) / ((scu->SYSPLLCON1.B.K2DIV + 1) * (scu->SYSPLLCON0.B.PDIV + 1));
80307f96:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80307f9a:	d9 22 18 00 	lea %a2,[%a2]24
80307f9e:	54 22       	ld.w %d2,[%a2]
80307fa0:	37 02 e7 24 	extr.u %d2,%d2,9,7
80307fa4:	8f f2 0f 21 	and %d2,%d2,255
80307fa8:	c2 12       	add %d2,1
80307faa:	4b 02 41 31 	itof %d3,%d2
80307fae:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80307fb2:	4b 23 41 30 	mul.f %d3,%d3,%d2
80307fb6:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80307fba:	d9 22 1c 00 	lea %a2,[%a2]28
80307fbe:	54 22       	ld.w %d2,[%a2]
80307fc0:	37 02 63 20 	extr.u %d2,%d2,0,3
80307fc4:	8f f2 0f 21 	and %d2,%d2,255
80307fc8:	1b 12 00 40 	addi %d4,%d2,1
80307fcc:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80307fd0:	d9 22 18 00 	lea %a2,[%a2]24
80307fd4:	54 22       	ld.w %d2,[%a2]
80307fd6:	37 02 63 2c 	extr.u %d2,%d2,24,3
80307fda:	8f f2 0f 21 	and %d2,%d2,255
80307fde:	c2 12       	add %d2,1
80307fe0:	e2 42       	mul %d2,%d4
80307fe2:	4b 02 41 21 	itof %d2,%d2
80307fe6:	4b 23 51 20 	div.f %d2,%d3,%d2
80307fea:	59 e2 f4 ff 	st.w [%a14]-12,%d2
    return freq;
80307fee:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
}
80307ff2:	00 90       	ret 

80307ff4 <IfxScuCcu_getSourceFrequency>:
    return freq;
}


float32 IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource fsource)
{
80307ff4:	40 ae       	mov.aa %a14,%sp
80307ff6:	20 10       	sub.a %sp,16
80307ff8:	59 e4 f4 ff 	st.w [%a14]-12,%d4
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
80307ffc:	91 30 00 2f 	movh.a %a2,61443
80308000:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd2fc04>>
80308004:	54 22       	ld.w %d2,[%a2]
80308006:	37 02 62 2e 	extr.u %d2,%d2,28,2
8030800a:	8f f2 0f 21 	and %d2,%d2,255
8030800e:	df 02 06 00 	jeq %d2,0,8030801a <IfxScuCcu_getSourceFrequency+0x26>
80308012:	df 12 0c 00 	jeq %d2,1,8030802a <IfxScuCcu_getSourceFrequency+0x36>
80308016:	1d 00 49 00 	j 803080a8 <IfxScuCcu_getSourceFrequency+0xb4>
    return IFXSCU_EVR_OSC_FREQUENCY;
8030801a:	7b f0 cb 24 	movh %d2,19647
8030801e:	1b 02 c2 2b 	addi %d2,%d2,-17376
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
80308022:	59 e2 fc ff 	st.w [%a14]-4,%d2
        break;
80308026:	1d 00 45 00 	j 803080b0 <IfxScuCcu_getSourceFrequency+0xbc>
8030802a:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
8030802e:	df 22 2f 00 	jeq %d2,2,8030808c <IfxScuCcu_getSourceFrequency+0x98>
80308032:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
80308036:	ff 32 31 80 	jge.u %d2,3,80308098 <IfxScuCcu_getSourceFrequency+0xa4>
8030803a:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
8030803e:	df 02 08 00 	jeq %d2,0,8030804e <IfxScuCcu_getSourceFrequency+0x5a>
80308042:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
80308046:	df 12 0a 00 	jeq %d2,1,8030805a <IfxScuCcu_getSourceFrequency+0x66>
8030804a:	1d 00 27 00 	j 80308098 <IfxScuCcu_getSourceFrequency+0xa4>
    case IfxScu_CCUCON0_CLKSEL_fPll:

        switch (fsource)
        {
        case IfxScuCcu_Fsource_0:
            sourcefreq = IfxScuCcu_getPllFrequency();
8030804e:	6d ff 5c ff 	call 80307f06 <IfxScuCcu_getPllFrequency>
80308052:	59 e2 fc ff 	st.w [%a14]-4,%d2
            break;
80308056:	1d 00 27 00 	j 803080a4 <IfxScuCcu_getSourceFrequency+0xb0>
        case IfxScuCcu_Fsource_1:
            sourcefreq = IfxScuCcu_getPerPllFrequency1();
8030805a:	6d ff 28 fe 	call 80307caa <IfxScuCcu_getPerPllFrequency1>
8030805e:	59 e2 fc ff 	st.w [%a14]-4,%d2

            if (SCU_CCUCON1.B.PLL1DIVDIS == 0)
80308062:	91 30 00 2f 	movh.a %a2,61443
80308066:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd2fc08>>
8030806a:	54 22       	ld.w %d2,[%a2]
8030806c:	37 02 e1 23 	extr.u %d2,%d2,7,1
80308070:	8f f2 0f 21 	and %d2,%d2,255
80308074:	df 02 17 80 	jne %d2,0,803080a2 <IfxScuCcu_getSourceFrequency+0xae>
            {
                sourcefreq = sourcefreq / 2.0f;
80308078:	19 e2 fc ff 	ld.w %d2,[%a14]-4
8030807c:	7b 00 00 34 	movh %d3,16384
80308080:	4b 32 51 20 	div.f %d2,%d2,%d3
80308084:	59 e2 fc ff 	st.w [%a14]-4,%d2
            }

            break;
80308088:	1d 00 0d 00 	j 803080a2 <IfxScuCcu_getSourceFrequency+0xae>
        case IfxScuCcu_Fsource_2:
            sourcefreq = IfxScuCcu_getPerPllFrequency2();
8030808c:	6d ff 86 fe 	call 80307d98 <IfxScuCcu_getPerPllFrequency2>
80308090:	59 e2 fc ff 	st.w [%a14]-4,%d2
            break;
80308094:	1d 00 08 00 	j 803080a4 <IfxScuCcu_getSourceFrequency+0xb0>
        default:
            sourcefreq = 0;
80308098:	82 02       	mov %d2,0
8030809a:	59 e2 fc ff 	st.w [%a14]-4,%d2
            break;
8030809e:	1d 00 03 00 	j 803080a4 <IfxScuCcu_getSourceFrequency+0xb0>
            break;
803080a2:	00 00       	nop 
        }

        break;
803080a4:	1d 00 06 00 	j 803080b0 <IfxScuCcu_getSourceFrequency+0xbc>
    default:
        sourcefreq = 0;
803080a8:	82 02       	mov %d2,0
803080aa:	59 e2 fc ff 	st.w [%a14]-4,%d2
        break;
803080ae:	00 00       	nop 
    }

    return sourcefreq;
803080b0:	19 e2 fc ff 	ld.w %d2,[%a14]-4
}
803080b4:	00 90       	ret 

803080b6 <IfxScuCcu_init>:
    return sriFrequency;
}


boolean IfxScuCcu_init(const IfxScuCcu_Config *config)
{
803080b6:	40 ae       	mov.aa %a14,%sp
803080b8:	20 a8       	sub.a %sp,168
803080ba:	b5 e4 dc df 	st.a [%a14]-164,%a4
    boolean status = 0;
803080be:	82 02       	mov %d2,0
803080c0:	e9 e2 ff ff 	st.b [%a14]-1,%d2
    status = IfxScuCcu_configureCcuInitialStep(&config->pllInitialStepConfig);
803080c4:	19 e2 dc df 	ld.w %d2,[%a14]-164
803080c8:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    uint8                                initError = 0;
803080cc:	82 02       	mov %d2,0
803080ce:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
    pllsParamCfg   = &pllInitStepCfg->pllsParameters;
803080d2:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803080d6:	59 e2 f0 ff 	st.w [%a14]-16,%d2


IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
{
    uint16        password;
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
803080da:	7b 30 00 2f 	movh %d2,61443
803080de:	1b 82 2a 26 	addi %d2,%d2,25256
803080e2:	59 e2 ec ff 	st.w [%a14]-20,%d2

    /* Read Password from Safety WDT CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
803080e6:	99 e2 ec ff 	ld.a %a2,[%a14]-20
803080ea:	54 22       	ld.w %d2,[%a2]
803080ec:	37 02 6e 21 	extr.u %d2,%d2,2,14
803080f0:	37 02 70 20 	extr.u %d2,%d2,0,16
803080f4:	f9 e2 ea ff 	st.h [%a14]-22,%d2
    password ^= 0x003F;
803080f8:	c9 e2 ea ff 	ld.h %d2,[%a14]-22
803080fc:	8f f2 83 21 	xor %d2,%d2,63
80308100:	f9 e2 ea ff 	st.h [%a14]-22,%d2

    return password;
80308104:	b9 e2 ea ff 	ld.hu %d2,[%a14]-22
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
80308108:	f9 e2 e8 ff 	st.h [%a14]-24,%d2
    IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
8030810c:	b9 e2 e8 ff 	ld.hu %d2,[%a14]-24
80308110:	f9 e2 e6 ff 	st.h [%a14]-26,%d2
    if (SCU_WDTS_CON0.B.LCK)
80308114:	91 30 00 2f 	movh.a %a2,61443
80308118:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030811c:	54 22       	ld.w %d2,[%a2]
8030811e:	37 02 e1 20 	extr.u %d2,%d2,1,1
80308122:	8f f2 0f 21 	and %d2,%d2,255
80308126:	df 02 18 00 	jeq %d2,0,80308156 <IfxScuCcu_init+0xa0>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030812a:	b9 e2 e6 ff 	ld.hu %d2,[%a14]-26
8030812e:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80308130:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80308134:	91 30 00 2f 	movh.a %a2,61443
80308138:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030813c:	54 22       	ld.w %d2,[%a2]
8030813e:	37 02 70 28 	extr.u %d2,%d2,16,16
80308142:	37 02 70 20 	extr.u %d2,%d2,0,16
80308146:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030814a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8030814c:	91 30 00 2f 	movh.a %a2,61443
80308150:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80308154:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80308156:	b9 e2 e6 ff 	ld.hu %d2,[%a14]-26 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030815a:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8030815c:	8f 22 40 31 	or %d3,%d2,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80308160:	91 30 00 2f 	movh.a %a2,61443
80308164:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80308168:	54 22       	ld.w %d2,[%a2]
8030816a:	37 02 70 28 	extr.u %d2,%d2,16,16
8030816e:	37 02 70 20 	extr.u %d2,%d2,0,16
80308172:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80308176:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80308178:	91 30 00 2f 	movh.a %a2,61443
8030817c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80308180:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80308182:	00 00       	nop 
80308184:	91 30 00 2f 	movh.a %a2,61443
80308188:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030818c:	54 22       	ld.w %d2,[%a2]
8030818e:	37 02 61 20 	extr.u %d2,%d2,0,1
80308192:	8f f2 0f 21 	and %d2,%d2,255
80308196:	df 12 f7 7f 	jeq %d2,1,80308184 <IfxScuCcu_init+0xce>
}
8030819a:	00 00       	nop 
    timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
8030819c:	3b 00 00 21 	mov %d2,4096
803081a0:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while (SCU_CCUCON0.B.LCK != 0U)
803081a4:	1d 00 10 00 	j 803081c4 <IfxScuCcu_init+0x10e>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803081a8:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803081ac:	c2 f2       	add %d2,-1
803081ae:	59 e2 e0 ff 	st.w [%a14]-32,%d2
803081b2:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803081b6:	ff 12 07 00 	jge %d2,1,803081c4 <IfxScuCcu_init+0x10e>
803081ba:	82 12       	mov %d2,1
803081bc:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
803081c0:	1d 00 0d 00 	j 803081da <IfxScuCcu_init+0x124>
    while (SCU_CCUCON0.B.LCK != 0U)
803081c4:	91 30 00 2f 	movh.a %a2,61443
803081c8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd2fc04>>
803081cc:	54 22       	ld.w %d2,[%a2]
803081ce:	37 02 e1 2f 	extr.u %d2,%d2,31,1
803081d2:	8f f2 0f 21 	and %d2,%d2,255
803081d6:	df 02 e9 ff 	jne %d2,0,803081a8 <IfxScuCcu_init+0xf2>
        scuCcucon0.U        = SCU_CCUCON0.U;
803081da:	91 30 00 2f 	movh.a %a2,61443
803081de:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd2fc04>>
803081e2:	54 22       	ld.w %d2,[%a2]
803081e4:	59 e2 f8 df 	st.w [%a14]-136 <f0036030 <_START2_end+0x4fd2fc04>>,%d2
        scuCcucon0.B.CLKSEL = 0; /*Select the EVR as fsource0/1/2 for the clock distribution */
803081e8:	19 e2 f8 df 	ld.w %d2,[%a14]-136 <f0036030 <_START2_end+0x4fd2fc04>>
803081ec:	7b 00 00 3d 	movh %d3,53248
803081f0:	c2 f3       	add %d3,-1
803081f2:	26 32       	and %d2,%d3
803081f4:	59 e2 f8 df 	st.w [%a14]-136,%d2
        scuCcucon0.B.UP     = 1; /*Update the ccucon0 register */
803081f8:	19 e2 f8 df 	ld.w %d2,[%a14]-136
803081fc:	b7 12 01 2f 	insert %d2,%d2,1,30,1
80308200:	59 e2 f8 df 	st.w [%a14]-136,%d2
        SCU_CCUCON0.U       = scuCcucon0.U;
80308204:	91 30 00 2f 	movh.a %a2,61443
80308208:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd2fc04>>
8030820c:	19 e2 f8 df 	ld.w %d2,[%a14]-136 <f0036030 <_START2_end+0x4fd2fc04>>
80308210:	74 22       	st.w [%a2],%d2
    timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80308212:	3b 00 00 21 	mov %d2,4096
80308216:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while (SCU_CCUCON0.B.LCK != 0U)
8030821a:	1d 00 10 00 	j 8030823a <IfxScuCcu_init+0x184>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
8030821e:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80308222:	c2 f2       	add %d2,-1
80308224:	59 e2 e0 ff 	st.w [%a14]-32,%d2
80308228:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
8030822c:	ff 12 07 00 	jge %d2,1,8030823a <IfxScuCcu_init+0x184>
80308230:	82 12       	mov %d2,1
80308232:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
80308236:	1d 00 0d 00 	j 80308250 <IfxScuCcu_init+0x19a>
    while (SCU_CCUCON0.B.LCK != 0U)
8030823a:	91 30 00 2f 	movh.a %a2,61443
8030823e:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd2fc04>>
80308242:	54 22       	ld.w %d2,[%a2]
80308244:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80308248:	8f f2 0f 21 	and %d2,%d2,255
8030824c:	df 02 e9 ff 	jne %d2,0,8030821e <IfxScuCcu_init+0x168>
        SMU_KEYS.U    = (uint32)0xBCU;        /* Enable access to SMU registers */
80308250:	91 30 00 2f 	movh.a %a2,61443
80308254:	d9 22 b4 06 	lea %a2,[%a2]26676 <f0036834 <_START2_end+0x4fd30408>>
80308258:	3b c0 0b 20 	mov %d2,188
8030825c:	74 22       	st.w [%a2],%d2
        SMU_AG8CF0.U &= ~IFXSCUCCU_SMUALARM_MASK;
8030825e:	91 30 00 2f 	movh.a %a2,61443
80308262:	d9 22 a0 56 	lea %a2,[%a2]26976 <f0036960 <_START2_end+0x4fd30534>>
80308266:	54 22       	ld.w %d2,[%a2]
80308268:	91 30 00 2f 	movh.a %a2,61443
8030826c:	d9 22 a0 56 	lea %a2,[%a2]26976 <f0036960 <_START2_end+0x4fd30534>>
80308270:	8f d2 c1 21 	andn %d2,%d2,29
80308274:	74 22       	st.w [%a2],%d2
        SMU_AG8CF1.U &= ~IFXSCUCCU_SMUALARM_MASK;
80308276:	91 30 00 2f 	movh.a %a2,61443
8030827a:	d9 22 a4 56 	lea %a2,[%a2]26980 <f0036964 <_START2_end+0x4fd30538>>
8030827e:	54 22       	ld.w %d2,[%a2]
80308280:	91 30 00 2f 	movh.a %a2,61443
80308284:	d9 22 a4 56 	lea %a2,[%a2]26980 <f0036964 <_START2_end+0x4fd30538>>
80308288:	8f d2 c1 21 	andn %d2,%d2,29
8030828c:	74 22       	st.w [%a2],%d2
        SMU_AG8CF2.U &= ~IFXSCUCCU_SMUALARM_MASK;
8030828e:	91 30 00 2f 	movh.a %a2,61443
80308292:	d9 22 a8 56 	lea %a2,[%a2]26984 <f0036968 <_START2_end+0x4fd3053c>>
80308296:	54 22       	ld.w %d2,[%a2]
80308298:	91 30 00 2f 	movh.a %a2,61443
8030829c:	d9 22 a8 56 	lea %a2,[%a2]26984 <f0036968 <_START2_end+0x4fd3053c>>
803082a0:	8f d2 c1 21 	andn %d2,%d2,29
803082a4:	74 22       	st.w [%a2],%d2
        SMU_KEYS.U    = (uint32)0U;
803082a6:	91 30 00 2f 	movh.a %a2,61443
803082aa:	d9 22 b4 06 	lea %a2,[%a2]26676 <f0036834 <_START2_end+0x4fd30408>>
803082ae:	82 02       	mov %d2,0
803082b0:	74 22       	st.w [%a2],%d2
    SCU_SYSPLLCON0.B.PLLPWD = 0;
803082b2:	91 30 00 2f 	movh.a %a2,61443
803082b6:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
803082ba:	54 22       	ld.w %d2,[%a2]
803082bc:	7b f0 ff 3f 	movh %d3,65535
803082c0:	c2 f3       	add %d3,-1
803082c2:	26 32       	and %d2,%d3
803082c4:	74 22       	st.w [%a2],%d2
    SCU_PERPLLCON0.B.PLLPWD = 0;
803082c6:	91 30 00 2f 	movh.a %a2,61443
803082ca:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <_START2_end+0x4fd2fbfc>>
803082ce:	54 22       	ld.w %d2,[%a2]
803082d0:	7b f0 ff 3f 	movh %d3,65535
803082d4:	c2 f3       	add %d3,-1
803082d6:	26 32       	and %d2,%d3
803082d8:	74 22       	st.w [%a2],%d2
    timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
803082da:	3b 00 00 23 	mov %d2,12288
803082de:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
803082e2:	1d 00 10 00 	j 80308302 <IfxScuCcu_init+0x24c>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803082e6:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803082ea:	c2 f2       	add %d2,-1
803082ec:	59 e2 e0 ff 	st.w [%a14]-32,%d2
803082f0:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803082f4:	ff 12 07 00 	jge %d2,1,80308302 <IfxScuCcu_init+0x24c>
803082f8:	82 12       	mov %d2,1
803082fa:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
803082fe:	1d 00 18 00 	j 8030832e <IfxScuCcu_init+0x278>
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
80308302:	91 30 00 2f 	movh.a %a2,61443
80308306:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_START2_end+0x4fd2fbe8>>
8030830a:	54 22       	ld.w %d2,[%a2]
8030830c:	37 02 e1 20 	extr.u %d2,%d2,1,1
80308310:	8f f2 0f 21 	and %d2,%d2,255
80308314:	df 02 e9 7f 	jeq %d2,0,803082e6 <IfxScuCcu_init+0x230>
80308318:	91 30 00 2f 	movh.a %a2,61443
8030831c:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fd2fbf8>>
80308320:	54 22       	ld.w %d2,[%a2]
80308322:	37 02 e1 20 	extr.u %d2,%d2,1,1
80308326:	8f f2 0f 21 	and %d2,%d2,255
8030832a:	df 02 de 7f 	jeq %d2,0,803082e6 <IfxScuCcu_init+0x230>
    if ((pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fOsc0) || (pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fSysclk))
8030832e:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80308332:	b0 42       	add.a %a2,4
80308334:	54 22       	ld.w %d2,[%a2]
80308336:	df 12 08 00 	jeq %d2,1,80308346 <IfxScuCcu_init+0x290>
8030833a:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
8030833e:	b0 42       	add.a %a2,4
80308340:	54 22       	ld.w %d2,[%a2]
80308342:	df 22 31 80 	jne %d2,2,803083a4 <IfxScuCcu_init+0x2ee>
        scuOsccon.U      = SCU_OSCCON.U;
80308346:	91 30 00 2f 	movh.a %a2,61443
8030834a:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_START2_end+0x4fd2fbe4>>
8030834e:	54 22       	ld.w %d2,[%a2]
80308350:	59 e2 f4 df 	st.w [%a14]-140 <f0036010 <_START2_end+0x4fd2fbe4>>,%d2
        scuOsccon.B.MODE = 0U;
80308354:	19 e2 f4 df 	ld.w %d2,[%a14]-140 <f0036010 <_START2_end+0x4fd2fbe4>>
80308358:	8f 02 c6 21 	andn %d2,%d2,96
8030835c:	59 e2 f4 df 	st.w [%a14]-140,%d2
        scuOsccon.B.OSCVAL = (uint32)(pllsParamCfg->xtalFrequency / 1000000U) - 15; /*XTAL range 16MHz to 40MHz*/
80308360:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80308364:	54 22       	ld.w %d2,[%a2]
80308366:	7b c0 31 34 	movh %d3,17180
8030836a:	1b 33 e8 3d 	addi %d3,%d3,-8573
8030836e:	73 32 68 20 	mul.u %e2,%d2,%d3
80308372:	8f e3 1e 20 	sh %d2,%d3,-18
80308376:	8f f2 0f 21 	and %d2,%d2,255
8030837a:	1b 12 ff 2f 	addi %d2,%d2,-15
8030837e:	8f f2 0f 21 	and %d2,%d2,255
80308382:	8f f2 01 21 	and %d2,%d2,31
80308386:	8f f2 0f 31 	and %d3,%d2,255
8030838a:	19 e2 f4 df 	ld.w %d2,[%a14]-140
8030838e:	37 32 05 28 	insert %d2,%d2,%d3,16,5
80308392:	59 e2 f4 df 	st.w [%a14]-140,%d2
        SCU_OSCCON.U       = scuOsccon.U;
80308396:	91 30 00 2f 	movh.a %a2,61443
8030839a:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_START2_end+0x4fd2fbe4>>
8030839e:	19 e2 f4 df 	ld.w %d2,[%a14]-140 <f0036010 <_START2_end+0x4fd2fbe4>>
803083a2:	74 22       	st.w [%a2],%d2
        sysPllCon0.U       = SCU_SYSPLLCON0.U;
803083a4:	91 30 00 2f 	movh.a %a2,61443
803083a8:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
803083ac:	54 22       	ld.w %d2,[%a2]
803083ae:	59 e2 f0 df 	st.w [%a14]-144 <f0036018 <_START2_end+0x4fd2fbec>>,%d2
        sysPllCon0.B.PDIV  = pllsParamCfg->sysPllConfig.pDivider;
803083b2:	99 e2 f0 ff 	ld.a %a2,[%a14]-16 <f0036018 <_START2_end+0x4fd2fbec>>
803083b6:	39 22 08 00 	ld.bu %d2,[%a2]8 <f0036018 <_START2_end+0x4fd2fbec>>
803083ba:	8f 72 00 21 	and %d2,%d2,7
803083be:	8f f2 0f 31 	and %d3,%d2,255
803083c2:	19 e2 f0 df 	ld.w %d2,[%a14]-144
803083c6:	37 32 03 2c 	insert %d2,%d2,%d3,24,3
803083ca:	59 e2 f0 df 	st.w [%a14]-144,%d2
        sysPllCon0.B.NDIV  = pllsParamCfg->sysPllConfig.nDivider;
803083ce:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803083d2:	39 22 09 00 	ld.bu %d2,[%a2]9
803083d6:	8f f2 07 21 	and %d2,%d2,127
803083da:	8f f2 0f 31 	and %d3,%d2,255
803083de:	19 e2 f0 df 	ld.w %d2,[%a14]-144
803083e2:	37 32 87 24 	insert %d2,%d2,%d3,9,7
803083e6:	59 e2 f0 df 	st.w [%a14]-144,%d2
        sysPllCon0.B.INSEL = pllsParamCfg->pllInputClockSelection;
803083ea:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803083ee:	b0 42       	add.a %a2,4
803083f0:	54 22       	ld.w %d2,[%a2]
803083f2:	8f 32 00 21 	and %d2,%d2,3
803083f6:	8f f2 0f 31 	and %d3,%d2,255
803083fa:	19 e2 f0 df 	ld.w %d2,[%a14]-144
803083fe:	37 32 02 2f 	insert %d2,%d2,%d3,30,2
80308402:	59 e2 f0 df 	st.w [%a14]-144,%d2
        SCU_SYSPLLCON0.U   = sysPllCon0.U;
80308406:	91 30 00 2f 	movh.a %a2,61443
8030840a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
8030840e:	19 e2 f0 df 	ld.w %d2,[%a14]-144 <f0036018 <_START2_end+0x4fd2fbec>>
80308412:	74 22       	st.w [%a2],%d2
        scuPerPllCon0.U       = SCU_PERPLLCON0.U;
80308414:	91 30 00 2f 	movh.a %a2,61443
80308418:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <_START2_end+0x4fd2fbfc>>
8030841c:	54 22       	ld.w %d2,[%a2]
8030841e:	59 e2 ec df 	st.w [%a14]-148 <f0036028 <_START2_end+0x4fd2fbfc>>,%d2
        scuPerPllCon0.B.DIVBY = pllsParamCfg->perPllConfig.k3DividerBypass;
80308422:	99 e2 f0 ff 	ld.a %a2,[%a14]-16 <f0036028 <_START2_end+0x4fd2fbfc>>
80308426:	39 22 10 00 	ld.bu %d2,[%a2]16 <f0036028 <_START2_end+0x4fd2fbfc>>
8030842a:	8f 12 00 21 	and %d2,%d2,1
8030842e:	8f f2 0f 31 	and %d3,%d2,255
80308432:	19 e2 ec df 	ld.w %d2,[%a14]-148
80308436:	67 32 00 20 	ins.t %d2,%d2,0,%d3,0
8030843a:	59 e2 ec df 	st.w [%a14]-148,%d2
        scuPerPllCon0.B.PDIV  = pllsParamCfg->perPllConfig.pDivider;
8030843e:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80308442:	39 22 0c 00 	ld.bu %d2,[%a2]12
80308446:	8f 72 00 21 	and %d2,%d2,7
8030844a:	8f f2 0f 31 	and %d3,%d2,255
8030844e:	19 e2 ec df 	ld.w %d2,[%a14]-148
80308452:	37 32 03 2c 	insert %d2,%d2,%d3,24,3
80308456:	59 e2 ec df 	st.w [%a14]-148,%d2
        scuPerPllCon0.B.NDIV  = pllsParamCfg->perPllConfig.nDivider;
8030845a:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
8030845e:	39 22 0d 00 	ld.bu %d2,[%a2]13
80308462:	8f f2 07 21 	and %d2,%d2,127
80308466:	8f f2 0f 31 	and %d3,%d2,255
8030846a:	19 e2 ec df 	ld.w %d2,[%a14]-148
8030846e:	37 32 87 24 	insert %d2,%d2,%d3,9,7
80308472:	59 e2 ec df 	st.w [%a14]-148,%d2
        SCU_PERPLLCON0.U      = scuPerPllCon0.U;
80308476:	91 30 00 2f 	movh.a %a2,61443
8030847a:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <_START2_end+0x4fd2fbfc>>
8030847e:	19 e2 ec df 	ld.w %d2,[%a14]-148 <f0036028 <_START2_end+0x4fd2fbfc>>
80308482:	74 22       	st.w [%a2],%d2
    SCU_SYSPLLCON0.B.PLLPWD = 1;
80308484:	91 30 00 2f 	movh.a %a2,61443
80308488:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
8030848c:	54 22       	ld.w %d2,[%a2]
8030848e:	b7 12 01 28 	insert %d2,%d2,1,16,1
80308492:	74 22       	st.w [%a2],%d2
    SCU_PERPLLCON0.B.PLLPWD = 1;
80308494:	91 30 00 2f 	movh.a %a2,61443
80308498:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <_START2_end+0x4fd2fbfc>>
8030849c:	54 22       	ld.w %d2,[%a2]
8030849e:	b7 12 01 28 	insert %d2,%d2,1,16,1
803084a2:	74 22       	st.w [%a2],%d2
    timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
803084a4:	3b 00 00 23 	mov %d2,12288
803084a8:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
803084ac:	1d 00 10 00 	j 803084cc <IfxScuCcu_init+0x416>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803084b0:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803084b4:	c2 f2       	add %d2,-1
803084b6:	59 e2 e0 ff 	st.w [%a14]-32,%d2
803084ba:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803084be:	ff 12 07 00 	jge %d2,1,803084cc <IfxScuCcu_init+0x416>
803084c2:	82 12       	mov %d2,1
803084c4:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
803084c8:	1d 00 18 00 	j 803084f8 <IfxScuCcu_init+0x442>
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
803084cc:	91 30 00 2f 	movh.a %a2,61443
803084d0:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_START2_end+0x4fd2fbe8>>
803084d4:	54 22       	ld.w %d2,[%a2]
803084d6:	37 02 e1 20 	extr.u %d2,%d2,1,1
803084da:	8f f2 0f 21 	and %d2,%d2,255
803084de:	df 12 e9 7f 	jeq %d2,1,803084b0 <IfxScuCcu_init+0x3fa>
803084e2:	91 30 00 2f 	movh.a %a2,61443
803084e6:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fd2fbf8>>
803084ea:	54 22       	ld.w %d2,[%a2]
803084ec:	37 02 e1 20 	extr.u %d2,%d2,1,1
803084f0:	8f f2 0f 21 	and %d2,%d2,255
803084f4:	df 12 de 7f 	jeq %d2,1,803084b0 <IfxScuCcu_init+0x3fa>
    timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
803084f8:	3b 00 00 26 	mov %d2,24576
803084fc:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
80308500:	1d 00 10 00 	j 80308520 <IfxScuCcu_init+0x46a>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80308504:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80308508:	c2 f2       	add %d2,-1
8030850a:	59 e2 e0 ff 	st.w [%a14]-32,%d2
8030850e:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80308512:	ff 12 07 00 	jge %d2,1,80308520 <IfxScuCcu_init+0x46a>
80308516:	82 12       	mov %d2,1
80308518:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
8030851c:	1d 00 23 00 	j 80308562 <IfxScuCcu_init+0x4ac>
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
80308520:	91 30 00 2f 	movh.a %a2,61443
80308524:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_START2_end+0x4fd2fbe8>>
80308528:	54 22       	ld.w %d2,[%a2]
8030852a:	37 02 e1 22 	extr.u %d2,%d2,5,1
8030852e:	8f f2 0f 21 	and %d2,%d2,255
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
80308532:	df 02 e9 7f 	jeq %d2,0,80308504 <IfxScuCcu_init+0x44e>
80308536:	91 30 00 2f 	movh.a %a2,61443
8030853a:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fd2fbf8>>
8030853e:	54 22       	ld.w %d2,[%a2]
80308540:	37 02 e1 22 	extr.u %d2,%d2,5,1
80308544:	8f f2 0f 21 	and %d2,%d2,255
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
80308548:	df 02 de 7f 	jeq %d2,0,80308504 <IfxScuCcu_init+0x44e>
           (SCU_PERPLLSTAT.B.K3RDY == 0U))
8030854c:	91 30 00 2f 	movh.a %a2,61443
80308550:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fd2fbf8>>
80308554:	54 22       	ld.w %d2,[%a2]
80308556:	37 02 61 22 	extr.u %d2,%d2,4,1
8030855a:	8f f2 0f 21 	and %d2,%d2,255
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
8030855e:	df 02 d3 7f 	jeq %d2,0,80308504 <IfxScuCcu_init+0x44e>
    SCU_SYSPLLCON1.B.K2DIV = pllsParamCfg->sysPllConfig.k2Divider;
80308562:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80308566:	39 22 0a 00 	ld.bu %d2,[%a2]10
8030856a:	91 30 00 2f 	movh.a %a2,61443
8030856e:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_START2_end+0x4fd2fbf0>>
80308572:	8f 72 00 21 	and %d2,%d2,7
80308576:	8f f2 0f 31 	and %d3,%d2,255
8030857a:	54 22       	ld.w %d2,[%a2]
8030857c:	37 32 03 20 	insert %d2,%d2,%d3,0,3
80308580:	74 22       	st.w [%a2],%d2
        scuPerPllCon1.U       = SCU_PERPLLCON1.U;
80308582:	91 30 00 2f 	movh.a %a2,61443
80308586:	d9 22 2c 06 	lea %a2,[%a2]24620 <f003602c <_START2_end+0x4fd2fc00>>
8030858a:	54 22       	ld.w %d2,[%a2]
8030858c:	59 e2 e8 df 	st.w [%a14]-152 <f003602c <_START2_end+0x4fd2fc00>>,%d2
        scuPerPllCon1.B.K2DIV = pllsParamCfg->perPllConfig.k2Divider;
80308590:	99 e2 f0 ff 	ld.a %a2,[%a14]-16 <f003602c <_START2_end+0x4fd2fc00>>
80308594:	39 22 0e 00 	ld.bu %d2,[%a2]14 <f003602c <_START2_end+0x4fd2fc00>>
80308598:	8f 72 00 21 	and %d2,%d2,7
8030859c:	8f f2 0f 31 	and %d3,%d2,255
803085a0:	19 e2 e8 df 	ld.w %d2,[%a14]-152
803085a4:	37 32 03 20 	insert %d2,%d2,%d3,0,3
803085a8:	59 e2 e8 df 	st.w [%a14]-152,%d2
        scuPerPllCon1.B.K3DIV = pllsParamCfg->perPllConfig.k3Divider;
803085ac:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803085b0:	39 22 0f 00 	ld.bu %d2,[%a2]15
803085b4:	8f 72 00 21 	and %d2,%d2,7
803085b8:	8f f2 0f 31 	and %d3,%d2,255
803085bc:	19 e2 e8 df 	ld.w %d2,[%a14]-152
803085c0:	37 32 03 24 	insert %d2,%d2,%d3,8,3
803085c4:	59 e2 e8 df 	st.w [%a14]-152,%d2
        SCU_PERPLLCON1.U      = scuPerPllCon1.U;
803085c8:	91 30 00 2f 	movh.a %a2,61443
803085cc:	d9 22 2c 06 	lea %a2,[%a2]24620 <f003602c <_START2_end+0x4fd2fc00>>
803085d0:	19 e2 e8 df 	ld.w %d2,[%a14]-152 <f003602c <_START2_end+0x4fd2fc00>>
803085d4:	74 22       	st.w [%a2],%d2
    timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
803085d6:	3b 00 00 26 	mov %d2,24576
803085da:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
803085de:	1d 00 10 00 	j 803085fe <IfxScuCcu_init+0x548>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803085e2:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803085e6:	c2 f2       	add %d2,-1
803085e8:	59 e2 e0 ff 	st.w [%a14]-32,%d2
803085ec:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803085f0:	ff 12 07 00 	jge %d2,1,803085fe <IfxScuCcu_init+0x548>
803085f4:	82 12       	mov %d2,1
803085f6:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
803085fa:	1d 00 23 00 	j 80308640 <IfxScuCcu_init+0x58a>
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
803085fe:	91 30 00 2f 	movh.a %a2,61443
80308602:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_START2_end+0x4fd2fbe8>>
80308606:	54 22       	ld.w %d2,[%a2]
80308608:	37 02 e1 22 	extr.u %d2,%d2,5,1
8030860c:	8f f2 0f 21 	and %d2,%d2,255
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
80308610:	df 02 e9 7f 	jeq %d2,0,803085e2 <IfxScuCcu_init+0x52c>
80308614:	91 30 00 2f 	movh.a %a2,61443
80308618:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fd2fbf8>>
8030861c:	54 22       	ld.w %d2,[%a2]
8030861e:	37 02 e1 22 	extr.u %d2,%d2,5,1
80308622:	8f f2 0f 21 	and %d2,%d2,255
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
80308626:	df 02 de 7f 	jeq %d2,0,803085e2 <IfxScuCcu_init+0x52c>
           (SCU_PERPLLSTAT.B.K3RDY == 0U))
8030862a:	91 30 00 2f 	movh.a %a2,61443
8030862e:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fd2fbf8>>
80308632:	54 22       	ld.w %d2,[%a2]
80308634:	37 02 61 22 	extr.u %d2,%d2,4,1
80308638:	8f f2 0f 21 	and %d2,%d2,255
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
8030863c:	df 02 d3 7f 	jeq %d2,0,803085e2 <IfxScuCcu_init+0x52c>
    timeoutCycleCount = IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT;
80308640:	7b 50 00 20 	movh %d2,5
80308644:	1b 02 3e 29 	addi %d2,%d2,-27680
80308648:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
8030864c:	1d 00 10 00 	j 8030866c <IfxScuCcu_init+0x5b6>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80308650:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80308654:	c2 f2       	add %d2,-1
80308656:	59 e2 e0 ff 	st.w [%a14]-32,%d2
8030865a:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
8030865e:	ff 12 07 00 	jge %d2,1,8030866c <IfxScuCcu_init+0x5b6>
80308662:	82 12       	mov %d2,1
80308664:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
80308668:	1d 00 18 00 	j 80308698 <IfxScuCcu_init+0x5e2>
    while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
8030866c:	91 30 00 2f 	movh.a %a2,61443
80308670:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_START2_end+0x4fd2fbe4>>
80308674:	54 22       	ld.w %d2,[%a2]
80308676:	37 02 e1 20 	extr.u %d2,%d2,1,1
8030867a:	8f f2 0f 21 	and %d2,%d2,255
8030867e:	df 02 0d 80 	jne %d2,0,80308698 <IfxScuCcu_init+0x5e2>
80308682:	91 30 00 2f 	movh.a %a2,61443
80308686:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_START2_end+0x4fd2fbe4>>
8030868a:	54 22       	ld.w %d2,[%a2]
8030868c:	37 02 61 24 	extr.u %d2,%d2,8,1
80308690:	8f f2 0f 21 	and %d2,%d2,255
80308694:	df 02 de 7f 	jeq %d2,0,80308650 <IfxScuCcu_init+0x59a>
        SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart Sys PLL lock detection */
80308698:	91 30 00 2f 	movh.a %a2,61443
8030869c:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
803086a0:	54 22       	ld.w %d2,[%a2]
803086a2:	b7 12 01 29 	insert %d2,%d2,1,18,1
803086a6:	74 22       	st.w [%a2],%d2
        SCU_PERPLLCON0.B.RESLD = 1;             /* Restart Per PLL lock detection */
803086a8:	91 30 00 2f 	movh.a %a2,61443
803086ac:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <_START2_end+0x4fd2fbfc>>
803086b0:	54 22       	ld.w %d2,[%a2]
803086b2:	b7 12 01 29 	insert %d2,%d2,1,18,1
803086b6:	74 22       	st.w [%a2],%d2
        timeoutCycleCount      = IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT;
803086b8:	3b 00 00 23 	mov %d2,12288
803086bc:	59 e2 e0 ff 	st.w [%a14]-32,%d2
        while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
803086c0:	1d 00 10 00 	j 803086e0 <IfxScuCcu_init+0x62a>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803086c4:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803086c8:	c2 f2       	add %d2,-1
803086ca:	59 e2 e0 ff 	st.w [%a14]-32,%d2
803086ce:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803086d2:	ff 12 07 00 	jge %d2,1,803086e0 <IfxScuCcu_init+0x62a>
803086d6:	82 12       	mov %d2,1
803086d8:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
803086dc:	1d 00 18 00 	j 8030870c <IfxScuCcu_init+0x656>
        while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
803086e0:	91 30 00 2f 	movh.a %a2,61443
803086e4:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_START2_end+0x4fd2fbe8>>
803086e8:	54 22       	ld.w %d2,[%a2]
803086ea:	37 02 61 21 	extr.u %d2,%d2,2,1
803086ee:	8f f2 0f 21 	and %d2,%d2,255
803086f2:	df 02 e9 7f 	jeq %d2,0,803086c4 <IfxScuCcu_init+0x60e>
803086f6:	91 30 00 2f 	movh.a %a2,61443
803086fa:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fd2fbf8>>
803086fe:	54 22       	ld.w %d2,[%a2]
80308700:	37 02 61 21 	extr.u %d2,%d2,2,1
80308704:	8f f2 0f 21 	and %d2,%d2,255
80308708:	df 02 de 7f 	jeq %d2,0,803086c4 <IfxScuCcu_init+0x60e>
        SMU_KEYS.U = (uint32)0xBCU;           /* Enable access to SMU registers */
8030870c:	91 30 00 2f 	movh.a %a2,61443
80308710:	d9 22 b4 06 	lea %a2,[%a2]26676 <f0036834 <_START2_end+0x4fd30408>>
80308714:	3b c0 0b 20 	mov %d2,188
80308718:	74 22       	st.w [%a2],%d2
        SMU_CMD.U  = (uint32)0x00000005;
8030871a:	91 30 00 2f 	movh.a %a2,61443
8030871e:	d9 22 a0 06 	lea %a2,[%a2]26656 <f0036820 <_START2_end+0x4fd303f4>>
80308722:	82 52       	mov %d2,5
80308724:	74 22       	st.w [%a2],%d2
        SMU_AG8.U  = IFXSCUCCU_SMUALARM_MASK; /* Clear SMU Alarms*/
80308726:	91 30 00 2f 	movh.a %a2,61443
8030872a:	d9 22 a0 76 	lea %a2,[%a2]27104 <f00369e0 <_START2_end+0x4fd305b4>>
8030872e:	3b d0 01 20 	mov %d2,29
80308732:	74 22       	st.w [%a2],%d2
        SMU_KEYS.U = (uint32)0U;
80308734:	91 30 00 2f 	movh.a %a2,61443
80308738:	d9 22 b4 06 	lea %a2,[%a2]26676 <f0036834 <_START2_end+0x4fd30408>>
8030873c:	82 02       	mov %d2,0
8030873e:	74 22       	st.w [%a2],%d2
        scu_ccucon0.U        = SCU_CCUCON0.U;
80308740:	91 30 00 2f 	movh.a %a2,61443
80308744:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd2fc04>>
80308748:	54 22       	ld.w %d2,[%a2]
8030874a:	59 e2 e4 df 	st.w [%a14]-156 <f0036030 <_START2_end+0x4fd2fc04>>,%d2
        scu_ccucon0.B.CLKSEL = 1; /*Select the PLLs for fsource0/1/2 */
8030874e:	19 e2 e4 df 	ld.w %d2,[%a14]-156 <f0036030 <_START2_end+0x4fd2fc04>>
80308752:	b7 12 02 2e 	insert %d2,%d2,1,28,2
80308756:	59 e2 e4 df 	st.w [%a14]-156,%d2
        scu_ccucon0.B.UP     = 1; /*Update the ccucon0 register */
8030875a:	19 e2 e4 df 	ld.w %d2,[%a14]-156
8030875e:	b7 12 01 2f 	insert %d2,%d2,1,30,1
80308762:	59 e2 e4 df 	st.w [%a14]-156,%d2
        timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80308766:	3b 00 00 21 	mov %d2,4096
8030876a:	59 e2 e0 ff 	st.w [%a14]-32,%d2
        while (SCU_CCUCON0.B.LCK != 0U)
8030876e:	1d 00 10 00 	j 8030878e <IfxScuCcu_init+0x6d8>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80308772:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80308776:	c2 f2       	add %d2,-1
80308778:	59 e2 e0 ff 	st.w [%a14]-32,%d2
8030877c:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80308780:	ff 12 07 00 	jge %d2,1,8030878e <IfxScuCcu_init+0x6d8>
80308784:	82 12       	mov %d2,1
80308786:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
8030878a:	1d 00 0d 00 	j 803087a4 <IfxScuCcu_init+0x6ee>
        while (SCU_CCUCON0.B.LCK != 0U)
8030878e:	91 30 00 2f 	movh.a %a2,61443
80308792:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd2fc04>>
80308796:	54 22       	ld.w %d2,[%a2]
80308798:	37 02 e1 2f 	extr.u %d2,%d2,31,1
8030879c:	8f f2 0f 21 	and %d2,%d2,255
803087a0:	df 02 e9 ff 	jne %d2,0,80308772 <IfxScuCcu_init+0x6bc>
        SCU_CCUCON0.U     = scu_ccucon0.U;
803087a4:	91 30 00 2f 	movh.a %a2,61443
803087a8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd2fc04>>
803087ac:	19 e2 e4 df 	ld.w %d2,[%a14]-156 <f0036030 <_START2_end+0x4fd2fc04>>
803087b0:	74 22       	st.w [%a2],%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
803087b2:	3b 00 00 21 	mov %d2,4096
803087b6:	59 e2 e0 ff 	st.w [%a14]-32,%d2
        while (SCU_CCUCON0.B.LCK != 0U)
803087ba:	1d 00 10 00 	j 803087da <IfxScuCcu_init+0x724>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803087be:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803087c2:	c2 f2       	add %d2,-1
803087c4:	59 e2 e0 ff 	st.w [%a14]-32,%d2
803087c8:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803087cc:	ff 12 07 00 	jge %d2,1,803087da <IfxScuCcu_init+0x724>
803087d0:	82 12       	mov %d2,1
803087d2:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
803087d6:	1d 00 0d 00 	j 803087f0 <IfxScuCcu_init+0x73a>
        while (SCU_CCUCON0.B.LCK != 0U)
803087da:	91 30 00 2f 	movh.a %a2,61443
803087de:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd2fc04>>
803087e2:	54 22       	ld.w %d2,[%a2]
803087e4:	37 02 e1 2f 	extr.u %d2,%d2,31,1
803087e8:	8f f2 0f 21 	and %d2,%d2,255
803087ec:	df 02 e9 ff 	jne %d2,0,803087be <IfxScuCcu_init+0x708>
    IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
803087f0:	b9 e2 e8 ff 	ld.hu %d2,[%a14]-24
803087f4:	f9 e2 de ff 	st.h [%a14]-34,%d2
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
803087f8:	91 30 00 2f 	movh.a %a2,61443
803087fc:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80308800:	54 22       	ld.w %d2,[%a2]
80308802:	37 02 e1 20 	extr.u %d2,%d2,1,1
80308806:	8f f2 0f 21 	and %d2,%d2,255
8030880a:	df 02 18 00 	jeq %d2,0,8030883a <IfxScuCcu_init+0x784>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030880e:	b9 e2 de ff 	ld.hu %d2,[%a14]-34
80308812:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80308814:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80308818:	91 30 00 2f 	movh.a %a2,61443
8030881c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80308820:	54 22       	ld.w %d2,[%a2]
80308822:	37 02 70 28 	extr.u %d2,%d2,16,16
80308826:	37 02 70 20 	extr.u %d2,%d2,0,16
8030882a:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030882e:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80308830:	91 30 00 2f 	movh.a %a2,61443
80308834:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80308838:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030883a:	b9 e2 de ff 	ld.hu %d2,[%a14]-34 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030883e:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80308840:	8f 32 40 31 	or %d3,%d2,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80308844:	91 30 00 2f 	movh.a %a2,61443
80308848:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030884c:	54 22       	ld.w %d2,[%a2]
8030884e:	37 02 70 28 	extr.u %d2,%d2,16,16
80308852:	37 02 70 20 	extr.u %d2,%d2,0,16
80308856:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030885a:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8030885c:	91 30 00 2f 	movh.a %a2,61443
80308860:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80308864:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80308866:	00 00       	nop 
80308868:	91 30 00 2f 	movh.a %a2,61443
8030886c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80308870:	54 22       	ld.w %d2,[%a2]
80308872:	37 02 61 20 	extr.u %d2,%d2,0,1
80308876:	8f f2 0f 21 	and %d2,%d2,255
8030887a:	df 02 f7 7f 	jeq %d2,0,80308868 <IfxScuCcu_init+0x7b2>
    {}
}
8030887e:	00 00       	nop 
    return (boolean)initError;
80308880:	39 e2 f7 ff 	ld.bu %d2,[%a14]-9
80308884:	e9 e2 ff ff 	st.b [%a14]-1,%d2

    if (!status)
80308888:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
8030888c:	df 02 0a 80 	jne %d2,0,803088a0 <IfxScuCcu_init+0x7ea>
    {
        IfxScuCcu_modulation_init(config->modulationConfig);  /* initialize modulation */
80308890:	99 e2 dc df 	ld.a %a2,[%a14]-164
80308894:	d9 22 1c 10 	lea %a2,[%a2]92
80308898:	54 22       	ld.w %d2,[%a2]
8030889a:	60 24       	mov.a %a4,%d2
8030889c:	6d 00 03 05 	call 803092a2 <IfxScuCcu_modulation_init>
    }

    if (!status)
803088a0:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
803088a4:	df 02 c3 83 	jne %d2,0,8030902a <IfxScuCcu_init+0xf74>
    {
        status = IfxScuCcu_distributeClockInline(&config->clockDistribution);
803088a8:	19 e2 dc df 	ld.w %d2,[%a14]-164
803088ac:	1b 02 02 20 	addi %d2,%d2,32
803088b0:	59 e2 d8 ff 	st.w [%a14]-40,%d2
    uint32 initError = 0;
803088b4:	82 02       	mov %d2,0
803088b6:	59 e2 d4 ff 	st.w [%a14]-44,%d2
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
803088ba:	7b 30 00 2f 	movh %d2,61443
803088be:	1b 82 2a 26 	addi %d2,%d2,25256
803088c2:	59 e2 d0 ff 	st.w [%a14]-48,%d2
    password  = watchdog->CON0.B.PW;
803088c6:	99 e2 d0 ff 	ld.a %a2,[%a14]-48
803088ca:	54 22       	ld.w %d2,[%a2]
803088cc:	37 02 6e 21 	extr.u %d2,%d2,2,14
803088d0:	37 02 70 20 	extr.u %d2,%d2,0,16
803088d4:	f9 e2 ce ff 	st.h [%a14]-50,%d2
    password ^= 0x003F;
803088d8:	c9 e2 ce ff 	ld.h %d2,[%a14]-50
803088dc:	8f f2 83 21 	xor %d2,%d2,63
803088e0:	f9 e2 ce ff 	st.h [%a14]-50,%d2
    return password;
803088e4:	b9 e2 ce ff 	ld.hu %d2,[%a14]-50
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
803088e8:	f9 e2 cc ff 	st.h [%a14]-52,%d2
    IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
803088ec:	b9 e2 cc ff 	ld.hu %d2,[%a14]-52
803088f0:	f9 e2 ca ff 	st.h [%a14]-54,%d2
    if (SCU_WDTS_CON0.B.LCK)
803088f4:	91 30 00 2f 	movh.a %a2,61443
803088f8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
803088fc:	54 22       	ld.w %d2,[%a2]
803088fe:	37 02 e1 20 	extr.u %d2,%d2,1,1
80308902:	8f f2 0f 21 	and %d2,%d2,255
80308906:	df 02 18 00 	jeq %d2,0,80308936 <IfxScuCcu_init+0x880>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030890a:	b9 e2 ca ff 	ld.hu %d2,[%a14]-54
8030890e:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80308910:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80308914:	91 30 00 2f 	movh.a %a2,61443
80308918:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030891c:	54 22       	ld.w %d2,[%a2]
8030891e:	37 02 70 28 	extr.u %d2,%d2,16,16
80308922:	37 02 70 20 	extr.u %d2,%d2,0,16
80308926:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030892a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8030892c:	91 30 00 2f 	movh.a %a2,61443
80308930:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80308934:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80308936:	b9 e2 ca ff 	ld.hu %d2,[%a14]-54 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030893a:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8030893c:	8f 22 40 31 	or %d3,%d2,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80308940:	91 30 00 2f 	movh.a %a2,61443
80308944:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80308948:	54 22       	ld.w %d2,[%a2]
8030894a:	37 02 70 28 	extr.u %d2,%d2,16,16
8030894e:	37 02 70 20 	extr.u %d2,%d2,0,16
80308952:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80308956:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80308958:	91 30 00 2f 	movh.a %a2,61443
8030895c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80308960:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80308962:	00 00       	nop 
80308964:	91 30 00 2f 	movh.a %a2,61443
80308968:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030896c:	54 22       	ld.w %d2,[%a2]
8030896e:	37 02 61 20 	extr.u %d2,%d2,0,1
80308972:	8f f2 0f 21 	and %d2,%d2,255
80308976:	df 12 f7 7f 	jeq %d2,1,80308964 <IfxScuCcu_init+0x8ae>
}
8030897a:	00 00       	nop 
        ccucon0.U         = SCU_CCUCON0.U & ~clockDistributionConfig->ccucon0.mask;
8030897c:	91 30 00 2f 	movh.a %a2,61443
80308980:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd2fc04>>
80308984:	54 23       	ld.w %d3,[%a2]
80308986:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036030 <_START2_end+0x4fd2fc04>>
8030898a:	b0 42       	add.a %a2,4
8030898c:	54 22       	ld.w %d2,[%a2]
8030898e:	46 02       	not %d2
80308990:	26 32       	and %d2,%d3
80308992:	59 e2 d4 ef 	st.w [%a14]-108,%d2
        ccucon0.U        |= (clockDistributionConfig->ccucon0.mask & clockDistributionConfig->ccucon0.value);
80308996:	19 e3 d4 ef 	ld.w %d3,[%a14]-108
8030899a:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
8030899e:	b0 42       	add.a %a2,4
803089a0:	54 24       	ld.w %d4,[%a2]
803089a2:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
803089a6:	54 22       	ld.w %d2,[%a2]
803089a8:	26 42       	and %d2,%d4
803089aa:	a6 32       	or %d2,%d3
803089ac:	59 e2 d4 ef 	st.w [%a14]-108,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
803089b0:	3b 00 00 21 	mov %d2,4096
803089b4:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON0.B.LCK != 0U)
803089b8:	1d 00 10 00 	j 803089d8 <IfxScuCcu_init+0x922>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803089bc:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803089c0:	c2 f2       	add %d2,-1
803089c2:	59 e2 c4 ff 	st.w [%a14]-60,%d2
803089c6:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803089ca:	ff 12 07 00 	jge %d2,1,803089d8 <IfxScuCcu_init+0x922>
803089ce:	82 12       	mov %d2,1
803089d0:	59 e2 d4 ff 	st.w [%a14]-44,%d2
803089d4:	1d 00 0d 00 	j 803089ee <IfxScuCcu_init+0x938>
        while (SCU_CCUCON0.B.LCK != 0U)
803089d8:	91 30 00 2f 	movh.a %a2,61443
803089dc:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd2fc04>>
803089e0:	54 22       	ld.w %d2,[%a2]
803089e2:	37 02 e1 2f 	extr.u %d2,%d2,31,1
803089e6:	8f f2 0f 21 	and %d2,%d2,255
803089ea:	df 02 e9 ff 	jne %d2,0,803089bc <IfxScuCcu_init+0x906>
        SCU_CCUCON0.U     = ccucon0.U;      /*Set update bit explicitly to make above configurations effective */
803089ee:	91 30 00 2f 	movh.a %a2,61443
803089f2:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd2fc04>>
803089f6:	19 e2 d4 ef 	ld.w %d2,[%a14]-108 <f0036030 <_START2_end+0x4fd2fc04>>
803089fa:	74 22       	st.w [%a2],%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
803089fc:	3b 00 00 21 	mov %d2,4096
80308a00:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON0.B.LCK != 0U)
80308a04:	1d 00 10 00 	j 80308a24 <IfxScuCcu_init+0x96e>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80308a08:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308a0c:	c2 f2       	add %d2,-1
80308a0e:	59 e2 c4 ff 	st.w [%a14]-60,%d2
80308a12:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308a16:	ff 12 07 00 	jge %d2,1,80308a24 <IfxScuCcu_init+0x96e>
80308a1a:	82 12       	mov %d2,1
80308a1c:	59 e2 d4 ff 	st.w [%a14]-44,%d2
80308a20:	1d 00 0d 00 	j 80308a3a <IfxScuCcu_init+0x984>
        while (SCU_CCUCON0.B.LCK != 0U)
80308a24:	91 30 00 2f 	movh.a %a2,61443
80308a28:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd2fc04>>
80308a2c:	54 22       	ld.w %d2,[%a2]
80308a2e:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80308a32:	8f f2 0f 21 	and %d2,%d2,255
80308a36:	df 02 e9 ff 	jne %d2,0,80308a08 <IfxScuCcu_init+0x952>
        ccucon1.U = SCU_CCUCON1.U;
80308a3a:	91 30 00 2f 	movh.a %a2,61443
80308a3e:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd2fc08>>
80308a42:	54 22       	ld.w %d2,[%a2]
80308a44:	59 e2 d0 ef 	st.w [%a14]-112 <f0036034 <_START2_end+0x4fd2fc08>>,%d2
        if (ccucon1.B.CLKSELMCAN
80308a48:	19 e2 d0 ef 	ld.w %d2,[%a14]-112 <f0036034 <_START2_end+0x4fd2fc08>>
80308a4c:	8f 02 03 21 	and %d2,%d2,48
80308a50:	df 02 10 80 	jne %d2,0,80308a70 <IfxScuCcu_init+0x9ba>
            || ccucon1.B.CLKSELMSC
80308a54:	19 e2 d0 ef 	ld.w %d2,[%a14]-112
80308a58:	7b 00 03 30 	movh %d3,48
80308a5c:	26 32       	and %d2,%d3
80308a5e:	df 02 09 80 	jne %d2,0,80308a70 <IfxScuCcu_init+0x9ba>
            || ccucon1.B.CLKSELQSPI)
80308a62:	19 e2 d0 ef 	ld.w %d2,[%a14]-112
80308a66:	7b 00 00 33 	movh %d3,12288
80308a6a:	26 32       	and %d2,%d3
80308a6c:	df 02 7b 00 	jeq %d2,0,80308b62 <IfxScuCcu_init+0xaac>
            ccucon1.U  = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
80308a70:	91 30 00 2f 	movh.a %a2,61443
80308a74:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd2fc08>>
80308a78:	54 23       	ld.w %d3,[%a2]
80308a7a:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036034 <_START2_end+0x4fd2fc08>>
80308a7e:	d9 22 0c 00 	lea %a2,[%a2]12 <f0036034 <_START2_end+0x4fd2fc08>>
80308a82:	54 22       	ld.w %d2,[%a2]
80308a84:	46 02       	not %d2
80308a86:	26 32       	and %d2,%d3
80308a88:	59 e2 d0 ef 	st.w [%a14]-112,%d2
            ccucon1.U |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
80308a8c:	19 e3 d0 ef 	ld.w %d3,[%a14]-112
80308a90:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80308a94:	d9 22 0c 00 	lea %a2,[%a2]12
80308a98:	54 24       	ld.w %d4,[%a2]
80308a9a:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80308a9e:	d9 22 08 00 	lea %a2,[%a2]8
80308aa2:	54 22       	ld.w %d2,[%a2]
80308aa4:	26 42       	and %d2,%d4
80308aa6:	a6 32       	or %d2,%d3
80308aa8:	59 e2 d0 ef 	st.w [%a14]-112,%d2
            ccucon1.B.CLKSELMCAN = (uint32)0;
80308aac:	19 e2 d0 ef 	ld.w %d2,[%a14]-112
80308ab0:	8f 02 c3 21 	andn %d2,%d2,48
80308ab4:	59 e2 d0 ef 	st.w [%a14]-112,%d2
            ccucon1.B.CLKSELMSC  = (uint32)0;
80308ab8:	19 e2 d0 ef 	ld.w %d2,[%a14]-112
80308abc:	7b 00 fd 3f 	movh %d3,65488
80308ac0:	c2 f3       	add %d3,-1
80308ac2:	26 32       	and %d2,%d3
80308ac4:	59 e2 d0 ef 	st.w [%a14]-112,%d2
            ccucon1.B.CLKSELQSPI = (uint32)0;
80308ac8:	19 e2 d0 ef 	ld.w %d2,[%a14]-112
80308acc:	7b 00 00 3d 	movh %d3,53248
80308ad0:	c2 f3       	add %d3,-1
80308ad2:	26 32       	and %d2,%d3
80308ad4:	59 e2 d0 ef 	st.w [%a14]-112,%d2
            timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80308ad8:	3b 00 00 21 	mov %d2,4096
80308adc:	59 e2 c4 ff 	st.w [%a14]-60,%d2
            while (SCU_CCUCON1.B.LCK != 0U)
80308ae0:	1d 00 10 00 	j 80308b00 <IfxScuCcu_init+0xa4a>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80308ae4:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308ae8:	c2 f2       	add %d2,-1
80308aea:	59 e2 c4 ff 	st.w [%a14]-60,%d2
80308aee:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308af2:	ff 12 07 00 	jge %d2,1,80308b00 <IfxScuCcu_init+0xa4a>
80308af6:	82 12       	mov %d2,1
80308af8:	59 e2 d4 ff 	st.w [%a14]-44,%d2
80308afc:	1d 00 0d 00 	j 80308b16 <IfxScuCcu_init+0xa60>
            while (SCU_CCUCON1.B.LCK != 0U)
80308b00:	91 30 00 2f 	movh.a %a2,61443
80308b04:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd2fc08>>
80308b08:	54 22       	ld.w %d2,[%a2]
80308b0a:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80308b0e:	8f f2 0f 21 	and %d2,%d2,255
80308b12:	df 02 e9 ff 	jne %d2,0,80308ae4 <IfxScuCcu_init+0xa2e>
            SCU_CCUCON1.U     = ccucon1.U;
80308b16:	91 30 00 2f 	movh.a %a2,61443
80308b1a:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd2fc08>>
80308b1e:	19 e2 d0 ef 	ld.w %d2,[%a14]-112 <f0036034 <_START2_end+0x4fd2fc08>>
80308b22:	74 22       	st.w [%a2],%d2
            timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80308b24:	3b 00 00 21 	mov %d2,4096
80308b28:	59 e2 c4 ff 	st.w [%a14]-60,%d2
            while (SCU_CCUCON1.B.LCK != 0U)
80308b2c:	1d 00 10 00 	j 80308b4c <IfxScuCcu_init+0xa96>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80308b30:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308b34:	c2 f2       	add %d2,-1
80308b36:	59 e2 c4 ff 	st.w [%a14]-60,%d2
80308b3a:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308b3e:	ff 12 07 00 	jge %d2,1,80308b4c <IfxScuCcu_init+0xa96>
80308b42:	82 12       	mov %d2,1
80308b44:	59 e2 d4 ff 	st.w [%a14]-44,%d2
80308b48:	1d 00 0d 00 	j 80308b62 <IfxScuCcu_init+0xaac>
            while (SCU_CCUCON1.B.LCK != 0U)
80308b4c:	91 30 00 2f 	movh.a %a2,61443
80308b50:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd2fc08>>
80308b54:	54 22       	ld.w %d2,[%a2]
80308b56:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80308b5a:	8f f2 0f 21 	and %d2,%d2,255
80308b5e:	df 02 e9 ff 	jne %d2,0,80308b30 <IfxScuCcu_init+0xa7a>
        ccucon1.U         = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
80308b62:	91 30 00 2f 	movh.a %a2,61443
80308b66:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd2fc08>>
80308b6a:	54 23       	ld.w %d3,[%a2]
80308b6c:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036034 <_START2_end+0x4fd2fc08>>
80308b70:	d9 22 0c 00 	lea %a2,[%a2]12 <f0036034 <_START2_end+0x4fd2fc08>>
80308b74:	54 22       	ld.w %d2,[%a2]
80308b76:	46 02       	not %d2
80308b78:	26 32       	and %d2,%d3
80308b7a:	59 e2 d0 ef 	st.w [%a14]-112,%d2
        ccucon1.U        |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
80308b7e:	19 e3 d0 ef 	ld.w %d3,[%a14]-112
80308b82:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80308b86:	d9 22 0c 00 	lea %a2,[%a2]12
80308b8a:	54 24       	ld.w %d4,[%a2]
80308b8c:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80308b90:	d9 22 08 00 	lea %a2,[%a2]8
80308b94:	54 22       	ld.w %d2,[%a2]
80308b96:	26 42       	and %d2,%d4
80308b98:	a6 32       	or %d2,%d3
80308b9a:	59 e2 d0 ef 	st.w [%a14]-112,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80308b9e:	3b 00 00 21 	mov %d2,4096
80308ba2:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON1.B.LCK != 0U)
80308ba6:	1d 00 10 00 	j 80308bc6 <IfxScuCcu_init+0xb10>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80308baa:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308bae:	c2 f2       	add %d2,-1
80308bb0:	59 e2 c4 ff 	st.w [%a14]-60,%d2
80308bb4:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308bb8:	ff 12 07 00 	jge %d2,1,80308bc6 <IfxScuCcu_init+0xb10>
80308bbc:	82 12       	mov %d2,1
80308bbe:	59 e2 d4 ff 	st.w [%a14]-44,%d2
80308bc2:	1d 00 0d 00 	j 80308bdc <IfxScuCcu_init+0xb26>
        while (SCU_CCUCON1.B.LCK != 0U)
80308bc6:	91 30 00 2f 	movh.a %a2,61443
80308bca:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd2fc08>>
80308bce:	54 22       	ld.w %d2,[%a2]
80308bd0:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80308bd4:	8f f2 0f 21 	and %d2,%d2,255
80308bd8:	df 02 e9 ff 	jne %d2,0,80308baa <IfxScuCcu_init+0xaf4>
        SCU_CCUCON1.U     = ccucon1.U;
80308bdc:	91 30 00 2f 	movh.a %a2,61443
80308be0:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd2fc08>>
80308be4:	19 e2 d0 ef 	ld.w %d2,[%a14]-112 <f0036034 <_START2_end+0x4fd2fc08>>
80308be8:	74 22       	st.w [%a2],%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80308bea:	3b 00 00 21 	mov %d2,4096
80308bee:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON1.B.LCK != 0U)
80308bf2:	1d 00 10 00 	j 80308c12 <IfxScuCcu_init+0xb5c>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80308bf6:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308bfa:	c2 f2       	add %d2,-1
80308bfc:	59 e2 c4 ff 	st.w [%a14]-60,%d2
80308c00:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308c04:	ff 12 07 00 	jge %d2,1,80308c12 <IfxScuCcu_init+0xb5c>
80308c08:	82 12       	mov %d2,1
80308c0a:	59 e2 d4 ff 	st.w [%a14]-44,%d2
80308c0e:	1d 00 0d 00 	j 80308c28 <IfxScuCcu_init+0xb72>
        while (SCU_CCUCON1.B.LCK != 0U)
80308c12:	91 30 00 2f 	movh.a %a2,61443
80308c16:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd2fc08>>
80308c1a:	54 22       	ld.w %d2,[%a2]
80308c1c:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80308c20:	8f f2 0f 21 	and %d2,%d2,255
80308c24:	df 02 e9 ff 	jne %d2,0,80308bf6 <IfxScuCcu_init+0xb40>
        ccucon2.U = SCU_CCUCON2.U;
80308c28:	91 30 00 2f 	movh.a %a2,61443
80308c2c:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fd2fc14>>
80308c30:	54 22       	ld.w %d2,[%a2]
80308c32:	59 e2 cc ef 	st.w [%a14]-116 <f0036040 <_START2_end+0x4fd2fc14>>,%d2
        if (ccucon2.B.CLKSELASCLINS)
80308c36:	19 e2 cc ef 	ld.w %d2,[%a14]-116 <f0036040 <_START2_end+0x4fd2fc14>>
80308c3a:	3b 00 00 33 	mov %d3,12288
80308c3e:	26 32       	and %d2,%d3
80308c40:	df 02 6c 00 	jeq %d2,0,80308d18 <IfxScuCcu_init+0xc62>
            ccucon2.U               = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
80308c44:	91 30 00 2f 	movh.a %a2,61443
80308c48:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fd2fc14>>
80308c4c:	54 23       	ld.w %d3,[%a2]
80308c4e:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036040 <_START2_end+0x4fd2fc14>>
80308c52:	d9 22 14 00 	lea %a2,[%a2]20 <f0036040 <_START2_end+0x4fd2fc14>>
80308c56:	54 22       	ld.w %d2,[%a2]
80308c58:	46 02       	not %d2
80308c5a:	26 32       	and %d2,%d3
80308c5c:	59 e2 cc ef 	st.w [%a14]-116,%d2
            ccucon2.U              |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
80308c60:	19 e3 cc ef 	ld.w %d3,[%a14]-116
80308c64:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80308c68:	d9 22 14 00 	lea %a2,[%a2]20
80308c6c:	54 24       	ld.w %d4,[%a2]
80308c6e:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80308c72:	d9 22 10 00 	lea %a2,[%a2]16
80308c76:	54 22       	ld.w %d2,[%a2]
80308c78:	26 42       	and %d2,%d4
80308c7a:	a6 32       	or %d2,%d3
80308c7c:	59 e2 cc ef 	st.w [%a14]-116,%d2
            ccucon2.B.CLKSELASCLINS = (uint32)0;
80308c80:	19 e2 cc ef 	ld.w %d2,[%a14]-116
80308c84:	3b f0 ff 3c 	mov %d3,-12289
80308c88:	26 32       	and %d2,%d3
80308c8a:	59 e2 cc ef 	st.w [%a14]-116,%d2
            timeoutCycleCount       = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80308c8e:	3b 00 00 21 	mov %d2,4096
80308c92:	59 e2 c4 ff 	st.w [%a14]-60,%d2
            while (SCU_CCUCON2.B.LCK != 0U)
80308c96:	1d 00 10 00 	j 80308cb6 <IfxScuCcu_init+0xc00>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80308c9a:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308c9e:	c2 f2       	add %d2,-1
80308ca0:	59 e2 c4 ff 	st.w [%a14]-60,%d2
80308ca4:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308ca8:	ff 12 07 00 	jge %d2,1,80308cb6 <IfxScuCcu_init+0xc00>
80308cac:	82 12       	mov %d2,1
80308cae:	59 e2 d4 ff 	st.w [%a14]-44,%d2
80308cb2:	1d 00 0d 00 	j 80308ccc <IfxScuCcu_init+0xc16>
            while (SCU_CCUCON2.B.LCK != 0U)
80308cb6:	91 30 00 2f 	movh.a %a2,61443
80308cba:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fd2fc14>>
80308cbe:	54 22       	ld.w %d2,[%a2]
80308cc0:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80308cc4:	8f f2 0f 21 	and %d2,%d2,255
80308cc8:	df 02 e9 ff 	jne %d2,0,80308c9a <IfxScuCcu_init+0xbe4>
            SCU_CCUCON2.U     = ccucon2.U;
80308ccc:	91 30 00 2f 	movh.a %a2,61443
80308cd0:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fd2fc14>>
80308cd4:	19 e2 cc ef 	ld.w %d2,[%a14]-116 <f0036040 <_START2_end+0x4fd2fc14>>
80308cd8:	74 22       	st.w [%a2],%d2
            timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80308cda:	3b 00 00 21 	mov %d2,4096
80308cde:	59 e2 c4 ff 	st.w [%a14]-60,%d2
            while (SCU_CCUCON2.B.LCK != 0U)
80308ce2:	1d 00 10 00 	j 80308d02 <IfxScuCcu_init+0xc4c>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80308ce6:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308cea:	c2 f2       	add %d2,-1
80308cec:	59 e2 c4 ff 	st.w [%a14]-60,%d2
80308cf0:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308cf4:	ff 12 07 00 	jge %d2,1,80308d02 <IfxScuCcu_init+0xc4c>
80308cf8:	82 12       	mov %d2,1
80308cfa:	59 e2 d4 ff 	st.w [%a14]-44,%d2
80308cfe:	1d 00 0d 00 	j 80308d18 <IfxScuCcu_init+0xc62>
            while (SCU_CCUCON2.B.LCK != 0U)
80308d02:	91 30 00 2f 	movh.a %a2,61443
80308d06:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fd2fc14>>
80308d0a:	54 22       	ld.w %d2,[%a2]
80308d0c:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80308d10:	8f f2 0f 21 	and %d2,%d2,255
80308d14:	df 02 e9 ff 	jne %d2,0,80308ce6 <IfxScuCcu_init+0xc30>
        ccucon2.U         = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
80308d18:	91 30 00 2f 	movh.a %a2,61443
80308d1c:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fd2fc14>>
80308d20:	54 23       	ld.w %d3,[%a2]
80308d22:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036040 <_START2_end+0x4fd2fc14>>
80308d26:	d9 22 14 00 	lea %a2,[%a2]20 <f0036040 <_START2_end+0x4fd2fc14>>
80308d2a:	54 22       	ld.w %d2,[%a2]
80308d2c:	46 02       	not %d2
80308d2e:	26 32       	and %d2,%d3
80308d30:	59 e2 cc ef 	st.w [%a14]-116,%d2
        ccucon2.U        |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
80308d34:	19 e3 cc ef 	ld.w %d3,[%a14]-116
80308d38:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80308d3c:	d9 22 14 00 	lea %a2,[%a2]20
80308d40:	54 24       	ld.w %d4,[%a2]
80308d42:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80308d46:	d9 22 10 00 	lea %a2,[%a2]16
80308d4a:	54 22       	ld.w %d2,[%a2]
80308d4c:	26 42       	and %d2,%d4
80308d4e:	a6 32       	or %d2,%d3
80308d50:	59 e2 cc ef 	st.w [%a14]-116,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80308d54:	3b 00 00 21 	mov %d2,4096
80308d58:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON2.B.LCK != 0U)
80308d5c:	1d 00 10 00 	j 80308d7c <IfxScuCcu_init+0xcc6>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80308d60:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308d64:	c2 f2       	add %d2,-1
80308d66:	59 e2 c4 ff 	st.w [%a14]-60,%d2
80308d6a:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308d6e:	ff 12 07 00 	jge %d2,1,80308d7c <IfxScuCcu_init+0xcc6>
80308d72:	82 12       	mov %d2,1
80308d74:	59 e2 d4 ff 	st.w [%a14]-44,%d2
80308d78:	1d 00 0d 00 	j 80308d92 <IfxScuCcu_init+0xcdc>
        while (SCU_CCUCON2.B.LCK != 0U)
80308d7c:	91 30 00 2f 	movh.a %a2,61443
80308d80:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fd2fc14>>
80308d84:	54 22       	ld.w %d2,[%a2]
80308d86:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80308d8a:	8f f2 0f 21 	and %d2,%d2,255
80308d8e:	df 02 e9 ff 	jne %d2,0,80308d60 <IfxScuCcu_init+0xcaa>
        SCU_CCUCON2.U     = ccucon2.U;
80308d92:	91 30 00 2f 	movh.a %a2,61443
80308d96:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fd2fc14>>
80308d9a:	19 e2 cc ef 	ld.w %d2,[%a14]-116 <f0036040 <_START2_end+0x4fd2fc14>>
80308d9e:	74 22       	st.w [%a2],%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80308da0:	3b 00 00 21 	mov %d2,4096
80308da4:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON2.B.LCK != 0U)
80308da8:	1d 00 10 00 	j 80308dc8 <IfxScuCcu_init+0xd12>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80308dac:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308db0:	c2 f2       	add %d2,-1
80308db2:	59 e2 c4 ff 	st.w [%a14]-60,%d2
80308db6:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308dba:	ff 12 07 00 	jge %d2,1,80308dc8 <IfxScuCcu_init+0xd12>
80308dbe:	82 12       	mov %d2,1
80308dc0:	59 e2 d4 ff 	st.w [%a14]-44,%d2
80308dc4:	1d 00 0d 00 	j 80308dde <IfxScuCcu_init+0xd28>
        while (SCU_CCUCON2.B.LCK != 0U)
80308dc8:	91 30 00 2f 	movh.a %a2,61443
80308dcc:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fd2fc14>>
80308dd0:	54 22       	ld.w %d2,[%a2]
80308dd2:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80308dd6:	8f f2 0f 21 	and %d2,%d2,255
80308dda:	df 02 e9 ff 	jne %d2,0,80308dac <IfxScuCcu_init+0xcf6>
        ccucon5.U         = SCU_CCUCON5.U & ~clockDistributionConfig->ccucon5.mask;
80308dde:	91 30 00 2f 	movh.a %a2,61443
80308de2:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_START2_end+0x4fd2fc20>>
80308de6:	54 23       	ld.w %d3,[%a2]
80308de8:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f003604c <_START2_end+0x4fd2fc20>>
80308dec:	d9 22 1c 00 	lea %a2,[%a2]28 <f003604c <_START2_end+0x4fd2fc20>>
80308df0:	54 22       	ld.w %d2,[%a2]
80308df2:	46 02       	not %d2
80308df4:	26 32       	and %d2,%d3
80308df6:	59 e2 c8 ef 	st.w [%a14]-120,%d2
        ccucon5.U        |= (clockDistributionConfig->ccucon5.mask & clockDistributionConfig->ccucon5.value);
80308dfa:	19 e3 c8 ef 	ld.w %d3,[%a14]-120
80308dfe:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80308e02:	d9 22 1c 00 	lea %a2,[%a2]28
80308e06:	54 24       	ld.w %d4,[%a2]
80308e08:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80308e0c:	d9 22 18 00 	lea %a2,[%a2]24
80308e10:	54 22       	ld.w %d2,[%a2]
80308e12:	26 42       	and %d2,%d4
80308e14:	a6 32       	or %d2,%d3
80308e16:	59 e2 c8 ef 	st.w [%a14]-120,%d2
        ccucon5.B.UP      = 1;
80308e1a:	19 e2 c8 ef 	ld.w %d2,[%a14]-120
80308e1e:	b7 12 01 2f 	insert %d2,%d2,1,30,1
80308e22:	59 e2 c8 ef 	st.w [%a14]-120,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80308e26:	3b 00 00 21 	mov %d2,4096
80308e2a:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON5.B.LCK != 0U)
80308e2e:	1d 00 10 00 	j 80308e4e <IfxScuCcu_init+0xd98>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80308e32:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308e36:	c2 f2       	add %d2,-1
80308e38:	59 e2 c4 ff 	st.w [%a14]-60,%d2
80308e3c:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308e40:	ff 12 07 00 	jge %d2,1,80308e4e <IfxScuCcu_init+0xd98>
80308e44:	82 12       	mov %d2,1
80308e46:	59 e2 d4 ff 	st.w [%a14]-44,%d2
80308e4a:	1d 00 0d 00 	j 80308e64 <IfxScuCcu_init+0xdae>
        while (SCU_CCUCON5.B.LCK != 0U)
80308e4e:	91 30 00 2f 	movh.a %a2,61443
80308e52:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_START2_end+0x4fd2fc20>>
80308e56:	54 22       	ld.w %d2,[%a2]
80308e58:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80308e5c:	8f f2 0f 21 	and %d2,%d2,255
80308e60:	df 02 e9 ff 	jne %d2,0,80308e32 <IfxScuCcu_init+0xd7c>
        SCU_CCUCON5.U     = ccucon5.U;
80308e64:	91 30 00 2f 	movh.a %a2,61443
80308e68:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_START2_end+0x4fd2fc20>>
80308e6c:	19 e2 c8 ef 	ld.w %d2,[%a14]-120 <f003604c <_START2_end+0x4fd2fc20>>
80308e70:	74 22       	st.w [%a2],%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80308e72:	3b 00 00 21 	mov %d2,4096
80308e76:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON5.B.LCK != 0U)
80308e7a:	1d 00 10 00 	j 80308e9a <IfxScuCcu_init+0xde4>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80308e7e:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308e82:	c2 f2       	add %d2,-1
80308e84:	59 e2 c4 ff 	st.w [%a14]-60,%d2
80308e88:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80308e8c:	ff 12 07 00 	jge %d2,1,80308e9a <IfxScuCcu_init+0xde4>
80308e90:	82 12       	mov %d2,1
80308e92:	59 e2 d4 ff 	st.w [%a14]-44,%d2
80308e96:	1d 00 0d 00 	j 80308eb0 <IfxScuCcu_init+0xdfa>
        while (SCU_CCUCON5.B.LCK != 0U)
80308e9a:	91 30 00 2f 	movh.a %a2,61443
80308e9e:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_START2_end+0x4fd2fc20>>
80308ea2:	54 22       	ld.w %d2,[%a2]
80308ea4:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80308ea8:	8f f2 0f 21 	and %d2,%d2,255
80308eac:	df 02 e9 ff 	jne %d2,0,80308e7e <IfxScuCcu_init+0xdc8>
        ccucon6.U     = SCU_CCUCON6.U & ~clockDistributionConfig->ccucon6.mask;
80308eb0:	91 30 00 2f 	movh.a %a2,61443
80308eb4:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_START2_end+0x4fd2fc54>>
80308eb8:	54 23       	ld.w %d3,[%a2]
80308eba:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036080 <_START2_end+0x4fd2fc54>>
80308ebe:	d9 22 24 00 	lea %a2,[%a2]36 <f0036080 <_START2_end+0x4fd2fc54>>
80308ec2:	54 22       	ld.w %d2,[%a2]
80308ec4:	46 02       	not %d2
80308ec6:	26 32       	and %d2,%d3
80308ec8:	59 e2 c4 ef 	st.w [%a14]-124,%d2
        ccucon6.U    |= (clockDistributionConfig->ccucon6.mask & clockDistributionConfig->ccucon6.value);
80308ecc:	19 e3 c4 ef 	ld.w %d3,[%a14]-124
80308ed0:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80308ed4:	d9 22 24 00 	lea %a2,[%a2]36
80308ed8:	54 24       	ld.w %d4,[%a2]
80308eda:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80308ede:	d9 22 20 00 	lea %a2,[%a2]32
80308ee2:	54 22       	ld.w %d2,[%a2]
80308ee4:	26 42       	and %d2,%d4
80308ee6:	a6 32       	or %d2,%d3
80308ee8:	59 e2 c4 ef 	st.w [%a14]-124,%d2
        SCU_CCUCON6.U = ccucon6.U;
80308eec:	91 30 00 2f 	movh.a %a2,61443
80308ef0:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_START2_end+0x4fd2fc54>>
80308ef4:	19 e2 c4 ef 	ld.w %d2,[%a14]-124 <f0036080 <_START2_end+0x4fd2fc54>>
80308ef8:	74 22       	st.w [%a2],%d2
        ccucon7.U     = SCU_CCUCON7.U & ~clockDistributionConfig->ccucon7.mask;
80308efa:	91 30 00 2f 	movh.a %a2,61443
80308efe:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_START2_end+0x4fd2fc58>>
80308f02:	54 23       	ld.w %d3,[%a2]
80308f04:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036084 <_START2_end+0x4fd2fc58>>
80308f08:	d9 22 2c 00 	lea %a2,[%a2]44 <f0036084 <_START2_end+0x4fd2fc58>>
80308f0c:	54 22       	ld.w %d2,[%a2]
80308f0e:	46 02       	not %d2
80308f10:	26 32       	and %d2,%d3
80308f12:	59 e2 c0 ef 	st.w [%a14]-128,%d2
        ccucon7.U    |= (clockDistributionConfig->ccucon7.mask & clockDistributionConfig->ccucon7.value);
80308f16:	19 e3 c0 ef 	ld.w %d3,[%a14]-128
80308f1a:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80308f1e:	d9 22 2c 00 	lea %a2,[%a2]44
80308f22:	54 24       	ld.w %d4,[%a2]
80308f24:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80308f28:	d9 22 28 00 	lea %a2,[%a2]40
80308f2c:	54 22       	ld.w %d2,[%a2]
80308f2e:	26 42       	and %d2,%d4
80308f30:	a6 32       	or %d2,%d3
80308f32:	59 e2 c0 ef 	st.w [%a14]-128,%d2
        SCU_CCUCON7.U = ccucon7.U;
80308f36:	91 30 00 2f 	movh.a %a2,61443
80308f3a:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_START2_end+0x4fd2fc58>>
80308f3e:	19 e2 c0 ef 	ld.w %d2,[%a14]-128 <f0036084 <_START2_end+0x4fd2fc58>>
80308f42:	74 22       	st.w [%a2],%d2
        ccucon8.U     = SCU_CCUCON8.U & ~clockDistributionConfig->ccucon8.mask;
80308f44:	91 30 00 2f 	movh.a %a2,61443
80308f48:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_START2_end+0x4fd2fc5c>>
80308f4c:	54 23       	ld.w %d3,[%a2]
80308f4e:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036088 <_START2_end+0x4fd2fc5c>>
80308f52:	d9 22 34 00 	lea %a2,[%a2]52 <f0036088 <_START2_end+0x4fd2fc5c>>
80308f56:	54 22       	ld.w %d2,[%a2]
80308f58:	46 02       	not %d2
80308f5a:	26 32       	and %d2,%d3
80308f5c:	59 e2 fc df 	st.w [%a14]-132,%d2
        ccucon8.U    |= (clockDistributionConfig->ccucon8.mask & clockDistributionConfig->ccucon8.value);
80308f60:	19 e3 fc df 	ld.w %d3,[%a14]-132
80308f64:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80308f68:	d9 22 34 00 	lea %a2,[%a2]52
80308f6c:	54 24       	ld.w %d4,[%a2]
80308f6e:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80308f72:	d9 22 30 00 	lea %a2,[%a2]48
80308f76:	54 22       	ld.w %d2,[%a2]
80308f78:	26 42       	and %d2,%d4
80308f7a:	a6 32       	or %d2,%d3
80308f7c:	59 e2 fc df 	st.w [%a14]-132,%d2
        SCU_CCUCON8.U = ccucon8.U;
80308f80:	91 30 00 2f 	movh.a %a2,61443
80308f84:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_START2_end+0x4fd2fc5c>>
80308f88:	19 e2 fc df 	ld.w %d2,[%a14]-132 <f0036088 <_START2_end+0x4fd2fc5c>>
80308f8c:	74 22       	st.w [%a2],%d2
    IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
80308f8e:	b9 e2 cc ff 	ld.hu %d2,[%a14]-52 <f0036088 <_START2_end+0x4fd2fc5c>>
80308f92:	f9 e2 c2 ff 	st.h [%a14]-62 <f0036088 <_START2_end+0x4fd2fc5c>>,%d2
    if (SCU_WDTS_CON0.B.LCK)
80308f96:	91 30 00 2f 	movh.a %a2,61443
80308f9a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80308f9e:	54 22       	ld.w %d2,[%a2]
80308fa0:	37 02 e1 20 	extr.u %d2,%d2,1,1
80308fa4:	8f f2 0f 21 	and %d2,%d2,255
80308fa8:	df 02 18 00 	jeq %d2,0,80308fd8 <IfxScuCcu_init+0xf22>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80308fac:	b9 e2 c2 ff 	ld.hu %d2,[%a14]-62
80308fb0:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80308fb2:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80308fb6:	91 30 00 2f 	movh.a %a2,61443
80308fba:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80308fbe:	54 22       	ld.w %d2,[%a2]
80308fc0:	37 02 70 28 	extr.u %d2,%d2,16,16
80308fc4:	37 02 70 20 	extr.u %d2,%d2,0,16
80308fc8:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80308fcc:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80308fce:	91 30 00 2f 	movh.a %a2,61443
80308fd2:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80308fd6:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80308fd8:	b9 e2 c2 ff 	ld.hu %d2,[%a14]-62 <f00362a8 <_START2_end+0x4fd2fe7c>>
80308fdc:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80308fde:	8f 32 40 31 	or %d3,%d2,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80308fe2:	91 30 00 2f 	movh.a %a2,61443
80308fe6:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80308fea:	54 22       	ld.w %d2,[%a2]
80308fec:	37 02 70 28 	extr.u %d2,%d2,16,16
80308ff0:	37 02 70 20 	extr.u %d2,%d2,0,16
80308ff4:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80308ff8:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80308ffa:	91 30 00 2f 	movh.a %a2,61443
80308ffe:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80309002:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80309004:	00 00       	nop 
80309006:	91 30 00 2f 	movh.a %a2,61443
8030900a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030900e:	54 22       	ld.w %d2,[%a2]
80309010:	37 02 61 20 	extr.u %d2,%d2,0,1
80309014:	8f f2 0f 21 	and %d2,%d2,255
80309018:	df 02 f7 7f 	jeq %d2,0,80309006 <IfxScuCcu_init+0xf50>
}
8030901c:	00 00       	nop 
    return (boolean)initError;
8030901e:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
80309022:	8f f2 0f 21 	and %d2,%d2,255
80309026:	e9 e2 ff ff 	st.b [%a14]-1,%d2
        IfxScuWdt_setCpuEndinit(endInitPW);
    }

#endif

    if (!status)
8030902a:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
8030902e:	df 02 37 81 	jne %d2,0,8030929c <IfxScuCcu_init+0x11e6>
    {
        status = IfxScuCcu_throttleSysPllClockInline(&config->sysPllThrottleConfig);
80309032:	19 e2 dc df 	ld.w %d2,[%a14]-164
80309036:	1b 82 01 20 	addi %d2,%d2,24
8030903a:	59 e2 fc ef 	st.w [%a14]-68,%d2
}


IFX_INLINE boolean IfxScuCcu_throttleSysPllClockInline(const IfxScuCcu_PllThrottleConfig *pllThrottleConfig)
{
    uint8  initError = 0;
8030903e:	82 02       	mov %d2,0
80309040:	e9 e2 fb ef 	st.b [%a14]-69,%d2
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
80309044:	7b 30 00 2f 	movh %d2,61443
80309048:	1b 82 2a 26 	addi %d2,%d2,25256
8030904c:	59 e2 f4 ef 	st.w [%a14]-76,%d2
    password  = watchdog->CON0.B.PW;
80309050:	99 e2 f4 ef 	ld.a %a2,[%a14]-76
80309054:	54 22       	ld.w %d2,[%a2]
80309056:	37 02 6e 21 	extr.u %d2,%d2,2,14
8030905a:	37 02 70 20 	extr.u %d2,%d2,0,16
8030905e:	f9 e2 f2 ef 	st.h [%a14]-78,%d2
    password ^= 0x003F;
80309062:	c9 e2 f2 ef 	ld.h %d2,[%a14]-78
80309066:	8f f2 83 21 	xor %d2,%d2,63
8030906a:	f9 e2 f2 ef 	st.h [%a14]-78,%d2
    return password;
8030906e:	b9 e2 f2 ef 	ld.hu %d2,[%a14]-78
    uint8  pllStepsCount;
    uint16 endinitSfty_pw;
    uint32 timeoutCycleCount;

    /*get the watch-dog passwords for usage with this function*/
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
80309072:	f9 e2 f0 ef 	st.h [%a14]-80,%d2

    /*Start Pll ramp up sequence */
    for (pllStepsCount = 0; pllStepsCount < pllThrottleConfig->numOfSteps; pllStepsCount++)
80309076:	82 02       	mov %d2,0
80309078:	e9 e2 ef ef 	st.b [%a14]-81,%d2
8030907c:	1d 00 05 01 	j 80309286 <IfxScuCcu_init+0x11d0>
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
80309080:	b9 e2 f0 ef 	ld.hu %d2,[%a14]-80
80309084:	f9 e2 ec ef 	st.h [%a14]-84,%d2
    if (SCU_WDTS_CON0.B.LCK)
80309088:	91 30 00 2f 	movh.a %a2,61443
8030908c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80309090:	54 22       	ld.w %d2,[%a2]
80309092:	37 02 e1 20 	extr.u %d2,%d2,1,1
80309096:	8f f2 0f 21 	and %d2,%d2,255
8030909a:	df 02 18 00 	jeq %d2,0,803090ca <IfxScuCcu_init+0x1014>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030909e:	b9 e2 ec ef 	ld.hu %d2,[%a14]-84
803090a2:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803090a4:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803090a8:	91 30 00 2f 	movh.a %a2,61443
803090ac:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
803090b0:	54 22       	ld.w %d2,[%a2]
803090b2:	37 02 70 28 	extr.u %d2,%d2,16,16
803090b6:	37 02 70 20 	extr.u %d2,%d2,0,16
803090ba:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803090be:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803090c0:	91 30 00 2f 	movh.a %a2,61443
803090c4:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
803090c8:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803090ca:	b9 e2 ec ef 	ld.hu %d2,[%a14]-84 <f00362a8 <_START2_end+0x4fd2fe7c>>
803090ce:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803090d0:	8f 22 40 31 	or %d3,%d2,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803090d4:	91 30 00 2f 	movh.a %a2,61443
803090d8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
803090dc:	54 22       	ld.w %d2,[%a2]
803090de:	37 02 70 28 	extr.u %d2,%d2,16,16
803090e2:	37 02 70 20 	extr.u %d2,%d2,0,16
803090e6:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803090ea:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803090ec:	91 30 00 2f 	movh.a %a2,61443
803090f0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
803090f4:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
803090f6:	00 00       	nop 
803090f8:	91 30 00 2f 	movh.a %a2,61443
803090fc:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80309100:	54 22       	ld.w %d2,[%a2]
80309102:	37 02 61 20 	extr.u %d2,%d2,0,1
80309106:	8f f2 0f 21 	and %d2,%d2,255
8030910a:	df 12 f7 7f 	jeq %d2,1,803090f8 <IfxScuCcu_init+0x1042>
}
8030910e:	00 00       	nop 

            /*Configure K2 divider */
            timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
80309110:	3b 00 00 26 	mov %d2,24576
80309114:	59 e2 e8 ef 	st.w [%a14]-88,%d2

            while (SCU_SYSPLLSTAT.B.K2RDY == 0U)
80309118:	1d 00 10 00 	j 80309138 <IfxScuCcu_init+0x1082>
            {
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
8030911c:	19 e2 e8 ef 	ld.w %d2,[%a14]-88
80309120:	c2 f2       	add %d2,-1
80309122:	59 e2 e8 ef 	st.w [%a14]-88,%d2
80309126:	19 e2 e8 ef 	ld.w %d2,[%a14]-88
8030912a:	ff 12 07 00 	jge %d2,1,80309138 <IfxScuCcu_init+0x1082>
8030912e:	82 12       	mov %d2,1
80309130:	e9 e2 fb ef 	st.b [%a14]-69,%d2
80309134:	1d 00 0d 00 	j 8030914e <IfxScuCcu_init+0x1098>
            while (SCU_SYSPLLSTAT.B.K2RDY == 0U)
80309138:	91 30 00 2f 	movh.a %a2,61443
8030913c:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_START2_end+0x4fd2fbe8>>
80309140:	54 22       	ld.w %d2,[%a2]
80309142:	37 02 e1 22 	extr.u %d2,%d2,5,1
80309146:	8f f2 0f 21 	and %d2,%d2,255
8030914a:	df 02 e9 7f 	jeq %d2,0,8030911c <IfxScuCcu_init+0x1066>
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_SYSPLLCON1.B.K2DIV = pllThrottleConfig->pllSteps[pllStepsCount].k2Step;
8030914e:	99 e2 fc ef 	ld.a %a2,[%a14]-68
80309152:	b0 42       	add.a %a2,4
80309154:	54 23       	ld.w %d3,[%a2]
80309156:	39 e2 ef ef 	ld.bu %d2,[%a14]-81
8030915a:	06 32       	sh %d2,3
8030915c:	60 32       	mov.a %a2,%d3
8030915e:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80309162:	14 22       	ld.bu %d2,[%a2]
80309164:	91 30 00 2f 	movh.a %a2,61443
80309168:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_START2_end+0x4fd2fbf0>>
8030916c:	8f 72 00 21 	and %d2,%d2,7
80309170:	8f f2 0f 31 	and %d3,%d2,255
80309174:	54 22       	ld.w %d2,[%a2]
80309176:	37 32 03 20 	insert %d2,%d2,%d3,0,3
8030917a:	74 22       	st.w [%a2],%d2
            IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
8030917c:	b9 e2 f0 ef 	ld.hu %d2,[%a14]-80
80309180:	f9 e2 e6 ef 	st.h [%a14]-90,%d2
    if (SCU_WDTS_CON0.B.LCK)
80309184:	91 30 00 2f 	movh.a %a2,61443
80309188:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030918c:	54 22       	ld.w %d2,[%a2]
8030918e:	37 02 e1 20 	extr.u %d2,%d2,1,1
80309192:	8f f2 0f 21 	and %d2,%d2,255
80309196:	df 02 18 00 	jeq %d2,0,803091c6 <IfxScuCcu_init+0x1110>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030919a:	b9 e2 e6 ef 	ld.hu %d2,[%a14]-90
8030919e:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803091a0:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803091a4:	91 30 00 2f 	movh.a %a2,61443
803091a8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
803091ac:	54 22       	ld.w %d2,[%a2]
803091ae:	37 02 70 28 	extr.u %d2,%d2,16,16
803091b2:	37 02 70 20 	extr.u %d2,%d2,0,16
803091b6:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803091ba:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803091bc:	91 30 00 2f 	movh.a %a2,61443
803091c0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
803091c4:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803091c6:	b9 e2 e6 ef 	ld.hu %d2,[%a14]-90 <f00362a8 <_START2_end+0x4fd2fe7c>>
803091ca:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803091cc:	8f 32 40 31 	or %d3,%d2,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803091d0:	91 30 00 2f 	movh.a %a2,61443
803091d4:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
803091d8:	54 22       	ld.w %d2,[%a2]
803091da:	37 02 70 28 	extr.u %d2,%d2,16,16
803091de:	37 02 70 20 	extr.u %d2,%d2,0,16
803091e2:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803091e6:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803091e8:	91 30 00 2f 	movh.a %a2,61443
803091ec:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
803091f0:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
803091f2:	00 00       	nop 
803091f4:	91 30 00 2f 	movh.a %a2,61443
803091f8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
803091fc:	54 22       	ld.w %d2,[%a2]
803091fe:	37 02 61 20 	extr.u %d2,%d2,0,1
80309202:	8f f2 0f 21 	and %d2,%d2,255
80309206:	df 02 f7 7f 	jeq %d2,0,803091f4 <IfxScuCcu_init+0x113e>
}
8030920a:	00 00       	nop 
        }

        /*Wait for waitCounter corresponding to the pll step */
        IfxScuCcu_wait(pllThrottleConfig->pllSteps[pllStepsCount].waitTime);
8030920c:	99 e2 fc ef 	ld.a %a2,[%a14]-68
80309210:	b0 42       	add.a %a2,4
80309212:	54 23       	ld.w %d3,[%a2]
80309214:	39 e2 ef ef 	ld.bu %d2,[%a14]-81
80309218:	06 32       	sh %d2,3
8030921a:	60 32       	mov.a %a2,%d3
8030921c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80309220:	b0 42       	add.a %a2,4
80309222:	54 22       	ld.w %d2,[%a2]
80309224:	59 e2 e0 ef 	st.w [%a14]-96,%d2
    return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON0.B.STMDIV;
80309228:	82 04       	mov %d4,0
8030922a:	6d ff e5 f6 	call 80307ff4 <IfxScuCcu_getSourceFrequency>
8030922e:	02 23       	mov %d3,%d2
80309230:	91 30 00 2f 	movh.a %a2,61443
80309234:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd2fc04>>
80309238:	54 22       	ld.w %d2,[%a2]
8030923a:	37 02 64 20 	extr.u %d2,%d2,0,4
8030923e:	8f f2 0f 21 	and %d2,%d2,255
80309242:	4b 02 41 21 	itof %d2,%d2
80309246:	4b 23 51 30 	div.f %d3,%d3,%d2
}


IFX_INLINE void IfxScuCcu_wait(float32 timeSec)
{
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
8030924a:	19 e2 e0 ef 	ld.w %d2,[%a14]-96
8030924e:	4b 23 41 20 	mul.f %d2,%d3,%d2
80309252:	4b 02 71 21 	ftouz %d2,%d2
80309256:	59 e2 dc ef 	st.w [%a14]-100,%d2
    uint32 stmCountBegin = STM0_TIM0.U;
8030925a:	c5 f2 10 01 	lea %a2,f0001010 <_START2_end+0x4fcfabe4>
8030925e:	54 22       	ld.w %d2,[%a2]
80309260:	59 e2 d8 ef 	st.w [%a14]-104,%d2

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
80309264:	00 00       	nop 
80309266:	c5 f2 10 01 	lea %a2,f0001010 <_START2_end+0x4fcfabe4>
8030926a:	54 23       	ld.w %d3,[%a2]
8030926c:	19 e2 d8 ef 	ld.w %d2,[%a14]-104
80309270:	a2 23       	sub %d3,%d2
80309272:	19 e2 dc ef 	ld.w %d2,[%a14]-100
80309276:	3f 23 f8 ff 	jlt.u %d3,%d2,80309266 <IfxScuCcu_init+0x11b0>
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
8030927a:	00 00       	nop 
    for (pllStepsCount = 0; pllStepsCount < pllThrottleConfig->numOfSteps; pllStepsCount++)
8030927c:	39 e2 ef ef 	ld.bu %d2,[%a14]-81
80309280:	c2 12       	add %d2,1
80309282:	e9 e2 ef ef 	st.b [%a14]-81,%d2
80309286:	99 e2 fc ef 	ld.a %a2,[%a14]-68
8030928a:	14 22       	ld.bu %d2,[%a2]
8030928c:	39 e3 ef ef 	ld.bu %d3,[%a14]-81
80309290:	3f 23 f8 fe 	jlt.u %d3,%d2,80309080 <IfxScuCcu_init+0xfca>
    return (boolean)initError;
80309294:	39 e2 fb ef 	ld.bu %d2,[%a14]-69
80309298:	e9 e2 ff ff 	st.b [%a14]-1,%d2
    }

    return status;
8030929c:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
}
803092a0:	00 90       	ret 

803092a2 <IfxScuCcu_modulation_init>:
    *cfg = IfxScuCcu_defaultClockConfig;
}


void IfxScuCcu_modulation_init(const IfxScuCcu_Mod_Config *Mod_Cfg)
{
803092a2:	40 ae       	mov.aa %a14,%sp
803092a4:	20 28       	sub.a %sp,40
803092a6:	b5 e4 dc ff 	st.a [%a14]-36,%a4
    uint16                        endinitSfty_pw;
    IfxScuCcu_RGain_Values        RGain_P;
    IfxScuCcu_ModEn               mod_enable = Mod_Cfg->Mod_Enable;
803092aa:	99 e2 dc ff 	ld.a %a2,[%a14]-36
803092ae:	54 22       	ld.w %d2,[%a2]
803092b0:	59 e2 fc ff 	st.w [%a14]-4,%d2
    IfxScuCcu_ModulationAmplitude Mod_Amp    = Mod_Cfg->Mod_Amp;
803092b4:	99 e2 dc ff 	ld.a %a2,[%a14]-36
803092b8:	b0 42       	add.a %a2,4
803092ba:	54 22       	ld.w %d2,[%a2]
803092bc:	59 e2 f8 ff 	st.w [%a14]-8,%d2

    Ifx_SCU_SYSPLLCON0            syspllcon0;
    Ifx_SCU_SYSPLLCON2            syspllcon2;

    if (mod_enable == IfxScuCcu_ModEn_enabled)  /* do this only if modulation is enabled */
803092c0:	19 e2 fc ff 	ld.w %d2,[%a14]-4
803092c4:	df 12 42 80 	jne %d2,1,80309348 <IfxScuCcu_modulation_init+0xa6>
    {
        /* Get the parameters */
        IfxScuCcu_calRGainParameters(Mod_Amp, &RGain_P);
803092c8:	d9 e2 ec ff 	lea %a2,[%a14]-20
803092cc:	40 24       	mov.aa %a4,%a2
803092ce:	19 e4 f8 ff 	ld.w %d4,[%a14]-8
803092d2:	6d ff 42 f4 	call 80307b56 <IfxScuCcu_calRGainParameters>

        /* clear endinit protection */
        endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
803092d6:	6d 00 46 02 	call 80309762 <IfxScuWdt_getSafetyWatchdogPassword>
803092da:	f9 e2 f6 ff 	st.h [%a14]-10,%d2
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
803092de:	b9 e2 f6 ff 	ld.hu %d2,[%a14]-10
803092e2:	02 24       	mov %d4,%d2
803092e4:	6d 00 8a 00 	call 803093f8 <IfxScuWdt_clearSafetyEndinit>

        /* write all registers here */

        /* Write SYSPLLCON2 with RGain */
        syspllcon2.U        = SCU_SYSPLLCON2.U;
803092e8:	91 30 00 2f 	movh.a %a2,61443
803092ec:	d9 22 20 06 	lea %a2,[%a2]24608 <f0036020 <_START2_end+0x4fd2fbf4>>
803092f0:	54 22       	ld.w %d2,[%a2]
803092f2:	59 e2 e4 ff 	st.w [%a14]-28 <f0036020 <_START2_end+0x4fd2fbf4>>,%d2
        syspllcon2.B.MODCFG = IFXSCUCCU_GET_MODCFG(RGain_P.RGainHex);
803092f6:	b9 e2 f0 ff 	ld.hu %d2,[%a14]-16 <f0036020 <_START2_end+0x4fd2fbf4>>
803092fa:	3b 00 40 3f 	mov %d3,-3072
803092fe:	a6 32       	or %d2,%d3
80309300:	37 02 70 20 	extr.u %d2,%d2,0,16
80309304:	f9 e2 e4 ff 	st.h [%a14]-28,%d2
        SCU_SYSPLLCON2.U    = syspllcon2.U;
80309308:	91 30 00 2f 	movh.a %a2,61443
8030930c:	d9 22 20 06 	lea %a2,[%a2]24608 <f0036020 <_START2_end+0x4fd2fbf4>>
80309310:	19 e2 e4 ff 	ld.w %d2,[%a14]-28 <f0036020 <_START2_end+0x4fd2fbf4>>
80309314:	74 22       	st.w [%a2],%d2

        /* enable modulation now */
        syspllcon0.U       = SCU_SYSPLLCON0.U;
80309316:	91 30 00 2f 	movh.a %a2,61443
8030931a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
8030931e:	54 22       	ld.w %d2,[%a2]
80309320:	59 e2 e8 ff 	st.w [%a14]-24 <f0036018 <_START2_end+0x4fd2fbec>>,%d2
        syspllcon0.B.MODEN = (uint32)IfxScuCcu_ModEn_enabled;
80309324:	19 e2 e8 ff 	ld.w %d2,[%a14]-24 <f0036018 <_START2_end+0x4fd2fbec>>
80309328:	b7 12 01 21 	insert %d2,%d2,1,2,1
8030932c:	59 e2 e8 ff 	st.w [%a14]-24,%d2
        SCU_SYSPLLCON0.U   = syspllcon0.U;
80309330:	91 30 00 2f 	movh.a %a2,61443
80309334:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
80309338:	19 e2 e8 ff 	ld.w %d2,[%a14]-24 <f0036018 <_START2_end+0x4fd2fbec>>
8030933c:	74 22       	st.w [%a2],%d2

        /* set the endinit protection again */
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8030933e:	b9 e2 f6 ff 	ld.hu %d2,[%a14]-10 <f0036018 <_START2_end+0x4fd2fbec>>
80309342:	02 24       	mov %d4,%d2
80309344:	6d 00 7f 02 	call 80309842 <IfxScuWdt_setSafetyEndinit>
    }
}
80309348:	00 00       	nop 
8030934a:	00 90       	ret 

8030934c <IfxScuWdt_clearCpuEndinit>:
    {}
}


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
8030934c:	40 ae       	mov.aa %a14,%sp
8030934e:	20 18       	sub.a %sp,24
80309350:	02 42       	mov %d2,%d4
80309352:	f9 e2 ec ff 	st.h [%a14]-20,%d2


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80309356:	4d c0 e1 2f 	mfcr %d2,$core_id
8030935a:	59 e2 f4 ff 	st.w [%a14]-12,%d2
8030935e:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
80309362:	59 e2 f0 ff 	st.w [%a14]-16,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80309366:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
8030936a:	37 02 63 20 	extr.u %d2,%d2,0,3
8030936e:	8f f2 0f 21 	and %d2,%d2,255
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
80309372:	53 c2 20 20 	mul %d2,%d2,12
80309376:	1b c2 24 36 	addi %d3,%d2,25164
8030937a:	9b 33 00 3f 	addih %d3,%d3,61443
8030937e:	b9 e2 ec ff 	ld.hu %d2,[%a14]-20
80309382:	59 e3 fc ff 	st.w [%a14]-4,%d3
80309386:	f9 e2 fa ff 	st.h [%a14]-6,%d2
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
8030938a:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030938e:	54 22       	ld.w %d2,[%a2]
80309390:	37 02 e1 20 	extr.u %d2,%d2,1,1
80309394:	8f f2 0f 21 	and %d2,%d2,255
80309398:	df 02 14 00 	jeq %d2,0,803093c0 <IfxScuWdt_clearCpuEndinit+0x74>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030939c:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
803093a0:	06 22       	sh %d2,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
803093a2:	8f 12 40 31 	or %d3,%d2,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803093a6:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803093aa:	54 22       	ld.w %d2,[%a2]
803093ac:	37 02 70 28 	extr.u %d2,%d2,16,16
803093b0:	37 02 70 20 	extr.u %d2,%d2,0,16
803093b4:	8f 02 01 20 	sh %d2,%d2,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803093b8:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803093ba:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803093be:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803093c0:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
803093c4:	06 22       	sh %d2,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
803093c6:	8f 22 40 31 	or %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803093ca:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803093ce:	54 22       	ld.w %d2,[%a2]
803093d0:	37 02 70 28 	extr.u %d2,%d2,16,16
803093d4:	37 02 70 20 	extr.u %d2,%d2,0,16
803093d8:	8f 02 01 20 	sh %d2,%d2,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803093dc:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803093de:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803093e2:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
803093e4:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803093e8:	54 22       	ld.w %d2,[%a2]
803093ea:	37 02 61 20 	extr.u %d2,%d2,0,1
803093ee:	8f f2 0f 21 	and %d2,%d2,255
803093f2:	df 12 f9 7f 	jeq %d2,1,803093e4 <IfxScuWdt_clearCpuEndinit+0x98>
}
803093f6:	00 90       	ret 

803093f8 <IfxScuWdt_clearSafetyEndinit>:
    {}
}


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
803093f8:	40 ae       	mov.aa %a14,%sp
803093fa:	20 10       	sub.a %sp,16
803093fc:	02 42       	mov %d2,%d4
803093fe:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    IfxScuWdt_clearSafetyEndinitInline(password);
80309402:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
80309406:	f9 e2 fe ff 	st.h [%a14]-2,%d2
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
8030940a:	91 30 00 2f 	movh.a %a2,61443
8030940e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80309412:	54 22       	ld.w %d2,[%a2]
80309414:	37 02 e1 20 	extr.u %d2,%d2,1,1
80309418:	8f f2 0f 21 	and %d2,%d2,255
8030941c:	df 02 18 00 	jeq %d2,0,8030944c <IfxScuWdt_clearSafetyEndinit+0x54>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80309420:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
80309424:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80309426:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8030942a:	91 30 00 2f 	movh.a %a2,61443
8030942e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80309432:	54 22       	ld.w %d2,[%a2]
80309434:	37 02 70 28 	extr.u %d2,%d2,16,16
80309438:	37 02 70 20 	extr.u %d2,%d2,0,16
8030943c:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80309440:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80309442:	91 30 00 2f 	movh.a %a2,61443
80309446:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030944a:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030944c:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2 <f00362a8 <_START2_end+0x4fd2fe7c>>
80309450:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80309452:	8f 22 40 31 	or %d3,%d2,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80309456:	91 30 00 2f 	movh.a %a2,61443
8030945a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030945e:	54 22       	ld.w %d2,[%a2]
80309460:	37 02 70 28 	extr.u %d2,%d2,16,16
80309464:	37 02 70 20 	extr.u %d2,%d2,0,16
80309468:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030946c:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8030946e:	91 30 00 2f 	movh.a %a2,61443
80309472:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80309476:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80309478:	91 30 00 2f 	movh.a %a2,61443
8030947c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80309480:	54 22       	ld.w %d2,[%a2]
80309482:	37 02 61 20 	extr.u %d2,%d2,0,1
80309486:	8f f2 0f 21 	and %d2,%d2,255
8030948a:	df 12 f7 7f 	jeq %d2,1,80309478 <IfxScuWdt_clearSafetyEndinit+0x80>
}
8030948e:	00 90       	ret 

80309490 <IfxScuWdt_disableCpuWatchdog>:


void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
80309490:	40 ae       	mov.aa %a14,%sp
80309492:	20 28       	sub.a %sp,40
80309494:	02 42       	mov %d2,%d4
80309496:	f9 e2 dc ff 	st.h [%a14]-36,%d2
    reg.U = __mfcr(CPU_CORE_ID);
8030949a:	4d c0 e1 2f 	mfcr %d2,$core_id
8030949e:	59 e2 e4 ff 	st.w [%a14]-28,%d2
803094a2:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
803094a6:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
803094aa:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803094ae:	37 02 63 20 	extr.u %d2,%d2,0,3
803094b2:	8f f2 0f 21 	and %d2,%d2,255
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
803094b6:	59 e2 fc ff 	st.w [%a14]-4,%d2
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
803094ba:	19 e2 fc ff 	ld.w %d2,[%a14]-4
803094be:	53 c2 20 20 	mul %d2,%d2,12
803094c2:	1b c2 24 26 	addi %d2,%d2,25164
803094c6:	9b 32 00 2f 	addih %d2,%d2,61443
803094ca:	59 e2 f8 ff 	st.w [%a14]-8,%d2

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
803094ce:	b9 e2 dc ff 	ld.hu %d2,[%a14]-36
803094d2:	19 e3 f8 ff 	ld.w %d3,[%a14]-8
803094d6:	59 e3 ec ff 	st.w [%a14]-20,%d3
803094da:	f9 e2 ea ff 	st.h [%a14]-22,%d2
    if (watchdog->CON0.B.LCK)
803094de:	99 e2 ec ff 	ld.a %a2,[%a14]-20
803094e2:	54 22       	ld.w %d2,[%a2]
803094e4:	37 02 e1 20 	extr.u %d2,%d2,1,1
803094e8:	8f f2 0f 21 	and %d2,%d2,255
803094ec:	df 02 14 00 	jeq %d2,0,80309514 <IfxScuWdt_disableCpuWatchdog+0x84>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803094f0:	b9 e2 ea ff 	ld.hu %d2,[%a14]-22
803094f4:	06 22       	sh %d2,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
803094f6:	8f 12 40 31 	or %d3,%d2,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803094fa:	99 e2 ec ff 	ld.a %a2,[%a14]-20
803094fe:	54 22       	ld.w %d2,[%a2]
80309500:	37 02 70 28 	extr.u %d2,%d2,16,16
80309504:	37 02 70 20 	extr.u %d2,%d2,0,16
80309508:	8f 02 01 20 	sh %d2,%d2,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030950c:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8030950e:	99 e2 ec ff 	ld.a %a2,[%a14]-20
80309512:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80309514:	b9 e2 ea ff 	ld.hu %d2,[%a14]-22
80309518:	06 22       	sh %d2,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
8030951a:	8f 22 40 31 	or %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8030951e:	99 e2 ec ff 	ld.a %a2,[%a14]-20
80309522:	54 22       	ld.w %d2,[%a2]
80309524:	37 02 70 28 	extr.u %d2,%d2,16,16
80309528:	37 02 70 20 	extr.u %d2,%d2,0,16
8030952c:	8f 02 01 20 	sh %d2,%d2,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80309530:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80309532:	99 e2 ec ff 	ld.a %a2,[%a14]-20
80309536:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80309538:	99 e2 ec ff 	ld.a %a2,[%a14]-20
8030953c:	54 22       	ld.w %d2,[%a2]
8030953e:	37 02 61 20 	extr.u %d2,%d2,0,1
80309542:	8f f2 0f 21 	and %d2,%d2,255
80309546:	df 12 f9 7f 	jeq %d2,1,80309538 <IfxScuWdt_disableCpuWatchdog+0xa8>
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
8030954a:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
8030954e:	d9 23 04 00 	lea %a3,[%a2]4
80309552:	54 32       	ld.w %d2,[%a3]
80309554:	b7 12 81 21 	insert %d2,%d2,1,3,1
80309558:	b0 42       	add.a %a2,4
8030955a:	74 22       	st.w [%a2],%d2
    IfxScuWdt_setCpuEndinitInline(wdt, password);
8030955c:	b9 e2 dc ff 	ld.hu %d2,[%a14]-36
80309560:	19 e3 f8 ff 	ld.w %d3,[%a14]-8
80309564:	59 e3 f4 ff 	st.w [%a14]-12,%d3
80309568:	f9 e2 f2 ff 	st.h [%a14]-14,%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
8030956c:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
80309570:	54 22       	ld.w %d2,[%a2]
80309572:	37 02 e1 20 	extr.u %d2,%d2,1,1
80309576:	8f f2 0f 21 	and %d2,%d2,255
8030957a:	df 02 14 00 	jeq %d2,0,803095a2 <IfxScuWdt_disableCpuWatchdog+0x112>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030957e:	b9 e2 f2 ff 	ld.hu %d2,[%a14]-14
80309582:	06 22       	sh %d2,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80309584:	8f 12 40 31 	or %d3,%d2,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80309588:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
8030958c:	54 22       	ld.w %d2,[%a2]
8030958e:	37 02 70 28 	extr.u %d2,%d2,16,16
80309592:	37 02 70 20 	extr.u %d2,%d2,0,16
80309596:	8f 02 01 20 	sh %d2,%d2,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030959a:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8030959c:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
803095a0:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803095a2:	b9 e2 f2 ff 	ld.hu %d2,[%a14]-14
803095a6:	06 22       	sh %d2,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
803095a8:	8f 32 40 31 	or %d3,%d2,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803095ac:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
803095b0:	54 22       	ld.w %d2,[%a2]
803095b2:	37 02 70 28 	extr.u %d2,%d2,16,16
803095b6:	37 02 70 20 	extr.u %d2,%d2,0,16
803095ba:	8f 02 01 20 	sh %d2,%d2,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803095be:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803095c0:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
803095c4:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
803095c6:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
803095ca:	54 22       	ld.w %d2,[%a2]
803095cc:	37 02 61 20 	extr.u %d2,%d2,0,1
803095d0:	8f f2 0f 21 	and %d2,%d2,255
803095d4:	df 02 f9 7f 	jeq %d2,0,803095c6 <IfxScuWdt_disableCpuWatchdog+0x136>
}
803095d8:	00 90       	ret 

803095da <IfxScuWdt_disableSafetyWatchdog>:


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
803095da:	40 ae       	mov.aa %a14,%sp
803095dc:	20 10       	sub.a %sp,16
803095de:	02 42       	mov %d2,%d4
803095e0:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    IfxScuWdt_clearSafetyEndinitInline(password);
803095e4:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
803095e8:	f9 e2 fc ff 	st.h [%a14]-4,%d2
    if (SCU_WDTS_CON0.B.LCK)
803095ec:	91 30 00 2f 	movh.a %a2,61443
803095f0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
803095f4:	54 22       	ld.w %d2,[%a2]
803095f6:	37 02 e1 20 	extr.u %d2,%d2,1,1
803095fa:	8f f2 0f 21 	and %d2,%d2,255
803095fe:	df 02 18 00 	jeq %d2,0,8030962e <IfxScuWdt_disableSafetyWatchdog+0x54>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80309602:	b9 e2 fc ff 	ld.hu %d2,[%a14]-4
80309606:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80309608:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8030960c:	91 30 00 2f 	movh.a %a2,61443
80309610:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80309614:	54 22       	ld.w %d2,[%a2]
80309616:	37 02 70 28 	extr.u %d2,%d2,16,16
8030961a:	37 02 70 20 	extr.u %d2,%d2,0,16
8030961e:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80309622:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80309624:	91 30 00 2f 	movh.a %a2,61443
80309628:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030962c:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030962e:	b9 e2 fc ff 	ld.hu %d2,[%a14]-4 <f00362a8 <_START2_end+0x4fd2fe7c>>
80309632:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80309634:	8f 22 40 31 	or %d3,%d2,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80309638:	91 30 00 2f 	movh.a %a2,61443
8030963c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80309640:	54 22       	ld.w %d2,[%a2]
80309642:	37 02 70 28 	extr.u %d2,%d2,16,16
80309646:	37 02 70 20 	extr.u %d2,%d2,0,16
8030964a:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030964e:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80309650:	91 30 00 2f 	movh.a %a2,61443
80309654:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80309658:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
8030965a:	91 30 00 2f 	movh.a %a2,61443
8030965e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80309662:	54 22       	ld.w %d2,[%a2]
80309664:	37 02 61 20 	extr.u %d2,%d2,0,1
80309668:	8f f2 0f 21 	and %d2,%d2,255
8030966c:	df 12 f7 7f 	jeq %d2,1,8030965a <IfxScuWdt_disableSafetyWatchdog+0x80>
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
80309670:	91 30 00 2f 	movh.a %a2,61443
80309674:	d9 22 2c a6 	lea %a2,[%a2]25260 <f00362ac <_START2_end+0x4fd2fe80>>
80309678:	54 22       	ld.w %d2,[%a2]
8030967a:	b7 12 81 21 	insert %d2,%d2,1,3,1
8030967e:	74 22       	st.w [%a2],%d2
    IfxScuWdt_setSafetyEndinitInline(password);
80309680:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
80309684:	f9 e2 fe ff 	st.h [%a14]-2,%d2
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80309688:	91 30 00 2f 	movh.a %a2,61443
8030968c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80309690:	54 22       	ld.w %d2,[%a2]
80309692:	37 02 e1 20 	extr.u %d2,%d2,1,1
80309696:	8f f2 0f 21 	and %d2,%d2,255
8030969a:	df 02 18 00 	jeq %d2,0,803096ca <IfxScuWdt_disableSafetyWatchdog+0xf0>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030969e:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
803096a2:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803096a4:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803096a8:	91 30 00 2f 	movh.a %a2,61443
803096ac:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
803096b0:	54 22       	ld.w %d2,[%a2]
803096b2:	37 02 70 28 	extr.u %d2,%d2,16,16
803096b6:	37 02 70 20 	extr.u %d2,%d2,0,16
803096ba:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803096be:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803096c0:	91 30 00 2f 	movh.a %a2,61443
803096c4:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
803096c8:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803096ca:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2 <f00362a8 <_START2_end+0x4fd2fe7c>>
803096ce:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803096d0:	8f 32 40 31 	or %d3,%d2,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803096d4:	91 30 00 2f 	movh.a %a2,61443
803096d8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
803096dc:	54 22       	ld.w %d2,[%a2]
803096de:	37 02 70 28 	extr.u %d2,%d2,16,16
803096e2:	37 02 70 20 	extr.u %d2,%d2,0,16
803096e6:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803096ea:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803096ec:	91 30 00 2f 	movh.a %a2,61443
803096f0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
803096f4:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
803096f6:	91 30 00 2f 	movh.a %a2,61443
803096fa:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
803096fe:	54 22       	ld.w %d2,[%a2]
80309700:	37 02 61 20 	extr.u %d2,%d2,0,1
80309704:	8f f2 0f 21 	and %d2,%d2,255
80309708:	df 02 f7 7f 	jeq %d2,0,803096f6 <IfxScuWdt_disableSafetyWatchdog+0x11c>
}
8030970c:	00 90       	ret 

8030970e <IfxScuWdt_getCpuWatchdogPassword>:
    IfxScuWdt_setSafetyEndinitInline(password);
}


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
8030970e:	40 ae       	mov.aa %a14,%sp
80309710:	20 10       	sub.a %sp,16
    reg.U = __mfcr(CPU_CORE_ID);
80309712:	4d c0 e1 2f 	mfcr %d2,$core_id
80309716:	59 e2 f4 ff 	st.w [%a14]-12,%d2
8030971a:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
8030971e:	59 e2 f0 ff 	st.w [%a14]-16,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80309722:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80309726:	37 02 63 20 	extr.u %d2,%d2,0,3
8030972a:	8f f2 0f 21 	and %d2,%d2,255
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
8030972e:	53 c2 20 20 	mul %d2,%d2,12
80309732:	1b c2 24 26 	addi %d2,%d2,25164
80309736:	9b 32 00 2f 	addih %d2,%d2,61443
8030973a:	59 e2 fc ff 	st.w [%a14]-4,%d2
    password  = watchdog->CON0.B.PW;
8030973e:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80309742:	54 22       	ld.w %d2,[%a2]
80309744:	37 02 6e 21 	extr.u %d2,%d2,2,14
80309748:	37 02 70 20 	extr.u %d2,%d2,0,16
8030974c:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    password ^= 0x003F;
80309750:	c9 e2 fa ff 	ld.h %d2,[%a14]-6
80309754:	8f f2 83 21 	xor %d2,%d2,63
80309758:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    return password;
8030975c:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
}
80309760:	00 90       	ret 

80309762 <IfxScuWdt_getSafetyWatchdogPassword>:
    return password;
}


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
80309762:	40 ae       	mov.aa %a14,%sp
80309764:	20 08       	sub.a %sp,8
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
80309766:	7b 30 00 2f 	movh %d2,61443
8030976a:	1b 82 2a 26 	addi %d2,%d2,25256
8030976e:	59 e2 fc ff 	st.w [%a14]-4,%d2
    password  = watchdog->CON0.B.PW;
80309772:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80309776:	54 22       	ld.w %d2,[%a2]
80309778:	37 02 6e 21 	extr.u %d2,%d2,2,14
8030977c:	37 02 70 20 	extr.u %d2,%d2,0,16
80309780:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    password ^= 0x003F;
80309784:	c9 e2 fa ff 	ld.h %d2,[%a14]-6
80309788:	8f f2 83 21 	xor %d2,%d2,63
8030978c:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    return password;
80309790:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
80309794:	00 90       	ret 

80309796 <IfxScuWdt_setCpuEndinit>:
    IfxScuWdt_setSafetyEndinit(password);
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
80309796:	40 ae       	mov.aa %a14,%sp
80309798:	20 18       	sub.a %sp,24
8030979a:	02 42       	mov %d2,%d4
8030979c:	f9 e2 ec ff 	st.h [%a14]-20,%d2
    reg.U = __mfcr(CPU_CORE_ID);
803097a0:	4d c0 e1 2f 	mfcr %d2,$core_id
803097a4:	59 e2 f4 ff 	st.w [%a14]-12,%d2
803097a8:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
803097ac:	59 e2 f0 ff 	st.w [%a14]-16,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
803097b0:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
803097b4:	37 02 63 20 	extr.u %d2,%d2,0,3
803097b8:	8f f2 0f 21 	and %d2,%d2,255
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
803097bc:	53 c2 20 20 	mul %d2,%d2,12
803097c0:	1b c2 24 36 	addi %d3,%d2,25164
803097c4:	9b 33 00 3f 	addih %d3,%d3,61443
803097c8:	b9 e2 ec ff 	ld.hu %d2,[%a14]-20
803097cc:	59 e3 fc ff 	st.w [%a14]-4,%d3
803097d0:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    if (watchdog->CON0.B.LCK)
803097d4:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803097d8:	54 22       	ld.w %d2,[%a2]
803097da:	37 02 e1 20 	extr.u %d2,%d2,1,1
803097de:	8f f2 0f 21 	and %d2,%d2,255
803097e2:	df 02 14 00 	jeq %d2,0,8030980a <IfxScuWdt_setCpuEndinit+0x74>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803097e6:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
803097ea:	06 22       	sh %d2,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
803097ec:	8f 12 40 31 	or %d3,%d2,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803097f0:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803097f4:	54 22       	ld.w %d2,[%a2]
803097f6:	37 02 70 28 	extr.u %d2,%d2,16,16
803097fa:	37 02 70 20 	extr.u %d2,%d2,0,16
803097fe:	8f 02 01 20 	sh %d2,%d2,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80309802:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80309804:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80309808:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030980a:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
8030980e:	06 22       	sh %d2,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80309810:	8f 32 40 31 	or %d3,%d2,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80309814:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80309818:	54 22       	ld.w %d2,[%a2]
8030981a:	37 02 70 28 	extr.u %d2,%d2,16,16
8030981e:	37 02 70 20 	extr.u %d2,%d2,0,16
80309822:	8f 02 01 20 	sh %d2,%d2,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80309826:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80309828:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030982c:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
8030982e:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80309832:	54 22       	ld.w %d2,[%a2]
80309834:	37 02 61 20 	extr.u %d2,%d2,0,1
80309838:	8f f2 0f 21 	and %d2,%d2,255
8030983c:	df 02 f9 7f 	jeq %d2,0,8030982e <IfxScuWdt_setCpuEndinit+0x98>
}
80309840:	00 90       	ret 

80309842 <IfxScuWdt_setSafetyEndinit>:
    {}
}


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
80309842:	40 ae       	mov.aa %a14,%sp
80309844:	20 10       	sub.a %sp,16
80309846:	02 42       	mov %d2,%d4
80309848:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    IfxScuWdt_setSafetyEndinitInline(password);
8030984c:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
80309850:	f9 e2 fe ff 	st.h [%a14]-2,%d2
    if (SCU_WDTS_CON0.B.LCK)
80309854:	91 30 00 2f 	movh.a %a2,61443
80309858:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030985c:	54 22       	ld.w %d2,[%a2]
8030985e:	37 02 e1 20 	extr.u %d2,%d2,1,1
80309862:	8f f2 0f 21 	and %d2,%d2,255
80309866:	df 02 18 00 	jeq %d2,0,80309896 <IfxScuWdt_setSafetyEndinit+0x54>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030986a:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
8030986e:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80309870:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80309874:	91 30 00 2f 	movh.a %a2,61443
80309878:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030987c:	54 22       	ld.w %d2,[%a2]
8030987e:	37 02 70 28 	extr.u %d2,%d2,16,16
80309882:	37 02 70 20 	extr.u %d2,%d2,0,16
80309886:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030988a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8030988c:	91 30 00 2f 	movh.a %a2,61443
80309890:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
80309894:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80309896:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030989a:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8030989c:	8f 32 40 31 	or %d3,%d2,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803098a0:	91 30 00 2f 	movh.a %a2,61443
803098a4:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
803098a8:	54 22       	ld.w %d2,[%a2]
803098aa:	37 02 70 28 	extr.u %d2,%d2,16,16
803098ae:	37 02 70 20 	extr.u %d2,%d2,0,16
803098b2:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803098b6:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803098b8:	91 30 00 2f 	movh.a %a2,61443
803098bc:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
803098c0:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
803098c2:	91 30 00 2f 	movh.a %a2,61443
803098c6:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
803098ca:	54 22       	ld.w %d2,[%a2]
803098cc:	37 02 61 20 	extr.u %d2,%d2,0,1
803098d0:	8f f2 0f 21 	and %d2,%d2,255
803098d4:	df 02 f7 7f 	jeq %d2,0,803098c2 <IfxScuWdt_setSafetyEndinit+0x80>
}
803098d8:	00 90       	ret 

803098da <IfxPort_setPinMode>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
803098da:	40 ae       	mov.aa %a14,%sp
803098dc:	20 28       	sub.a %sp,40
803098de:	b5 e4 e4 ff 	st.a [%a14]-28,%a4
803098e2:	02 42       	mov %d2,%d4
803098e4:	59 e5 dc ff 	st.w [%a14]-36,%d5
803098e8:	e9 e2 e0 ff 	st.b [%a14]-32,%d2
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
803098ec:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
803098f0:	1b 02 01 20 	addi %d2,%d2,16
803098f4:	59 e2 fc ff 	st.w [%a14]-4,%d2
    uint8                 iocrIndex = (pinIndex / 4);
803098f8:	39 e2 e0 ff 	ld.bu %d2,[%a14]-32
803098fc:	06 e2       	sh %d2,-2
803098fe:	e9 e2 fb ff 	st.b [%a14]-5,%d2
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80309902:	79 e2 e0 ff 	ld.b %d2,[%a14]-32
80309906:	8f 32 00 21 	and %d2,%d2,3
8030990a:	8f f2 0f 21 	and %d2,%d2,255
8030990e:	06 32       	sh %d2,3
80309910:	e9 e2 fa ff 	st.b [%a14]-6,%d2

    if (port == &MODULE_P40)
80309914:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
80309918:	7b 40 00 3f 	movh %d3,61444
8030991c:	1b 03 80 3c 	addi %d3,%d3,-14336
80309920:	5f 32 21 80 	jne %d2,%d3,80309962 <IfxPort_setPinMode+0x88>
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80309924:	6d ff f5 fe 	call 8030970e <IfxScuWdt_getCpuWatchdogPassword>
80309928:	f9 e2 f8 ff 	st.h [%a14]-8,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
8030992c:	b9 e2 f8 ff 	ld.hu %d2,[%a14]-8
80309930:	02 24       	mov %d4,%d2
80309932:	6d ff 0d fd 	call 8030934c <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
80309936:	99 e2 e4 ff 	ld.a %a2,[%a14]-28
8030993a:	d9 22 20 10 	lea %a2,[%a2]96
8030993e:	54 23       	ld.w %d3,[%a2]
80309940:	39 e2 e0 ff 	ld.bu %d2,[%a14]-32
80309944:	82 14       	mov %d4,1
80309946:	0f 24 00 20 	sh %d2,%d4,%d2
8030994a:	46 02       	not %d2
8030994c:	26 32       	and %d2,%d3
8030994e:	99 e2 e4 ff 	ld.a %a2,[%a14]-28
80309952:	d9 22 20 10 	lea %a2,[%a2]96
80309956:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(passwd);
80309958:	b9 e2 f8 ff 	ld.hu %d2,[%a14]-8
8030995c:	02 24       	mov %d4,%d2
8030995e:	6d ff 1c ff 	call 80309796 <IfxScuWdt_setCpuEndinit>
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
80309962:	39 e2 fb ff 	ld.bu %d2,[%a14]-5
80309966:	06 22       	sh %d2,2
80309968:	19 e3 fc ff 	ld.w %d3,[%a14]-4
8030996c:	42 32       	add %d2,%d3
8030996e:	02 25       	mov %d5,%d2
80309970:	39 e2 fa ff 	ld.bu %d2,[%a14]-6
80309974:	3b f0 0f 30 	mov %d3,255
80309978:	0f 23 00 30 	sh %d3,%d3,%d2
8030997c:	39 e2 fa ff 	ld.bu %d2,[%a14]-6
80309980:	19 e4 dc ff 	ld.w %d4,[%a14]-36
80309984:	0f 24 00 20 	sh %d2,%d4,%d2
80309988:	59 e5 f4 ff 	st.w [%a14]-12,%d5
8030998c:	59 e3 f0 ff 	st.w [%a14]-16,%d3
80309990:	59 e2 ec ff 	st.w [%a14]-20,%d2
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80309994:	19 e2 ec ff 	ld.w %d2,[%a14]-20
80309998:	02 22       	mov %d2,%d2
8030999a:	82 03       	mov %d3,0
    __asm__ volatile("mov %H2,%1 \n\
8030999c:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
803099a0:	19 e4 f0 ff 	ld.w %d4,[%a14]-16
803099a4:	02 43       	mov %d3,%d4
803099a6:	49 22 40 08 	ldmst [%a2]0,%e2
}
803099aa:	00 00       	nop 
803099ac:	00 90       	ret 

803099ae <IfxCpu_Trap_memoryManagementError>:
{
803099ae:	40 ae       	mov.aa %a14,%sp
803099b0:	20 30       	sub.a %sp,48
803099b2:	59 e4 d4 ff 	st.w [%a14]-44,%d4
803099b6:	82 02       	mov %d2,0
803099b8:	e9 e2 ff ff 	st.b [%a14]-1,%d2
803099bc:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
803099c0:	59 e2 f8 ff 	st.w [%a14]-8,%d2
}

IFX_INLINE void* Ifx__getA11(void)
{
    uint32 *res;
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
803099c4:	40 b2       	mov.aa %a2,%a11
803099c6:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
803099ca:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
803099ce:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
803099d2:	79 e2 ff ff 	ld.b %d2,[%a14]-1
803099d6:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
803099da:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803099de:	8f f2 0f 21 	and %d2,%d2,255
803099e2:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
803099e6:	4d c0 e1 2f 	mfcr %d2,$core_id
803099ea:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803099ee:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
803099f2:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
803099f6:	19 e2 dc ff 	ld.w %d2,[%a14]-36
803099fa:	37 02 63 20 	extr.u %d2,%d2,0,3
803099fe:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
80309a02:	8f 72 00 21 	and %d2,%d2,7
80309a06:	8f f2 0f 31 	and %d3,%d2,255
80309a0a:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
80309a0e:	37 32 03 28 	insert %d2,%d2,%d3,16,3
80309a12:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
80309a16:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
80309a1a:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_MME_HOOK(trapWatch);
80309a1e:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm__ volatile ("debug" : : : "memory");
80309a22:	00 a0       	debug 
}
80309a24:	00 00       	nop 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80309a26:	0d 00 40 02 	rslcx 
    __asm("rfe");
80309a2a:	00 80       	rfe 
}
80309a2c:	00 00       	nop 
80309a2e:	00 90       	ret 

80309a30 <IfxCpu_Trap_internalProtectionError>:
{
80309a30:	40 ae       	mov.aa %a14,%sp
80309a32:	20 30       	sub.a %sp,48
80309a34:	59 e4 d4 ff 	st.w [%a14]-44,%d4
80309a38:	82 12       	mov %d2,1
80309a3a:	e9 e2 ff ff 	st.b [%a14]-1,%d2
80309a3e:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
80309a42:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80309a46:	40 b2       	mov.aa %a2,%a11
80309a48:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
80309a4c:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
80309a50:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
80309a54:	79 e2 ff ff 	ld.b %d2,[%a14]-1
80309a58:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
80309a5c:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80309a60:	8f f2 0f 21 	and %d2,%d2,255
80309a64:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
80309a68:	4d c0 e1 2f 	mfcr %d2,$core_id
80309a6c:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80309a70:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80309a74:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
80309a78:	19 e2 dc ff 	ld.w %d2,[%a14]-36
80309a7c:	37 02 63 20 	extr.u %d2,%d2,0,3
80309a80:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
80309a84:	8f 72 00 21 	and %d2,%d2,7
80309a88:	8f f2 0f 31 	and %d3,%d2,255
80309a8c:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
80309a90:	37 32 03 28 	insert %d2,%d2,%d3,16,3
80309a94:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
80309a98:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
80309a9c:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_IPE_HOOK(trapWatch);
80309aa0:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm__ volatile ("debug" : : : "memory");
80309aa4:	00 a0       	debug 
}
80309aa6:	00 00       	nop 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80309aa8:	0d 00 40 02 	rslcx 
    __asm("rfe");
80309aac:	00 80       	rfe 
}
80309aae:	00 00       	nop 
80309ab0:	00 90       	ret 

80309ab2 <IfxCpu_Trap_instructionError>:
{
80309ab2:	40 ae       	mov.aa %a14,%sp
80309ab4:	20 30       	sub.a %sp,48
80309ab6:	59 e4 d4 ff 	st.w [%a14]-44,%d4
80309aba:	82 22       	mov %d2,2
80309abc:	e9 e2 ff ff 	st.b [%a14]-1,%d2
80309ac0:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
80309ac4:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80309ac8:	40 b2       	mov.aa %a2,%a11
80309aca:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
80309ace:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
80309ad2:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
80309ad6:	79 e2 ff ff 	ld.b %d2,[%a14]-1
80309ada:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
80309ade:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80309ae2:	8f f2 0f 21 	and %d2,%d2,255
80309ae6:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
80309aea:	4d c0 e1 2f 	mfcr %d2,$core_id
80309aee:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80309af2:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80309af6:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
80309afa:	19 e2 dc ff 	ld.w %d2,[%a14]-36
80309afe:	37 02 63 20 	extr.u %d2,%d2,0,3
80309b02:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
80309b06:	8f 72 00 21 	and %d2,%d2,7
80309b0a:	8f f2 0f 31 	and %d3,%d2,255
80309b0e:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
80309b12:	37 32 03 28 	insert %d2,%d2,%d3,16,3
80309b16:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
80309b1a:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
80309b1e:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_IE_HOOK(trapWatch);
80309b22:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm__ volatile ("debug" : : : "memory");
80309b26:	00 a0       	debug 
}
80309b28:	00 00       	nop 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80309b2a:	0d 00 40 02 	rslcx 
    __asm("rfe");
80309b2e:	00 80       	rfe 
}
80309b30:	00 00       	nop 
80309b32:	00 90       	ret 

80309b34 <IfxCpu_Trap_contextManagementError>:
{
80309b34:	40 ae       	mov.aa %a14,%sp
80309b36:	20 30       	sub.a %sp,48
80309b38:	59 e4 d4 ff 	st.w [%a14]-44,%d4
80309b3c:	82 32       	mov %d2,3
80309b3e:	e9 e2 ff ff 	st.b [%a14]-1,%d2
80309b42:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
80309b46:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80309b4a:	40 b2       	mov.aa %a2,%a11
80309b4c:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
80309b50:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
80309b54:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
80309b58:	79 e2 ff ff 	ld.b %d2,[%a14]-1
80309b5c:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
80309b60:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80309b64:	8f f2 0f 21 	and %d2,%d2,255
80309b68:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
80309b6c:	4d c0 e1 2f 	mfcr %d2,$core_id
80309b70:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80309b74:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80309b78:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
80309b7c:	19 e2 dc ff 	ld.w %d2,[%a14]-36
80309b80:	37 02 63 20 	extr.u %d2,%d2,0,3
80309b84:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
80309b88:	8f 72 00 21 	and %d2,%d2,7
80309b8c:	8f f2 0f 31 	and %d3,%d2,255
80309b90:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
80309b94:	37 32 03 28 	insert %d2,%d2,%d3,16,3
80309b98:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
80309b9c:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
80309ba0:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_CME_HOOK(trapWatch);
80309ba4:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm__ volatile ("debug" : : : "memory");
80309ba8:	00 a0       	debug 
}
80309baa:	00 00       	nop 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80309bac:	0d 00 40 02 	rslcx 
    __asm("rfe");
80309bb0:	00 80       	rfe 
}
80309bb2:	00 00       	nop 
80309bb4:	00 90       	ret 

80309bb6 <IfxCpu_Trap_busError>:
{
80309bb6:	40 ae       	mov.aa %a14,%sp
80309bb8:	20 30       	sub.a %sp,48
80309bba:	59 e4 d4 ff 	st.w [%a14]-44,%d4
80309bbe:	82 42       	mov %d2,4
80309bc0:	e9 e2 ff ff 	st.b [%a14]-1,%d2
80309bc4:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
80309bc8:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80309bcc:	40 b2       	mov.aa %a2,%a11
80309bce:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
80309bd2:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
80309bd6:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
80309bda:	79 e2 ff ff 	ld.b %d2,[%a14]-1
80309bde:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
80309be2:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80309be6:	8f f2 0f 21 	and %d2,%d2,255
80309bea:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
80309bee:	4d c0 e1 2f 	mfcr %d2,$core_id
80309bf2:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80309bf6:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80309bfa:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
80309bfe:	19 e2 dc ff 	ld.w %d2,[%a14]-36
80309c02:	37 02 63 20 	extr.u %d2,%d2,0,3
80309c06:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
80309c0a:	8f 72 00 21 	and %d2,%d2,7
80309c0e:	8f f2 0f 31 	and %d3,%d2,255
80309c12:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
80309c16:	37 32 03 28 	insert %d2,%d2,%d3,16,3
80309c1a:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
80309c1e:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
80309c22:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_BE_HOOK(trapWatch);
80309c26:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm__ volatile ("debug" : : : "memory");
80309c2a:	00 a0       	debug 
}
80309c2c:	00 00       	nop 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80309c2e:	0d 00 40 02 	rslcx 
    __asm("rfe");
80309c32:	00 80       	rfe 
}
80309c34:	00 00       	nop 
80309c36:	00 90       	ret 

80309c38 <IfxCpu_Trap_assertion>:
{
80309c38:	40 ae       	mov.aa %a14,%sp
80309c3a:	20 30       	sub.a %sp,48
80309c3c:	59 e4 d4 ff 	st.w [%a14]-44,%d4
80309c40:	82 52       	mov %d2,5
80309c42:	e9 e2 ff ff 	st.b [%a14]-1,%d2
80309c46:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
80309c4a:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80309c4e:	40 b2       	mov.aa %a2,%a11
80309c50:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
80309c54:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
80309c58:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
80309c5c:	79 e2 ff ff 	ld.b %d2,[%a14]-1
80309c60:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
80309c64:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80309c68:	8f f2 0f 21 	and %d2,%d2,255
80309c6c:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
80309c70:	4d c0 e1 2f 	mfcr %d2,$core_id
80309c74:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80309c78:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80309c7c:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
80309c80:	19 e2 dc ff 	ld.w %d2,[%a14]-36
80309c84:	37 02 63 20 	extr.u %d2,%d2,0,3
80309c88:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
80309c8c:	8f 72 00 21 	and %d2,%d2,7
80309c90:	8f f2 0f 31 	and %d3,%d2,255
80309c94:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
80309c98:	37 32 03 28 	insert %d2,%d2,%d3,16,3
80309c9c:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
80309ca0:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
80309ca4:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_ASSERT_HOOK(trapWatch);
80309ca8:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm__ volatile ("debug" : : : "memory");
80309cac:	00 a0       	debug 
}
80309cae:	00 00       	nop 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80309cb0:	0d 00 40 02 	rslcx 
    __asm("rfe");
80309cb4:	00 80       	rfe 
}
80309cb6:	00 00       	nop 
80309cb8:	00 90       	ret 

80309cba <IfxCpu_Trap_systemCall_Cpu0>:
{
80309cba:	40 ae       	mov.aa %a14,%sp
80309cbc:	20 30       	sub.a %sp,48
80309cbe:	59 e4 d4 ff 	st.w [%a14]-44,%d4
80309cc2:	82 62       	mov %d2,6
80309cc4:	e9 e2 ff ff 	st.b [%a14]-1,%d2
80309cc8:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
80309ccc:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80309cd0:	40 b2       	mov.aa %a2,%a11
80309cd2:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
80309cd6:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
80309cda:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
80309cde:	79 e2 ff ff 	ld.b %d2,[%a14]-1
80309ce2:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
80309ce6:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80309cea:	8f f2 0f 21 	and %d2,%d2,255
80309cee:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
80309cf2:	4d c0 e1 2f 	mfcr %d2,$core_id
80309cf6:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80309cfa:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80309cfe:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
80309d02:	19 e2 dc ff 	ld.w %d2,[%a14]-36
80309d06:	37 02 63 20 	extr.u %d2,%d2,0,3
80309d0a:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
80309d0e:	8f 72 00 21 	and %d2,%d2,7
80309d12:	8f f2 0f 31 	and %d3,%d2,255
80309d16:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
80309d1a:	37 32 03 28 	insert %d2,%d2,%d3,16,3
80309d1e:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
80309d22:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
80309d26:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK(trapWatch);
80309d2a:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80309d2e:	0d 00 40 02 	rslcx 
    __asm("rfe");
80309d32:	00 80       	rfe 
}
80309d34:	00 00       	nop 
80309d36:	00 90       	ret 

80309d38 <IfxCpu_Trap_systemCall_Cpu1>:
{
80309d38:	40 ae       	mov.aa %a14,%sp
80309d3a:	20 30       	sub.a %sp,48
80309d3c:	59 e4 d4 ff 	st.w [%a14]-44,%d4
80309d40:	82 62       	mov %d2,6
80309d42:	e9 e2 ff ff 	st.b [%a14]-1,%d2
80309d46:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
80309d4a:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80309d4e:	40 b2       	mov.aa %a2,%a11
80309d50:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
80309d54:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
80309d58:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
80309d5c:	79 e2 ff ff 	ld.b %d2,[%a14]-1
80309d60:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
80309d64:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80309d68:	8f f2 0f 21 	and %d2,%d2,255
80309d6c:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
80309d70:	4d c0 e1 2f 	mfcr %d2,$core_id
80309d74:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80309d78:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80309d7c:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
80309d80:	19 e2 dc ff 	ld.w %d2,[%a14]-36
80309d84:	37 02 63 20 	extr.u %d2,%d2,0,3
80309d88:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
80309d8c:	8f 72 00 21 	and %d2,%d2,7
80309d90:	8f f2 0f 31 	and %d3,%d2,255
80309d94:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
80309d98:	37 32 03 28 	insert %d2,%d2,%d3,16,3
80309d9c:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
80309da0:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
80309da4:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK(trapWatch);
80309da8:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80309dac:	0d 00 40 02 	rslcx 
    __asm("rfe");
80309db0:	00 80       	rfe 
}
80309db2:	00 00       	nop 
80309db4:	00 90       	ret 

80309db6 <IfxCpu_Trap_systemCall_Cpu2>:
{
80309db6:	40 ae       	mov.aa %a14,%sp
80309db8:	20 30       	sub.a %sp,48
80309dba:	59 e4 d4 ff 	st.w [%a14]-44,%d4
80309dbe:	82 62       	mov %d2,6
80309dc0:	e9 e2 ff ff 	st.b [%a14]-1,%d2
80309dc4:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
80309dc8:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80309dcc:	40 b2       	mov.aa %a2,%a11
80309dce:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
80309dd2:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
80309dd6:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
80309dda:	79 e2 ff ff 	ld.b %d2,[%a14]-1
80309dde:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
80309de2:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80309de6:	8f f2 0f 21 	and %d2,%d2,255
80309dea:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
80309dee:	4d c0 e1 2f 	mfcr %d2,$core_id
80309df2:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80309df6:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80309dfa:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
80309dfe:	19 e2 dc ff 	ld.w %d2,[%a14]-36
80309e02:	37 02 63 20 	extr.u %d2,%d2,0,3
80309e06:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
80309e0a:	8f 72 00 21 	and %d2,%d2,7
80309e0e:	8f f2 0f 31 	and %d3,%d2,255
80309e12:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
80309e16:	37 32 03 28 	insert %d2,%d2,%d3,16,3
80309e1a:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
80309e1e:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
80309e22:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK(trapWatch);
80309e26:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80309e2a:	0d 00 40 02 	rslcx 
    __asm("rfe");
80309e2e:	00 80       	rfe 
}
80309e30:	00 00       	nop 
80309e32:	00 90       	ret 

80309e34 <IfxCpu_Trap_nonMaskableInterrupt>:
{
80309e34:	40 ae       	mov.aa %a14,%sp
80309e36:	20 30       	sub.a %sp,48
80309e38:	59 e4 d4 ff 	st.w [%a14]-44,%d4
80309e3c:	82 72       	mov %d2,7
80309e3e:	e9 e2 ff ff 	st.b [%a14]-1,%d2
80309e42:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
80309e46:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80309e4a:	40 b2       	mov.aa %a2,%a11
80309e4c:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
80309e50:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
80309e54:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
80309e58:	79 e2 ff ff 	ld.b %d2,[%a14]-1
80309e5c:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
80309e60:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80309e64:	8f f2 0f 21 	and %d2,%d2,255
80309e68:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
80309e6c:	4d c0 e1 2f 	mfcr %d2,$core_id
80309e70:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80309e74:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80309e78:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
80309e7c:	19 e2 dc ff 	ld.w %d2,[%a14]-36
80309e80:	37 02 63 20 	extr.u %d2,%d2,0,3
80309e84:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
80309e88:	8f 72 00 21 	and %d2,%d2,7
80309e8c:	8f f2 0f 31 	and %d3,%d2,255
80309e90:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
80309e94:	37 32 03 28 	insert %d2,%d2,%d3,16,3
80309e98:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
80309e9c:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
80309ea0:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_NMI_HOOK(trapWatch);    
80309ea4:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80309ea8:	0d 00 40 02 	rslcx 
    __asm("rfe");
80309eac:	00 80       	rfe 
}
80309eae:	00 00       	nop 
80309eb0:	00 90       	ret 

80309eb2 <IfxCpu_waitEvent>:
    return retVal;
}


boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec)
{
80309eb2:	40 ae       	mov.aa %a14,%sp
80309eb4:	20 20       	sub.a %sp,32
80309eb6:	b5 e4 e4 ff 	st.a [%a14]-28,%a4
80309eba:	59 e4 e0 ff 	st.w [%a14]-32,%d4
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
80309ebe:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
80309ec2:	7b 00 00 3f 	movh %d3,61440
80309ec6:	26 32       	and %d2,%d3
80309ec8:	7b 00 00 3d 	movh %d3,53248
80309ecc:	5f 32 17 80 	jne %d2,%d3,80309efa <IfxCpu_waitEvent+0x48>
80309ed0:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
80309ed4:	82 f3       	mov %d3,-1
80309ed6:	8f 43 1f 30 	sh %d3,%d3,-12
80309eda:	26 32       	and %d2,%d3
80309edc:	7b 00 00 37 	movh %d3,28672
80309ee0:	a6 23       	or %d3,%d2
80309ee2:	4d c0 e1 2f 	mfcr %d2,$core_id
80309ee6:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80309eea:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80309eee:	8f c2 01 20 	sh %d2,%d2,28
80309ef2:	0b 23 80 20 	sub %d2,%d3,%d2
80309ef6:	1d 00 04 00 	j 80309efe <IfxCpu_waitEvent+0x4c>
80309efa:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
80309efe:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    boolean          errorcnt      = 0U;
80309f02:	82 02       	mov %d2,0
80309f04:	e9 e2 ff ff 	st.b [%a14]-1,%d2
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON0.B.STMDIV;
80309f08:	82 04       	mov %d4,0
80309f0a:	6d ff 75 f0 	call 80307ff4 <IfxScuCcu_getSourceFrequency>
80309f0e:	02 23       	mov %d3,%d2
80309f10:	91 30 00 2f 	movh.a %a2,61443
80309f14:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd2fc04>>
80309f18:	54 22       	ld.w %d2,[%a2]
80309f1a:	37 02 64 20 	extr.u %d2,%d2,0,4
80309f1e:	8f f2 0f 21 	and %d2,%d2,255
80309f22:	4b 02 41 21 	itof %d2,%d2
80309f26:	4b 23 51 20 	div.f %d2,%d3,%d2
    /* Divide with 1000, gives the count value equivalent to milliseconds */
    uint32           stmCount      = (uint32)((IfxScuCcu_getStmFrequency() / 1000) * timeoutMilliSec);
80309f2a:	7b a0 47 34 	movh %d3,17530
80309f2e:	4b 32 51 30 	div.f %d3,%d2,%d3
80309f32:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80309f36:	4b 02 61 21 	utof %d2,%d2
80309f3a:	4b 23 41 20 	mul.f %d2,%d3,%d2
80309f3e:	4b 02 71 21 	ftouz %d2,%d2
80309f42:	59 e2 f0 ff 	st.w [%a14]-16,%d2
    uint32           stmCountBegin = STM0_TIM0.U;
80309f46:	c5 f2 10 01 	lea %a2,f0001010 <_START2_end+0x4fcfabe4>
80309f4a:	54 22       	ld.w %d2,[%a2]
80309f4c:	59 e2 ec ff 	st.w [%a14]-20,%d2

    while ((*sync & IFXCPU_CFG_ALLCORE_DONE) != IFXCPU_CFG_ALLCORE_DONE)
80309f50:	1d 00 13 00 	j 80309f76 <IfxCpu_waitEvent+0xc4>
    __asm__ volatile ("nop" : : : "memory");
80309f54:	00 00       	nop 
}
80309f56:	00 00       	nop 
    {
        __nop();

        if ((uint32)(STM0_TIM0.U - stmCountBegin) >= stmCount)
80309f58:	c5 f2 10 01 	lea %a2,f0001010 <_START2_end+0x4fcfabe4>
80309f5c:	54 23       	ld.w %d3,[%a2]
80309f5e:	19 e2 ec ff 	ld.w %d2,[%a14]-20
80309f62:	a2 23       	sub %d3,%d2
80309f64:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80309f68:	3f 23 07 80 	jlt.u %d3,%d2,80309f76 <IfxCpu_waitEvent+0xc4>
        {
            errorcnt = 1;
80309f6c:	82 12       	mov %d2,1
80309f6e:	e9 e2 ff ff 	st.b [%a14]-1,%d2
            break;
80309f72:	1d 00 09 00 	j 80309f84 <IfxCpu_waitEvent+0xd2>
    while ((*sync & IFXCPU_CFG_ALLCORE_DONE) != IFXCPU_CFG_ALLCORE_DONE)
80309f76:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
80309f7a:	54 22       	ld.w %d2,[%a2]
80309f7c:	8f 72 00 21 	and %d2,%d2,7
80309f80:	df 72 ea ff 	jne %d2,7,80309f54 <IfxCpu_waitEvent+0xa2>
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }

    return errorcnt;
80309f84:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
}
80309f88:	00 90       	ret 

80309f8a <IfxCpu_emitEvent>:


void IfxCpu_emitEvent(IfxCpu_syncEvent *event)
{
80309f8a:	40 ae       	mov.aa %a14,%sp
80309f8c:	20 18       	sub.a %sp,24
80309f8e:	b5 e4 ec ff 	st.a [%a14]-20,%a4
    Ifx__imaskldmst(event, 1, __mfcr(CPU_CORE_ID), 1);
80309f92:	4d c0 e1 2f 	mfcr %d2,$core_id
80309f96:	59 e2 fc ff 	st.w [%a14]-4,%d2
80309f9a:	19 e2 fc ff 	ld.w %d2,[%a14]-4
80309f9e:	82 13       	mov %d3,1
80309fa0:	57 30 21 22 	imask %e2,%d3,%d2,1
80309fa4:	89 e2 74 f9 	st.d [%a14]-12,%e2
80309fa8:	99 e2 ec ff 	ld.a %a2,[%a14]-20
80309fac:	09 e2 74 f9 	ld.d %e2,[%a14]-12
80309fb0:	49 22 40 08 	ldmst [%a2]0,%e2
}
80309fb4:	00 00       	nop 
80309fb6:	00 90       	ret 

80309fb8 <waitTime>:
 * \param timeout Specifies the time the function waits for before returning
 *
 * \return None.
 */
void waitTime(Ifx_TickTime timeout)
{
80309fb8:	40 ae       	mov.aa %a14,%sp
80309fba:	20 80       	sub.a %sp,128
80309fbc:	89 e4 40 e9 	st.d [%a14]-128,%e4
80309fc0:	09 e2 c0 e9 	ld.da %a2,[%a14]-128
80309fc4:	89 e2 f8 f9 	st.da [%a14]-8,%a2
80309fc8:	09 e2 f8 f9 	ld.da %a2,[%a14]-8
80309fcc:	89 e2 f0 f9 	st.da [%a14]-16,%a2
 */
IFX_INLINE Ifx_TickTime getDeadLine(Ifx_TickTime timeout)
{
    Ifx_TickTime deadLine;

    if (timeout == TIME_INFINITE)
80309fd0:	09 e4 70 f9 	ld.d %e4,[%a14]-16
80309fd4:	82 fc       	mov %d12,-1
80309fd6:	06 fc       	sh %d12,-1
80309fd8:	0b c5 10 c1 	ne %d12,%d5,%d12
80309fdc:	8b f4 1f c5 	or.ne %d12,%d4,-1
80309fe0:	df 0c 0b 80 	jne %d12,0,80309ff6 <waitTime+0x3e>
    {
        deadLine = TIME_INFINITE;
80309fe4:	a0 02       	mov.a %a2,0
80309fe6:	b0 f2       	add.a %a2,-1
80309fe8:	c5 83 00 00 	lea %a3,80000000 <__CSA0_END+0xffc4400>
80309fec:	b0 f3       	add.a %a3,-1
80309fee:	89 e2 e8 f9 	st.da [%a14]-24,%a2
80309ff2:	1d 00 63 00 	j 8030a0b8 <waitTime+0x100>
    reg.U = __mfcr(CPU_ICR);
80309ff6:	4d c0 e2 4f 	mfcr %d4,$icr
80309ffa:	59 e4 e4 ff 	st.w [%a14]-28,%d4
80309ffe:	19 e4 e4 ff 	ld.w %d4,[%a14]-28
8030a002:	59 e4 cc ef 	st.w [%a14]-116,%d4
    return reg.B.IE != 0;
8030a006:	19 e4 cc ef 	ld.w %d4,[%a14]-116
8030a00a:	37 04 e1 47 	extr.u %d4,%d4,15,1
8030a00e:	8f f4 0f 41 	and %d4,%d4,255
    enabled = IfxCpu_areInterruptsEnabled();
8030a012:	e9 e4 e3 ff 	st.b [%a14]-29,%d4
    __disable();
8030a016:	0d 00 40 03 	disable 
    __asm__ volatile ("nop" : : : "memory");
8030a01a:	00 00       	nop 
}
8030a01c:	00 00       	nop 
    return enabled;
8030a01e:	39 e4 e3 ff 	ld.bu %d4,[%a14]-29
    interruptState = disableInterrupts();
8030a022:	e9 e4 e2 ff 	st.b [%a14]-30,%d4
8030a026:	7b 00 00 4f 	movh %d4,61440
8030a02a:	1b 04 00 41 	addi %d4,%d4,4096
8030a02e:	59 e4 dc ff 	st.w [%a14]-36,%d4

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8030a032:	99 e2 dc ff 	ld.a %a2,[%a14]-36
8030a036:	d9 22 10 00 	lea %a2,[%a2]16
8030a03a:	54 24       	ld.w %d4,[%a2]
8030a03c:	02 44       	mov %d4,%d4
8030a03e:	82 05       	mov %d5,0
8030a040:	89 e4 54 f9 	st.d [%a14]-44,%e4
    result |= ((uint64)stm->CAP.U) << 32;
8030a044:	99 e2 dc ff 	ld.a %a2,[%a14]-36
8030a048:	d9 22 2c 00 	lea %a2,[%a2]44
8030a04c:	54 24       	ld.w %d4,[%a2]
8030a04e:	02 44       	mov %d4,%d4
8030a050:	82 05       	mov %d5,0
8030a052:	02 4b       	mov %d11,%d4
8030a054:	82 0a       	mov %d10,0
8030a056:	19 e4 d4 ff 	ld.w %d4,[%a14]-44
8030a05a:	0f a4 a0 20 	or %d2,%d4,%d10
8030a05e:	19 e4 d8 ff 	ld.w %d4,[%a14]-40
8030a062:	0f b4 a0 30 	or %d3,%d4,%d11
8030a066:	89 e2 54 f9 	st.d [%a14]-44,%e2

    return result;
8030a06a:	09 e2 d4 f9 	ld.da %a2,[%a14]-44
    stmNow         = (Ifx_TickTime)IfxStm_get(BSP_DEFAULT_TIMER) & TIME_INFINITE;
8030a06e:	80 22       	mov.d %d2,%a2
8030a070:	80 33       	mov.d %d3,%a3
8030a072:	02 24       	mov %d4,%d2
8030a074:	59 e4 cc ff 	st.w [%a14]-52,%d4
8030a078:	82 f4       	mov %d4,-1
8030a07a:	06 f4       	sh %d4,-1
8030a07c:	0f 43 80 20 	and %d2,%d3,%d4
8030a080:	59 e2 d0 ff 	st.w [%a14]-48,%d2
    restoreInterrupts(interruptState);
8030a084:	39 e2 e2 ff 	ld.bu %d2,[%a14]-30
8030a088:	e9 e2 cb ff 	st.b [%a14]-53,%d2
    IfxCpu_restoreInterrupts(enabled);
8030a08c:	39 e2 cb ff 	ld.bu %d2,[%a14]-53
8030a090:	e9 e2 ca ff 	st.b [%a14]-54,%d2
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8030a094:	39 e2 ca ff 	ld.bu %d2,[%a14]-54
8030a098:	df 02 04 00 	jeq %d2,0,8030a0a0 <waitTime+0xe8>
    {
        __enable();
8030a09c:	0d 00 00 03 	enable 
    }
}
8030a0a0:	00 00       	nop 
}
8030a0a2:	00 00       	nop 
    return stmNow;
8030a0a4:	09 e4 4c f9 	ld.d %e4,[%a14]-52
    }
    else
    {
        deadLine = now() + timeout;
8030a0a8:	09 e2 70 f9 	ld.d %e2,[%a14]-16
8030a0ac:	0b 42 40 60 	addx %d6,%d2,%d4
8030a0b0:	0b 53 50 70 	addc %d7,%d3,%d5
8030a0b4:	89 e6 68 f9 	st.d [%a14]-24,%e6
    }

    return deadLine;
8030a0b8:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
 *
 * \return None.
 */
IFX_INLINE void wait(Ifx_TickTime timeout)
{
    Ifx_TickTime deadLine = getDeadLine(timeout);
8030a0bc:	89 e2 c0 f9 	st.da [%a14]-64,%a2

    while (isDeadLine(deadLine) == FALSE)
8030a0c0:	00 00       	nop 
8030a0c2:	09 e2 c0 f9 	ld.da %a2,[%a14]-64
8030a0c6:	89 e2 f8 e9 	st.da [%a14]-72,%a2
    if (deadLine == TIME_INFINITE)
8030a0ca:	09 e2 78 e9 	ld.d %e2,[%a14]-72
8030a0ce:	82 f4       	mov %d4,-1
8030a0d0:	06 f4       	sh %d4,-1
8030a0d2:	0b 43 10 41 	ne %d4,%d3,%d4
8030a0d6:	8b f2 1f 45 	or.ne %d4,%d2,-1
8030a0da:	df 04 07 80 	jne %d4,0,8030a0e8 <waitTime+0x130>
        result = FALSE;
8030a0de:	82 02       	mov %d2,0
8030a0e0:	e9 e2 f7 ef 	st.b [%a14]-73,%d2
8030a0e4:	1d 00 6b 00 	j 8030a1ba <waitTime+0x202>
    reg.U = __mfcr(CPU_ICR);
8030a0e8:	4d c0 e2 2f 	mfcr %d2,$icr
8030a0ec:	59 e2 f0 ef 	st.w [%a14]-80,%d2
8030a0f0:	19 e2 f0 ef 	ld.w %d2,[%a14]-80
8030a0f4:	59 e2 d0 ef 	st.w [%a14]-112,%d2
    return reg.B.IE != 0;
8030a0f8:	19 e2 d0 ef 	ld.w %d2,[%a14]-112
8030a0fc:	37 02 e1 27 	extr.u %d2,%d2,15,1
8030a100:	8f f2 0f 21 	and %d2,%d2,255
    enabled = IfxCpu_areInterruptsEnabled();
8030a104:	e9 e2 ef ef 	st.b [%a14]-81,%d2
    __disable();
8030a108:	0d 00 40 03 	disable 
    __asm__ volatile ("nop" : : : "memory");
8030a10c:	00 00       	nop 
}
8030a10e:	00 00       	nop 
    return enabled;
8030a110:	39 e2 ef ef 	ld.bu %d2,[%a14]-81
    interruptState = disableInterrupts();
8030a114:	e9 e2 ee ef 	st.b [%a14]-82,%d2
8030a118:	7b 00 00 2f 	movh %d2,61440
8030a11c:	1b 02 00 21 	addi %d2,%d2,4096
8030a120:	59 e2 e8 ef 	st.w [%a14]-88,%d2
    result  = stm->TIM0.U;
8030a124:	99 e2 e8 ef 	ld.a %a2,[%a14]-88
8030a128:	d9 22 10 00 	lea %a2,[%a2]16
8030a12c:	54 22       	ld.w %d2,[%a2]
8030a12e:	02 22       	mov %d2,%d2
8030a130:	82 03       	mov %d3,0
8030a132:	89 e2 60 e9 	st.d [%a14]-96,%e2
    result |= ((uint64)stm->CAP.U) << 32;
8030a136:	99 e2 e8 ef 	ld.a %a2,[%a14]-88
8030a13a:	d9 22 2c 00 	lea %a2,[%a2]44
8030a13e:	54 22       	ld.w %d2,[%a2]
8030a140:	02 22       	mov %d2,%d2
8030a142:	82 03       	mov %d3,0
8030a144:	02 29       	mov %d9,%d2
8030a146:	82 08       	mov %d8,0
8030a148:	19 e2 e0 ef 	ld.w %d2,[%a14]-96
8030a14c:	0f 82 a0 00 	or %d0,%d2,%d8
8030a150:	19 e2 e4 ef 	ld.w %d2,[%a14]-92
8030a154:	0f 92 a0 10 	or %d1,%d2,%d9
8030a158:	89 e0 60 e9 	st.d [%a14]-96,%e0
    return result;
8030a15c:	09 e2 e0 e9 	ld.da %a2,[%a14]-96
    stmNow         = (Ifx_TickTime)IfxStm_get(BSP_DEFAULT_TIMER) & TIME_INFINITE;
8030a160:	80 22       	mov.d %d2,%a2
8030a162:	80 33       	mov.d %d3,%a3
8030a164:	02 24       	mov %d4,%d2
8030a166:	59 e4 d8 ef 	st.w [%a14]-104,%d4
8030a16a:	82 f4       	mov %d4,-1
8030a16c:	06 f4       	sh %d4,-1
8030a16e:	0f 43 80 20 	and %d2,%d3,%d4
8030a172:	59 e2 dc ef 	st.w [%a14]-100,%d2
    restoreInterrupts(interruptState);
8030a176:	39 e2 ee ef 	ld.bu %d2,[%a14]-82
8030a17a:	e9 e2 d7 ef 	st.b [%a14]-105,%d2
    IfxCpu_restoreInterrupts(enabled);
8030a17e:	39 e2 d7 ef 	ld.bu %d2,[%a14]-105
8030a182:	e9 e2 d6 ef 	st.b [%a14]-106,%d2
    if (enabled != FALSE)
8030a186:	39 e2 d6 ef 	ld.bu %d2,[%a14]-106
8030a18a:	df 02 04 00 	jeq %d2,0,8030a192 <waitTime+0x1da>
        __enable();
8030a18e:	0d 00 00 03 	enable 
}
8030a192:	00 00       	nop 
}
8030a194:	00 00       	nop 
    return stmNow;
8030a196:	09 e6 58 e9 	ld.d %e6,[%a14]-104
        result = now() >= deadLine;
8030a19a:	09 e2 78 e9 	ld.d %e2,[%a14]-72
8030a19e:	02 74       	mov %d4,%d7
8030a1a0:	0b 43 00 41 	eq %d4,%d3,%d4
8030a1a4:	02 25       	mov %d5,%d2
8030a1a6:	0b 56 50 42 	and.ge.u %d4,%d6,%d5
8030a1aa:	02 75       	mov %d5,%d7
8030a1ac:	0b 53 90 42 	or.lt %d4,%d3,%d5
8030a1b0:	02 42       	mov %d2,%d4
8030a1b2:	8f f2 0f 21 	and %d2,%d2,255
8030a1b6:	e9 e2 f7 ef 	st.b [%a14]-73,%d2
    return result;
8030a1ba:	39 e2 f7 ef 	ld.bu %d2,[%a14]-73
    while (isDeadLine(deadLine) == FALSE)
8030a1be:	df 02 82 7f 	jeq %d2,0,8030a0c2 <waitTime+0x10a>
    {}
}
8030a1c2:	00 00       	nop 
    wait(timeout);
}
8030a1c4:	00 00       	nop 
8030a1c6:	00 90       	ret 

8030a1c8 <Ifx_Ssw_clearCpuEndinit>:
    return Ifx_Ssw_getSafetyWatchdogPasswordInline();
}


void Ifx_Ssw_clearCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
8030a1c8:	40 ae       	mov.aa %a14,%sp
8030a1ca:	20 10       	sub.a %sp,16
8030a1cc:	b5 e4 f4 ff 	st.a [%a14]-12,%a4
8030a1d0:	02 42       	mov %d2,%d4
8030a1d2:	f9 e2 f0 ff 	st.h [%a14]-16,%d2
    Ifx_Ssw_clearCpuEndinitInline(watchdog, password);
8030a1d6:	b9 e2 f0 ff 	ld.hu %d2,[%a14]-16
8030a1da:	19 e3 f4 ff 	ld.w %d3,[%a14]-12
8030a1de:	59 e3 fc ff 	st.w [%a14]-4,%d3
8030a1e2:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    if (watchdog->CON0.B.LCK)
8030a1e6:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a1ea:	54 22       	ld.w %d2,[%a2]
8030a1ec:	37 02 e1 20 	extr.u %d2,%d2,1,1
8030a1f0:	8f f2 0f 21 	and %d2,%d2,255
8030a1f4:	df 02 15 00 	jeq %d2,0,8030a21e <Ifx_Ssw_clearCpuEndinit+0x56>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030a1f8:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
8030a1fc:	8f 22 00 30 	sh %d3,%d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8030a200:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a204:	54 22       	ld.w %d2,[%a2]
8030a206:	37 02 70 28 	extr.u %d2,%d2,16,16
8030a20a:	37 02 70 20 	extr.u %d2,%d2,0,16
8030a20e:	8f 02 01 20 	sh %d2,%d2,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030a212:	a6 32       	or %d2,%d3
8030a214:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8030a218:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a21c:	74 22       	st.w [%a2],%d2
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030a21e:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
8030a222:	8f 22 00 30 	sh %d3,%d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8030a226:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a22a:	54 22       	ld.w %d2,[%a2]
8030a22c:	37 02 70 28 	extr.u %d2,%d2,16,16
8030a230:	37 02 70 20 	extr.u %d2,%d2,0,16
8030a234:	8f 02 01 20 	sh %d2,%d2,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030a238:	a6 32       	or %d2,%d3
8030a23a:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8030a23e:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a242:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
8030a244:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a248:	54 22       	ld.w %d2,[%a2]
}
8030a24a:	00 00       	nop 
8030a24c:	00 90       	ret 

8030a24e <Ifx_Ssw_setCpuEndinit>:


void Ifx_Ssw_setCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
8030a24e:	40 ae       	mov.aa %a14,%sp
8030a250:	20 10       	sub.a %sp,16
8030a252:	b5 e4 f4 ff 	st.a [%a14]-12,%a4
8030a256:	02 42       	mov %d2,%d4
8030a258:	f9 e2 f0 ff 	st.h [%a14]-16,%d2
    Ifx_Ssw_setCpuEndinitInline(watchdog, password);
8030a25c:	b9 e2 f0 ff 	ld.hu %d2,[%a14]-16
8030a260:	19 e3 f4 ff 	ld.w %d3,[%a14]-12
8030a264:	59 e3 fc ff 	st.w [%a14]-4,%d3
8030a268:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    if (watchdog->CON0.B.LCK)
8030a26c:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a270:	54 22       	ld.w %d2,[%a2]
8030a272:	37 02 e1 20 	extr.u %d2,%d2,1,1
8030a276:	8f f2 0f 21 	and %d2,%d2,255
8030a27a:	df 02 15 00 	jeq %d2,0,8030a2a4 <Ifx_Ssw_setCpuEndinit+0x56>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030a27e:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
8030a282:	8f 22 00 30 	sh %d3,%d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8030a286:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a28a:	54 22       	ld.w %d2,[%a2]
8030a28c:	37 02 70 28 	extr.u %d2,%d2,16,16
8030a290:	37 02 70 20 	extr.u %d2,%d2,0,16
8030a294:	8f 02 01 20 	sh %d2,%d2,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030a298:	a6 32       	or %d2,%d3
8030a29a:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8030a29e:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a2a2:	74 22       	st.w [%a2],%d2
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030a2a4:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
8030a2a8:	8f 22 00 30 	sh %d3,%d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8030a2ac:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a2b0:	54 22       	ld.w %d2,[%a2]
8030a2b2:	37 02 70 28 	extr.u %d2,%d2,16,16
8030a2b6:	37 02 70 20 	extr.u %d2,%d2,0,16
8030a2ba:	8f 02 01 20 	sh %d2,%d2,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030a2be:	a6 32       	or %d2,%d3
8030a2c0:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8030a2c4:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a2c8:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
8030a2ca:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a2ce:	54 22       	ld.w %d2,[%a2]
}
8030a2d0:	00 00       	nop 
8030a2d2:	00 90       	ret 

8030a2d4 <Ifx_Ssw_clearSafetyEndinit>:


void Ifx_Ssw_clearSafetyEndinit(unsigned short password)
{
8030a2d4:	40 ae       	mov.aa %a14,%sp
8030a2d6:	20 10       	sub.a %sp,16
8030a2d8:	02 42       	mov %d2,%d4
8030a2da:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    Ifx_Ssw_clearSafetyEndinitInline(password);
8030a2de:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
8030a2e2:	f9 e2 fe ff 	st.h [%a14]-2,%d2
    if (SCU_WDTS_CON0.B.LCK)
8030a2e6:	91 30 00 2f 	movh.a %a2,61443
8030a2ea:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030a2ee:	54 22       	ld.w %d2,[%a2]
8030a2f0:	37 02 e1 20 	extr.u %d2,%d2,1,1
8030a2f4:	8f f2 0f 21 	and %d2,%d2,255
8030a2f8:	df 02 19 00 	jeq %d2,0,8030a32a <Ifx_Ssw_clearSafetyEndinit+0x56>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030a2fc:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
8030a300:	8f 22 00 30 	sh %d3,%d2,2
                          ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8030a304:	91 30 00 2f 	movh.a %a2,61443
8030a308:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030a30c:	54 22       	ld.w %d2,[%a2]
8030a30e:	37 02 70 28 	extr.u %d2,%d2,16,16
8030a312:	37 02 70 20 	extr.u %d2,%d2,0,16
8030a316:	8f 02 01 20 	sh %d2,%d2,16
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030a31a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8030a31c:	91 30 00 2f 	movh.a %a2,61443
8030a320:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030a324:	8f 12 40 21 	or %d2,%d2,1
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8030a328:	74 22       	st.w [%a2],%d2
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030a32a:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
8030a32e:	8f 22 00 30 	sh %d3,%d2,2
                      ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8030a332:	91 30 00 2f 	movh.a %a2,61443
8030a336:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030a33a:	54 22       	ld.w %d2,[%a2]
8030a33c:	37 02 70 28 	extr.u %d2,%d2,16,16
8030a340:	37 02 70 20 	extr.u %d2,%d2,0,16
8030a344:	8f 02 01 20 	sh %d2,%d2,16
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030a348:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8030a34a:	91 30 00 2f 	movh.a %a2,61443
8030a34e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030a352:	8f 22 40 21 	or %d2,%d2,2
    SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8030a356:	74 22       	st.w [%a2],%d2
    SCU_WDTS_CON0.U;
8030a358:	91 30 00 2f 	movh.a %a2,61443
8030a35c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030a360:	54 22       	ld.w %d2,[%a2]
}
8030a362:	00 00       	nop 
8030a364:	00 90       	ret 

8030a366 <Ifx_Ssw_setSafetyEndinit>:


void Ifx_Ssw_setSafetyEndinit(unsigned short password)
{
8030a366:	40 ae       	mov.aa %a14,%sp
8030a368:	20 10       	sub.a %sp,16
8030a36a:	02 42       	mov %d2,%d4
8030a36c:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    Ifx_Ssw_setSafetyEndinitInline(password);
8030a370:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
8030a374:	f9 e2 fe ff 	st.h [%a14]-2,%d2
    if (SCU_WDTS_CON0.B.LCK)
8030a378:	91 30 00 2f 	movh.a %a2,61443
8030a37c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030a380:	54 22       	ld.w %d2,[%a2]
8030a382:	37 02 e1 20 	extr.u %d2,%d2,1,1
8030a386:	8f f2 0f 21 	and %d2,%d2,255
8030a38a:	df 02 19 00 	jeq %d2,0,8030a3bc <Ifx_Ssw_setSafetyEndinit+0x56>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030a38e:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
8030a392:	8f 22 00 30 	sh %d3,%d2,2
                          ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8030a396:	91 30 00 2f 	movh.a %a2,61443
8030a39a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030a39e:	54 22       	ld.w %d2,[%a2]
8030a3a0:	37 02 70 28 	extr.u %d2,%d2,16,16
8030a3a4:	37 02 70 20 	extr.u %d2,%d2,0,16
8030a3a8:	8f 02 01 20 	sh %d2,%d2,16
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030a3ac:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8030a3ae:	91 30 00 2f 	movh.a %a2,61443
8030a3b2:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030a3b6:	8f 12 40 21 	or %d2,%d2,1
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8030a3ba:	74 22       	st.w [%a2],%d2
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030a3bc:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
8030a3c0:	8f 22 00 30 	sh %d3,%d2,2
                      ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8030a3c4:	91 30 00 2f 	movh.a %a2,61443
8030a3c8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030a3cc:	54 22       	ld.w %d2,[%a2]
8030a3ce:	37 02 70 28 	extr.u %d2,%d2,16,16
8030a3d2:	37 02 70 20 	extr.u %d2,%d2,0,16
8030a3d6:	8f 02 01 20 	sh %d2,%d2,16
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030a3da:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8030a3dc:	91 30 00 2f 	movh.a %a2,61443
8030a3e0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030a3e4:	8f 32 40 21 	or %d2,%d2,3
    SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8030a3e8:	74 22       	st.w [%a2],%d2
    SCU_WDTS_CON0.U;
8030a3ea:	91 30 00 2f 	movh.a %a2,61443
8030a3ee:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030a3f2:	54 22       	ld.w %d2,[%a2]
}
8030a3f4:	00 00       	nop 
8030a3f6:	00 90       	ret 

8030a3f8 <Ifx_Ssw_serviceCpuWatchdog>:


void Ifx_Ssw_serviceCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
8030a3f8:	40 ae       	mov.aa %a14,%sp
8030a3fa:	20 10       	sub.a %sp,16
8030a3fc:	b5 e4 f4 ff 	st.a [%a14]-12,%a4
8030a400:	02 42       	mov %d2,%d4
8030a402:	f9 e2 f0 ff 	st.h [%a14]-16,%d2
    Ifx_Ssw_setCpuEndinitInline(watchdog, password);
8030a406:	b9 e2 f0 ff 	ld.hu %d2,[%a14]-16
8030a40a:	19 e3 f4 ff 	ld.w %d3,[%a14]-12
8030a40e:	59 e3 fc ff 	st.w [%a14]-4,%d3
8030a412:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    if (watchdog->CON0.B.LCK)
8030a416:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a41a:	54 22       	ld.w %d2,[%a2]
8030a41c:	37 02 e1 20 	extr.u %d2,%d2,1,1
8030a420:	8f f2 0f 21 	and %d2,%d2,255
8030a424:	df 02 15 00 	jeq %d2,0,8030a44e <Ifx_Ssw_serviceCpuWatchdog+0x56>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030a428:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
8030a42c:	8f 22 00 30 	sh %d3,%d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8030a430:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a434:	54 22       	ld.w %d2,[%a2]
8030a436:	37 02 70 28 	extr.u %d2,%d2,16,16
8030a43a:	37 02 70 20 	extr.u %d2,%d2,0,16
8030a43e:	8f 02 01 20 	sh %d2,%d2,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030a442:	a6 32       	or %d2,%d3
8030a444:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8030a448:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a44c:	74 22       	st.w [%a2],%d2
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030a44e:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
8030a452:	8f 22 00 30 	sh %d3,%d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8030a456:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a45a:	54 22       	ld.w %d2,[%a2]
8030a45c:	37 02 70 28 	extr.u %d2,%d2,16,16
8030a460:	37 02 70 20 	extr.u %d2,%d2,0,16
8030a464:	8f 02 01 20 	sh %d2,%d2,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030a468:	a6 32       	or %d2,%d3
8030a46a:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8030a46e:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a472:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
8030a474:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a478:	54 22       	ld.w %d2,[%a2]
}
8030a47a:	00 00       	nop 
8030a47c:	00 90       	ret 

8030a47e <Ifx_Ssw_serviceSafetyWatchdog>:


void Ifx_Ssw_serviceSafetyWatchdog(unsigned short password)
{
8030a47e:	40 ae       	mov.aa %a14,%sp
8030a480:	20 10       	sub.a %sp,16
8030a482:	02 42       	mov %d2,%d4
8030a484:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    Ifx_Ssw_setSafetyEndinitInline(password);
8030a488:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
8030a48c:	f9 e2 fe ff 	st.h [%a14]-2,%d2
    if (SCU_WDTS_CON0.B.LCK)
8030a490:	91 30 00 2f 	movh.a %a2,61443
8030a494:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030a498:	54 22       	ld.w %d2,[%a2]
8030a49a:	37 02 e1 20 	extr.u %d2,%d2,1,1
8030a49e:	8f f2 0f 21 	and %d2,%d2,255
8030a4a2:	df 02 19 00 	jeq %d2,0,8030a4d4 <Ifx_Ssw_serviceSafetyWatchdog+0x56>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030a4a6:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
8030a4aa:	8f 22 00 30 	sh %d3,%d2,2
                          ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8030a4ae:	91 30 00 2f 	movh.a %a2,61443
8030a4b2:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030a4b6:	54 22       	ld.w %d2,[%a2]
8030a4b8:	37 02 70 28 	extr.u %d2,%d2,16,16
8030a4bc:	37 02 70 20 	extr.u %d2,%d2,0,16
8030a4c0:	8f 02 01 20 	sh %d2,%d2,16
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030a4c4:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8030a4c6:	91 30 00 2f 	movh.a %a2,61443
8030a4ca:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030a4ce:	8f 12 40 21 	or %d2,%d2,1
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8030a4d2:	74 22       	st.w [%a2],%d2
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030a4d4:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
8030a4d8:	8f 22 00 30 	sh %d3,%d2,2
                      ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8030a4dc:	91 30 00 2f 	movh.a %a2,61443
8030a4e0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030a4e4:	54 22       	ld.w %d2,[%a2]
8030a4e6:	37 02 70 28 	extr.u %d2,%d2,16,16
8030a4ea:	37 02 70 20 	extr.u %d2,%d2,0,16
8030a4ee:	8f 02 01 20 	sh %d2,%d2,16
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030a4f2:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8030a4f4:	91 30 00 2f 	movh.a %a2,61443
8030a4f8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
8030a4fc:	8f 32 40 21 	or %d2,%d2,3
    SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8030a500:	74 22       	st.w [%a2],%d2
    SCU_WDTS_CON0.U;
8030a502:	91 30 00 2f 	movh.a %a2,61443
8030a506:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd2fe7c>>
8030a50a:	54 22       	ld.w %d2,[%a2]
}
8030a50c:	00 00       	nop 
8030a50e:	00 90       	ret 

8030a510 <Ifx_Ssw_disableCpuWatchdog>:


void Ifx_Ssw_disableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
8030a510:	40 ae       	mov.aa %a14,%sp
8030a512:	20 20       	sub.a %sp,32
8030a514:	b5 e4 e4 ff 	st.a [%a14]-28,%a4
8030a518:	02 42       	mov %d2,%d4
8030a51a:	f9 e2 e0 ff 	st.h [%a14]-32,%d2
    /* Select CPU Watchdog based on Core Id */
    unsigned int    cpuIndex;
    cpuIndex = Ifx_Ssw_MFCR(CPU_CORE_ID);
8030a51e:	4d c0 e1 2f 	mfcr %d2,$core_id
8030a522:	59 e2 fc ff 	st.w [%a14]-4,%d2
8030a526:	19 e2 fc ff 	ld.w %d2,[%a14]-4
8030a52a:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    cpuIndex = (unsigned int)((unsigned int)cpuIndex >> IFX_CPU_CORE_ID_CORE_ID_OFF) & IFX_CPU_CORE_ID_CORE_ID_MSK;
8030a52e:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8030a532:	8f 72 00 21 	and %d2,%d2,7
8030a536:	59 e2 f8 ff 	st.w [%a14]-8,%d2
8030a53a:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8030a53e:	59 e2 f0 ff 	st.w [%a14]-16,%d2
8030a542:	82 52       	mov %d2,5
8030a544:	59 e2 ec ff 	st.w [%a14]-20,%d2
    __asm__ volatile ("min.u %0, %1, %2" : "=d" (res) : "d" (a), "d" (b));
8030a548:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
8030a54c:	19 e3 ec ff 	ld.w %d3,[%a14]-20
8030a550:	0b 32 90 21 	min.u %d2,%d2,%d3
8030a554:	59 e2 e8 ff 	st.w [%a14]-24,%d2
    return res;
8030a558:	19 e2 e8 ff 	ld.w %d2,[%a14]-24
    cpuIndex = Ifx_Ssw_MINU(cpuIndex, 5);
8030a55c:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    Ifx_SCU_WDTCPU *wdt = &MODULE_SCU.WDTCPU[cpuIndex];
8030a560:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8030a564:	53 c2 20 20 	mul %d2,%d2,12
8030a568:	1b c2 24 26 	addi %d2,%d2,25164
8030a56c:	9b 32 00 2f 	addih %d2,%d2,61443
8030a570:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    Ifx_Ssw_clearCpuEndinit(wdt, password);
8030a574:	b9 e2 e0 ff 	ld.hu %d2,[%a14]-32
8030a578:	02 24       	mov %d4,%d2
8030a57a:	99 e4 f4 ff 	ld.a %a4,[%a14]-12
8030a57e:	6d ff 25 fe 	call 8030a1c8 <Ifx_Ssw_clearCpuEndinit>
    wdt->CON1.B.DR = 1U;         /* Set DR bit in Config_1 register */
8030a582:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
8030a586:	d9 23 04 00 	lea %a3,[%a2]4
8030a58a:	54 32       	ld.w %d2,[%a3]
8030a58c:	b7 12 81 21 	insert %d2,%d2,1,3,1
8030a590:	b0 42       	add.a %a2,4
8030a592:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setCpuEndinit(wdt, password);
8030a594:	b9 e2 e0 ff 	ld.hu %d2,[%a14]-32
8030a598:	02 24       	mov %d4,%d2
8030a59a:	99 e4 f4 ff 	ld.a %a4,[%a14]-12
8030a59e:	6d ff 58 fe 	call 8030a24e <Ifx_Ssw_setCpuEndinit>
}
8030a5a2:	00 00       	nop 
8030a5a4:	00 90       	ret 

8030a5a6 <Ifx_Ssw_enableCpuWatchdog>:


void Ifx_Ssw_enableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
8030a5a6:	40 ae       	mov.aa %a14,%sp
8030a5a8:	20 20       	sub.a %sp,32
8030a5aa:	b5 e4 e4 ff 	st.a [%a14]-28,%a4
8030a5ae:	02 42       	mov %d2,%d4
8030a5b0:	f9 e2 e0 ff 	st.h [%a14]-32,%d2
    /* Select CPU Watchdog based on Core Id */
    unsigned int    cpuIndex;
    cpuIndex = Ifx_Ssw_MFCR(CPU_CORE_ID);
8030a5b4:	4d c0 e1 2f 	mfcr %d2,$core_id
8030a5b8:	59 e2 fc ff 	st.w [%a14]-4,%d2
8030a5bc:	19 e2 fc ff 	ld.w %d2,[%a14]-4
8030a5c0:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    cpuIndex = (unsigned int)((unsigned int)cpuIndex >> IFX_CPU_CORE_ID_CORE_ID_OFF) & IFX_CPU_CORE_ID_CORE_ID_MSK;
8030a5c4:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8030a5c8:	8f 72 00 21 	and %d2,%d2,7
8030a5cc:	59 e2 f8 ff 	st.w [%a14]-8,%d2
8030a5d0:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8030a5d4:	59 e2 f0 ff 	st.w [%a14]-16,%d2
8030a5d8:	82 52       	mov %d2,5
8030a5da:	59 e2 ec ff 	st.w [%a14]-20,%d2
    __asm__ volatile ("min.u %0, %1, %2" : "=d" (res) : "d" (a), "d" (b));
8030a5de:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
8030a5e2:	19 e3 ec ff 	ld.w %d3,[%a14]-20
8030a5e6:	0b 32 90 21 	min.u %d2,%d2,%d3
8030a5ea:	59 e2 e8 ff 	st.w [%a14]-24,%d2
    return res;
8030a5ee:	19 e2 e8 ff 	ld.w %d2,[%a14]-24
    cpuIndex = Ifx_Ssw_MINU(cpuIndex, 5);
8030a5f2:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    Ifx_SCU_WDTCPU *wdt = &MODULE_SCU.WDTCPU[cpuIndex];
8030a5f6:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8030a5fa:	53 c2 20 20 	mul %d2,%d2,12
8030a5fe:	1b c2 24 26 	addi %d2,%d2,25164
8030a602:	9b 32 00 2f 	addih %d2,%d2,61443
8030a606:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    Ifx_Ssw_clearCpuEndinit(wdt, password);
8030a60a:	b9 e2 e0 ff 	ld.hu %d2,[%a14]-32
8030a60e:	02 24       	mov %d4,%d2
8030a610:	99 e4 f4 ff 	ld.a %a4,[%a14]-12
8030a614:	6d ff da fd 	call 8030a1c8 <Ifx_Ssw_clearCpuEndinit>
    wdt->CON1.B.DR = 0U;         /* Clear DR bit in Config_1 register */
8030a618:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
8030a61c:	d9 23 04 00 	lea %a3,[%a2]4
8030a620:	54 32       	ld.w %d2,[%a3]
8030a622:	8f 82 c0 21 	andn %d2,%d2,8
8030a626:	b0 42       	add.a %a2,4
8030a628:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setCpuEndinit(wdt, password);
8030a62a:	b9 e2 e0 ff 	ld.hu %d2,[%a14]-32
8030a62e:	02 24       	mov %d4,%d2
8030a630:	99 e4 f4 ff 	ld.a %a4,[%a14]-12
8030a634:	6d ff 0d fe 	call 8030a24e <Ifx_Ssw_setCpuEndinit>
}
8030a638:	00 00       	nop 
8030a63a:	00 90       	ret 

8030a63c <Ifx_Ssw_disableSafetyWatchdog>:


void Ifx_Ssw_disableSafetyWatchdog(unsigned short password)
{
8030a63c:	40 ae       	mov.aa %a14,%sp
8030a63e:	20 08       	sub.a %sp,8
8030a640:	02 42       	mov %d2,%d4
8030a642:	f9 e2 fc ff 	st.h [%a14]-4,%d2
    Ifx_Ssw_clearSafetyEndinit(password);
8030a646:	b9 e2 fc ff 	ld.hu %d2,[%a14]-4
8030a64a:	02 24       	mov %d4,%d2
8030a64c:	6d ff 44 fe 	call 8030a2d4 <Ifx_Ssw_clearSafetyEndinit>
    SCU_WDTS_CON1.B.DR = 1U;     /* Set DR bit in Config_1 register */
8030a650:	91 30 00 2f 	movh.a %a2,61443
8030a654:	d9 22 2c a6 	lea %a2,[%a2]25260 <f00362ac <_START2_end+0x4fd2fe80>>
8030a658:	54 22       	ld.w %d2,[%a2]
8030a65a:	b7 12 81 21 	insert %d2,%d2,1,3,1
8030a65e:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setSafetyEndinit(password);
8030a660:	b9 e2 fc ff 	ld.hu %d2,[%a14]-4
8030a664:	02 24       	mov %d4,%d2
8030a666:	6d ff 80 fe 	call 8030a366 <Ifx_Ssw_setSafetyEndinit>
}
8030a66a:	00 00       	nop 
8030a66c:	00 90       	ret 

8030a66e <Ifx_Ssw_enableSafetyWatchdog>:


void Ifx_Ssw_enableSafetyWatchdog(unsigned short password)
{
8030a66e:	40 ae       	mov.aa %a14,%sp
8030a670:	20 08       	sub.a %sp,8
8030a672:	02 42       	mov %d2,%d4
8030a674:	f9 e2 fc ff 	st.h [%a14]-4,%d2
    Ifx_Ssw_clearSafetyEndinit(password);
8030a678:	b9 e2 fc ff 	ld.hu %d2,[%a14]-4
8030a67c:	02 24       	mov %d4,%d2
8030a67e:	6d ff 2b fe 	call 8030a2d4 <Ifx_Ssw_clearSafetyEndinit>
    SCU_WDTS_CON1.B.DR = 0U;     /* Clear DR bit in Config_1 register */
8030a682:	91 30 00 2f 	movh.a %a2,61443
8030a686:	d9 22 2c a6 	lea %a2,[%a2]25260 <f00362ac <_START2_end+0x4fd2fe80>>
8030a68a:	54 22       	ld.w %d2,[%a2]
8030a68c:	8f 82 c0 21 	andn %d2,%d2,8
8030a690:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setSafetyEndinit(password);
8030a692:	b9 e2 fc ff 	ld.hu %d2,[%a14]-4
8030a696:	02 24       	mov %d4,%d2
8030a698:	6d ff 67 fe 	call 8030a366 <Ifx_Ssw_setSafetyEndinit>
}
8030a69c:	00 00       	nop 
8030a69e:	00 90       	ret 

8030a6a0 <Ifx_Ssw_startCore>:


void Ifx_Ssw_startCore(Ifx_CPU *cpu, unsigned int programCounter)
{
8030a6a0:	40 ae       	mov.aa %a14,%sp
8030a6a2:	20 10       	sub.a %sp,16
8030a6a4:	b5 e4 f4 ff 	st.a [%a14]-12,%a4
8030a6a8:	59 e4 f0 ff 	st.w [%a14]-16,%d4
    /* Set the PC */
    cpu->PC.B.PC = (unsigned int)programCounter >> 1U;
8030a6ac:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
8030a6b0:	06 f2       	sh %d2,-1
8030a6b2:	82 f3       	mov %d3,-1
8030a6b4:	06 f3       	sh %d3,-1
8030a6b6:	26 23       	and %d3,%d2
8030a6b8:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
8030a6bc:	60 22       	mov.a %a2,%d2
8030a6be:	d9 22 c8 8f 	lea %a2,[%a2]-504
8030a6c2:	11 22 00 20 	addih.a %a2,%a2,2
8030a6c6:	54 22       	ld.w %d2,[%a2]
8030a6c8:	37 32 9f 20 	insert %d2,%d2,%d3,1,31
8030a6cc:	74 22       	st.w [%a2],%d2

    /* release boot halt mode if required */
    Ifx_CPU_SYSCON syscon;
    syscon = cpu->SYSCON;
8030a6ce:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
8030a6d2:	60 22       	mov.a %a2,%d2
8030a6d4:	d9 22 d4 8f 	lea %a2,[%a2]-492
8030a6d8:	11 22 00 20 	addih.a %a2,%a2,2
8030a6dc:	54 22       	ld.w %d2,[%a2]
8030a6de:	59 e2 fc ff 	st.w [%a14]-4,%d2

    if (syscon.B.BHALT)
8030a6e2:	19 e2 fc ff 	ld.w %d2,[%a14]-4
8030a6e6:	37 02 61 2c 	extr.u %d2,%d2,24,1
8030a6ea:	8f f2 0f 21 	and %d2,%d2,255
8030a6ee:	df 02 14 00 	jeq %d2,0,8030a716 <Ifx_Ssw_startCore+0x76>
    {
        syscon.B.BHALT = 0U;
8030a6f2:	19 e2 fc ff 	ld.w %d2,[%a14]-4
8030a6f6:	7b 00 f0 3f 	movh %d3,65280
8030a6fa:	c2 f3       	add %d3,-1
8030a6fc:	26 32       	and %d2,%d3
8030a6fe:	59 e2 fc ff 	st.w [%a14]-4,%d2
        cpu->SYSCON    = syscon;
8030a702:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
8030a706:	60 22       	mov.a %a2,%d2
8030a708:	d9 22 d4 8f 	lea %a2,[%a2]-492
8030a70c:	11 22 00 20 	addih.a %a2,%a2,2
8030a710:	19 e2 fc ff 	ld.w %d2,[%a14]-4
8030a714:	74 22       	st.w [%a2],%d2
    }

}
8030a716:	00 00       	nop 
8030a718:	00 90       	ret 

8030a71a <Ifx_Ssw_getStmFrequency>:
    Ifx_Ssw_setCpuEndinit(wdt, cpuWdtPw);
}


float Ifx_Ssw_getStmFrequency(void)
{
8030a71a:	40 ae       	mov.aa %a14,%sp
8030a71c:	20 10       	sub.a %sp,16
    float        oscFreq    = IFX_CFG_SSW_XTAL_FREQUENCY;
8030a71e:	7b 90 b9 24 	movh %d2,19353
8030a722:	1b 02 68 29 	addi %d2,%d2,-27008
8030a726:	59 e2 fc ff 	st.w [%a14]-4,%d2
    float        sourcefreq = IFX_CFG_SSW_EVR_OSC_FREQUENCY;
8030a72a:	7b f0 cb 24 	movh %d2,19647
8030a72e:	1b 02 c2 2b 	addi %d2,%d2,-17376
8030a732:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    unsigned int insel      = SCU_SYSPLLCON0.B.INSEL;
8030a736:	91 30 00 2f 	movh.a %a2,61443
8030a73a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
8030a73e:	54 22       	ld.w %d2,[%a2]
8030a740:	37 02 62 2f 	extr.u %d2,%d2,30,2
8030a744:	8f f2 0f 21 	and %d2,%d2,255
8030a748:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    if (insel == 2U)
8030a74c:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
8030a750:	df 22 0a 80 	jne %d2,2,8030a764 <Ifx_Ssw_getStmFrequency+0x4a>
    {
        oscFreq = IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY;
8030a754:	7b 90 b9 24 	movh %d2,19353
8030a758:	1b 02 68 29 	addi %d2,%d2,-27008
8030a75c:	59 e2 fc ff 	st.w [%a14]-4,%d2
8030a760:	1d 00 14 00 	j 8030a788 <Ifx_Ssw_getStmFrequency+0x6e>
    }
    else if (insel == 1U)
8030a764:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
8030a768:	df 12 0a 80 	jne %d2,1,8030a77c <Ifx_Ssw_getStmFrequency+0x62>
    {
        oscFreq = IFX_CFG_SSW_XTAL_FREQUENCY;
8030a76c:	7b 90 b9 24 	movh %d2,19353
8030a770:	1b 02 68 29 	addi %d2,%d2,-27008
8030a774:	59 e2 fc ff 	st.w [%a14]-4,%d2
8030a778:	1d 00 08 00 	j 8030a788 <Ifx_Ssw_getStmFrequency+0x6e>
    }
    else
    {
        oscFreq = IFX_CFG_SSW_EVR_OSC_FREQUENCY;
8030a77c:	7b f0 cb 24 	movh %d2,19647
8030a780:	1b 02 c2 2b 	addi %d2,%d2,-17376
8030a784:	59 e2 fc ff 	st.w [%a14]-4,%d2
    }

    if (SCU_CCUCON0.B.CLKSEL != 0U)
8030a788:	91 30 00 2f 	movh.a %a2,61443
8030a78c:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd2fc04>>
8030a790:	54 22       	ld.w %d2,[%a2]
8030a792:	37 02 62 2e 	extr.u %d2,%d2,28,2
8030a796:	8f f2 0f 21 	and %d2,%d2,255
8030a79a:	df 02 2e 00 	jeq %d2,0,8030a7f6 <Ifx_Ssw_getStmFrequency+0xdc>
    {
        sourcefreq = (oscFreq * (SCU_SYSPLLCON0.B.NDIV + 1U)) /
8030a79e:	91 30 00 2f 	movh.a %a2,61443
8030a7a2:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
8030a7a6:	54 22       	ld.w %d2,[%a2]
8030a7a8:	37 02 e7 24 	extr.u %d2,%d2,9,7
8030a7ac:	8f f2 0f 21 	and %d2,%d2,255
8030a7b0:	c2 12       	add %d2,1
8030a7b2:	4b 02 61 31 	utof %d3,%d2
8030a7b6:	19 e2 fc ff 	ld.w %d2,[%a14]-4
8030a7ba:	4b 23 41 30 	mul.f %d3,%d3,%d2
                     ((SCU_SYSPLLCON0.B.PDIV + 1U) * (SCU_SYSPLLCON1.B.K2DIV + 1U));
8030a7be:	91 30 00 2f 	movh.a %a2,61443
8030a7c2:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd2fbec>>
8030a7c6:	54 22       	ld.w %d2,[%a2]
8030a7c8:	37 02 63 2c 	extr.u %d2,%d2,24,3
8030a7cc:	8f f2 0f 21 	and %d2,%d2,255
8030a7d0:	1b 12 00 40 	addi %d4,%d2,1
8030a7d4:	91 30 00 2f 	movh.a %a2,61443
8030a7d8:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_START2_end+0x4fd2fbf0>>
8030a7dc:	54 22       	ld.w %d2,[%a2]
8030a7de:	37 02 63 20 	extr.u %d2,%d2,0,3
8030a7e2:	8f f2 0f 21 	and %d2,%d2,255
8030a7e6:	c2 12       	add %d2,1
8030a7e8:	e2 42       	mul %d2,%d4
        sourcefreq = (oscFreq * (SCU_SYSPLLCON0.B.NDIV + 1U)) /
8030a7ea:	4b 02 61 21 	utof %d2,%d2
8030a7ee:	4b 23 51 20 	div.f %d2,%d3,%d2
8030a7f2:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    }

    return sourcefreq / SCU_CCUCON0.B.STMDIV;
8030a7f6:	91 30 00 2f 	movh.a %a2,61443
8030a7fa:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd2fc04>>
8030a7fe:	54 22       	ld.w %d2,[%a2]
8030a800:	37 02 64 20 	extr.u %d2,%d2,0,4
8030a804:	8f f2 0f 21 	and %d2,%d2,255
8030a808:	4b 02 41 21 	itof %d2,%d2
8030a80c:	19 e3 f8 ff 	ld.w %d3,[%a14]-8
8030a810:	4b 23 51 20 	div.f %d2,%d3,%d2
}
8030a814:	00 90       	ret 

8030a816 <Ifx_Ssw_doCppInit>:

void Ifx_Ssw_doCppInit(void)
{
8030a816:	40 ae       	mov.aa %a14,%sp
8030a818:	20 18       	sub.a %sp,24
{
    Ifx_Ssw_CTablePtr pBlockDest, pBlockSrc;
    unsigned int      uiLength, uiCnt;
    unsigned int     *pTable;
    /* clear table */
    pTable = (unsigned int *)&__clear_table;
8030a81a:	91 00 03 28 	movh.a %a2,32816
8030a81e:	d9 22 70 c6 	lea %a2,[%a2]26416 <80306730 <__clear_table>>
8030a822:	b5 e2 fc ff 	st.a [%a14]-4 <80306730 <__clear_table>>,%a2

    while (pTable)
8030a826:	1d 00 58 00 	j 8030a8d6 <Ifx_Ssw_doCppInit+0xc0>
    {
        pBlockDest.uiPtr = (unsigned int *)*pTable++;
8030a82a:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a82e:	80 22       	mov.d %d2,%a2
8030a830:	c2 42       	add %d2,4
8030a832:	59 e2 fc ff 	st.w [%a14]-4,%d2
8030a836:	54 22       	ld.w %d2,[%a2]
8030a838:	59 e2 f0 ff 	st.w [%a14]-16,%d2
        uiLength         = *pTable++;
8030a83c:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a840:	80 22       	mov.d %d2,%a2
8030a842:	c2 42       	add %d2,4
8030a844:	59 e2 fc ff 	st.w [%a14]-4,%d2
8030a848:	54 22       	ld.w %d2,[%a2]
8030a84a:	59 e2 f8 ff 	st.w [%a14]-8,%d2

        /* we are finished when length == -1 */
        if (uiLength == 0xFFFFFFFF)
8030a84e:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8030a852:	df f2 48 00 	jeq %d2,-1,8030a8e2 <Ifx_Ssw_doCppInit+0xcc>
        {
            break;
        }

        uiCnt = uiLength / 8;
8030a856:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8030a85a:	06 d2       	sh %d2,-3
8030a85c:	59 e2 f4 ff 	st.w [%a14]-12,%d2

        while (uiCnt--)
8030a860:	1d 00 0d 00 	j 8030a87a <Ifx_Ssw_doCppInit+0x64>
        {
            *pBlockDest.ullPtr++ = 0;
8030a864:	99 e4 f0 ff 	ld.a %a4,[%a14]-16
8030a868:	80 42       	mov.d %d2,%a4
8030a86a:	1b 82 00 20 	addi %d2,%d2,8
8030a86e:	59 e2 f0 ff 	st.w [%a14]-16,%d2
8030a872:	a0 02       	mov.a %a2,0
8030a874:	a0 03       	mov.a %a3,0
8030a876:	89 42 c0 09 	st.da [%a4],%a2
        while (uiCnt--)
8030a87a:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
8030a87e:	1b f2 ff 3f 	addi %d3,%d2,-1
8030a882:	59 e3 f4 ff 	st.w [%a14]-12,%d3
8030a886:	df 02 ef ff 	jne %d2,0,8030a864 <Ifx_Ssw_doCppInit+0x4e>
        }

        if (uiLength & 0x4)
8030a88a:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8030a88e:	8f 42 00 21 	and %d2,%d2,4
8030a892:	df 02 0a 00 	jeq %d2,0,8030a8a6 <Ifx_Ssw_doCppInit+0x90>
        {
            *pBlockDest.uiPtr++ = 0;
8030a896:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
8030a89a:	80 22       	mov.d %d2,%a2
8030a89c:	c2 42       	add %d2,4
8030a89e:	59 e2 f0 ff 	st.w [%a14]-16,%d2
8030a8a2:	82 02       	mov %d2,0
8030a8a4:	74 22       	st.w [%a2],%d2
        }

        if (uiLength & 0x2)
8030a8a6:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8030a8aa:	8f 22 00 21 	and %d2,%d2,2
8030a8ae:	df 02 0a 00 	jeq %d2,0,8030a8c2 <Ifx_Ssw_doCppInit+0xac>
        {
            *pBlockDest.usPtr++ = 0;
8030a8b2:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
8030a8b6:	80 22       	mov.d %d2,%a2
8030a8b8:	c2 22       	add %d2,2
8030a8ba:	59 e2 f0 ff 	st.w [%a14]-16,%d2
8030a8be:	82 02       	mov %d2,0
8030a8c0:	b4 22       	st.h [%a2],%d2
        }

        if (uiLength & 0x1)
8030a8c2:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8030a8c6:	8f 12 00 21 	and %d2,%d2,1
8030a8ca:	df 02 06 00 	jeq %d2,0,8030a8d6 <Ifx_Ssw_doCppInit+0xc0>
        {
            *pBlockDest.ucPtr = 0;
8030a8ce:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
8030a8d2:	82 02       	mov %d2,0
8030a8d4:	34 22       	st.b [%a2],%d2
    while (pTable)
8030a8d6:	19 e2 fc ff 	ld.w %d2,[%a14]-4
8030a8da:	df 02 a8 ff 	jne %d2,0,8030a82a <Ifx_Ssw_doCppInit+0x14>
8030a8de:	1d 00 03 00 	j 8030a8e4 <Ifx_Ssw_doCppInit+0xce>
            break;
8030a8e2:	00 00       	nop 
        }
    }

    /* copy table */
    pTable = (unsigned int *)&__copy_table;
8030a8e4:	91 00 03 28 	movh.a %a2,32816
8030a8e8:	d9 22 78 e6 	lea %a2,[%a2]26552 <803067b8 <__copy_table>>
8030a8ec:	b5 e2 fc ff 	st.a [%a14]-4 <803067b8 <__copy_table>>,%a2

    while (pTable)
8030a8f0:	1d 00 77 00 	j 8030a9de <Ifx_Ssw_doCppInit+0x1c8>
    {
        pBlockSrc.uiPtr  = (unsigned int *)*pTable++;
8030a8f4:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a8f8:	80 22       	mov.d %d2,%a2
8030a8fa:	c2 42       	add %d2,4
8030a8fc:	59 e2 fc ff 	st.w [%a14]-4,%d2
8030a900:	54 22       	ld.w %d2,[%a2]
8030a902:	59 e2 ec ff 	st.w [%a14]-20,%d2
        pBlockDest.uiPtr = (unsigned int *)*pTable++;
8030a906:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a90a:	80 22       	mov.d %d2,%a2
8030a90c:	c2 42       	add %d2,4
8030a90e:	59 e2 fc ff 	st.w [%a14]-4,%d2
8030a912:	54 22       	ld.w %d2,[%a2]
8030a914:	59 e2 f0 ff 	st.w [%a14]-16,%d2
        uiLength         = *pTable++;
8030a918:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8030a91c:	80 22       	mov.d %d2,%a2
8030a91e:	c2 42       	add %d2,4
8030a920:	59 e2 fc ff 	st.w [%a14]-4,%d2
8030a924:	54 22       	ld.w %d2,[%a2]
8030a926:	59 e2 f8 ff 	st.w [%a14]-8,%d2

        /* we are finished when length == -1 */
        if (uiLength == 0xFFFFFFFF)
8030a92a:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8030a92e:	df f2 5e 00 	jeq %d2,-1,8030a9ea <Ifx_Ssw_doCppInit+0x1d4>
        {
            break;
        }

        uiCnt = uiLength / 8;
8030a932:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8030a936:	06 d2       	sh %d2,-3
8030a938:	59 e2 f4 ff 	st.w [%a14]-12,%d2

        while (uiCnt--)
8030a93c:	1d 00 14 00 	j 8030a964 <Ifx_Ssw_doCppInit+0x14e>
        {
            *pBlockDest.ullPtr++ = *pBlockSrc.ullPtr++;
8030a940:	99 e2 ec ff 	ld.a %a2,[%a14]-20
8030a944:	80 22       	mov.d %d2,%a2
8030a946:	1b 82 00 20 	addi %d2,%d2,8
8030a94a:	59 e2 ec ff 	st.w [%a14]-20,%d2
8030a94e:	99 e4 f0 ff 	ld.a %a4,[%a14]-16
8030a952:	80 42       	mov.d %d2,%a4
8030a954:	1b 82 00 20 	addi %d2,%d2,8
8030a958:	59 e2 f0 ff 	st.w [%a14]-16,%d2
8030a95c:	09 22 c0 09 	ld.da %a2,[%a2]
8030a960:	89 42 c0 09 	st.da [%a4],%a2
        while (uiCnt--)
8030a964:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
8030a968:	1b f2 ff 3f 	addi %d3,%d2,-1
8030a96c:	59 e3 f4 ff 	st.w [%a14]-12,%d3
8030a970:	df 02 e8 ff 	jne %d2,0,8030a940 <Ifx_Ssw_doCppInit+0x12a>
        }

        if (uiLength & 0x4)
8030a974:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8030a978:	8f 42 00 21 	and %d2,%d2,4
8030a97c:	df 02 10 00 	jeq %d2,0,8030a99c <Ifx_Ssw_doCppInit+0x186>
        {
            *pBlockDest.uiPtr++ = *pBlockSrc.uiPtr++;
8030a980:	99 e3 ec ff 	ld.a %a3,[%a14]-20
8030a984:	80 32       	mov.d %d2,%a3
8030a986:	c2 42       	add %d2,4
8030a988:	59 e2 ec ff 	st.w [%a14]-20,%d2
8030a98c:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
8030a990:	80 22       	mov.d %d2,%a2
8030a992:	c2 42       	add %d2,4
8030a994:	59 e2 f0 ff 	st.w [%a14]-16,%d2
8030a998:	54 32       	ld.w %d2,[%a3]
8030a99a:	74 22       	st.w [%a2],%d2
        }

        if (uiLength & 0x2)
8030a99c:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8030a9a0:	8f 22 00 21 	and %d2,%d2,2
8030a9a4:	df 02 11 00 	jeq %d2,0,8030a9c6 <Ifx_Ssw_doCppInit+0x1b0>
        {
            *pBlockDest.usPtr++ = *pBlockSrc.usPtr++;
8030a9a8:	99 e3 ec ff 	ld.a %a3,[%a14]-20
8030a9ac:	80 32       	mov.d %d2,%a3
8030a9ae:	c2 22       	add %d2,2
8030a9b0:	59 e2 ec ff 	st.w [%a14]-20,%d2
8030a9b4:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
8030a9b8:	80 22       	mov.d %d2,%a2
8030a9ba:	c2 22       	add %d2,2
8030a9bc:	59 e2 f0 ff 	st.w [%a14]-16,%d2
8030a9c0:	b9 32 00 00 	ld.hu %d2,[%a3]0
8030a9c4:	b4 22       	st.h [%a2],%d2
        }

        if (uiLength & 0x1)
8030a9c6:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8030a9ca:	8f 12 00 21 	and %d2,%d2,1
8030a9ce:	df 02 08 00 	jeq %d2,0,8030a9de <Ifx_Ssw_doCppInit+0x1c8>
        {
            *pBlockDest.ucPtr = *pBlockSrc.ucPtr;
8030a9d2:	99 e3 ec ff 	ld.a %a3,[%a14]-20
8030a9d6:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
8030a9da:	14 32       	ld.bu %d2,[%a3]
8030a9dc:	34 22       	st.b [%a2],%d2
    while (pTable)
8030a9de:	19 e2 fc ff 	ld.w %d2,[%a14]-4
8030a9e2:	df 02 89 ff 	jne %d2,0,8030a8f4 <Ifx_Ssw_doCppInit+0xde>
        }
    }
}
8030a9e6:	1d 00 03 00 	j 8030a9ec <Ifx_Ssw_doCppInit+0x1d6>
            break;
8030a9ea:	00 00       	nop 
}
8030a9ec:	00 00       	nop 
	#elif defined(__HIGHTEC__) && !defined(__clang__)
		extern void _init(void); /* cpp initialization */
		_init();
	#elif defined(__GNUC__) && !defined(__HIGHTEC__)
		extern void _init(void); /* cpp initialization */
		_init();
8030a9ee:	6d ff 41 e1 	call 80306c70 <_init>
	#elif defined(__ghs__)
		extern void _main(void); /* cpp initialization */
		_main();
	#endif
}
8030a9f2:	00 00       	nop 
8030a9f4:	00 90       	ret 

8030a9f6 <Ifx_Ssw_Pms_Init>:
#pragma GCC optimize ("O1")
#endif

#if (IFX_CFG_SSW_ENABLE_PMS_INIT == 1U)
void Ifx_Ssw_Pms_Init(void)
{
8030a9f6:	40 ae       	mov.aa %a14,%sp
    uint16 password = MODULE_SCU.SEICON0.B.EPW ^ 0x003F;
8030a9f8:	91 30 00 2f 	movh.a %a2,61443
8030a9fc:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_START2_end+0x4fd2fbd4>>
8030aa00:	19 22 34 a0 	ld.w %d2,[%a2]692 <f00302b4 <_START2_end+0x4fd29e88>>
8030aa04:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint32                                      regVal;
    uint16                                      endinitSfty_pw = IfxScuWdt_getGlobalSafetyEndinitPasswordInline();
    const IfxPmsEvr_initSequencePhase          *phaseConfig;
    const IfxPmsEvr_StepDownRegulatorRegConfig *regConfig;

    if (PMS_EVRSTAT.B.EVRC == 1U)
8030aa08:	91 50 02 2f 	movh.a %a2,61477
8030aa0c:	d9 22 2c 08 	lea %a2,[%a2]-32724 <f024802c <_START2_end+0x4ff41c00>>
8030aa10:	54 23       	ld.w %d3,[%a2]
8030aa12:	6f 03 04 80 	jnz.t %d3,0,8030aa1a <Ifx_Ssw_Pms_Init+0x24>
}


IFX_SSW_INLINE void Ifx_Ssw_jumpBackToLink(void)
{
    __asm__ volatile ("ji %a11");
8030aa16:	dc 0b       	ji %a11
        __debug();
        /* Application may have call to error handling here */
    }

    Ifx_Ssw_jumpBackToLink();
}
8030aa18:	00 90       	ret 
    {
        /*Loop through each configured phase*/
        for (phaseConfig = &sequence->phaseConfig[0];
8030aa1a:	91 00 03 28 	movh.a %a2,32816
8030aa1e:	d9 23 58 86 	lea %a3,[%a2]26136 <80306618 <IfxPmsEvr_cfgSequenceDefault>>
8030aa22:	b0 43       	add.a %a3,4
8030aa24:	d4 33       	ld.a %a3,[%a3]
             phaseConfig < &sequence->phaseConfig[sequence->numOfPhases];
8030aa26:	39 27 58 86 	ld.bu %d7,[%a2]26136 <80306618 <IfxPmsEvr_cfgSequenceDefault>>
8030aa2a:	53 c7 20 70 	mul %d7,%d7,12
8030aa2e:	80 33       	mov.d %d3,%a3
8030aa30:	42 73       	add %d3,%d7
8030aa32:	80 34       	mov.d %d4,%a3
8030aa34:	7f 34 f1 ff 	jge.u %d4,%d3,8030aa16 <Ifx_Ssw_Pms_Init+0x20>
             phaseConfig++)
        {
            IfxScuWdt_clearGlobalSafetyEndinitInline(endinitSfty_pw);
8030aa38:	8f f2 83 21 	xor %d2,%d2,63
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
8030aa3c:	06 22       	sh %d2,2
8030aa3e:	7b c0 ff 0f 	movh %d0,65532
8030aa42:	a6 20       	or %d0,%d2
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF) | (1 << IFX_SCU_SEICON0_ENDINIT_OFF);
8030aa44:	7b c0 ff 1f 	movh %d1,65532
8030aa48:	c2 21       	add %d1,2
8030aa4a:	a6 21       	or %d1,%d2
    boolean                                     pmsInitDone    = TRUE;
8030aa4c:	82 18       	mov %d8,1
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
8030aa4e:	91 30 00 4f 	movh.a %a4,61443
8030aa52:	d9 44 00 06 	lea %a4,[%a4]24576 <f0036000 <_START2_end+0x4fd2fbd4>>
    while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
8030aa56:	02 84       	mov %d4,%d8
                 * However, for this function, as this is used only with CPU0 startup no wait required
                 */
                (*((volatile uint32 *)regConfig->regAddr)) = regVal; /*Write to the physical register*/
            }

            PMS_EVRSDCTRL0.B.UP = 1;
8030aa58:	91 50 02 5f 	movh.a %a5,61477
8030aa5c:	d9 55 08 48 	lea %a5,[%a5]-32504 <f0248108 <_START2_end+0x4ff41cdc>>
            /*Now, wait for the UP bit at EVRSDCTRL0 is reset, which is to indicate the configurations are done*/
            do
            {
                if (--timeoutCount <= 0)
                {
                    pmsInitDone = FALSE;
8030aa60:	82 09       	mov %d9,0
}


IFX_INLINE void IfxPmsEvr_wait(float32 waitInSec)
{
    uint32 stmCount      = (uint32)((float32)33000000UL * waitInSec);
8030aa62:	7b c0 bf 64 	movh %d6,19452
8030aa66:	1b 06 52 6c 	addi %d6,%d6,-15072
    uint32 stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
8030aa6a:	c5 f6 10 01 	lea %a6,f0001010 <_START2_end+0x4fcfabe4>
             phaseConfig < &sequence->phaseConfig[sequence->numOfPhases];
8030aa6e:	d9 2c 58 86 	lea %a12,[%a2]26136 <80306618 <IfxPmsEvr_cfgSequenceDefault>>
8030aa72:	1d 00 15 00 	j 8030aa9c <Ifx_Ssw_Pms_Init+0xa6>
    uint32 stmCount      = (uint32)((float32)33000000UL * waitInSec);
8030aa76:	19 32 08 00 	ld.w %d2,[%a3]8
8030aa7a:	4b 26 41 20 	mul.f %d2,%d6,%d2
8030aa7e:	4b 02 71 31 	ftouz %d3,%d2
    uint32 stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
8030aa82:	54 65       	ld.w %d5,[%a6]

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
8030aa84:	54 62       	ld.w %d2,[%a6]
8030aa86:	a2 52       	sub %d2,%d5
8030aa88:	3f 32 fe ff 	jlt.u %d2,%d3,8030aa84 <Ifx_Ssw_Pms_Init+0x8e>
             phaseConfig++)
8030aa8c:	d9 33 0c 00 	lea %a3,[%a3]12
             phaseConfig < &sequence->phaseConfig[sequence->numOfPhases];
8030aa90:	19 c2 04 00 	ld.w %d2,[%a12]4
8030aa94:	42 72       	add %d2,%d7
8030aa96:	80 33       	mov.d %d3,%a3
8030aa98:	7f 23 3d 80 	jge.u %d3,%d2,8030ab12 <Ifx_Ssw_Pms_Init+0x11c>
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
8030aa9c:	59 40 34 a0 	st.w [%a4]692 <f00302b4 <_START2_end+0x4fd29e88>>,%d0
    while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
8030aaa0:	19 42 34 a0 	ld.w %d2,[%a4]692 <f00302b4 <_START2_end+0x4fd29e88>>
8030aaa4:	37 02 e1 20 	extr.u %d2,%d2,1,1
8030aaa8:	5f 42 fc 7f 	jeq %d2,%d4,8030aaa0 <Ifx_Ssw_Pms_Init+0xaa>
            for (regConfig = &phaseConfig->regConfig[0];
8030aaac:	99 32 04 00 	ld.a %a2,[%a3]4
                 regConfig < &phaseConfig->regConfig[phaseConfig->numOfRegisters];
8030aab0:	14 32       	ld.bu %d2,[%a3]
8030aab2:	80 23       	mov.d %d3,%a2
8030aab4:	13 c2 20 23 	madd %d2,%d3,%d2,12
8030aab8:	7f 23 16 80 	jge.u %d3,%d2,8030aae4 <Ifx_Ssw_Pms_Init+0xee>
                regVal  = (*((volatile uint32 *)regConfig->regAddr));
8030aabc:	d4 27       	ld.a %a7,[%a2]
8030aabe:	54 72       	ld.w %d2,[%a7]
                regVal &= ~regConfig->mask;
8030aac0:	19 23 08 00 	ld.w %d3,[%a2]8
8030aac4:	0f 32 e0 20 	andn %d2,%d2,%d3
                regVal |= regConfig->value;
8030aac8:	19 23 04 00 	ld.w %d3,[%a2]4
8030aacc:	a6 32       	or %d2,%d3
                (*((volatile uint32 *)regConfig->regAddr)) = regVal; /*Write to the physical register*/
8030aace:	74 72       	st.w [%a7],%d2
                 regConfig++)
8030aad0:	d9 22 0c 00 	lea %a2,[%a2]12
                 regConfig < &phaseConfig->regConfig[phaseConfig->numOfRegisters];
8030aad4:	14 32       	ld.bu %d2,[%a3]
8030aad6:	19 33 04 00 	ld.w %d3,[%a3]4
8030aada:	13 c2 20 23 	madd %d2,%d3,%d2,12
8030aade:	80 23       	mov.d %d3,%a2
8030aae0:	3f 23 ee ff 	jlt.u %d3,%d2,8030aabc <Ifx_Ssw_Pms_Init+0xc6>
            PMS_EVRSDCTRL0.B.UP = 1;
8030aae4:	54 52       	ld.w %d2,[%a5]
8030aae6:	b7 12 01 2f 	insert %d2,%d2,1,30,1
8030aaea:	74 52       	st.w [%a5],%d2
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF) | (1 << IFX_SCU_SEICON0_ENDINIT_OFF);
8030aaec:	59 41 34 a0 	st.w [%a4]692 <f00302b4 <_START2_end+0x4fd29e88>>,%d1
    while (MODULE_SCU.SEICON0.B.ENDINIT == 0)
8030aaf0:	19 42 34 a0 	ld.w %d2,[%a4]692 <f00302b4 <_START2_end+0x4fd29e88>>
8030aaf4:	6f 12 fe 7f 	jz.t %d2,1,8030aaf0 <Ifx_Ssw_Pms_Init+0xfa>
8030aaf8:	3b f0 0f 20 	mov %d2,255
            } while (PMS_EVRSDCTRL0.B.UP == 1);
8030aafc:	54 53       	ld.w %d3,[%a5]
8030aafe:	37 03 61 3f 	extr.u %d3,%d3,30,1
8030ab02:	5f 43 ba ff 	jne %d3,%d4,8030aa76 <Ifx_Ssw_Pms_Init+0x80>
                if (--timeoutCount <= 0)
8030ab06:	c2 f2       	add %d2,-1
8030ab08:	df 02 fa ff 	jne %d2,0,8030aafc <Ifx_Ssw_Pms_Init+0x106>
                    pmsInitDone = FALSE;
8030ab0c:	02 98       	mov %d8,%d9
8030ab0e:	1d ff b4 ff 	j 8030aa76 <Ifx_Ssw_Pms_Init+0x80>
    if (IfxPmsEvr_runInitSequence(&IfxPmsEvr_cfgSequenceDefault) == 0)
8030ab12:	df 08 82 ff 	jne %d8,0,8030aa16 <Ifx_Ssw_Pms_Init+0x20>
    __asm__ volatile ("debug" : : : "memory");
8030ab16:	00 a0       	debug 
}
8030ab18:	1d ff 7f ff 	j 8030aa16 <Ifx_Ssw_Pms_Init+0x20>

8030ab1c <Ifx_Ssw_Pms_InitCheck>:

#if (IFX_CFG_SSW_ENABLE_PMS_INIT_CHECK == 1U)
void Ifx_Ssw_Pms_InitCheck(void)
{
8030ab1c:	40 ae       	mov.aa %a14,%sp
    if (PMS_EVRSTAT.B.EVRC == 1U)
8030ab1e:	91 50 02 2f 	movh.a %a2,61477
8030ab22:	d9 22 2c 08 	lea %a2,[%a2]-32724 <f024802c <_START2_end+0x4ff41c00>>
8030ab26:	54 22       	ld.w %d2,[%a2]
8030ab28:	6f 02 04 80 	jnz.t %d2,0,8030ab30 <Ifx_Ssw_Pms_InitCheck+0x14>
8030ab2c:	dc 0b       	ji %a11
    {
        __debug();
        /* Application may have call to error handling here */
    }
    Ifx_Ssw_jumpBackToLink();
}
8030ab2e:	00 90       	ret 
        for (regCfgCount = 0; regCfgCount < checkConfig->numOfRegisters; regCfgCount++)
8030ab30:	91 00 03 28 	movh.a %a2,32816
8030ab34:	39 25 68 c6 	ld.bu %d5,[%a2]26408 <80306728 <IfxPmsEvr_checkRegCfgDefault>>
8030ab38:	bf 15 1d 00 	jlt %d5,1,8030ab72 <Ifx_Ssw_Pms_InitCheck+0x56>
            const IfxPmsEvr_StepDownRegulatorRegConfig *regConfig = &checkConfig->regConfig[regCfgCount];
8030ab3c:	91 00 03 28 	movh.a %a2,32816
8030ab40:	99 22 6c c6 	ld.a %a2,[%a2]26412 <8030672c <IfxPmsEvr_checkRegCfgDefault+0x4>>
    boolean allRight = TRUE;
8030ab44:	82 12       	mov %d2,1
        for (regCfgCount = 0; regCfgCount < checkConfig->numOfRegisters; regCfgCount++)
8030ab46:	82 03       	mov %d3,0
            regVal  = (*((volatile uint32 *)regConfig->regAddr));
8030ab48:	d4 23       	ld.a %a3,[%a2]
8030ab4a:	54 34       	ld.w %d4,[%a3]
            regVal &= regConfig->mask;
8030ab4c:	19 26 08 00 	ld.w %d6,[%a2]8
8030ab50:	26 64       	and %d4,%d6
            if (regVal != regConfig->value)
8030ab52:	19 26 04 00 	ld.w %d6,[%a2]4
                allRight = FALSE;
8030ab56:	0b 64 00 41 	eq %d4,%d4,%d6
8030ab5a:	ab 02 80 24 	sel %d2,%d4,%d2,0
        for (regCfgCount = 0; regCfgCount < checkConfig->numOfRegisters; regCfgCount++)
8030ab5e:	c2 13       	add %d3,1
8030ab60:	d9 22 0c 00 	lea %a2,[%a2]12
8030ab64:	5f 53 f2 ff 	jne %d3,%d5,8030ab48 <Ifx_Ssw_Pms_InitCheck+0x2c>
        if (allRight == TRUE)
8030ab68:	df 12 05 00 	jeq %d2,1,8030ab72 <Ifx_Ssw_Pms_InitCheck+0x56>
    __asm__ volatile ("debug" : : : "memory");
8030ab6c:	00 a0       	debug 
}
8030ab6e:	1d ff df ff 	j 8030ab2c <Ifx_Ssw_Pms_InitCheck+0x10>
            if (PMS_EVRSTAT.B.SDVOK != 1)
8030ab72:	91 50 02 2f 	movh.a %a2,61477
8030ab76:	d9 22 2c 08 	lea %a2,[%a2]-32724 <f024802c <_START2_end+0x4ff41c00>>
8030ab7a:	54 22       	ld.w %d2,[%a2]
8030ab7c:	ef 52 d8 ff 	jnz.t %d2,21,8030ab2c <Ifx_Ssw_Pms_InitCheck+0x10>
8030ab80:	1d ff f6 ff 	j 8030ab6c <Ifx_Ssw_Pms_InitCheck+0x50>

8030ab84 <initLED>:
/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
/* This function initializes the port pin which drives the LED */
void initLED(void)
{
8030ab84:	40 ae       	mov.aa %a14,%sp
8030ab86:	20 28       	sub.a %sp,40
8030ab88:	7b 40 00 2f 	movh %d2,61444
8030ab8c:	1b 02 00 2a 	addi %d2,%d2,-24576
8030ab90:	59 e2 e8 ff 	st.w [%a14]-24,%d2
8030ab94:	82 52       	mov %d2,5
8030ab96:	e9 e2 e7 ff 	st.b [%a14]-25,%d2
8030ab9a:	3b 00 08 20 	mov %d2,128
8030ab9e:	59 e2 e0 ff 	st.w [%a14]-32,%d2
8030aba2:	3b 00 08 20 	mov %d2,128
8030aba6:	59 e2 dc ff 	st.w [%a14]-36,%d2
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
8030abaa:	39 e3 e7 ff 	ld.bu %d3,[%a14]-25
8030abae:	19 e4 e0 ff 	ld.w %d4,[%a14]-32
8030abb2:	19 e2 dc ff 	ld.w %d2,[%a14]-36
8030abb6:	a6 42       	or %d2,%d4
8030abb8:	02 25       	mov %d5,%d2
8030abba:	02 34       	mov %d4,%d3
8030abbc:	99 e4 e8 ff 	ld.a %a4,[%a14]-24
8030abc0:	6d ff 8d f6 	call 803098da <IfxPort_setPinMode>
}
8030abc4:	00 00       	nop 
8030abc6:	7b 40 00 2f 	movh %d2,61444
8030abca:	1b 02 00 2a 	addi %d2,%d2,-24576
8030abce:	59 e2 fc ff 	st.w [%a14]-4,%d2
8030abd2:	82 52       	mov %d2,5
8030abd4:	e9 e2 fb ff 	st.b [%a14]-5,%d2
    IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
8030abd8:	39 e2 fb ff 	ld.bu %d2,[%a14]-5
8030abdc:	19 e3 fc ff 	ld.w %d3,[%a14]-4
8030abe0:	59 e3 f4 ff 	st.w [%a14]-12,%d3
8030abe4:	e9 e2 f3 ff 	st.b [%a14]-13,%d2
8030abe8:	82 12       	mov %d2,1
8030abea:	59 e2 ec ff 	st.w [%a14]-20,%d2


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
8030abee:	39 e2 f3 ff 	ld.bu %d2,[%a14]-13
8030abf2:	19 e3 ec ff 	ld.w %d3,[%a14]-20
8030abf6:	0f 23 00 20 	sh %d2,%d3,%d2
8030abfa:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
8030abfe:	b0 42       	add.a %a2,4
8030ac00:	74 22       	st.w [%a2],%d2
}
8030ac02:	00 00       	nop 
}
8030ac04:	00 00       	nop 
    /* Initialization of the LED used in this example */
    IfxPort_setPinModeOutput(LED, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);

    /* Switch OFF the LED (low-level active) */
    IfxPort_setPinHigh(LED);
}
8030ac06:	00 00       	nop 
8030ac08:	00 90       	ret 

8030ac0a <blinkLED>:

/* This function toggles the port pin and wait 500 milliseconds */
void blinkLED(void)
{
8030ac0a:	40 ae       	mov.aa %a14,%sp
8030ac0c:	20 28       	sub.a %sp,40
8030ac0e:	7b 40 00 2f 	movh %d2,61444
8030ac12:	1b 02 00 2a 	addi %d2,%d2,-24576
8030ac16:	59 e2 e8 ff 	st.w [%a14]-24,%d2
8030ac1a:	82 52       	mov %d2,5
8030ac1c:	e9 e2 e7 ff 	st.b [%a14]-25,%d2


IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex)
{
    IfxPort_setPinState(port, pinIndex, IfxPort_State_toggled);
8030ac20:	39 e2 e7 ff 	ld.bu %d2,[%a14]-25
8030ac24:	19 e3 e8 ff 	ld.w %d3,[%a14]-24
8030ac28:	59 e3 e0 ff 	st.w [%a14]-32,%d3
8030ac2c:	e9 e2 df ff 	st.b [%a14]-33,%d2
8030ac30:	7b 10 00 20 	movh %d2,1
8030ac34:	c2 12       	add %d2,1
8030ac36:	59 e2 d8 ff 	st.w [%a14]-40,%d2
    port->OMR.U = action << pinIndex;
8030ac3a:	39 e2 df ff 	ld.bu %d2,[%a14]-33
8030ac3e:	19 e3 d8 ff 	ld.w %d3,[%a14]-40
8030ac42:	0f 23 00 20 	sh %d2,%d3,%d2
8030ac46:	99 e2 e0 ff 	ld.a %a2,[%a14]-32
8030ac4a:	b0 42       	add.a %a2,4
8030ac4c:	74 22       	st.w [%a2],%d2
}
8030ac4e:	00 00       	nop 
}
8030ac50:	00 00       	nop 
8030ac52:	7b 00 00 2f 	movh %d2,61440
8030ac56:	1b 02 00 21 	addi %d2,%d2,4096
8030ac5a:	59 e2 fc ff 	st.w [%a14]-4,%d2
8030ac5e:	3b 40 1f 20 	mov %d2,500
8030ac62:	59 e2 f8 ff 	st.w [%a14]-8,%d2
8030ac66:	19 e2 fc ff 	ld.w %d2,[%a14]-4
8030ac6a:	59 e2 f4 ff 	st.w [%a14]-12,%d2
8030ac6e:	82 04       	mov %d4,0
8030ac70:	6d ff c2 e9 	call 80307ff4 <IfxScuCcu_getSourceFrequency>
8030ac74:	02 23       	mov %d3,%d2
8030ac76:	91 30 00 2f 	movh.a %a2,61443
8030ac7a:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd2fc04>>
8030ac7e:	54 22       	ld.w %d2,[%a2]
8030ac80:	37 02 64 20 	extr.u %d2,%d2,0,4
8030ac84:	8f f2 0f 21 	and %d2,%d2,255
8030ac88:	4b 02 41 21 	itof %d2,%d2
8030ac8c:	4b 23 51 20 	div.f %d2,%d3,%d2
IFX_INLINE float32 IfxStm_getFrequency(Ifx_STM *stm)
{
    IFX_UNUSED_PARAMETER(stm);
    float32 result;

    result = IfxScuCcu_getStmFrequency();
8030ac90:	59 e2 f0 ff 	st.w [%a14]-16,%d2

    return result;
8030ac94:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
}


IFX_INLINE sint32 IfxStm_getTicksFromMilliseconds(Ifx_STM *stm, uint32 milliSeconds)
{
    sint32 freq = (sint32)IfxStm_getFrequency(stm);
8030ac98:	4b 02 31 21 	ftoiz %d2,%d2
8030ac9c:	59 e2 ec ff 	st.w [%a14]-20,%d2
    return (freq / (1000)) * milliSeconds;
8030aca0:	19 e4 ec ff 	ld.w %d4,[%a14]-20
8030aca4:	7b 20 06 21 	movh %d2,4194
8030aca8:	1b 32 dd 24 	addi %d2,%d2,19923
8030acac:	73 24 6a 20 	mul %e2,%d4,%d2
8030acb0:	86 a3       	sha %d3,-6
8030acb2:	8f 14 3e 20 	sha %d2,%d4,-31
8030acb6:	0b 23 80 20 	sub %d2,%d3,%d2
8030acba:	02 23       	mov %d3,%d2
8030acbc:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8030acc0:	e2 32       	mul %d2,%d3
    IfxPort_togglePin(LED);                                                     /* Toggle the state of the LED      */
    waitTime(IfxStm_getTicksFromMilliseconds(BSP_DEFAULT_TIMER, WAIT_TIME));    /* Wait 500 milliseconds            */
8030acc2:	0b 20 00 28 	mov %e2,%d2
8030acc6:	0b 23 10 48 	mov %e4,%d3,%d2
8030acca:	6d ff 77 f9 	call 80309fb8 <waitTime>
}
8030acce:	00 00       	nop 
8030acd0:	00 90       	ret 

8030acd2 <blinkLED_end>:
	...
