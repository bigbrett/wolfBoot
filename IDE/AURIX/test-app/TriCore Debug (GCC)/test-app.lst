
test-app.elf:     file format elf32-tricore

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .CPU2.ustack  00000800  50014e00  50014e00  00000294  2**0
                  ALLOC
  1 .CPU2.istack  00000400  50015700  50015700  00000294  2**0
                  ALLOC
  2 .CPU2.csa     00002000  50015c00  50015c00  00000294  2**0
                  ALLOC
  3 .CPU1.ustack  00000800  60038e00  60038e00  00000294  2**0
                  ALLOC
  4 .CPU1.istack  00000400  60039700  60039700  00000294  2**0
                  ALLOC
  5 .CPU1.csa     00002000  60039c00  60039c00  00000294  2**0
                  ALLOC
  6 .CPU0.ustack  00000800  70038e00  70038e00  00000294  2**0
                  ALLOC
  7 .CPU0.istack  00000400  70039700  70039700  00000294  2**0
                  ALLOC
  8 .CPU0.csa     00002000  70039c00  70039c00  00000294  2**0
                  ALLOC
  9 .start_tc0    0000000c  a0000000  a0000000  000048ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .traptab_tc0  00000100  80000100  80000100  000002a0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 11 .traptab_tc1  00000100  80300000  80300000  00004300  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 12 .traptab_tc2  00000100  80300100  80300100  00004400  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 13 .start_tc1    0000000c  a0300200  a0300200  000048f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .start_tc2    0000000c  a0300220  a0300220  00004902  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .inttab_tc0_000 00000000  802fe000  802fe000  0000490e  2**0
                  CONTENTS
 16 .inttab_tc0_001 00000000  802fe020  802fe020  0000490e  2**0
                  CONTENTS
 17 .inttab_tc0_002 00000000  802fe040  802fe040  0000490e  2**0
                  CONTENTS
 18 .inttab_tc0_003 00000000  802fe060  802fe060  0000490e  2**0
                  CONTENTS
 19 .inttab_tc0_004 00000000  802fe080  802fe080  0000490e  2**0
                  CONTENTS
 20 .inttab_tc0_005 00000000  802fe0a0  802fe0a0  0000490e  2**0
                  CONTENTS
 21 .inttab_tc0_006 00000000  802fe0c0  802fe0c0  0000490e  2**0
                  CONTENTS
 22 .inttab_tc0_007 00000000  802fe0e0  802fe0e0  0000490e  2**0
                  CONTENTS
 23 .inttab_tc0_008 00000000  802fe100  802fe100  0000490e  2**0
                  CONTENTS
 24 .inttab_tc0_009 00000000  802fe120  802fe120  0000490e  2**0
                  CONTENTS
 25 .inttab_tc0_00A 00000000  802fe140  802fe140  0000490e  2**0
                  CONTENTS
 26 .inttab_tc0_00B 00000000  802fe160  802fe160  0000490e  2**0
                  CONTENTS
 27 .inttab_tc0_00C 00000000  802fe180  802fe180  0000490e  2**0
                  CONTENTS
 28 .inttab_tc0_00D 00000000  802fe1a0  802fe1a0  0000490e  2**0
                  CONTENTS
 29 .inttab_tc0_00E 00000000  802fe1c0  802fe1c0  0000490e  2**0
                  CONTENTS
 30 .inttab_tc0_00F 00000000  802fe1e0  802fe1e0  0000490e  2**0
                  CONTENTS
 31 .inttab_tc0_010 00000000  802fe200  802fe200  0000490e  2**0
                  CONTENTS
 32 .inttab_tc0_011 00000000  802fe220  802fe220  0000490e  2**0
                  CONTENTS
 33 .inttab_tc0_012 00000000  802fe240  802fe240  0000490e  2**0
                  CONTENTS
 34 .inttab_tc0_013 00000000  802fe260  802fe260  0000490e  2**0
                  CONTENTS
 35 .inttab_tc0_014 00000000  802fe280  802fe280  0000490e  2**0
                  CONTENTS
 36 .inttab_tc0_015 00000000  802fe2a0  802fe2a0  0000490e  2**0
                  CONTENTS
 37 .inttab_tc0_016 00000000  802fe2c0  802fe2c0  0000490e  2**0
                  CONTENTS
 38 .inttab_tc0_017 00000000  802fe2e0  802fe2e0  0000490e  2**0
                  CONTENTS
 39 .inttab_tc0_018 00000000  802fe300  802fe300  0000490e  2**0
                  CONTENTS
 40 .inttab_tc0_019 00000000  802fe320  802fe320  0000490e  2**0
                  CONTENTS
 41 .inttab_tc0_01A 00000000  802fe340  802fe340  0000490e  2**0
                  CONTENTS
 42 .inttab_tc0_01B 00000000  802fe360  802fe360  0000490e  2**0
                  CONTENTS
 43 .inttab_tc0_01C 00000000  802fe380  802fe380  0000490e  2**0
                  CONTENTS
 44 .inttab_tc0_01D 00000000  802fe3a0  802fe3a0  0000490e  2**0
                  CONTENTS
 45 .inttab_tc0_01E 00000000  802fe3c0  802fe3c0  0000490e  2**0
                  CONTENTS
 46 .inttab_tc0_01F 00000000  802fe3e0  802fe3e0  0000490e  2**0
                  CONTENTS
 47 .inttab_tc0_020 00000000  802fe400  802fe400  0000490e  2**0
                  CONTENTS
 48 .inttab_tc0_021 00000000  802fe420  802fe420  0000490e  2**0
                  CONTENTS
 49 .inttab_tc0_022 00000000  802fe440  802fe440  0000490e  2**0
                  CONTENTS
 50 .inttab_tc0_023 00000000  802fe460  802fe460  0000490e  2**0
                  CONTENTS
 51 .inttab_tc0_024 00000000  802fe480  802fe480  0000490e  2**0
                  CONTENTS
 52 .inttab_tc0_025 00000000  802fe4a0  802fe4a0  0000490e  2**0
                  CONTENTS
 53 .inttab_tc0_026 00000000  802fe4c0  802fe4c0  0000490e  2**0
                  CONTENTS
 54 .inttab_tc0_027 00000000  802fe4e0  802fe4e0  0000490e  2**0
                  CONTENTS
 55 .inttab_tc0_028 00000000  802fe500  802fe500  0000490e  2**0
                  CONTENTS
 56 .inttab_tc0_029 00000000  802fe520  802fe520  0000490e  2**0
                  CONTENTS
 57 .inttab_tc0_02A 00000000  802fe540  802fe540  0000490e  2**0
                  CONTENTS
 58 .inttab_tc0_02B 00000000  802fe560  802fe560  0000490e  2**0
                  CONTENTS
 59 .inttab_tc0_02C 00000000  802fe580  802fe580  0000490e  2**0
                  CONTENTS
 60 .inttab_tc0_02D 00000000  802fe5a0  802fe5a0  0000490e  2**0
                  CONTENTS
 61 .inttab_tc0_02E 00000000  802fe5c0  802fe5c0  0000490e  2**0
                  CONTENTS
 62 .inttab_tc0_02F 00000000  802fe5e0  802fe5e0  0000490e  2**0
                  CONTENTS
 63 .inttab_tc0_030 00000000  802fe600  802fe600  0000490e  2**0
                  CONTENTS
 64 .inttab_tc0_031 00000000  802fe620  802fe620  0000490e  2**0
                  CONTENTS
 65 .inttab_tc0_032 00000000  802fe640  802fe640  0000490e  2**0
                  CONTENTS
 66 .inttab_tc0_033 00000000  802fe660  802fe660  0000490e  2**0
                  CONTENTS
 67 .inttab_tc0_034 00000000  802fe680  802fe680  0000490e  2**0
                  CONTENTS
 68 .inttab_tc0_035 00000000  802fe6a0  802fe6a0  0000490e  2**0
                  CONTENTS
 69 .inttab_tc0_036 00000000  802fe6c0  802fe6c0  0000490e  2**0
                  CONTENTS
 70 .inttab_tc0_037 00000000  802fe6e0  802fe6e0  0000490e  2**0
                  CONTENTS
 71 .inttab_tc0_038 00000000  802fe700  802fe700  0000490e  2**0
                  CONTENTS
 72 .inttab_tc0_039 00000000  802fe720  802fe720  0000490e  2**0
                  CONTENTS
 73 .inttab_tc0_03A 00000000  802fe740  802fe740  0000490e  2**0
                  CONTENTS
 74 .inttab_tc0_03B 00000000  802fe760  802fe760  0000490e  2**0
                  CONTENTS
 75 .inttab_tc0_03C 00000000  802fe780  802fe780  0000490e  2**0
                  CONTENTS
 76 .inttab_tc0_03D 00000000  802fe7a0  802fe7a0  0000490e  2**0
                  CONTENTS
 77 .inttab_tc0_03E 00000000  802fe7c0  802fe7c0  0000490e  2**0
                  CONTENTS
 78 .inttab_tc0_03F 00000000  802fe7e0  802fe7e0  0000490e  2**0
                  CONTENTS
 79 .inttab_tc0_040 00000000  802fe800  802fe800  0000490e  2**0
                  CONTENTS
 80 .inttab_tc0_041 00000000  802fe820  802fe820  0000490e  2**0
                  CONTENTS
 81 .inttab_tc0_042 00000000  802fe840  802fe840  0000490e  2**0
                  CONTENTS
 82 .inttab_tc0_043 00000000  802fe860  802fe860  0000490e  2**0
                  CONTENTS
 83 .inttab_tc0_044 00000000  802fe880  802fe880  0000490e  2**0
                  CONTENTS
 84 .inttab_tc0_045 00000000  802fe8a0  802fe8a0  0000490e  2**0
                  CONTENTS
 85 .inttab_tc0_046 00000000  802fe8c0  802fe8c0  0000490e  2**0
                  CONTENTS
 86 .inttab_tc0_047 00000000  802fe8e0  802fe8e0  0000490e  2**0
                  CONTENTS
 87 .inttab_tc0_048 00000000  802fe900  802fe900  0000490e  2**0
                  CONTENTS
 88 .inttab_tc0_049 00000000  802fe920  802fe920  0000490e  2**0
                  CONTENTS
 89 .inttab_tc0_04A 00000000  802fe940  802fe940  0000490e  2**0
                  CONTENTS
 90 .inttab_tc0_04B 00000000  802fe960  802fe960  0000490e  2**0
                  CONTENTS
 91 .inttab_tc0_04C 00000000  802fe980  802fe980  0000490e  2**0
                  CONTENTS
 92 .inttab_tc0_04D 00000000  802fe9a0  802fe9a0  0000490e  2**0
                  CONTENTS
 93 .inttab_tc0_04E 00000000  802fe9c0  802fe9c0  0000490e  2**0
                  CONTENTS
 94 .inttab_tc0_04F 00000000  802fe9e0  802fe9e0  0000490e  2**0
                  CONTENTS
 95 .inttab_tc0_050 00000000  802fea00  802fea00  0000490e  2**0
                  CONTENTS
 96 .inttab_tc0_051 00000000  802fea20  802fea20  0000490e  2**0
                  CONTENTS
 97 .inttab_tc0_052 00000000  802fea40  802fea40  0000490e  2**0
                  CONTENTS
 98 .inttab_tc0_053 00000000  802fea60  802fea60  0000490e  2**0
                  CONTENTS
 99 .inttab_tc0_054 00000000  802fea80  802fea80  0000490e  2**0
                  CONTENTS
100 .inttab_tc0_055 00000000  802feaa0  802feaa0  0000490e  2**0
                  CONTENTS
101 .inttab_tc0_056 00000000  802feac0  802feac0  0000490e  2**0
                  CONTENTS
102 .inttab_tc0_057 00000000  802feae0  802feae0  0000490e  2**0
                  CONTENTS
103 .inttab_tc0_058 00000000  802feb00  802feb00  0000490e  2**0
                  CONTENTS
104 .inttab_tc0_059 00000000  802feb20  802feb20  0000490e  2**0
                  CONTENTS
105 .inttab_tc0_05A 00000000  802feb40  802feb40  0000490e  2**0
                  CONTENTS
106 .inttab_tc0_05B 00000000  802feb60  802feb60  0000490e  2**0
                  CONTENTS
107 .inttab_tc0_05C 00000000  802feb80  802feb80  0000490e  2**0
                  CONTENTS
108 .inttab_tc0_05D 00000000  802feba0  802feba0  0000490e  2**0
                  CONTENTS
109 .inttab_tc0_05E 00000000  802febc0  802febc0  0000490e  2**0
                  CONTENTS
110 .inttab_tc0_05F 00000000  802febe0  802febe0  0000490e  2**0
                  CONTENTS
111 .inttab_tc0_060 00000000  802fec00  802fec00  0000490e  2**0
                  CONTENTS
112 .inttab_tc0_061 00000000  802fec20  802fec20  0000490e  2**0
                  CONTENTS
113 .inttab_tc0_062 00000000  802fec40  802fec40  0000490e  2**0
                  CONTENTS
114 .inttab_tc0_063 00000000  802fec60  802fec60  0000490e  2**0
                  CONTENTS
115 .inttab_tc0_064 00000000  802fec80  802fec80  0000490e  2**0
                  CONTENTS
116 .inttab_tc0_065 00000000  802feca0  802feca0  0000490e  2**0
                  CONTENTS
117 .inttab_tc0_066 00000000  802fecc0  802fecc0  0000490e  2**0
                  CONTENTS
118 .inttab_tc0_067 00000000  802fece0  802fece0  0000490e  2**0
                  CONTENTS
119 .inttab_tc0_068 00000000  802fed00  802fed00  0000490e  2**0
                  CONTENTS
120 .inttab_tc0_069 00000000  802fed20  802fed20  0000490e  2**0
                  CONTENTS
121 .inttab_tc0_06A 00000000  802fed40  802fed40  0000490e  2**0
                  CONTENTS
122 .inttab_tc0_06B 00000000  802fed60  802fed60  0000490e  2**0
                  CONTENTS
123 .inttab_tc0_06C 00000000  802fed80  802fed80  0000490e  2**0
                  CONTENTS
124 .inttab_tc0_06D 00000000  802feda0  802feda0  0000490e  2**0
                  CONTENTS
125 .inttab_tc0_06E 00000000  802fedc0  802fedc0  0000490e  2**0
                  CONTENTS
126 .inttab_tc0_06F 00000000  802fede0  802fede0  0000490e  2**0
                  CONTENTS
127 .inttab_tc0_070 00000000  802fee00  802fee00  0000490e  2**0
                  CONTENTS
128 .inttab_tc0_071 00000000  802fee20  802fee20  0000490e  2**0
                  CONTENTS
129 .inttab_tc0_072 00000000  802fee40  802fee40  0000490e  2**0
                  CONTENTS
130 .inttab_tc0_073 00000000  802fee60  802fee60  0000490e  2**0
                  CONTENTS
131 .inttab_tc0_074 00000000  802fee80  802fee80  0000490e  2**0
                  CONTENTS
132 .inttab_tc0_075 00000000  802feea0  802feea0  0000490e  2**0
                  CONTENTS
133 .inttab_tc0_076 00000000  802feec0  802feec0  0000490e  2**0
                  CONTENTS
134 .inttab_tc0_077 00000000  802feee0  802feee0  0000490e  2**0
                  CONTENTS
135 .inttab_tc0_078 00000000  802fef00  802fef00  0000490e  2**0
                  CONTENTS
136 .inttab_tc0_079 00000000  802fef20  802fef20  0000490e  2**0
                  CONTENTS
137 .inttab_tc0_07A 00000000  802fef40  802fef40  0000490e  2**0
                  CONTENTS
138 .inttab_tc0_07B 00000000  802fef60  802fef60  0000490e  2**0
                  CONTENTS
139 .inttab_tc0_07C 00000000  802fef80  802fef80  0000490e  2**0
                  CONTENTS
140 .inttab_tc0_07D 00000000  802fefa0  802fefa0  0000490e  2**0
                  CONTENTS
141 .inttab_tc0_07E 00000000  802fefc0  802fefc0  0000490e  2**0
                  CONTENTS
142 .inttab_tc0_07F 00000000  802fefe0  802fefe0  0000490e  2**0
                  CONTENTS
143 .inttab_tc0_080 00000000  802ff000  802ff000  0000490e  2**0
                  CONTENTS
144 .inttab_tc0_081 00000000  802ff020  802ff020  0000490e  2**0
                  CONTENTS
145 .inttab_tc0_082 00000000  802ff040  802ff040  0000490e  2**0
                  CONTENTS
146 .inttab_tc0_083 00000000  802ff060  802ff060  0000490e  2**0
                  CONTENTS
147 .inttab_tc0_084 00000000  802ff080  802ff080  0000490e  2**0
                  CONTENTS
148 .inttab_tc0_085 00000000  802ff0a0  802ff0a0  0000490e  2**0
                  CONTENTS
149 .inttab_tc0_086 00000000  802ff0c0  802ff0c0  0000490e  2**0
                  CONTENTS
150 .inttab_tc0_087 00000000  802ff0e0  802ff0e0  0000490e  2**0
                  CONTENTS
151 .inttab_tc0_088 00000000  802ff100  802ff100  0000490e  2**0
                  CONTENTS
152 .inttab_tc0_089 00000000  802ff120  802ff120  0000490e  2**0
                  CONTENTS
153 .inttab_tc0_08A 00000000  802ff140  802ff140  0000490e  2**0
                  CONTENTS
154 .inttab_tc0_08B 00000000  802ff160  802ff160  0000490e  2**0
                  CONTENTS
155 .inttab_tc0_08C 00000000  802ff180  802ff180  0000490e  2**0
                  CONTENTS
156 .inttab_tc0_08D 00000000  802ff1a0  802ff1a0  0000490e  2**0
                  CONTENTS
157 .inttab_tc0_08E 00000000  802ff1c0  802ff1c0  0000490e  2**0
                  CONTENTS
158 .inttab_tc0_08F 00000000  802ff1e0  802ff1e0  0000490e  2**0
                  CONTENTS
159 .inttab_tc0_090 00000000  802ff200  802ff200  0000490e  2**0
                  CONTENTS
160 .inttab_tc0_091 00000000  802ff220  802ff220  0000490e  2**0
                  CONTENTS
161 .inttab_tc0_092 00000000  802ff240  802ff240  0000490e  2**0
                  CONTENTS
162 .inttab_tc0_093 00000000  802ff260  802ff260  0000490e  2**0
                  CONTENTS
163 .inttab_tc0_094 00000000  802ff280  802ff280  0000490e  2**0
                  CONTENTS
164 .inttab_tc0_095 00000000  802ff2a0  802ff2a0  0000490e  2**0
                  CONTENTS
165 .inttab_tc0_096 00000000  802ff2c0  802ff2c0  0000490e  2**0
                  CONTENTS
166 .inttab_tc0_097 00000000  802ff2e0  802ff2e0  0000490e  2**0
                  CONTENTS
167 .inttab_tc0_098 00000000  802ff300  802ff300  0000490e  2**0
                  CONTENTS
168 .inttab_tc0_099 00000000  802ff320  802ff320  0000490e  2**0
                  CONTENTS
169 .inttab_tc0_09A 00000000  802ff340  802ff340  0000490e  2**0
                  CONTENTS
170 .inttab_tc0_09B 00000000  802ff360  802ff360  0000490e  2**0
                  CONTENTS
171 .inttab_tc0_09C 00000000  802ff380  802ff380  0000490e  2**0
                  CONTENTS
172 .inttab_tc0_09D 00000000  802ff3a0  802ff3a0  0000490e  2**0
                  CONTENTS
173 .inttab_tc0_09E 00000000  802ff3c0  802ff3c0  0000490e  2**0
                  CONTENTS
174 .inttab_tc0_09F 00000000  802ff3e0  802ff3e0  0000490e  2**0
                  CONTENTS
175 .inttab_tc0_0A0 00000000  802ff400  802ff400  0000490e  2**0
                  CONTENTS
176 .inttab_tc0_0A1 00000000  802ff420  802ff420  0000490e  2**0
                  CONTENTS
177 .inttab_tc0_0A2 00000000  802ff440  802ff440  0000490e  2**0
                  CONTENTS
178 .inttab_tc0_0A3 00000000  802ff460  802ff460  0000490e  2**0
                  CONTENTS
179 .inttab_tc0_0A4 00000000  802ff480  802ff480  0000490e  2**0
                  CONTENTS
180 .inttab_tc0_0A5 00000000  802ff4a0  802ff4a0  0000490e  2**0
                  CONTENTS
181 .inttab_tc0_0A6 00000000  802ff4c0  802ff4c0  0000490e  2**0
                  CONTENTS
182 .inttab_tc0_0A7 00000000  802ff4e0  802ff4e0  0000490e  2**0
                  CONTENTS
183 .inttab_tc0_0A8 00000000  802ff500  802ff500  0000490e  2**0
                  CONTENTS
184 .inttab_tc0_0A9 00000000  802ff520  802ff520  0000490e  2**0
                  CONTENTS
185 .inttab_tc0_0AA 00000000  802ff540  802ff540  0000490e  2**0
                  CONTENTS
186 .inttab_tc0_0AB 00000000  802ff560  802ff560  0000490e  2**0
                  CONTENTS
187 .inttab_tc0_0AC 00000000  802ff580  802ff580  0000490e  2**0
                  CONTENTS
188 .inttab_tc0_0AD 00000000  802ff5a0  802ff5a0  0000490e  2**0
                  CONTENTS
189 .inttab_tc0_0AE 00000000  802ff5c0  802ff5c0  0000490e  2**0
                  CONTENTS
190 .inttab_tc0_0AF 00000000  802ff5e0  802ff5e0  0000490e  2**0
                  CONTENTS
191 .inttab_tc0_0B0 00000000  802ff600  802ff600  0000490e  2**0
                  CONTENTS
192 .inttab_tc0_0B1 00000000  802ff620  802ff620  0000490e  2**0
                  CONTENTS
193 .inttab_tc0_0B2 00000000  802ff640  802ff640  0000490e  2**0
                  CONTENTS
194 .inttab_tc0_0B3 00000000  802ff660  802ff660  0000490e  2**0
                  CONTENTS
195 .inttab_tc0_0B4 00000000  802ff680  802ff680  0000490e  2**0
                  CONTENTS
196 .inttab_tc0_0B5 00000000  802ff6a0  802ff6a0  0000490e  2**0
                  CONTENTS
197 .inttab_tc0_0B6 00000000  802ff6c0  802ff6c0  0000490e  2**0
                  CONTENTS
198 .inttab_tc0_0B7 00000000  802ff6e0  802ff6e0  0000490e  2**0
                  CONTENTS
199 .inttab_tc0_0B8 00000000  802ff700  802ff700  0000490e  2**0
                  CONTENTS
200 .inttab_tc0_0B9 00000000  802ff720  802ff720  0000490e  2**0
                  CONTENTS
201 .inttab_tc0_0BA 00000000  802ff740  802ff740  0000490e  2**0
                  CONTENTS
202 .inttab_tc0_0BB 00000000  802ff760  802ff760  0000490e  2**0
                  CONTENTS
203 .inttab_tc0_0BC 00000000  802ff780  802ff780  0000490e  2**0
                  CONTENTS
204 .inttab_tc0_0BD 00000000  802ff7a0  802ff7a0  0000490e  2**0
                  CONTENTS
205 .inttab_tc0_0BE 00000000  802ff7c0  802ff7c0  0000490e  2**0
                  CONTENTS
206 .inttab_tc0_0BF 00000000  802ff7e0  802ff7e0  0000490e  2**0
                  CONTENTS
207 .inttab_tc0_0C0 00000000  802ff800  802ff800  0000490e  2**0
                  CONTENTS
208 .inttab_tc0_0C1 00000000  802ff820  802ff820  0000490e  2**0
                  CONTENTS
209 .inttab_tc0_0C2 00000000  802ff840  802ff840  0000490e  2**0
                  CONTENTS
210 .inttab_tc0_0C3 00000000  802ff860  802ff860  0000490e  2**0
                  CONTENTS
211 .inttab_tc0_0C4 00000000  802ff880  802ff880  0000490e  2**0
                  CONTENTS
212 .inttab_tc0_0C5 00000000  802ff8a0  802ff8a0  0000490e  2**0
                  CONTENTS
213 .inttab_tc0_0C6 00000000  802ff8c0  802ff8c0  0000490e  2**0
                  CONTENTS
214 .inttab_tc0_0C7 00000000  802ff8e0  802ff8e0  0000490e  2**0
                  CONTENTS
215 .inttab_tc0_0C8 00000000  802ff900  802ff900  0000490e  2**0
                  CONTENTS
216 .inttab_tc0_0C9 00000000  802ff920  802ff920  0000490e  2**0
                  CONTENTS
217 .inttab_tc0_0CA 00000000  802ff940  802ff940  0000490e  2**0
                  CONTENTS
218 .inttab_tc0_0CB 00000000  802ff960  802ff960  0000490e  2**0
                  CONTENTS
219 .inttab_tc0_0CC 00000000  802ff980  802ff980  0000490e  2**0
                  CONTENTS
220 .inttab_tc0_0CD 00000000  802ff9a0  802ff9a0  0000490e  2**0
                  CONTENTS
221 .inttab_tc0_0CE 00000000  802ff9c0  802ff9c0  0000490e  2**0
                  CONTENTS
222 .inttab_tc0_0CF 00000000  802ff9e0  802ff9e0  0000490e  2**0
                  CONTENTS
223 .inttab_tc0_0D0 00000000  802ffa00  802ffa00  0000490e  2**0
                  CONTENTS
224 .inttab_tc0_0D1 00000000  802ffa20  802ffa20  0000490e  2**0
                  CONTENTS
225 .inttab_tc0_0D2 00000000  802ffa40  802ffa40  0000490e  2**0
                  CONTENTS
226 .inttab_tc0_0D3 00000000  802ffa60  802ffa60  0000490e  2**0
                  CONTENTS
227 .inttab_tc0_0D4 00000000  802ffa80  802ffa80  0000490e  2**0
                  CONTENTS
228 .inttab_tc0_0D5 00000000  802ffaa0  802ffaa0  0000490e  2**0
                  CONTENTS
229 .inttab_tc0_0D6 00000000  802ffac0  802ffac0  0000490e  2**0
                  CONTENTS
230 .inttab_tc0_0D7 00000000  802ffae0  802ffae0  0000490e  2**0
                  CONTENTS
231 .inttab_tc0_0D8 00000000  802ffb00  802ffb00  0000490e  2**0
                  CONTENTS
232 .inttab_tc0_0D9 00000000  802ffb20  802ffb20  0000490e  2**0
                  CONTENTS
233 .inttab_tc0_0DA 00000000  802ffb40  802ffb40  0000490e  2**0
                  CONTENTS
234 .inttab_tc0_0DB 00000000  802ffb60  802ffb60  0000490e  2**0
                  CONTENTS
235 .inttab_tc0_0DC 00000000  802ffb80  802ffb80  0000490e  2**0
                  CONTENTS
236 .inttab_tc0_0DD 00000000  802ffba0  802ffba0  0000490e  2**0
                  CONTENTS
237 .inttab_tc0_0DE 00000000  802ffbc0  802ffbc0  0000490e  2**0
                  CONTENTS
238 .inttab_tc0_0DF 00000000  802ffbe0  802ffbe0  0000490e  2**0
                  CONTENTS
239 .inttab_tc0_0E0 00000000  802ffc00  802ffc00  0000490e  2**0
                  CONTENTS
240 .inttab_tc0_0E1 00000000  802ffc20  802ffc20  0000490e  2**0
                  CONTENTS
241 .inttab_tc0_0E2 00000000  802ffc40  802ffc40  0000490e  2**0
                  CONTENTS
242 .inttab_tc0_0E3 00000000  802ffc60  802ffc60  0000490e  2**0
                  CONTENTS
243 .inttab_tc0_0E4 00000000  802ffc80  802ffc80  0000490e  2**0
                  CONTENTS
244 .inttab_tc0_0E5 00000000  802ffca0  802ffca0  0000490e  2**0
                  CONTENTS
245 .inttab_tc0_0E6 00000000  802ffcc0  802ffcc0  0000490e  2**0
                  CONTENTS
246 .inttab_tc0_0E7 00000000  802ffce0  802ffce0  0000490e  2**0
                  CONTENTS
247 .inttab_tc0_0E8 00000000  802ffd00  802ffd00  0000490e  2**0
                  CONTENTS
248 .inttab_tc0_0E9 00000000  802ffd20  802ffd20  0000490e  2**0
                  CONTENTS
249 .inttab_tc0_0EA 00000000  802ffd40  802ffd40  0000490e  2**0
                  CONTENTS
250 .inttab_tc0_0EB 00000000  802ffd60  802ffd60  0000490e  2**0
                  CONTENTS
251 .inttab_tc0_0EC 00000000  802ffd80  802ffd80  0000490e  2**0
                  CONTENTS
252 .inttab_tc0_0ED 00000000  802ffda0  802ffda0  0000490e  2**0
                  CONTENTS
253 .inttab_tc0_0EE 00000000  802ffdc0  802ffdc0  0000490e  2**0
                  CONTENTS
254 .inttab_tc0_0EF 00000000  802ffde0  802ffde0  0000490e  2**0
                  CONTENTS
255 .inttab_tc0_0F0 00000000  802ffe00  802ffe00  0000490e  2**0
                  CONTENTS
256 .inttab_tc0_0F1 00000000  802ffe20  802ffe20  0000490e  2**0
                  CONTENTS
257 .inttab_tc0_0F2 00000000  802ffe40  802ffe40  0000490e  2**0
                  CONTENTS
258 .inttab_tc0_0F3 00000000  802ffe60  802ffe60  0000490e  2**0
                  CONTENTS
259 .inttab_tc0_0F4 00000000  802ffe80  802ffe80  0000490e  2**0
                  CONTENTS
260 .inttab_tc0_0F5 00000000  802ffea0  802ffea0  0000490e  2**0
                  CONTENTS
261 .inttab_tc0_0F6 00000000  802ffec0  802ffec0  0000490e  2**0
                  CONTENTS
262 .inttab_tc0_0F7 00000000  802ffee0  802ffee0  0000490e  2**0
                  CONTENTS
263 .inttab_tc0_0F8 00000000  802fff00  802fff00  0000490e  2**0
                  CONTENTS
264 .inttab_tc0_0F9 00000000  802fff20  802fff20  0000490e  2**0
                  CONTENTS
265 .inttab_tc0_0FA 00000000  802fff40  802fff40  0000490e  2**0
                  CONTENTS
266 .inttab_tc0_0FB 00000000  802fff60  802fff60  0000490e  2**0
                  CONTENTS
267 .inttab_tc0_0FC 00000000  802fff80  802fff80  0000490e  2**0
                  CONTENTS
268 .inttab_tc0_0FD 00000000  802fffa0  802fffa0  0000490e  2**0
                  CONTENTS
269 .inttab_tc0_0FE 00000000  802fffc0  802fffc0  0000490e  2**0
                  CONTENTS
270 .inttab_tc0_0FF 00000000  802fffe0  802fffe0  0000490e  2**0
                  CONTENTS
271 .inttab_tc1_000 00000000  805fc000  805fc000  0000490e  2**0
                  CONTENTS
272 .inttab_tc1_001 00000000  805fc020  805fc020  0000490e  2**0
                  CONTENTS
273 .inttab_tc1_002 00000000  805fc040  805fc040  0000490e  2**0
                  CONTENTS
274 .inttab_tc1_003 00000000  805fc060  805fc060  0000490e  2**0
                  CONTENTS
275 .inttab_tc1_004 00000000  805fc080  805fc080  0000490e  2**0
                  CONTENTS
276 .inttab_tc1_005 00000000  805fc0a0  805fc0a0  0000490e  2**0
                  CONTENTS
277 .inttab_tc1_006 00000000  805fc0c0  805fc0c0  0000490e  2**0
                  CONTENTS
278 .inttab_tc1_007 00000000  805fc0e0  805fc0e0  0000490e  2**0
                  CONTENTS
279 .inttab_tc1_008 00000000  805fc100  805fc100  0000490e  2**0
                  CONTENTS
280 .inttab_tc1_009 00000000  805fc120  805fc120  0000490e  2**0
                  CONTENTS
281 .inttab_tc1_00A 00000000  805fc140  805fc140  0000490e  2**0
                  CONTENTS
282 .inttab_tc1_00B 00000000  805fc160  805fc160  0000490e  2**0
                  CONTENTS
283 .inttab_tc1_00C 00000000  805fc180  805fc180  0000490e  2**0
                  CONTENTS
284 .inttab_tc1_00D 00000000  805fc1a0  805fc1a0  0000490e  2**0
                  CONTENTS
285 .inttab_tc1_00E 00000000  805fc1c0  805fc1c0  0000490e  2**0
                  CONTENTS
286 .inttab_tc1_00F 00000000  805fc1e0  805fc1e0  0000490e  2**0
                  CONTENTS
287 .inttab_tc1_010 00000000  805fc200  805fc200  0000490e  2**0
                  CONTENTS
288 .inttab_tc1_011 00000000  805fc220  805fc220  0000490e  2**0
                  CONTENTS
289 .inttab_tc1_012 00000000  805fc240  805fc240  0000490e  2**0
                  CONTENTS
290 .inttab_tc1_013 00000000  805fc260  805fc260  0000490e  2**0
                  CONTENTS
291 .inttab_tc1_014 00000000  805fc280  805fc280  0000490e  2**0
                  CONTENTS
292 .inttab_tc1_015 00000000  805fc2a0  805fc2a0  0000490e  2**0
                  CONTENTS
293 .inttab_tc1_016 00000000  805fc2c0  805fc2c0  0000490e  2**0
                  CONTENTS
294 .inttab_tc1_017 00000000  805fc2e0  805fc2e0  0000490e  2**0
                  CONTENTS
295 .inttab_tc1_018 00000000  805fc300  805fc300  0000490e  2**0
                  CONTENTS
296 .inttab_tc1_019 00000000  805fc320  805fc320  0000490e  2**0
                  CONTENTS
297 .inttab_tc1_01A 00000000  805fc340  805fc340  0000490e  2**0
                  CONTENTS
298 .inttab_tc1_01B 00000000  805fc360  805fc360  0000490e  2**0
                  CONTENTS
299 .inttab_tc1_01C 00000000  805fc380  805fc380  0000490e  2**0
                  CONTENTS
300 .inttab_tc1_01D 00000000  805fc3a0  805fc3a0  0000490e  2**0
                  CONTENTS
301 .inttab_tc1_01E 00000000  805fc3c0  805fc3c0  0000490e  2**0
                  CONTENTS
302 .inttab_tc1_01F 00000000  805fc3e0  805fc3e0  0000490e  2**0
                  CONTENTS
303 .inttab_tc1_020 00000000  805fc400  805fc400  0000490e  2**0
                  CONTENTS
304 .inttab_tc1_021 00000000  805fc420  805fc420  0000490e  2**0
                  CONTENTS
305 .inttab_tc1_022 00000000  805fc440  805fc440  0000490e  2**0
                  CONTENTS
306 .inttab_tc1_023 00000000  805fc460  805fc460  0000490e  2**0
                  CONTENTS
307 .inttab_tc1_024 00000000  805fc480  805fc480  0000490e  2**0
                  CONTENTS
308 .inttab_tc1_025 00000000  805fc4a0  805fc4a0  0000490e  2**0
                  CONTENTS
309 .inttab_tc1_026 00000000  805fc4c0  805fc4c0  0000490e  2**0
                  CONTENTS
310 .inttab_tc1_027 00000000  805fc4e0  805fc4e0  0000490e  2**0
                  CONTENTS
311 .inttab_tc1_028 00000000  805fc500  805fc500  0000490e  2**0
                  CONTENTS
312 .inttab_tc1_029 00000000  805fc520  805fc520  0000490e  2**0
                  CONTENTS
313 .inttab_tc1_02A 00000000  805fc540  805fc540  0000490e  2**0
                  CONTENTS
314 .inttab_tc1_02B 00000000  805fc560  805fc560  0000490e  2**0
                  CONTENTS
315 .inttab_tc1_02C 00000000  805fc580  805fc580  0000490e  2**0
                  CONTENTS
316 .inttab_tc1_02D 00000000  805fc5a0  805fc5a0  0000490e  2**0
                  CONTENTS
317 .inttab_tc1_02E 00000000  805fc5c0  805fc5c0  0000490e  2**0
                  CONTENTS
318 .inttab_tc1_02F 00000000  805fc5e0  805fc5e0  0000490e  2**0
                  CONTENTS
319 .inttab_tc1_030 00000000  805fc600  805fc600  0000490e  2**0
                  CONTENTS
320 .inttab_tc1_031 00000000  805fc620  805fc620  0000490e  2**0
                  CONTENTS
321 .inttab_tc1_032 00000000  805fc640  805fc640  0000490e  2**0
                  CONTENTS
322 .inttab_tc1_033 00000000  805fc660  805fc660  0000490e  2**0
                  CONTENTS
323 .inttab_tc1_034 00000000  805fc680  805fc680  0000490e  2**0
                  CONTENTS
324 .inttab_tc1_035 00000000  805fc6a0  805fc6a0  0000490e  2**0
                  CONTENTS
325 .inttab_tc1_036 00000000  805fc6c0  805fc6c0  0000490e  2**0
                  CONTENTS
326 .inttab_tc1_037 00000000  805fc6e0  805fc6e0  0000490e  2**0
                  CONTENTS
327 .inttab_tc1_038 00000000  805fc700  805fc700  0000490e  2**0
                  CONTENTS
328 .inttab_tc1_039 00000000  805fc720  805fc720  0000490e  2**0
                  CONTENTS
329 .inttab_tc1_03A 00000000  805fc740  805fc740  0000490e  2**0
                  CONTENTS
330 .inttab_tc1_03B 00000000  805fc760  805fc760  0000490e  2**0
                  CONTENTS
331 .inttab_tc1_03C 00000000  805fc780  805fc780  0000490e  2**0
                  CONTENTS
332 .inttab_tc1_03D 00000000  805fc7a0  805fc7a0  0000490e  2**0
                  CONTENTS
333 .inttab_tc1_03E 00000000  805fc7c0  805fc7c0  0000490e  2**0
                  CONTENTS
334 .inttab_tc1_03F 00000000  805fc7e0  805fc7e0  0000490e  2**0
                  CONTENTS
335 .inttab_tc1_040 00000000  805fc800  805fc800  0000490e  2**0
                  CONTENTS
336 .inttab_tc1_041 00000000  805fc820  805fc820  0000490e  2**0
                  CONTENTS
337 .inttab_tc1_042 00000000  805fc840  805fc840  0000490e  2**0
                  CONTENTS
338 .inttab_tc1_043 00000000  805fc860  805fc860  0000490e  2**0
                  CONTENTS
339 .inttab_tc1_044 00000000  805fc880  805fc880  0000490e  2**0
                  CONTENTS
340 .inttab_tc1_045 00000000  805fc8a0  805fc8a0  0000490e  2**0
                  CONTENTS
341 .inttab_tc1_046 00000000  805fc8c0  805fc8c0  0000490e  2**0
                  CONTENTS
342 .inttab_tc1_047 00000000  805fc8e0  805fc8e0  0000490e  2**0
                  CONTENTS
343 .inttab_tc1_048 00000000  805fc900  805fc900  0000490e  2**0
                  CONTENTS
344 .inttab_tc1_049 00000000  805fc920  805fc920  0000490e  2**0
                  CONTENTS
345 .inttab_tc1_04A 00000000  805fc940  805fc940  0000490e  2**0
                  CONTENTS
346 .inttab_tc1_04B 00000000  805fc960  805fc960  0000490e  2**0
                  CONTENTS
347 .inttab_tc1_04C 00000000  805fc980  805fc980  0000490e  2**0
                  CONTENTS
348 .inttab_tc1_04D 00000000  805fc9a0  805fc9a0  0000490e  2**0
                  CONTENTS
349 .inttab_tc1_04E 00000000  805fc9c0  805fc9c0  0000490e  2**0
                  CONTENTS
350 .inttab_tc1_04F 00000000  805fc9e0  805fc9e0  0000490e  2**0
                  CONTENTS
351 .inttab_tc1_050 00000000  805fca00  805fca00  0000490e  2**0
                  CONTENTS
352 .inttab_tc1_051 00000000  805fca20  805fca20  0000490e  2**0
                  CONTENTS
353 .inttab_tc1_052 00000000  805fca40  805fca40  0000490e  2**0
                  CONTENTS
354 .inttab_tc1_053 00000000  805fca60  805fca60  0000490e  2**0
                  CONTENTS
355 .inttab_tc1_054 00000000  805fca80  805fca80  0000490e  2**0
                  CONTENTS
356 .inttab_tc1_055 00000000  805fcaa0  805fcaa0  0000490e  2**0
                  CONTENTS
357 .inttab_tc1_056 00000000  805fcac0  805fcac0  0000490e  2**0
                  CONTENTS
358 .inttab_tc1_057 00000000  805fcae0  805fcae0  0000490e  2**0
                  CONTENTS
359 .inttab_tc1_058 00000000  805fcb00  805fcb00  0000490e  2**0
                  CONTENTS
360 .inttab_tc1_059 00000000  805fcb20  805fcb20  0000490e  2**0
                  CONTENTS
361 .inttab_tc1_05A 00000000  805fcb40  805fcb40  0000490e  2**0
                  CONTENTS
362 .inttab_tc1_05B 00000000  805fcb60  805fcb60  0000490e  2**0
                  CONTENTS
363 .inttab_tc1_05C 00000000  805fcb80  805fcb80  0000490e  2**0
                  CONTENTS
364 .inttab_tc1_05D 00000000  805fcba0  805fcba0  0000490e  2**0
                  CONTENTS
365 .inttab_tc1_05E 00000000  805fcbc0  805fcbc0  0000490e  2**0
                  CONTENTS
366 .inttab_tc1_05F 00000000  805fcbe0  805fcbe0  0000490e  2**0
                  CONTENTS
367 .inttab_tc1_060 00000000  805fcc00  805fcc00  0000490e  2**0
                  CONTENTS
368 .inttab_tc1_061 00000000  805fcc20  805fcc20  0000490e  2**0
                  CONTENTS
369 .inttab_tc1_062 00000000  805fcc40  805fcc40  0000490e  2**0
                  CONTENTS
370 .inttab_tc1_063 00000000  805fcc60  805fcc60  0000490e  2**0
                  CONTENTS
371 .inttab_tc1_064 00000000  805fcc80  805fcc80  0000490e  2**0
                  CONTENTS
372 .inttab_tc1_065 00000000  805fcca0  805fcca0  0000490e  2**0
                  CONTENTS
373 .inttab_tc1_066 00000000  805fccc0  805fccc0  0000490e  2**0
                  CONTENTS
374 .inttab_tc1_067 00000000  805fcce0  805fcce0  0000490e  2**0
                  CONTENTS
375 .inttab_tc1_068 00000000  805fcd00  805fcd00  0000490e  2**0
                  CONTENTS
376 .inttab_tc1_069 00000000  805fcd20  805fcd20  0000490e  2**0
                  CONTENTS
377 .inttab_tc1_06A 00000000  805fcd40  805fcd40  0000490e  2**0
                  CONTENTS
378 .inttab_tc1_06B 00000000  805fcd60  805fcd60  0000490e  2**0
                  CONTENTS
379 .inttab_tc1_06C 00000000  805fcd80  805fcd80  0000490e  2**0
                  CONTENTS
380 .inttab_tc1_06D 00000000  805fcda0  805fcda0  0000490e  2**0
                  CONTENTS
381 .inttab_tc1_06E 00000000  805fcdc0  805fcdc0  0000490e  2**0
                  CONTENTS
382 .inttab_tc1_06F 00000000  805fcde0  805fcde0  0000490e  2**0
                  CONTENTS
383 .inttab_tc1_070 00000000  805fce00  805fce00  0000490e  2**0
                  CONTENTS
384 .inttab_tc1_071 00000000  805fce20  805fce20  0000490e  2**0
                  CONTENTS
385 .inttab_tc1_072 00000000  805fce40  805fce40  0000490e  2**0
                  CONTENTS
386 .inttab_tc1_073 00000000  805fce60  805fce60  0000490e  2**0
                  CONTENTS
387 .inttab_tc1_074 00000000  805fce80  805fce80  0000490e  2**0
                  CONTENTS
388 .inttab_tc1_075 00000000  805fcea0  805fcea0  0000490e  2**0
                  CONTENTS
389 .inttab_tc1_076 00000000  805fcec0  805fcec0  0000490e  2**0
                  CONTENTS
390 .inttab_tc1_077 00000000  805fcee0  805fcee0  0000490e  2**0
                  CONTENTS
391 .inttab_tc1_078 00000000  805fcf00  805fcf00  0000490e  2**0
                  CONTENTS
392 .inttab_tc1_079 00000000  805fcf20  805fcf20  0000490e  2**0
                  CONTENTS
393 .inttab_tc1_07A 00000000  805fcf40  805fcf40  0000490e  2**0
                  CONTENTS
394 .inttab_tc1_07B 00000000  805fcf60  805fcf60  0000490e  2**0
                  CONTENTS
395 .inttab_tc1_07C 00000000  805fcf80  805fcf80  0000490e  2**0
                  CONTENTS
396 .inttab_tc1_07D 00000000  805fcfa0  805fcfa0  0000490e  2**0
                  CONTENTS
397 .inttab_tc1_07E 00000000  805fcfc0  805fcfc0  0000490e  2**0
                  CONTENTS
398 .inttab_tc1_07F 00000000  805fcfe0  805fcfe0  0000490e  2**0
                  CONTENTS
399 .inttab_tc1_080 00000000  805fd000  805fd000  0000490e  2**0
                  CONTENTS
400 .inttab_tc1_081 00000000  805fd020  805fd020  0000490e  2**0
                  CONTENTS
401 .inttab_tc1_082 00000000  805fd040  805fd040  0000490e  2**0
                  CONTENTS
402 .inttab_tc1_083 00000000  805fd060  805fd060  0000490e  2**0
                  CONTENTS
403 .inttab_tc1_084 00000000  805fd080  805fd080  0000490e  2**0
                  CONTENTS
404 .inttab_tc1_085 00000000  805fd0a0  805fd0a0  0000490e  2**0
                  CONTENTS
405 .inttab_tc1_086 00000000  805fd0c0  805fd0c0  0000490e  2**0
                  CONTENTS
406 .inttab_tc1_087 00000000  805fd0e0  805fd0e0  0000490e  2**0
                  CONTENTS
407 .inttab_tc1_088 00000000  805fd100  805fd100  0000490e  2**0
                  CONTENTS
408 .inttab_tc1_089 00000000  805fd120  805fd120  0000490e  2**0
                  CONTENTS
409 .inttab_tc1_08A 00000000  805fd140  805fd140  0000490e  2**0
                  CONTENTS
410 .inttab_tc1_08B 00000000  805fd160  805fd160  0000490e  2**0
                  CONTENTS
411 .inttab_tc1_08C 00000000  805fd180  805fd180  0000490e  2**0
                  CONTENTS
412 .inttab_tc1_08D 00000000  805fd1a0  805fd1a0  0000490e  2**0
                  CONTENTS
413 .inttab_tc1_08E 00000000  805fd1c0  805fd1c0  0000490e  2**0
                  CONTENTS
414 .inttab_tc1_08F 00000000  805fd1e0  805fd1e0  0000490e  2**0
                  CONTENTS
415 .inttab_tc1_090 00000000  805fd200  805fd200  0000490e  2**0
                  CONTENTS
416 .inttab_tc1_091 00000000  805fd220  805fd220  0000490e  2**0
                  CONTENTS
417 .inttab_tc1_092 00000000  805fd240  805fd240  0000490e  2**0
                  CONTENTS
418 .inttab_tc1_093 00000000  805fd260  805fd260  0000490e  2**0
                  CONTENTS
419 .inttab_tc1_094 00000000  805fd280  805fd280  0000490e  2**0
                  CONTENTS
420 .inttab_tc1_095 00000000  805fd2a0  805fd2a0  0000490e  2**0
                  CONTENTS
421 .inttab_tc1_096 00000000  805fd2c0  805fd2c0  0000490e  2**0
                  CONTENTS
422 .inttab_tc1_097 00000000  805fd2e0  805fd2e0  0000490e  2**0
                  CONTENTS
423 .inttab_tc1_098 00000000  805fd300  805fd300  0000490e  2**0
                  CONTENTS
424 .inttab_tc1_099 00000000  805fd320  805fd320  0000490e  2**0
                  CONTENTS
425 .inttab_tc1_09A 00000000  805fd340  805fd340  0000490e  2**0
                  CONTENTS
426 .inttab_tc1_09B 00000000  805fd360  805fd360  0000490e  2**0
                  CONTENTS
427 .inttab_tc1_09C 00000000  805fd380  805fd380  0000490e  2**0
                  CONTENTS
428 .inttab_tc1_09D 00000000  805fd3a0  805fd3a0  0000490e  2**0
                  CONTENTS
429 .inttab_tc1_09E 00000000  805fd3c0  805fd3c0  0000490e  2**0
                  CONTENTS
430 .inttab_tc1_09F 00000000  805fd3e0  805fd3e0  0000490e  2**0
                  CONTENTS
431 .inttab_tc1_0A0 00000000  805fd400  805fd400  0000490e  2**0
                  CONTENTS
432 .inttab_tc1_0A1 00000000  805fd420  805fd420  0000490e  2**0
                  CONTENTS
433 .inttab_tc1_0A2 00000000  805fd440  805fd440  0000490e  2**0
                  CONTENTS
434 .inttab_tc1_0A3 00000000  805fd460  805fd460  0000490e  2**0
                  CONTENTS
435 .inttab_tc1_0A4 00000000  805fd480  805fd480  0000490e  2**0
                  CONTENTS
436 .inttab_tc1_0A5 00000000  805fd4a0  805fd4a0  0000490e  2**0
                  CONTENTS
437 .inttab_tc1_0A6 00000000  805fd4c0  805fd4c0  0000490e  2**0
                  CONTENTS
438 .inttab_tc1_0A7 00000000  805fd4e0  805fd4e0  0000490e  2**0
                  CONTENTS
439 .inttab_tc1_0A8 00000000  805fd500  805fd500  0000490e  2**0
                  CONTENTS
440 .inttab_tc1_0A9 00000000  805fd520  805fd520  0000490e  2**0
                  CONTENTS
441 .inttab_tc1_0AA 00000000  805fd540  805fd540  0000490e  2**0
                  CONTENTS
442 .inttab_tc1_0AB 00000000  805fd560  805fd560  0000490e  2**0
                  CONTENTS
443 .inttab_tc1_0AC 00000000  805fd580  805fd580  0000490e  2**0
                  CONTENTS
444 .inttab_tc1_0AD 00000000  805fd5a0  805fd5a0  0000490e  2**0
                  CONTENTS
445 .inttab_tc1_0AE 00000000  805fd5c0  805fd5c0  0000490e  2**0
                  CONTENTS
446 .inttab_tc1_0AF 00000000  805fd5e0  805fd5e0  0000490e  2**0
                  CONTENTS
447 .inttab_tc1_0B0 00000000  805fd600  805fd600  0000490e  2**0
                  CONTENTS
448 .inttab_tc1_0B1 00000000  805fd620  805fd620  0000490e  2**0
                  CONTENTS
449 .inttab_tc1_0B2 00000000  805fd640  805fd640  0000490e  2**0
                  CONTENTS
450 .inttab_tc1_0B3 00000000  805fd660  805fd660  0000490e  2**0
                  CONTENTS
451 .inttab_tc1_0B4 00000000  805fd680  805fd680  0000490e  2**0
                  CONTENTS
452 .inttab_tc1_0B5 00000000  805fd6a0  805fd6a0  0000490e  2**0
                  CONTENTS
453 .inttab_tc1_0B6 00000000  805fd6c0  805fd6c0  0000490e  2**0
                  CONTENTS
454 .inttab_tc1_0B7 00000000  805fd6e0  805fd6e0  0000490e  2**0
                  CONTENTS
455 .inttab_tc1_0B8 00000000  805fd700  805fd700  0000490e  2**0
                  CONTENTS
456 .inttab_tc1_0B9 00000000  805fd720  805fd720  0000490e  2**0
                  CONTENTS
457 .inttab_tc1_0BA 00000000  805fd740  805fd740  0000490e  2**0
                  CONTENTS
458 .inttab_tc1_0BB 00000000  805fd760  805fd760  0000490e  2**0
                  CONTENTS
459 .inttab_tc1_0BC 00000000  805fd780  805fd780  0000490e  2**0
                  CONTENTS
460 .inttab_tc1_0BD 00000000  805fd7a0  805fd7a0  0000490e  2**0
                  CONTENTS
461 .inttab_tc1_0BE 00000000  805fd7c0  805fd7c0  0000490e  2**0
                  CONTENTS
462 .inttab_tc1_0BF 00000000  805fd7e0  805fd7e0  0000490e  2**0
                  CONTENTS
463 .inttab_tc1_0C0 00000000  805fd800  805fd800  0000490e  2**0
                  CONTENTS
464 .inttab_tc1_0C1 00000000  805fd820  805fd820  0000490e  2**0
                  CONTENTS
465 .inttab_tc1_0C2 00000000  805fd840  805fd840  0000490e  2**0
                  CONTENTS
466 .inttab_tc1_0C3 00000000  805fd860  805fd860  0000490e  2**0
                  CONTENTS
467 .inttab_tc1_0C4 00000000  805fd880  805fd880  0000490e  2**0
                  CONTENTS
468 .inttab_tc1_0C5 00000000  805fd8a0  805fd8a0  0000490e  2**0
                  CONTENTS
469 .inttab_tc1_0C6 00000000  805fd8c0  805fd8c0  0000490e  2**0
                  CONTENTS
470 .inttab_tc1_0C7 00000000  805fd8e0  805fd8e0  0000490e  2**0
                  CONTENTS
471 .inttab_tc1_0C8 00000000  805fd900  805fd900  0000490e  2**0
                  CONTENTS
472 .inttab_tc1_0C9 00000000  805fd920  805fd920  0000490e  2**0
                  CONTENTS
473 .inttab_tc1_0CA 00000000  805fd940  805fd940  0000490e  2**0
                  CONTENTS
474 .inttab_tc1_0CB 00000000  805fd960  805fd960  0000490e  2**0
                  CONTENTS
475 .inttab_tc1_0CC 00000000  805fd980  805fd980  0000490e  2**0
                  CONTENTS
476 .inttab_tc1_0CD 00000000  805fd9a0  805fd9a0  0000490e  2**0
                  CONTENTS
477 .inttab_tc1_0CE 00000000  805fd9c0  805fd9c0  0000490e  2**0
                  CONTENTS
478 .inttab_tc1_0CF 00000000  805fd9e0  805fd9e0  0000490e  2**0
                  CONTENTS
479 .inttab_tc1_0D0 00000000  805fda00  805fda00  0000490e  2**0
                  CONTENTS
480 .inttab_tc1_0D1 00000000  805fda20  805fda20  0000490e  2**0
                  CONTENTS
481 .inttab_tc1_0D2 00000000  805fda40  805fda40  0000490e  2**0
                  CONTENTS
482 .inttab_tc1_0D3 00000000  805fda60  805fda60  0000490e  2**0
                  CONTENTS
483 .inttab_tc1_0D4 00000000  805fda80  805fda80  0000490e  2**0
                  CONTENTS
484 .inttab_tc1_0D5 00000000  805fdaa0  805fdaa0  0000490e  2**0
                  CONTENTS
485 .inttab_tc1_0D6 00000000  805fdac0  805fdac0  0000490e  2**0
                  CONTENTS
486 .inttab_tc1_0D7 00000000  805fdae0  805fdae0  0000490e  2**0
                  CONTENTS
487 .inttab_tc1_0D8 00000000  805fdb00  805fdb00  0000490e  2**0
                  CONTENTS
488 .inttab_tc1_0D9 00000000  805fdb20  805fdb20  0000490e  2**0
                  CONTENTS
489 .inttab_tc1_0DA 00000000  805fdb40  805fdb40  0000490e  2**0
                  CONTENTS
490 .inttab_tc1_0DB 00000000  805fdb60  805fdb60  0000490e  2**0
                  CONTENTS
491 .inttab_tc1_0DC 00000000  805fdb80  805fdb80  0000490e  2**0
                  CONTENTS
492 .inttab_tc1_0DD 00000000  805fdba0  805fdba0  0000490e  2**0
                  CONTENTS
493 .inttab_tc1_0DE 00000000  805fdbc0  805fdbc0  0000490e  2**0
                  CONTENTS
494 .inttab_tc1_0DF 00000000  805fdbe0  805fdbe0  0000490e  2**0
                  CONTENTS
495 .inttab_tc1_0E0 00000000  805fdc00  805fdc00  0000490e  2**0
                  CONTENTS
496 .inttab_tc1_0E1 00000000  805fdc20  805fdc20  0000490e  2**0
                  CONTENTS
497 .inttab_tc1_0E2 00000000  805fdc40  805fdc40  0000490e  2**0
                  CONTENTS
498 .inttab_tc1_0E3 00000000  805fdc60  805fdc60  0000490e  2**0
                  CONTENTS
499 .inttab_tc1_0E4 00000000  805fdc80  805fdc80  0000490e  2**0
                  CONTENTS
500 .inttab_tc1_0E5 00000000  805fdca0  805fdca0  0000490e  2**0
                  CONTENTS
501 .inttab_tc1_0E6 00000000  805fdcc0  805fdcc0  0000490e  2**0
                  CONTENTS
502 .inttab_tc1_0E7 00000000  805fdce0  805fdce0  0000490e  2**0
                  CONTENTS
503 .inttab_tc1_0E8 00000000  805fdd00  805fdd00  0000490e  2**0
                  CONTENTS
504 .inttab_tc1_0E9 00000000  805fdd20  805fdd20  0000490e  2**0
                  CONTENTS
505 .inttab_tc1_0EA 00000000  805fdd40  805fdd40  0000490e  2**0
                  CONTENTS
506 .inttab_tc1_0EB 00000000  805fdd60  805fdd60  0000490e  2**0
                  CONTENTS
507 .inttab_tc1_0EC 00000000  805fdd80  805fdd80  0000490e  2**0
                  CONTENTS
508 .inttab_tc1_0ED 00000000  805fdda0  805fdda0  0000490e  2**0
                  CONTENTS
509 .inttab_tc1_0EE 00000000  805fddc0  805fddc0  0000490e  2**0
                  CONTENTS
510 .inttab_tc1_0EF 00000000  805fdde0  805fdde0  0000490e  2**0
                  CONTENTS
511 .inttab_tc1_0F0 00000000  805fde00  805fde00  0000490e  2**0
                  CONTENTS
512 .inttab_tc1_0F1 00000000  805fde20  805fde20  0000490e  2**0
                  CONTENTS
513 .inttab_tc1_0F2 00000000  805fde40  805fde40  0000490e  2**0
                  CONTENTS
514 .inttab_tc1_0F3 00000000  805fde60  805fde60  0000490e  2**0
                  CONTENTS
515 .inttab_tc1_0F4 00000000  805fde80  805fde80  0000490e  2**0
                  CONTENTS
516 .inttab_tc1_0F5 00000000  805fdea0  805fdea0  0000490e  2**0
                  CONTENTS
517 .inttab_tc1_0F6 00000000  805fdec0  805fdec0  0000490e  2**0
                  CONTENTS
518 .inttab_tc1_0F7 00000000  805fdee0  805fdee0  0000490e  2**0
                  CONTENTS
519 .inttab_tc1_0F8 00000000  805fdf00  805fdf00  0000490e  2**0
                  CONTENTS
520 .inttab_tc1_0F9 00000000  805fdf20  805fdf20  0000490e  2**0
                  CONTENTS
521 .inttab_tc1_0FA 00000000  805fdf40  805fdf40  0000490e  2**0
                  CONTENTS
522 .inttab_tc1_0FB 00000000  805fdf60  805fdf60  0000490e  2**0
                  CONTENTS
523 .inttab_tc1_0FC 00000000  805fdf80  805fdf80  0000490e  2**0
                  CONTENTS
524 .inttab_tc1_0FD 00000000  805fdfa0  805fdfa0  0000490e  2**0
                  CONTENTS
525 .inttab_tc1_0FE 00000000  805fdfc0  805fdfc0  0000490e  2**0
                  CONTENTS
526 .inttab_tc1_0FF 00000000  805fdfe0  805fdfe0  0000490e  2**0
                  CONTENTS
527 .inttab_tc2_000 00000000  805fe000  805fe000  0000490e  2**0
                  CONTENTS
528 .inttab_tc2_001 00000000  805fe020  805fe020  0000490e  2**0
                  CONTENTS
529 .inttab_tc2_002 00000000  805fe040  805fe040  0000490e  2**0
                  CONTENTS
530 .inttab_tc2_003 00000000  805fe060  805fe060  0000490e  2**0
                  CONTENTS
531 .inttab_tc2_004 00000000  805fe080  805fe080  0000490e  2**0
                  CONTENTS
532 .inttab_tc2_005 00000000  805fe0a0  805fe0a0  0000490e  2**0
                  CONTENTS
533 .inttab_tc2_006 00000000  805fe0c0  805fe0c0  0000490e  2**0
                  CONTENTS
534 .inttab_tc2_007 00000000  805fe0e0  805fe0e0  0000490e  2**0
                  CONTENTS
535 .inttab_tc2_008 00000000  805fe100  805fe100  0000490e  2**0
                  CONTENTS
536 .inttab_tc2_009 00000000  805fe120  805fe120  0000490e  2**0
                  CONTENTS
537 .inttab_tc2_00A 00000000  805fe140  805fe140  0000490e  2**0
                  CONTENTS
538 .inttab_tc2_00B 00000000  805fe160  805fe160  0000490e  2**0
                  CONTENTS
539 .inttab_tc2_00C 00000000  805fe180  805fe180  0000490e  2**0
                  CONTENTS
540 .inttab_tc2_00D 00000000  805fe1a0  805fe1a0  0000490e  2**0
                  CONTENTS
541 .inttab_tc2_00E 00000000  805fe1c0  805fe1c0  0000490e  2**0
                  CONTENTS
542 .inttab_tc2_00F 00000000  805fe1e0  805fe1e0  0000490e  2**0
                  CONTENTS
543 .inttab_tc2_010 00000000  805fe200  805fe200  0000490e  2**0
                  CONTENTS
544 .inttab_tc2_011 00000000  805fe220  805fe220  0000490e  2**0
                  CONTENTS
545 .inttab_tc2_012 00000000  805fe240  805fe240  0000490e  2**0
                  CONTENTS
546 .inttab_tc2_013 00000000  805fe260  805fe260  0000490e  2**0
                  CONTENTS
547 .inttab_tc2_014 00000000  805fe280  805fe280  0000490e  2**0
                  CONTENTS
548 .inttab_tc2_015 00000000  805fe2a0  805fe2a0  0000490e  2**0
                  CONTENTS
549 .inttab_tc2_016 00000000  805fe2c0  805fe2c0  0000490e  2**0
                  CONTENTS
550 .inttab_tc2_017 00000000  805fe2e0  805fe2e0  0000490e  2**0
                  CONTENTS
551 .inttab_tc2_018 00000000  805fe300  805fe300  0000490e  2**0
                  CONTENTS
552 .inttab_tc2_019 00000000  805fe320  805fe320  0000490e  2**0
                  CONTENTS
553 .inttab_tc2_01A 00000000  805fe340  805fe340  0000490e  2**0
                  CONTENTS
554 .inttab_tc2_01B 00000000  805fe360  805fe360  0000490e  2**0
                  CONTENTS
555 .inttab_tc2_01C 00000000  805fe380  805fe380  0000490e  2**0
                  CONTENTS
556 .inttab_tc2_01D 00000000  805fe3a0  805fe3a0  0000490e  2**0
                  CONTENTS
557 .inttab_tc2_01E 00000000  805fe3c0  805fe3c0  0000490e  2**0
                  CONTENTS
558 .inttab_tc2_01F 00000000  805fe3e0  805fe3e0  0000490e  2**0
                  CONTENTS
559 .inttab_tc2_020 00000000  805fe400  805fe400  0000490e  2**0
                  CONTENTS
560 .inttab_tc2_021 00000000  805fe420  805fe420  0000490e  2**0
                  CONTENTS
561 .inttab_tc2_022 00000000  805fe440  805fe440  0000490e  2**0
                  CONTENTS
562 .inttab_tc2_023 00000000  805fe460  805fe460  0000490e  2**0
                  CONTENTS
563 .inttab_tc2_024 00000000  805fe480  805fe480  0000490e  2**0
                  CONTENTS
564 .inttab_tc2_025 00000000  805fe4a0  805fe4a0  0000490e  2**0
                  CONTENTS
565 .inttab_tc2_026 00000000  805fe4c0  805fe4c0  0000490e  2**0
                  CONTENTS
566 .inttab_tc2_027 00000000  805fe4e0  805fe4e0  0000490e  2**0
                  CONTENTS
567 .inttab_tc2_028 00000000  805fe500  805fe500  0000490e  2**0
                  CONTENTS
568 .inttab_tc2_029 00000000  805fe520  805fe520  0000490e  2**0
                  CONTENTS
569 .inttab_tc2_02A 00000000  805fe540  805fe540  0000490e  2**0
                  CONTENTS
570 .inttab_tc2_02B 00000000  805fe560  805fe560  0000490e  2**0
                  CONTENTS
571 .inttab_tc2_02C 00000000  805fe580  805fe580  0000490e  2**0
                  CONTENTS
572 .inttab_tc2_02D 00000000  805fe5a0  805fe5a0  0000490e  2**0
                  CONTENTS
573 .inttab_tc2_02E 00000000  805fe5c0  805fe5c0  0000490e  2**0
                  CONTENTS
574 .inttab_tc2_02F 00000000  805fe5e0  805fe5e0  0000490e  2**0
                  CONTENTS
575 .inttab_tc2_030 00000000  805fe600  805fe600  0000490e  2**0
                  CONTENTS
576 .inttab_tc2_031 00000000  805fe620  805fe620  0000490e  2**0
                  CONTENTS
577 .inttab_tc2_032 00000000  805fe640  805fe640  0000490e  2**0
                  CONTENTS
578 .inttab_tc2_033 00000000  805fe660  805fe660  0000490e  2**0
                  CONTENTS
579 .inttab_tc2_034 00000000  805fe680  805fe680  0000490e  2**0
                  CONTENTS
580 .inttab_tc2_035 00000000  805fe6a0  805fe6a0  0000490e  2**0
                  CONTENTS
581 .inttab_tc2_036 00000000  805fe6c0  805fe6c0  0000490e  2**0
                  CONTENTS
582 .inttab_tc2_037 00000000  805fe6e0  805fe6e0  0000490e  2**0
                  CONTENTS
583 .inttab_tc2_038 00000000  805fe700  805fe700  0000490e  2**0
                  CONTENTS
584 .inttab_tc2_039 00000000  805fe720  805fe720  0000490e  2**0
                  CONTENTS
585 .inttab_tc2_03A 00000000  805fe740  805fe740  0000490e  2**0
                  CONTENTS
586 .inttab_tc2_03B 00000000  805fe760  805fe760  0000490e  2**0
                  CONTENTS
587 .inttab_tc2_03C 00000000  805fe780  805fe780  0000490e  2**0
                  CONTENTS
588 .inttab_tc2_03D 00000000  805fe7a0  805fe7a0  0000490e  2**0
                  CONTENTS
589 .inttab_tc2_03E 00000000  805fe7c0  805fe7c0  0000490e  2**0
                  CONTENTS
590 .inttab_tc2_03F 00000000  805fe7e0  805fe7e0  0000490e  2**0
                  CONTENTS
591 .inttab_tc2_040 00000000  805fe800  805fe800  0000490e  2**0
                  CONTENTS
592 .inttab_tc2_041 00000000  805fe820  805fe820  0000490e  2**0
                  CONTENTS
593 .inttab_tc2_042 00000000  805fe840  805fe840  0000490e  2**0
                  CONTENTS
594 .inttab_tc2_043 00000000  805fe860  805fe860  0000490e  2**0
                  CONTENTS
595 .inttab_tc2_044 00000000  805fe880  805fe880  0000490e  2**0
                  CONTENTS
596 .inttab_tc2_045 00000000  805fe8a0  805fe8a0  0000490e  2**0
                  CONTENTS
597 .inttab_tc2_046 00000000  805fe8c0  805fe8c0  0000490e  2**0
                  CONTENTS
598 .inttab_tc2_047 00000000  805fe8e0  805fe8e0  0000490e  2**0
                  CONTENTS
599 .inttab_tc2_048 00000000  805fe900  805fe900  0000490e  2**0
                  CONTENTS
600 .inttab_tc2_049 00000000  805fe920  805fe920  0000490e  2**0
                  CONTENTS
601 .inttab_tc2_04A 00000000  805fe940  805fe940  0000490e  2**0
                  CONTENTS
602 .inttab_tc2_04B 00000000  805fe960  805fe960  0000490e  2**0
                  CONTENTS
603 .inttab_tc2_04C 00000000  805fe980  805fe980  0000490e  2**0
                  CONTENTS
604 .inttab_tc2_04D 00000000  805fe9a0  805fe9a0  0000490e  2**0
                  CONTENTS
605 .inttab_tc2_04E 00000000  805fe9c0  805fe9c0  0000490e  2**0
                  CONTENTS
606 .inttab_tc2_04F 00000000  805fe9e0  805fe9e0  0000490e  2**0
                  CONTENTS
607 .inttab_tc2_050 00000000  805fea00  805fea00  0000490e  2**0
                  CONTENTS
608 .inttab_tc2_051 00000000  805fea20  805fea20  0000490e  2**0
                  CONTENTS
609 .inttab_tc2_052 00000000  805fea40  805fea40  0000490e  2**0
                  CONTENTS
610 .inttab_tc2_053 00000000  805fea60  805fea60  0000490e  2**0
                  CONTENTS
611 .inttab_tc2_054 00000000  805fea80  805fea80  0000490e  2**0
                  CONTENTS
612 .inttab_tc2_055 00000000  805feaa0  805feaa0  0000490e  2**0
                  CONTENTS
613 .inttab_tc2_056 00000000  805feac0  805feac0  0000490e  2**0
                  CONTENTS
614 .inttab_tc2_057 00000000  805feae0  805feae0  0000490e  2**0
                  CONTENTS
615 .inttab_tc2_058 00000000  805feb00  805feb00  0000490e  2**0
                  CONTENTS
616 .inttab_tc2_059 00000000  805feb20  805feb20  0000490e  2**0
                  CONTENTS
617 .inttab_tc2_05A 00000000  805feb40  805feb40  0000490e  2**0
                  CONTENTS
618 .inttab_tc2_05B 00000000  805feb60  805feb60  0000490e  2**0
                  CONTENTS
619 .inttab_tc2_05C 00000000  805feb80  805feb80  0000490e  2**0
                  CONTENTS
620 .inttab_tc2_05D 00000000  805feba0  805feba0  0000490e  2**0
                  CONTENTS
621 .inttab_tc2_05E 00000000  805febc0  805febc0  0000490e  2**0
                  CONTENTS
622 .inttab_tc2_05F 00000000  805febe0  805febe0  0000490e  2**0
                  CONTENTS
623 .inttab_tc2_060 00000000  805fec00  805fec00  0000490e  2**0
                  CONTENTS
624 .inttab_tc2_061 00000000  805fec20  805fec20  0000490e  2**0
                  CONTENTS
625 .inttab_tc2_062 00000000  805fec40  805fec40  0000490e  2**0
                  CONTENTS
626 .inttab_tc2_063 00000000  805fec60  805fec60  0000490e  2**0
                  CONTENTS
627 .inttab_tc2_064 00000000  805fec80  805fec80  0000490e  2**0
                  CONTENTS
628 .inttab_tc2_065 00000000  805feca0  805feca0  0000490e  2**0
                  CONTENTS
629 .inttab_tc2_066 00000000  805fecc0  805fecc0  0000490e  2**0
                  CONTENTS
630 .inttab_tc2_067 00000000  805fece0  805fece0  0000490e  2**0
                  CONTENTS
631 .inttab_tc2_068 00000000  805fed00  805fed00  0000490e  2**0
                  CONTENTS
632 .inttab_tc2_069 00000000  805fed20  805fed20  0000490e  2**0
                  CONTENTS
633 .inttab_tc2_06A 00000000  805fed40  805fed40  0000490e  2**0
                  CONTENTS
634 .inttab_tc2_06B 00000000  805fed60  805fed60  0000490e  2**0
                  CONTENTS
635 .inttab_tc2_06C 00000000  805fed80  805fed80  0000490e  2**0
                  CONTENTS
636 .inttab_tc2_06D 00000000  805feda0  805feda0  0000490e  2**0
                  CONTENTS
637 .inttab_tc2_06E 00000000  805fedc0  805fedc0  0000490e  2**0
                  CONTENTS
638 .inttab_tc2_06F 00000000  805fede0  805fede0  0000490e  2**0
                  CONTENTS
639 .inttab_tc2_070 00000000  805fee00  805fee00  0000490e  2**0
                  CONTENTS
640 .inttab_tc2_071 00000000  805fee20  805fee20  0000490e  2**0
                  CONTENTS
641 .inttab_tc2_072 00000000  805fee40  805fee40  0000490e  2**0
                  CONTENTS
642 .inttab_tc2_073 00000000  805fee60  805fee60  0000490e  2**0
                  CONTENTS
643 .inttab_tc2_074 00000000  805fee80  805fee80  0000490e  2**0
                  CONTENTS
644 .inttab_tc2_075 00000000  805feea0  805feea0  0000490e  2**0
                  CONTENTS
645 .inttab_tc2_076 00000000  805feec0  805feec0  0000490e  2**0
                  CONTENTS
646 .inttab_tc2_077 00000000  805feee0  805feee0  0000490e  2**0
                  CONTENTS
647 .inttab_tc2_078 00000000  805fef00  805fef00  0000490e  2**0
                  CONTENTS
648 .inttab_tc2_079 00000000  805fef20  805fef20  0000490e  2**0
                  CONTENTS
649 .inttab_tc2_07A 00000000  805fef40  805fef40  0000490e  2**0
                  CONTENTS
650 .inttab_tc2_07B 00000000  805fef60  805fef60  0000490e  2**0
                  CONTENTS
651 .inttab_tc2_07C 00000000  805fef80  805fef80  0000490e  2**0
                  CONTENTS
652 .inttab_tc2_07D 00000000  805fefa0  805fefa0  0000490e  2**0
                  CONTENTS
653 .inttab_tc2_07E 00000000  805fefc0  805fefc0  0000490e  2**0
                  CONTENTS
654 .inttab_tc2_07F 00000000  805fefe0  805fefe0  0000490e  2**0
                  CONTENTS
655 .inttab_tc2_080 00000000  805ff000  805ff000  0000490e  2**0
                  CONTENTS
656 .inttab_tc2_081 00000000  805ff020  805ff020  0000490e  2**0
                  CONTENTS
657 .inttab_tc2_082 00000000  805ff040  805ff040  0000490e  2**0
                  CONTENTS
658 .inttab_tc2_083 00000000  805ff060  805ff060  0000490e  2**0
                  CONTENTS
659 .inttab_tc2_084 00000000  805ff080  805ff080  0000490e  2**0
                  CONTENTS
660 .inttab_tc2_085 00000000  805ff0a0  805ff0a0  0000490e  2**0
                  CONTENTS
661 .inttab_tc2_086 00000000  805ff0c0  805ff0c0  0000490e  2**0
                  CONTENTS
662 .inttab_tc2_087 00000000  805ff0e0  805ff0e0  0000490e  2**0
                  CONTENTS
663 .inttab_tc2_088 00000000  805ff100  805ff100  0000490e  2**0
                  CONTENTS
664 .inttab_tc2_089 00000000  805ff120  805ff120  0000490e  2**0
                  CONTENTS
665 .inttab_tc2_08A 00000000  805ff140  805ff140  0000490e  2**0
                  CONTENTS
666 .inttab_tc2_08B 00000000  805ff160  805ff160  0000490e  2**0
                  CONTENTS
667 .inttab_tc2_08C 00000000  805ff180  805ff180  0000490e  2**0
                  CONTENTS
668 .inttab_tc2_08D 00000000  805ff1a0  805ff1a0  0000490e  2**0
                  CONTENTS
669 .inttab_tc2_08E 00000000  805ff1c0  805ff1c0  0000490e  2**0
                  CONTENTS
670 .inttab_tc2_08F 00000000  805ff1e0  805ff1e0  0000490e  2**0
                  CONTENTS
671 .inttab_tc2_090 00000000  805ff200  805ff200  0000490e  2**0
                  CONTENTS
672 .inttab_tc2_091 00000000  805ff220  805ff220  0000490e  2**0
                  CONTENTS
673 .inttab_tc2_092 00000000  805ff240  805ff240  0000490e  2**0
                  CONTENTS
674 .inttab_tc2_093 00000000  805ff260  805ff260  0000490e  2**0
                  CONTENTS
675 .inttab_tc2_094 00000000  805ff280  805ff280  0000490e  2**0
                  CONTENTS
676 .inttab_tc2_095 00000000  805ff2a0  805ff2a0  0000490e  2**0
                  CONTENTS
677 .inttab_tc2_096 00000000  805ff2c0  805ff2c0  0000490e  2**0
                  CONTENTS
678 .inttab_tc2_097 00000000  805ff2e0  805ff2e0  0000490e  2**0
                  CONTENTS
679 .inttab_tc2_098 00000000  805ff300  805ff300  0000490e  2**0
                  CONTENTS
680 .inttab_tc2_099 00000000  805ff320  805ff320  0000490e  2**0
                  CONTENTS
681 .inttab_tc2_09A 00000000  805ff340  805ff340  0000490e  2**0
                  CONTENTS
682 .inttab_tc2_09B 00000000  805ff360  805ff360  0000490e  2**0
                  CONTENTS
683 .inttab_tc2_09C 00000000  805ff380  805ff380  0000490e  2**0
                  CONTENTS
684 .inttab_tc2_09D 00000000  805ff3a0  805ff3a0  0000490e  2**0
                  CONTENTS
685 .inttab_tc2_09E 00000000  805ff3c0  805ff3c0  0000490e  2**0
                  CONTENTS
686 .inttab_tc2_09F 00000000  805ff3e0  805ff3e0  0000490e  2**0
                  CONTENTS
687 .inttab_tc2_0A0 00000000  805ff400  805ff400  0000490e  2**0
                  CONTENTS
688 .inttab_tc2_0A1 00000000  805ff420  805ff420  0000490e  2**0
                  CONTENTS
689 .inttab_tc2_0A2 00000000  805ff440  805ff440  0000490e  2**0
                  CONTENTS
690 .inttab_tc2_0A3 00000000  805ff460  805ff460  0000490e  2**0
                  CONTENTS
691 .inttab_tc2_0A4 00000000  805ff480  805ff480  0000490e  2**0
                  CONTENTS
692 .inttab_tc2_0A5 00000000  805ff4a0  805ff4a0  0000490e  2**0
                  CONTENTS
693 .inttab_tc2_0A6 00000000  805ff4c0  805ff4c0  0000490e  2**0
                  CONTENTS
694 .inttab_tc2_0A7 00000000  805ff4e0  805ff4e0  0000490e  2**0
                  CONTENTS
695 .inttab_tc2_0A8 00000000  805ff500  805ff500  0000490e  2**0
                  CONTENTS
696 .inttab_tc2_0A9 00000000  805ff520  805ff520  0000490e  2**0
                  CONTENTS
697 .inttab_tc2_0AA 00000000  805ff540  805ff540  0000490e  2**0
                  CONTENTS
698 .inttab_tc2_0AB 00000000  805ff560  805ff560  0000490e  2**0
                  CONTENTS
699 .inttab_tc2_0AC 00000000  805ff580  805ff580  0000490e  2**0
                  CONTENTS
700 .inttab_tc2_0AD 00000000  805ff5a0  805ff5a0  0000490e  2**0
                  CONTENTS
701 .inttab_tc2_0AE 00000000  805ff5c0  805ff5c0  0000490e  2**0
                  CONTENTS
702 .inttab_tc2_0AF 00000000  805ff5e0  805ff5e0  0000490e  2**0
                  CONTENTS
703 .inttab_tc2_0B0 00000000  805ff600  805ff600  0000490e  2**0
                  CONTENTS
704 .inttab_tc2_0B1 00000000  805ff620  805ff620  0000490e  2**0
                  CONTENTS
705 .inttab_tc2_0B2 00000000  805ff640  805ff640  0000490e  2**0
                  CONTENTS
706 .inttab_tc2_0B3 00000000  805ff660  805ff660  0000490e  2**0
                  CONTENTS
707 .inttab_tc2_0B4 00000000  805ff680  805ff680  0000490e  2**0
                  CONTENTS
708 .inttab_tc2_0B5 00000000  805ff6a0  805ff6a0  0000490e  2**0
                  CONTENTS
709 .inttab_tc2_0B6 00000000  805ff6c0  805ff6c0  0000490e  2**0
                  CONTENTS
710 .inttab_tc2_0B7 00000000  805ff6e0  805ff6e0  0000490e  2**0
                  CONTENTS
711 .inttab_tc2_0B8 00000000  805ff700  805ff700  0000490e  2**0
                  CONTENTS
712 .inttab_tc2_0B9 00000000  805ff720  805ff720  0000490e  2**0
                  CONTENTS
713 .inttab_tc2_0BA 00000000  805ff740  805ff740  0000490e  2**0
                  CONTENTS
714 .inttab_tc2_0BB 00000000  805ff760  805ff760  0000490e  2**0
                  CONTENTS
715 .inttab_tc2_0BC 00000000  805ff780  805ff780  0000490e  2**0
                  CONTENTS
716 .inttab_tc2_0BD 00000000  805ff7a0  805ff7a0  0000490e  2**0
                  CONTENTS
717 .inttab_tc2_0BE 00000000  805ff7c0  805ff7c0  0000490e  2**0
                  CONTENTS
718 .inttab_tc2_0BF 00000000  805ff7e0  805ff7e0  0000490e  2**0
                  CONTENTS
719 .inttab_tc2_0C0 00000000  805ff800  805ff800  0000490e  2**0
                  CONTENTS
720 .inttab_tc2_0C1 00000000  805ff820  805ff820  0000490e  2**0
                  CONTENTS
721 .inttab_tc2_0C2 00000000  805ff840  805ff840  0000490e  2**0
                  CONTENTS
722 .inttab_tc2_0C3 00000000  805ff860  805ff860  0000490e  2**0
                  CONTENTS
723 .inttab_tc2_0C4 00000000  805ff880  805ff880  0000490e  2**0
                  CONTENTS
724 .inttab_tc2_0C5 00000000  805ff8a0  805ff8a0  0000490e  2**0
                  CONTENTS
725 .inttab_tc2_0C6 00000000  805ff8c0  805ff8c0  0000490e  2**0
                  CONTENTS
726 .inttab_tc2_0C7 00000000  805ff8e0  805ff8e0  0000490e  2**0
                  CONTENTS
727 .inttab_tc2_0C8 00000000  805ff900  805ff900  0000490e  2**0
                  CONTENTS
728 .inttab_tc2_0C9 00000000  805ff920  805ff920  0000490e  2**0
                  CONTENTS
729 .inttab_tc2_0CA 00000000  805ff940  805ff940  0000490e  2**0
                  CONTENTS
730 .inttab_tc2_0CB 00000000  805ff960  805ff960  0000490e  2**0
                  CONTENTS
731 .inttab_tc2_0CC 00000000  805ff980  805ff980  0000490e  2**0
                  CONTENTS
732 .inttab_tc2_0CD 00000000  805ff9a0  805ff9a0  0000490e  2**0
                  CONTENTS
733 .inttab_tc2_0CE 00000000  805ff9c0  805ff9c0  0000490e  2**0
                  CONTENTS
734 .inttab_tc2_0CF 00000000  805ff9e0  805ff9e0  0000490e  2**0
                  CONTENTS
735 .inttab_tc2_0D0 00000000  805ffa00  805ffa00  0000490e  2**0
                  CONTENTS
736 .inttab_tc2_0D1 00000000  805ffa20  805ffa20  0000490e  2**0
                  CONTENTS
737 .inttab_tc2_0D2 00000000  805ffa40  805ffa40  0000490e  2**0
                  CONTENTS
738 .inttab_tc2_0D3 00000000  805ffa60  805ffa60  0000490e  2**0
                  CONTENTS
739 .inttab_tc2_0D4 00000000  805ffa80  805ffa80  0000490e  2**0
                  CONTENTS
740 .inttab_tc2_0D5 00000000  805ffaa0  805ffaa0  0000490e  2**0
                  CONTENTS
741 .inttab_tc2_0D6 00000000  805ffac0  805ffac0  0000490e  2**0
                  CONTENTS
742 .inttab_tc2_0D7 00000000  805ffae0  805ffae0  0000490e  2**0
                  CONTENTS
743 .inttab_tc2_0D8 00000000  805ffb00  805ffb00  0000490e  2**0
                  CONTENTS
744 .inttab_tc2_0D9 00000000  805ffb20  805ffb20  0000490e  2**0
                  CONTENTS
745 .inttab_tc2_0DA 00000000  805ffb40  805ffb40  0000490e  2**0
                  CONTENTS
746 .inttab_tc2_0DB 00000000  805ffb60  805ffb60  0000490e  2**0
                  CONTENTS
747 .inttab_tc2_0DC 00000000  805ffb80  805ffb80  0000490e  2**0
                  CONTENTS
748 .inttab_tc2_0DD 00000000  805ffba0  805ffba0  0000490e  2**0
                  CONTENTS
749 .inttab_tc2_0DE 00000000  805ffbc0  805ffbc0  0000490e  2**0
                  CONTENTS
750 .inttab_tc2_0DF 00000000  805ffbe0  805ffbe0  0000490e  2**0
                  CONTENTS
751 .inttab_tc2_0E0 00000000  805ffc00  805ffc00  0000490e  2**0
                  CONTENTS
752 .inttab_tc2_0E1 00000000  805ffc20  805ffc20  0000490e  2**0
                  CONTENTS
753 .inttab_tc2_0E2 00000000  805ffc40  805ffc40  0000490e  2**0
                  CONTENTS
754 .inttab_tc2_0E3 00000000  805ffc60  805ffc60  0000490e  2**0
                  CONTENTS
755 .inttab_tc2_0E4 00000000  805ffc80  805ffc80  0000490e  2**0
                  CONTENTS
756 .inttab_tc2_0E5 00000000  805ffca0  805ffca0  0000490e  2**0
                  CONTENTS
757 .inttab_tc2_0E6 00000000  805ffcc0  805ffcc0  0000490e  2**0
                  CONTENTS
758 .inttab_tc2_0E7 00000000  805ffce0  805ffce0  0000490e  2**0
                  CONTENTS
759 .inttab_tc2_0E8 00000000  805ffd00  805ffd00  0000490e  2**0
                  CONTENTS
760 .inttab_tc2_0E9 00000000  805ffd20  805ffd20  0000490e  2**0
                  CONTENTS
761 .inttab_tc2_0EA 00000000  805ffd40  805ffd40  0000490e  2**0
                  CONTENTS
762 .inttab_tc2_0EB 00000000  805ffd60  805ffd60  0000490e  2**0
                  CONTENTS
763 .inttab_tc2_0EC 00000000  805ffd80  805ffd80  0000490e  2**0
                  CONTENTS
764 .inttab_tc2_0ED 00000000  805ffda0  805ffda0  0000490e  2**0
                  CONTENTS
765 .inttab_tc2_0EE 00000000  805ffdc0  805ffdc0  0000490e  2**0
                  CONTENTS
766 .inttab_tc2_0EF 00000000  805ffde0  805ffde0  0000490e  2**0
                  CONTENTS
767 .inttab_tc2_0F0 00000000  805ffe00  805ffe00  0000490e  2**0
                  CONTENTS
768 .inttab_tc2_0F1 00000000  805ffe20  805ffe20  0000490e  2**0
                  CONTENTS
769 .inttab_tc2_0F2 00000000  805ffe40  805ffe40  0000490e  2**0
                  CONTENTS
770 .inttab_tc2_0F3 00000000  805ffe60  805ffe60  0000490e  2**0
                  CONTENTS
771 .inttab_tc2_0F4 00000000  805ffe80  805ffe80  0000490e  2**0
                  CONTENTS
772 .inttab_tc2_0F5 00000000  805ffea0  805ffea0  0000490e  2**0
                  CONTENTS
773 .inttab_tc2_0F6 00000000  805ffec0  805ffec0  0000490e  2**0
                  CONTENTS
774 .inttab_tc2_0F7 00000000  805ffee0  805ffee0  0000490e  2**0
                  CONTENTS
775 .inttab_tc2_0F8 00000000  805fff00  805fff00  0000490e  2**0
                  CONTENTS
776 .inttab_tc2_0F9 00000000  805fff20  805fff20  0000490e  2**0
                  CONTENTS
777 .inttab_tc2_0FA 00000000  805fff40  805fff40  0000490e  2**0
                  CONTENTS
778 .inttab_tc2_0FB 00000000  805fff60  805fff60  0000490e  2**0
                  CONTENTS
779 .inttab_tc2_0FC 00000000  805fff80  805fff80  0000490e  2**0
                  CONTENTS
780 .inttab_tc2_0FD 00000000  805fffa0  805fffa0  0000490e  2**0
                  CONTENTS
781 .inttab_tc2_0FE 00000000  805fffc0  805fffc0  0000490e  2**0
                  CONTENTS
782 .inttab_tc2_0FF 00000000  805fffe0  805fffe0  0000490e  2**0
                  CONTENTS
783 .CPU2.zdata   00000000  50000000  50000000  0000490e  2**0
                  CONTENTS
784 .CPU1.zdata   00000000  60000000  60000000  0000490e  2**0
                  CONTENTS
785 .CPU0.zdata   00000000  70000000  70000000  0000490e  2**0
                  CONTENTS
786 .zdata_powerOn 00000000  70000000  70000000  0000490e  2**0
                  CONTENTS
787 .zdata        00000000  70000000  70000000  0000490e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
788 .lmuzdata     00000000  90000000  90000000  0000490e  2**0
                  CONTENTS
789 .sdata        00000000  70000000  70000000  0000490e  2**0
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
790 .CPU2.data    00000000  50000000  50000000  0000490e  2**0
                  CONTENTS
791 .CPU2.lmudata 00000000  90020000  90020000  0000490e  2**0
                  CONTENTS
792 .CPU1.data    00000000  60000000  60000000  0000490e  2**0
                  CONTENTS
793 .CPU1.lmudata 00000000  90010000  90010000  0000490e  2**0
                  CONTENTS
794 .CPU0.data    00000000  70000000  70000000  0000490e  2**0
                  CONTENTS
795 .CPU0.lmudata 00000000  90000000  90000000  0000490e  2**0
                  CONTENTS
796 .sdata4       00000000  90000000  90000000  0000490e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
797 .data         00000000  70000000  70000000  0000490e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
798 .bss          0000000c  70000000  80000200  000003a0  2**3
                  ALLOC
799 .heap         00001000  7000000c  80000200  000003a0  2**0
                  ALLOC
800 .lmudata      00000000  90000000  90000000  0000490e  2**0
                  CONTENTS
801 .rodata       00000480  80000200  80000200  000003a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
802 .CPU0.psram_text 00000000  70100000  70100000  0000490e  2**0
                  CONTENTS
803 .CPU1.psram_text 00000000  60100000  60100000  0000490e  2**0
                  CONTENTS
804 .CPU2.psram_text 00000000  50100000  50100000  0000490e  2**0
                  CONTENTS
805 .CPU0.text    000003c0  80000680  80000680  00000820  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
806 .init         00000010  80000a40  80000a40  00000be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
807 .fini         00000008  80000a50  80000a50  00000bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
808 .CPU1.text    000001fe  8030022c  8030022c  00004500  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
809 .CPU2.text    000001ec  8030042a  8030042a  000046fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
810 .text         000036d8  80000a58  80000a58  00000bf8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
811 .eh_frame     00000000  80004130  80004130  0000490e  2**0
                  CONTENTS
812 .gcc_except_table 00000000  80004130  80004130  0000490e  2**0
                  CONTENTS
813 .ctors        00000010  80004130  80004130  000042d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
814 .dtors        00000010  80004140  80004140  000042e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
815 .comment      0000001b  00000000  00000000  0000490e  2**0
                  CONTENTS, READONLY
816 .debug_aranges 00000750  00000000  00000000  00004930  2**3
                  CONTENTS, READONLY, DEBUGGING
817 .debug_info   00068597  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY, DEBUGGING
818 .debug_abbrev 00003615  00000000  00000000  0006d617  2**0
                  CONTENTS, READONLY, DEBUGGING
819 .debug_line   0000ba0a  00000000  00000000  00070c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
820 .debug_frame  00000f60  00000000  00000000  0007c638  2**2
                  CONTENTS, READONLY, DEBUGGING
821 .debug_str    00001754  00000000  00000000  0007d598  2**0
                  CONTENTS, READONLY, DEBUGGING
822 .debug_loc    00000ef9  00000000  00000000  0007ecec  2**0
                  CONTENTS, READONLY, DEBUGGING
823 .debug_ranges 000000b0  00000000  00000000  0007fbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
824 .debug_rnglists 000005b7  00000000  00000000  0007fc98  2**0
                  CONTENTS, READONLY, DEBUGGING
825 .debug_macro  00016128  00000000  00000000  0008024f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .start_tc0:

a0000000 <_START>:
}


IFX_SSW_INLINE void Ifx_Ssw_jumpToFunction(void (*fun)(void))
{
    __asm__ volatile ("ji %0" ::"a" (fun));
a0000000:	91 00 00 28 	movh.a %a2,32768
a0000004:	d9 22 44 a0 	lea %a2,[%a2]1668 <80000684 <__StartUpSoftware>>
a0000008:	dc 02       	ji %a2
#endif

void _START(void)
{
    Ifx_Ssw_jumpToFunction(__StartUpSoftware);
}
a000000a:	00 90       	ret 

Disassembly of section .traptab_tc0:

80000100 <IfxCpu_Trap_vectorTable0>:
#pragma ghs section
#pragma ghs section text=".traptab_cpu0"
#endif
void IfxCpu_Trap_vectorTable0(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80000100:	0d 00 00 02 	svlcx 
80000104:	02 f4       	mov %d4,%d15
80000106:	91 00 00 28 	movh.a %a2,32768
8000010a:	d9 22 28 53 	lea %a2,[%a2]12648 <80003168 <IfxCpu_Trap_memoryManagementError>>
8000010e:	dc 02       	ji %a2
80000110:	00 80       	rfe 
	...
8000011e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80000120:	0d 00 00 02 	svlcx 
80000124:	02 f4       	mov %d4,%d15
80000126:	91 00 00 28 	movh.a %a2,32768
8000012a:	d9 22 2a 73 	lea %a2,[%a2]12778 <800031ea <IfxCpu_Trap_internalProtectionError>>
8000012e:	dc 02       	ji %a2
80000130:	00 80       	rfe 
	...
8000013e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80000140:	0d 00 00 02 	svlcx 
80000144:	02 f4       	mov %d4,%d15
80000146:	91 00 00 28 	movh.a %a2,32768
8000014a:	d9 22 2c 93 	lea %a2,[%a2]12908 <8000326c <IfxCpu_Trap_instructionError>>
8000014e:	dc 02       	ji %a2
80000150:	00 80       	rfe 
	...
8000015e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80000160:	02 f4       	mov %d4,%d15
80000162:	91 00 00 28 	movh.a %a2,32768
80000166:	d9 22 2e b3 	lea %a2,[%a2]13038 <800032ee <IfxCpu_Trap_contextManagementError>>
8000016a:	dc 02       	ji %a2
8000016c:	00 80       	rfe 
	...
8000017e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80000180:	0d 00 00 02 	svlcx 
80000184:	02 f4       	mov %d4,%d15
80000186:	91 00 00 28 	movh.a %a2,32768
8000018a:	d9 22 30 d3 	lea %a2,[%a2]13168 <80003370 <IfxCpu_Trap_busError>>
8000018e:	dc 02       	ji %a2
80000190:	00 80       	rfe 
	...
8000019e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
800001a0:	0d 00 00 02 	svlcx 
800001a4:	02 f4       	mov %d4,%d15
800001a6:	91 00 00 28 	movh.a %a2,32768
800001aa:	d9 22 32 f3 	lea %a2,[%a2]13298 <800033f2 <IfxCpu_Trap_assertion>>
800001ae:	dc 02       	ji %a2
800001b0:	00 80       	rfe 
	...
800001be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu0);
800001c0:	0d 00 00 02 	svlcx 
800001c4:	02 f4       	mov %d4,%d15
800001c6:	91 00 00 28 	movh.a %a2,32768
800001ca:	d9 22 74 13 	lea %a2,[%a2]13428 <80003474 <IfxCpu_Trap_systemCall_Cpu0>>
800001ce:	dc 02       	ji %a2
800001d0:	00 80       	rfe 
	...
800001de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
800001e0:	0d 00 00 02 	svlcx 
800001e4:	02 f4       	mov %d4,%d15
800001e6:	91 00 00 28 	movh.a %a2,32768
800001ea:	d9 22 6e 73 	lea %a2,[%a2]13806 <800035ee <IfxCpu_Trap_nonMaskableInterrupt>>
800001ee:	dc 02       	ji %a2
800001f0:	00 80       	rfe 
}
800001f2:	00 90       	ret 

800001f4 <IfxCpu_Trap_vectorTable0_end>:
	...

Disassembly of section .traptab_tc1:

80300000 <IfxCpu_Trap_vectorTable1>:
#pragma ghs section
#pragma ghs section text=".traptab_cpu1"
#endif
void IfxCpu_Trap_vectorTable1(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80300000:	0d 00 00 02 	svlcx 
80300004:	02 f4       	mov %d4,%d15
80300006:	91 00 00 28 	movh.a %a2,32768
8030000a:	d9 22 28 53 	lea %a2,[%a2]12648 <80003168 <IfxCpu_Trap_memoryManagementError>>
8030000e:	dc 02       	ji %a2
80300010:	00 80       	rfe 
	...
8030001e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80300020:	0d 00 00 02 	svlcx 
80300024:	02 f4       	mov %d4,%d15
80300026:	91 00 00 28 	movh.a %a2,32768
8030002a:	d9 22 2a 73 	lea %a2,[%a2]12778 <800031ea <IfxCpu_Trap_internalProtectionError>>
8030002e:	dc 02       	ji %a2
80300030:	00 80       	rfe 
	...
8030003e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80300040:	0d 00 00 02 	svlcx 
80300044:	02 f4       	mov %d4,%d15
80300046:	91 00 00 28 	movh.a %a2,32768
8030004a:	d9 22 2c 93 	lea %a2,[%a2]12908 <8000326c <IfxCpu_Trap_instructionError>>
8030004e:	dc 02       	ji %a2
80300050:	00 80       	rfe 
	...
8030005e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80300060:	02 f4       	mov %d4,%d15
80300062:	91 00 00 28 	movh.a %a2,32768
80300066:	d9 22 2e b3 	lea %a2,[%a2]13038 <800032ee <IfxCpu_Trap_contextManagementError>>
8030006a:	dc 02       	ji %a2
8030006c:	00 80       	rfe 
	...
8030007e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80300080:	0d 00 00 02 	svlcx 
80300084:	02 f4       	mov %d4,%d15
80300086:	91 00 00 28 	movh.a %a2,32768
8030008a:	d9 22 30 d3 	lea %a2,[%a2]13168 <80003370 <IfxCpu_Trap_busError>>
8030008e:	dc 02       	ji %a2
80300090:	00 80       	rfe 
	...
8030009e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
803000a0:	0d 00 00 02 	svlcx 
803000a4:	02 f4       	mov %d4,%d15
803000a6:	91 00 00 28 	movh.a %a2,32768
803000aa:	d9 22 32 f3 	lea %a2,[%a2]13298 <800033f2 <IfxCpu_Trap_assertion>>
803000ae:	dc 02       	ji %a2
803000b0:	00 80       	rfe 
	...
803000be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu1);
803000c0:	0d 00 00 02 	svlcx 
803000c4:	02 f4       	mov %d4,%d15
803000c6:	91 00 00 28 	movh.a %a2,32768
803000ca:	d9 22 72 33 	lea %a2,[%a2]13554 <800034f2 <IfxCpu_Trap_systemCall_Cpu1>>
803000ce:	dc 02       	ji %a2
803000d0:	00 80       	rfe 
	...
803000de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
803000e0:	0d 00 00 02 	svlcx 
803000e4:	02 f4       	mov %d4,%d15
803000e6:	91 00 00 28 	movh.a %a2,32768
803000ea:	d9 22 6e 73 	lea %a2,[%a2]13806 <800035ee <IfxCpu_Trap_nonMaskableInterrupt>>
803000ee:	dc 02       	ji %a2
803000f0:	00 80       	rfe 
}
803000f2:	00 90       	ret 

803000f4 <IfxCpu_Trap_vectorTable1_end>:
	...

Disassembly of section .traptab_tc2:

80300100 <IfxCpu_Trap_vectorTable2>:
#pragma ghs section text=".traptab_cpu2"
#endif

void IfxCpu_Trap_vectorTable2(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80300100:	0d 00 00 02 	svlcx 
80300104:	02 f4       	mov %d4,%d15
80300106:	91 00 00 28 	movh.a %a2,32768
8030010a:	d9 22 28 53 	lea %a2,[%a2]12648 <80003168 <IfxCpu_Trap_memoryManagementError>>
8030010e:	dc 02       	ji %a2
80300110:	00 80       	rfe 
	...
8030011e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80300120:	0d 00 00 02 	svlcx 
80300124:	02 f4       	mov %d4,%d15
80300126:	91 00 00 28 	movh.a %a2,32768
8030012a:	d9 22 2a 73 	lea %a2,[%a2]12778 <800031ea <IfxCpu_Trap_internalProtectionError>>
8030012e:	dc 02       	ji %a2
80300130:	00 80       	rfe 
	...
8030013e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80300140:	0d 00 00 02 	svlcx 
80300144:	02 f4       	mov %d4,%d15
80300146:	91 00 00 28 	movh.a %a2,32768
8030014a:	d9 22 2c 93 	lea %a2,[%a2]12908 <8000326c <IfxCpu_Trap_instructionError>>
8030014e:	dc 02       	ji %a2
80300150:	00 80       	rfe 
	...
8030015e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80300160:	02 f4       	mov %d4,%d15
80300162:	91 00 00 28 	movh.a %a2,32768
80300166:	d9 22 2e b3 	lea %a2,[%a2]13038 <800032ee <IfxCpu_Trap_contextManagementError>>
8030016a:	dc 02       	ji %a2
8030016c:	00 80       	rfe 
	...
8030017e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80300180:	0d 00 00 02 	svlcx 
80300184:	02 f4       	mov %d4,%d15
80300186:	91 00 00 28 	movh.a %a2,32768
8030018a:	d9 22 30 d3 	lea %a2,[%a2]13168 <80003370 <IfxCpu_Trap_busError>>
8030018e:	dc 02       	ji %a2
80300190:	00 80       	rfe 
	...
8030019e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
803001a0:	0d 00 00 02 	svlcx 
803001a4:	02 f4       	mov %d4,%d15
803001a6:	91 00 00 28 	movh.a %a2,32768
803001aa:	d9 22 32 f3 	lea %a2,[%a2]13298 <800033f2 <IfxCpu_Trap_assertion>>
803001ae:	dc 02       	ji %a2
803001b0:	00 80       	rfe 
	...
803001be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu2);
803001c0:	0d 00 00 02 	svlcx 
803001c4:	02 f4       	mov %d4,%d15
803001c6:	91 00 00 28 	movh.a %a2,32768
803001ca:	d9 22 70 53 	lea %a2,[%a2]13680 <80003570 <IfxCpu_Trap_systemCall_Cpu2>>
803001ce:	dc 02       	ji %a2
803001d0:	00 80       	rfe 
	...
803001de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
803001e0:	0d 00 00 02 	svlcx 
803001e4:	02 f4       	mov %d4,%d15
803001e6:	91 00 00 28 	movh.a %a2,32768
803001ea:	d9 22 6e 73 	lea %a2,[%a2]13806 <800035ee <IfxCpu_Trap_nonMaskableInterrupt>>
803001ee:	dc 02       	ji %a2
803001f0:	00 80       	rfe 
}
803001f2:	00 90       	ret 

803001f4 <IfxCpu_Trap_vectorTable2_end>:
	...

Disassembly of section .start_tc1:

a0300200 <_START1>:
a0300200:	91 00 03 28 	movh.a %a2,32816
a0300204:	d9 22 2c 80 	lea %a2,[%a2]556 <8030022c <__Core1_start>>
a0300208:	dc 02       	ji %a2
#endif

void _START1(void)
{
    Ifx_Ssw_jumpToFunction(__Core1_start);
}
a030020a:	00 90       	ret 

Disassembly of section .start_tc2:

a0300220 <_START2>:
a0300220:	91 00 03 28 	movh.a %a2,32816
a0300224:	d9 22 6a 00 	lea %a2,[%a2]1066 <8030042a <__Core2_start>>
a0300228:	dc 02       	ji %a2
#endif

void _START2(void)
{
    Ifx_Ssw_jumpToFunction(__Core2_start);
}
a030022a:	00 90       	ret 

Disassembly of section .CPU0.text:

80000680 <hardware_init_hook>:
{}
80000680:	00 90       	ret 

80000682 <software_init_hook>:
{}
80000682:	00 90       	ret 

80000684 <__StartUpSoftware>:
    Ifx_Ssw_setAddressReg(a1, __SDATA2(0));
80000684:	91 10 00 18 	movh.a %a1,32769
80000688:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
8000068c:	3b 00 98 20 	mov %d2,2432
80000690:	cd 42 e0 0f 	mtcr $psw,%d2
#endif

IFX_SSW_INLINE unsigned char Ifx_Ssw_isApplicationReset(void)
{
    unsigned char returnVal;
    unsigned int  tempValue = SCU_RSTSTAT.U;
80000694:	91 30 00 2f 	movh.a %a2,61443
80000698:	19 22 10 16 	ld.w %d2,[%a2]24656 <f0036050 <_START2_end+0x4fd35e24>>

    if ((tempValue & IFX_SSW_POWERONRESET_MASK) > 0U)
8000069c:	7b d0 38 31 	movh %d3,5005
800006a0:	26 23       	and %d3,%d2
    unsigned int  tempValue = SCU_RSTSTAT.U;
800006a2:	d9 22 10 16 	lea %a2,[%a2]24656 <f0036050 <_START2_end+0x4fd35e24>>
    if ((tempValue & IFX_SSW_POWERONRESET_MASK) > 0U)
800006a6:	df 03 15 80 	jne %d3,0,800006d0 <__StartUpSoftware+0x4c>
    {
        returnVal = 0U;
    }
    else if ((tempValue & IFX_SSW_APPLICATIONRESET_MASK) > 0U)
800006aa:	8f b2 0f 31 	and %d3,%d2,251
800006ae:	df 03 17 00 	jeq %d3,0,800006dc <__StartUpSoftware+0x58>
    {
        /* get the bit which is set at RSTSTAT (assumption: RSTSTAT register was cleared before and only one bit can be set) */
        tempValue = tempValue & IFX_SSW_APPLICATIONRESET_MASK;
        tempValue = (SCU_RSTCON.U >> ((31U - Ifx_Ssw_CLZ(tempValue)) << 1U)) & 3U;
800006b2:	91 30 00 2f 	movh.a %a2,61443
800006b6:	0f 03 b0 21 	clz %d2,%d3
800006ba:	8b f2 01 21 	rsub %d2,%d2,31
800006be:	19 23 18 16 	ld.w %d3,[%a2]24664 <f0036058 <_START2_end+0x4fd35e2c>>
800006c2:	06 12       	sh %d2,1
800006c4:	57 03 62 22 	extr.u %d2,%d3,%d2,2
800006c8:	d9 22 18 16 	lea %a2,[%a2]24664 <f0036058 <_START2_end+0x4fd35e2c>>

        if (tempValue == IFX_SSW_APPLICATIONRESET)
800006cc:	df 22 0a 00 	jeq %d2,2,800006e0 <__StartUpSoftware+0x5c>
800006d0:	91 00 00 28 	movh.a %a2,32768
800006d4:	d9 22 44 c0 	lea %a2,[%a2]1796 <80000704 <__StartUpSoftware_Phase2>>
800006d8:	dc 02       	ji %a2
}
800006da:	00 90       	ret 
        else
        {
            returnVal = 0U;
        }
    }
    else if (((unsigned int)tempValue & ((unsigned int)IFX_SCU_RSTSTAT_CB3_MSK << IFX_SCU_RSTSTAT_CB3_OFF)))
800006dc:	ef 42 08 00 	jz.t %d2,20,800006ec <__StartUpSoftware+0x68>
    __asm__ volatile ("ji %0" ::"a" (fun));
800006e0:	91 00 00 28 	movh.a %a2,32768
800006e4:	d9 22 4e f0 	lea %a2,[%a2]1998 <800007ce <__StartUpSoftware_Phase3ApplicationResetPath>>
800006e8:	dc 02       	ji %a2
}
800006ea:	00 90       	ret 
    {
        /* CB3 reset is not configurable and is always application reset */
        returnVal = 1U;
    }
    else if (CPU0_KRST0.B.RSTSTAT != 0)   /*CPU0 KRST status */
800006ec:	91 10 88 2f 	movh.a %a2,63617
800006f0:	19 22 00 0d 	ld.w %d2,[%a2]-12288 <f880d000 <_START2_end+0x5850cdd4>>
800006f4:	d9 22 00 0d 	lea %a2,[%a2]-12288 <f880d000 <_START2_end+0x5850cdd4>>
800006f8:	37 02 e2 20 	extr.u %d2,%d2,1,2
800006fc:	df 02 f2 ff 	jne %d2,0,800006e0 <__StartUpSoftware+0x5c>
80000700:	1d ff e8 ff 	j 800006d0 <__StartUpSoftware+0x4c>

80000704 <__StartUpSoftware_Phase2>:


IFX_SSW_INLINE void Ifx_Ssw_jumpToFunctionWithLink(void *fun)
{
    __asm__ volatile ("jli %0" ::"a" (fun));
80000704:	91 00 00 28 	movh.a %a2,32768
80000708:	d9 22 e0 e3 	lea %a2,[%a2]16288 <80003fa0 <Ifx_Ssw_Pms_Init>>
8000070c:	2d 02 20 00 	jli %a2
80000710:	91 00 00 28 	movh.a %a2,32768
80000714:	d9 22 06 34 	lea %a2,[%a2]16582 <800040c6 <Ifx_Ssw_Pms_InitCheck>>
80000718:	2d 02 20 00 	jli %a2
    __asm__ volatile ("ji %0" ::"a" (fun));
8000071c:	91 00 00 28 	movh.a %a2,32768
80000720:	d9 22 68 c0 	lea %a2,[%a2]1832 <80000728 <__StartUpSoftware_Phase3PowerOnResetPath>>
80000724:	dc 02       	ji %a2
}
80000726:	00 90       	ret 

80000728 <__StartUpSoftware_Phase3PowerOnResetPath>:
    IFX_SSW_INIT_CONTEXT();
80000728:	91 40 00 a7 	movh.a %sp,28676
8000072c:	d9 aa 40 89 	lea %sp,[%sp]-27136 <70039600 <__USTACK0>>
    __asm__ volatile ("dsync" : : : "memory");
80000730:	0d 00 80 04 	dsync 
{
    unsigned int  k;
    unsigned int  nxt_cxi_val = 0U;
    unsigned int *prvCsa      = csaBegin;
    unsigned int *nxtCsa      = csaBegin;
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
80000734:	91 40 00 37 	movh.a %a3,28676
80000738:	91 40 00 27 	movh.a %a2,28676
8000073c:	d9 33 c0 09 	lea %a3,[%a3]-25600 <70039c00 <__CSA0>>
80000740:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <7003bc00 <__CSA0_END>>
80000744:	01 32 20 20 	sub.a %a2,%a2,%a3
80000748:	80 22       	mov.d %d2,%a2
8000074a:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
8000074e:	40 32       	mov.aa %a2,%a3
        else
        {
            *prvCsa = nxt_cxi_val;
        }

        if (k == (numOfCsa - 3U))
80000750:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80000754:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
80000756:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80000758:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
8000075c:	df 06 2d 00 	jeq %d6,0,800007b6 <__StartUpSoftware_Phase3PowerOnResetPath+0x8e>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80000760:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80000764:	8f 42 1f 50 	sh %d5,%d2,-12
80000768:	26 75       	and %d5,%d7
8000076a:	a6 54       	or %d4,%d5
        if (k == 0U)
8000076c:	df 03 14 00 	jeq %d3,0,80000794 <__StartUpSoftware_Phase3PowerOnResetPath+0x6c>
            *prvCsa = nxt_cxi_val;
80000770:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80000772:	5f 03 15 00 	jeq %d3,%d0,8000079c <__StartUpSoftware_Phase3PowerOnResetPath+0x74>
    for (k = 0U; k < numOfCsa; k++)
80000776:	c2 13       	add %d3,1
80000778:	60 22       	mov.a %a2,%d2
        {
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
        }

        prvCsa  = (unsigned int *)nxtCsa;
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
8000077a:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
8000077e:	5f 36 17 00 	jeq %d6,%d3,800007ac <__StartUpSoftware_Phase3PowerOnResetPath+0x84>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80000782:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80000784:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80000788:	8f 42 1f 50 	sh %d5,%d2,-12
8000078c:	26 75       	and %d5,%d7
8000078e:	a6 54       	or %d4,%d5
        if (k == 0U)
80000790:	df 03 f0 ff 	jne %d3,0,80000770 <__StartUpSoftware_Phase3PowerOnResetPath+0x48>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80000794:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
80000798:	5f 03 ef ff 	jne %d3,%d0,80000776 <__StartUpSoftware_Phase3PowerOnResetPath+0x4e>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
8000079c:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
800007a0:	c2 13       	add %d3,1
800007a2:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
800007a4:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
800007a8:	5f 36 ed ff 	jne %d6,%d3,80000782 <__StartUpSoftware_Phase3PowerOnResetPath+0x5a>
800007ac:	1b f6 ff 2f 	addi %d2,%d6,-1
800007b0:	06 62       	sh %d2,6
800007b2:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    }

    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
800007b6:	82 02       	mov %d2,0
800007b8:	74 22       	st.w [%a2],%d2
800007ba:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
800007be:	0d 00 c0 04 	isync 
    __asm__ volatile ("ji %0" ::"a" (fun));
800007c2:	91 00 00 28 	movh.a %a2,32768
800007c6:	d9 22 b4 10 	lea %a2,[%a2]2164 <80000874 <__StartUpSoftware_Phase4>>
800007ca:	dc 02       	ji %a2
}
800007cc:	00 90       	ret 

800007ce <__StartUpSoftware_Phase3ApplicationResetPath>:
    IFX_SSW_INIT_CONTEXT();
800007ce:	91 40 00 a7 	movh.a %sp,28676
800007d2:	d9 aa 40 89 	lea %sp,[%sp]-27136 <70039600 <__USTACK0>>
    __asm__ volatile ("dsync" : : : "memory");
800007d6:	0d 00 80 04 	dsync 
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
800007da:	91 40 00 37 	movh.a %a3,28676
800007de:	91 40 00 27 	movh.a %a2,28676
800007e2:	d9 33 c0 09 	lea %a3,[%a3]-25600 <70039c00 <__CSA0>>
800007e6:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <7003bc00 <__CSA0_END>>
800007ea:	01 32 20 20 	sub.a %a2,%a2,%a3
800007ee:	80 22       	mov.d %d2,%a2
800007f0:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
800007f4:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
800007f6:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
800007fa:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
800007fc:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
800007fe:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
80000802:	df 06 2d 00 	jeq %d6,0,8000085c <__StartUpSoftware_Phase3ApplicationResetPath+0x8e>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80000806:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
8000080a:	8f 42 1f 50 	sh %d5,%d2,-12
8000080e:	26 75       	and %d5,%d7
80000810:	a6 54       	or %d4,%d5
        if (k == 0U)
80000812:	df 03 14 00 	jeq %d3,0,8000083a <__StartUpSoftware_Phase3ApplicationResetPath+0x6c>
            *prvCsa = nxt_cxi_val;
80000816:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80000818:	5f 03 15 00 	jeq %d3,%d0,80000842 <__StartUpSoftware_Phase3ApplicationResetPath+0x74>
    for (k = 0U; k < numOfCsa; k++)
8000081c:	c2 13       	add %d3,1
8000081e:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80000820:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80000824:	5f 36 17 00 	jeq %d6,%d3,80000852 <__StartUpSoftware_Phase3ApplicationResetPath+0x84>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80000828:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
8000082a:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
8000082e:	8f 42 1f 50 	sh %d5,%d2,-12
80000832:	26 75       	and %d5,%d7
80000834:	a6 54       	or %d4,%d5
        if (k == 0U)
80000836:	df 03 f0 ff 	jne %d3,0,80000816 <__StartUpSoftware_Phase3ApplicationResetPath+0x48>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
8000083a:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
8000083e:	5f 03 ef ff 	jne %d3,%d0,8000081c <__StartUpSoftware_Phase3ApplicationResetPath+0x4e>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80000842:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
80000846:	c2 13       	add %d3,1
80000848:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
8000084a:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
8000084e:	5f 36 ed ff 	jne %d6,%d3,80000828 <__StartUpSoftware_Phase3ApplicationResetPath+0x5a>
80000852:	1b f6 ff 2f 	addi %d2,%d6,-1
80000856:	06 62       	sh %d2,6
80000858:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
8000085c:	82 02       	mov %d2,0
8000085e:	74 22       	st.w [%a2],%d2
80000860:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
80000864:	0d 00 c0 04 	isync 
    __asm__ volatile ("ji %0" ::"a" (fun));
80000868:	91 00 00 28 	movh.a %a2,32768
8000086c:	d9 22 82 30 	lea %a2,[%a2]2242 <800008c2 <__StartUpSoftware_Phase5>>
80000870:	dc 02       	ji %a2
}
80000872:	00 90       	ret 

80000874 <__StartUpSoftware_Phase4>:
    password  = watchdog->CON0.B.PW;
80000874:	91 30 00 4f 	movh.a %a4,61443
80000878:	19 44 0c 96 	ld.w %d4,[%a4]25164 <f003624c <_START2_end+0x4fd36020>>
    password  = watchdog->CON0.B.PW;
8000087c:	91 30 00 2f 	movh.a %a2,61443
80000880:	19 28 28 a6 	ld.w %d8,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
    password  = watchdog->CON0.B.PW;
80000884:	37 04 6e 41 	extr.u %d4,%d4,2,14
80000888:	d9 44 0c 96 	lea %a4,[%a4]25164 <f003624c <_START2_end+0x4fd36020>>
    password  = watchdog->CON0.B.PW;
8000088c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
        Ifx_Ssw_serviceCpuWatchdog(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
80000890:	8f f4 83 41 	xor %d4,%d4,63
80000894:	37 08 6e 81 	extr.u %d8,%d8,2,14
80000898:	6d 00 85 18 	call 800039a2 <Ifx_Ssw_serviceCpuWatchdog>
        Ifx_Ssw_serviceSafetyWatchdog(safetyWdtPassword);
8000089c:	8f f8 83 41 	xor %d4,%d8,63
800008a0:	6d 00 c4 18 	call 80003a28 <Ifx_Ssw_serviceSafetyWatchdog>
    IFX_CFG_SSW_CALLOUT_PLL_INIT();
800008a4:	91 00 00 48 	movh.a %a4,32768
800008a8:	d9 44 0c 90 	lea %a4,[%a4]588 <8000024c <IfxScuCcu_defaultClockConfig>>
800008ac:	6d 00 f8 08 	call 80001a9c <IfxScuCcu_init>
800008b0:	df 12 03 80 	jne %d2,1,800008b6 <__StartUpSoftware_Phase4+0x42>

/** Insert DEBUG instruction
 */
IFX_INLINE void Ifx__debug(void)
{
    __asm__ volatile ("debug" : : : "memory");
800008b4:	00 a0       	debug 
800008b6:	91 00 00 28 	movh.a %a2,32768
800008ba:	d9 22 82 30 	lea %a2,[%a2]2242 <800008c2 <__StartUpSoftware_Phase5>>
800008be:	dc 02       	ji %a2
}
800008c0:	00 90       	ret 

800008c2 <__StartUpSoftware_Phase5>:
800008c2:	91 00 00 28 	movh.a %a2,32768
800008c6:	d9 22 8e 30 	lea %a2,[%a2]2254 <800008ce <__StartUpSoftware_Phase6>>
800008ca:	dc 02       	ji %a2
}
800008cc:	00 90       	ret 

800008ce <__StartUpSoftware_Phase6>:
    Ifx_Ssw_startCore(&MODULE_CPU1, (unsigned int)__START(1));           /*The status returned by function call is ignored */
800008ce:	91 00 03 2a 	movh.a %a2,41008
800008d2:	80 22       	mov.d %d2,%a2
800008d4:	1b 02 20 40 	addi %d4,%d2,512
800008d8:	91 20 88 4f 	movh.a %a4,63618
800008dc:	6d 00 b7 19 	call 80003c4a <Ifx_Ssw_startCore>
800008e0:	91 00 00 28 	movh.a %a2,32768
800008e4:	d9 22 ac 30 	lea %a2,[%a2]2284 <800008ec <__Core0_start>>
800008e8:	dc 02       	ji %a2
}
800008ea:	00 90       	ret 

800008ec <__Core0_start>:
    password  = watchdog->CON0.B.PW;
800008ec:	91 30 00 2f 	movh.a %a2,61443
    password  = watchdog->CON0.B.PW;
800008f0:	91 30 00 3f 	movh.a %a3,61443
    password  = watchdog->CON0.B.PW;
800008f4:	19 23 0c 96 	ld.w %d3,[%a2]25164 <f003624c <_START2_end+0x4fd36020>>
    password  = watchdog->CON0.B.PW;
800008f8:	19 32 28 a6 	ld.w %d2,[%a3]25256 <f00362a8 <_START2_end+0x4fd3607c>>
    password  = watchdog->CON0.B.PW;
800008fc:	37 03 6e 31 	extr.u %d3,%d3,2,14
    password  = watchdog->CON0.B.PW;
80000900:	37 02 6e 21 	extr.u %d2,%d2,2,14
    if (watchdog->CON0.B.LCK)
80000904:	19 24 0c 96 	ld.w %d4,[%a2]25164 <f003624c <_START2_end+0x4fd36020>>
80000908:	8f f3 83 81 	xor %d8,%d3,63
    password  = watchdog->CON0.B.PW;
8000090c:	d9 22 0c 96 	lea %a2,[%a2]25164 <f003624c <_START2_end+0x4fd36020>>
    password  = watchdog->CON0.B.PW;
80000910:	d9 33 28 a6 	lea %a3,[%a3]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80000914:	8f f2 83 91 	xor %d9,%d2,63
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000918:	8f 28 00 20 	sh %d2,%d8,2
    if (watchdog->CON0.B.LCK)
8000091c:	6f 14 0b 00 	jz.t %d4,1,80000932 <__Core0_start+0x46>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000920:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000922:	8f 28 00 20 	sh %d2,%d8,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000926:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000092a:	a6 23       	or %d3,%d2
8000092c:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000930:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000932:	91 30 00 2f 	movh.a %a2,61443
80000936:	19 24 0c 96 	ld.w %d4,[%a2]25164 <f003624c <_START2_end+0x4fd36020>>
8000093a:	d9 22 0c 96 	lea %a2,[%a2]25164 <f003624c <_START2_end+0x4fd36020>>
8000093e:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
80000942:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000944:	a6 24       	or %d4,%d2
80000946:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000094a:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
8000094c:	54 24       	ld.w %d4,[%a2]
8000094e:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
80000952:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
80000956:	cd 03 04 09 	mtcr $dcon0,%d3
8000095a:	0d 00 c0 04 	isync 
    Ifx_Ssw_setAddressReg(a0, __SDATA1(0));
8000095e:	91 10 00 07 	movh.a %a0,28673
80000962:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(0));
80000966:	91 10 00 88 	movh.a %a8,32769
8000096a:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(0));
8000096e:	91 10 00 99 	movh.a %a9,36865
80000972:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(0));
80000976:	91 00 00 38 	movh.a %a3,32768
8000097a:	80 33       	mov.d %d3,%a3
8000097c:	1b 03 10 30 	addi %d3,%d3,256
80000980:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(0));
80000984:	91 00 03 38 	movh.a %a3,32816
80000988:	80 33       	mov.d %d3,%a3
8000098a:	1b 03 00 3e 	addi %d3,%d3,-8192
8000098e:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(0));
80000992:	91 40 00 37 	movh.a %a3,28676
80000996:	80 33       	mov.d %d3,%a3
80000998:	1b 03 b0 39 	addi %d3,%d3,-25856
8000099c:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
800009a0:	54 23       	ld.w %d3,[%a2]
800009a2:	6f 13 09 00 	jz.t %d3,1,800009b4 <__Core0_start+0xc8>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800009a6:	54 23       	ld.w %d3,[%a2]
800009a8:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800009ac:	a6 23       	or %d3,%d2
800009ae:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800009b2:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800009b4:	91 30 00 cf 	movh.a %a12,61443
800009b8:	19 c3 0c 96 	ld.w %d3,[%a12]25164 <f003624c <_START2_end+0x4fd36020>>
800009bc:	d9 cc 0c 96 	lea %a12,[%a12]25164 <f003624c <_START2_end+0x4fd36020>>
800009c0:	b7 03 10 30 	insert %d3,%d3,0,0,16
    Ifx_Ssw_disableCpuWatchdog(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
800009c4:	40 c4       	mov.aa %a4,%a12
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800009c6:	a6 32       	or %d2,%d3
800009c8:	8f 32 40 21 	or %d2,%d2,3
800009cc:	02 84       	mov %d4,%d8
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800009ce:	74 c2       	st.w [%a12],%d2
    watchdog->CON0.U;
800009d0:	54 c2       	ld.w %d2,[%a12]
800009d2:	6d 00 74 18 	call 80003aba <Ifx_Ssw_disableCpuWatchdog>
    Ifx_Ssw_disableSafetyWatchdog(safetyWdtPassword);
800009d6:	02 94       	mov %d4,%d9
800009d8:	6d 00 07 19 	call 80003be6 <Ifx_Ssw_disableSafetyWatchdog>
		hardware_init_hook();
800009dc:	6d ff 52 fe 	call 80000680 <hardware_init_hook>
		software_init_hook();
800009e0:	6d ff 51 fe 	call 80000682 <software_init_hook>
	(void)Ifx_Ssw_doCppInit();
800009e4:	6d 00 ee 19 	call 80003dc0 <Ifx_Ssw_doCppInit>
    Ifx_Ssw_enableSafetyWatchdog(safetyWdtPassword);
800009e8:	02 94       	mov %d4,%d9
800009ea:	6d 00 17 19 	call 80003c18 <Ifx_Ssw_enableSafetyWatchdog>
    Ifx_Ssw_enableCpuWatchdog(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
800009ee:	02 84       	mov %d4,%d8
800009f0:	40 c4       	mov.aa %a4,%a12
800009f2:	6d 00 af 18 	call 80003b50 <Ifx_Ssw_enableCpuWatchdog>
    __asm__ volatile ("ji %0" ::"a" (fun));
800009f6:	91 00 00 28 	movh.a %a2,32768
800009fa:	d9 22 86 80 	lea %a2,[%a2]2566 <80000a06 <core0_main>>
800009fe:	dc 02       	ji %a2

80000a00 <x>:
    __asm__ volatile ("ji %a11");
}

IFX_SSW_INLINE void Ifx_Ssw_infiniteLoop(void)
{
    __asm("x: loopu\t x");
80000a00:	fd 00 00 80 	loopu 80000a00 <x>
}
80000a04:	00 90       	ret 

80000a06 <core0_main>:
#include "IfxScuWdt.h"

IFX_ALIGN(4) IfxCpu_syncEvent g_cpuSyncEvent = 0;

void core0_main(void)
{
80000a06:	40 ae       	mov.aa %a14,%sp
}


IFX_INLINE void IfxCpu_enableInterrupts(void)
{
    __enable();
80000a08:	0d 00 00 03 	enable 
}
80000a0c:	00 00       	nop 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80000a0e:	6d 00 1d 13 	call 80003048 <IfxScuWdt_getCpuWatchdogPassword>
80000a12:	02 24       	mov %d4,%d2
80000a14:	6d 00 db 11 	call 80002dca <IfxScuWdt_disableCpuWatchdog>
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
80000a18:	6d 00 42 13 	call 8000309c <IfxScuWdt_getSafetyWatchdogPassword>
80000a1c:	02 24       	mov %d4,%d2
80000a1e:	6d 00 7b 12 	call 80002f14 <IfxScuWdt_disableSafetyWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80000a22:	91 00 00 27 	movh.a %a2,28672
80000a26:	d9 24 08 00 	lea %a4,[%a2]8 <70000008 <g_cpuSyncEvent>>
80000a2a:	6d 00 8d 16 	call 80003744 <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80000a2e:	82 14       	mov %d4,1
80000a30:	91 00 00 27 	movh.a %a2,28672
80000a34:	d9 24 08 00 	lea %a4,[%a2]8 <70000008 <g_cpuSyncEvent>>
80000a38:	6d 00 1a 16 	call 8000366c <IfxCpu_waitEvent>
    
    
    while(1)
80000a3c:	1d 00 00 00 	j 80000a3c <core0_main+0x36>

Disassembly of section .init:

80000a40 <_init>:
80000a40:	6d 00 71 00 	call 80000b22 <frame_dummy>
80000a44:	6d 00 68 05 	call 80001514 <__do_global_ctors_aux>
80000a48:	00 90       	ret 
80000a4a:	00 00       	nop 
80000a4c:	00 00       	nop 
	...

Disassembly of section .fini:

80000a50 <_fini>:
80000a50:	6d 00 36 00 	call 80000abc <__do_global_dtors_aux>
80000a54:	00 90       	ret 
	...

Disassembly of section .CPU1.text:

8030022c <__Core1_start>:
    password  = watchdog->CON0.B.PW;
8030022c:	91 30 00 2f 	movh.a %a2,61443
80300230:	d9 22 18 96 	lea %a2,[%a2]25176 <f0036258 <_START2_end+0x4fd3602c>>
    unsigned int   stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
80300234:	85 f8 10 01 	ld.w %d8,f0001010 <_START2_end+0x4fd00de4>
80300238:	54 22       	ld.w %d2,[%a2]
8030023a:	37 02 6e 21 	extr.u %d2,%d2,2,14
8030023e:	8f f2 83 21 	xor %d2,%d2,63
    Ifx_Ssw_setAddressReg(sp, __USTACK(1));
80300242:	91 40 00 a6 	movh.a %sp,24580
80300246:	d9 aa 40 89 	lea %sp,[%sp]-27136 <60039600 <__USTACK1>>
    __asm__ volatile ("dsync" : : : "memory");
8030024a:	0d 00 80 04 	dsync 
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
8030024e:	3b 00 98 30 	mov %d3,2432
80300252:	cd 43 e0 0f 	mtcr $psw,%d3
    if (watchdog->CON0.B.LCK)
80300256:	54 23       	ld.w %d3,[%a2]
80300258:	6f 13 c7 80 	jnz.t %d3,1,803003e6 <x+0x6>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030025c:	06 22       	sh %d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8030025e:	91 30 00 2f 	movh.a %a2,61443
80300262:	19 24 18 96 	ld.w %d4,[%a2]25176 <f0036258 <_START2_end+0x4fd3602c>>
80300266:	d9 22 18 96 	lea %a2,[%a2]25176 <f0036258 <_START2_end+0x4fd3602c>>
8030026a:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
8030026e:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80300270:	a6 24       	or %d4,%d2
80300272:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80300276:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
80300278:	54 24       	ld.w %d4,[%a2]
8030027a:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
8030027e:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
80300282:	cd 03 04 09 	mtcr $dcon0,%d3
80300286:	0d 00 c0 04 	isync 
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(1));
8030028a:	91 00 03 38 	movh.a %a3,32816
8030028e:	80 33       	mov.d %d3,%a3
80300290:	1b 03 00 30 	addi %d3,%d3,0
80300294:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(1));
80300298:	91 00 06 38 	movh.a %a3,32864
8030029c:	80 33       	mov.d %d3,%a3
8030029e:	1b 03 00 3c 	addi %d3,%d3,-16384
803002a2:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(1));
803002a6:	91 40 00 36 	movh.a %a3,24580
803002aa:	80 33       	mov.d %d3,%a3
803002ac:	1b 03 b0 39 	addi %d3,%d3,-25856
803002b0:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
803002b4:	54 23       	ld.w %d3,[%a2]
803002b6:	6f 13 09 00 	jz.t %d3,1,803002c8 <__Core1_start+0x9c>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803002ba:	54 23       	ld.w %d3,[%a2]
803002bc:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803002c0:	a6 23       	or %d3,%d2
803002c2:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803002c6:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803002c8:	91 30 00 2f 	movh.a %a2,61443
803002cc:	19 23 18 96 	ld.w %d3,[%a2]25176 <f0036258 <_START2_end+0x4fd3602c>>
803002d0:	d9 22 18 96 	lea %a2,[%a2]25176 <f0036258 <_START2_end+0x4fd3602c>>
803002d4:	b7 03 10 30 	insert %d3,%d3,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803002d8:	a6 32       	or %d2,%d3
803002da:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803002de:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
803002e0:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setAddressReg(a0, __SDATA1(1));
803002e2:	91 10 00 07 	movh.a %a0,28673
803002e6:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a1, __SDATA2(1));
803002ea:	91 10 00 18 	movh.a %a1,32769
803002ee:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(1));
803002f2:	91 10 00 88 	movh.a %a8,32769
803002f6:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(1));
803002fa:	91 10 00 99 	movh.a %a9,36865
803002fe:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
80300302:	91 40 00 36 	movh.a %a3,24580
80300306:	91 40 00 26 	movh.a %a2,24580
8030030a:	d9 33 c0 09 	lea %a3,[%a3]-25600 <60039c00 <__CSA1>>
8030030e:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <6003bc00 <__CSA1_END>>
80300312:	01 32 20 20 	sub.a %a2,%a2,%a3
80300316:	80 22       	mov.d %d2,%a2
80300318:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
8030031c:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
8030031e:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80300322:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
80300324:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80300326:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
8030032a:	df 06 2d 00 	jeq %d6,0,80300384 <__Core1_start+0x158>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
8030032e:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80300332:	8f 42 1f 50 	sh %d5,%d2,-12
80300336:	26 75       	and %d5,%d7
80300338:	a6 54       	or %d4,%d5
        if (k == 0U)
8030033a:	df 03 14 00 	jeq %d3,0,80300362 <__Core1_start+0x136>
            *prvCsa = nxt_cxi_val;
8030033e:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80300340:	5f 03 15 00 	jeq %d3,%d0,8030036a <__Core1_start+0x13e>
    for (k = 0U; k < numOfCsa; k++)
80300344:	c2 13       	add %d3,1
80300346:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80300348:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
8030034c:	5f 36 17 00 	jeq %d6,%d3,8030037a <__Core1_start+0x14e>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80300350:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80300352:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80300356:	8f 42 1f 50 	sh %d5,%d2,-12
8030035a:	26 75       	and %d5,%d7
8030035c:	a6 54       	or %d4,%d5
        if (k == 0U)
8030035e:	df 03 f0 ff 	jne %d3,0,8030033e <__Core1_start+0x112>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80300362:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
80300366:	5f 03 ef ff 	jne %d3,%d0,80300344 <__Core1_start+0x118>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
8030036a:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
8030036e:	c2 13       	add %d3,1
80300370:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80300372:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80300376:	5f 36 ed ff 	jne %d6,%d3,80300350 <__Core1_start+0x124>
8030037a:	1b f6 ff 2f 	addi %d2,%d6,-1
8030037e:	06 62       	sh %d2,6
80300380:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
80300384:	82 02       	mov %d2,0
80300386:	74 22       	st.w [%a2],%d2
    __asm__ volatile ("dsync" : : : "memory");
80300388:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
8030038c:	0d 00 c0 04 	isync 
    stmCount = (unsigned int)(Ifx_Ssw_getStmFrequency() * IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS);
80300390:	6d e8 9a 1c 	call 80003cc4 <Ifx_Ssw_getStmFrequency>
80300394:	02 24       	mov %d4,%d2
80300396:	6d e8 e6 03 	call 80000b62 <__extendsfdf2>
8030039a:	0b 23 10 48 	mov %e4,%d3,%d2
8030039e:	7b c0 b1 6e 	movh %d6,60188
803003a2:	7b a0 f1 73 	movh %d7,16154
803003a6:	1b d6 32 64 	addi %d6,%d6,17197
803003aa:	1b 27 6e 73 	addi %d7,%d7,14050
803003ae:	6d e8 5f 05 	call 80000e6c <__muldf3>
803003b2:	0b 23 10 48 	mov %e4,%d3,%d2
803003b6:	6d e8 ba 03 	call 80000b2a <__fixunsdfsi>
    while ((unsigned int)(STM0_TIM0.U - stmCountBegin) < stmCount)
803003ba:	85 f3 10 01 	ld.w %d3,f0001010 <_START2_end+0x4fd00de4>
803003be:	a2 83       	sub %d3,%d8
803003c0:	3f 23 fd ff 	jlt.u %d3,%d2,803003ba <__Core1_start+0x18e>
    (void)Ifx_Ssw_startCore(&MODULE_CPU2, (unsigned int)__START(2));       /*The status returned by function call is ignored */
803003c4:	91 00 03 2a 	movh.a %a2,41008
803003c8:	80 22       	mov.d %d2,%a2
803003ca:	1b 02 22 40 	addi %d4,%d2,544
803003ce:	91 40 88 4f 	movh.a %a4,63620
803003d2:	6d e8 3c 1c 	call 80003c4a <Ifx_Ssw_startCore>
    __asm__ volatile ("ji %0" ::"a" (fun));
803003d6:	91 00 03 28 	movh.a %a2,32816
803003da:	d9 22 3a f0 	lea %a2,[%a2]1018 <803003fa <core1_main>>
803003de:	dc 02       	ji %a2

803003e0 <x>:
    __asm("x: loopu\t x");
803003e0:	fd 00 00 80 	loopu 803003e0 <x>
}
803003e4:	00 90       	ret 
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803003e6:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803003e8:	06 22       	sh %d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803003ea:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803003ee:	a6 23       	or %d3,%d2
803003f0:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803003f4:	74 23       	st.w [%a2],%d3
803003f6:	1d ff 34 ff 	j 8030025e <__Core1_start+0x32>

803003fa <core1_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core1_main(void)
{
803003fa:	40 ae       	mov.aa %a14,%sp
    __enable();
803003fc:	0d 00 00 03 	enable 
}
80300400:	00 00       	nop 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG1 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80300402:	6d e8 23 16 	call 80003048 <IfxScuWdt_getCpuWatchdogPassword>
80300406:	02 24       	mov %d4,%d2
80300408:	6d e8 e1 14 	call 80002dca <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
8030040c:	91 00 00 27 	movh.a %a2,28672
80300410:	d9 24 08 00 	lea %a4,[%a2]8 <70000008 <g_cpuSyncEvent>>
80300414:	6d e8 98 19 	call 80003744 <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80300418:	82 14       	mov %d4,1
8030041a:	91 00 00 27 	movh.a %a2,28672
8030041e:	d9 24 08 00 	lea %a4,[%a2]8 <70000008 <g_cpuSyncEvent>>
80300422:	6d e8 25 19 	call 8000366c <IfxCpu_waitEvent>
    
    while(1)
80300426:	1d 00 00 00 	j 80300426 <core1_main+0x2c>

Disassembly of section .CPU2.text:

8030042a <__Core2_start>:
    password  = watchdog->CON0.B.PW;
8030042a:	91 30 00 2f 	movh.a %a2,61443
8030042e:	d9 22 24 96 	lea %a2,[%a2]25188 <f0036264 <_START2_end+0x4fd36038>>
    unsigned int   stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
80300432:	85 f8 10 01 	ld.w %d8,f0001010 <_START2_end+0x4fd00de4>
80300436:	54 22       	ld.w %d2,[%a2]
80300438:	37 02 6e 21 	extr.u %d2,%d2,2,14
8030043c:	8f f2 83 21 	xor %d2,%d2,63
    Ifx_Ssw_setAddressReg(sp, __USTACK(2));
80300440:	91 10 00 a5 	movh.a %sp,20481
80300444:	d9 aa 40 85 	lea %sp,[%sp]22016 <50015600 <__USTACK2>>
    __asm__ volatile ("dsync" : : : "memory");
80300448:	0d 00 80 04 	dsync 
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
8030044c:	3b 00 98 30 	mov %d3,2432
80300450:	cd 43 e0 0f 	mtcr $psw,%d3
    if (watchdog->CON0.B.LCK)
80300454:	54 23       	ld.w %d3,[%a2]
80300456:	6f 13 be 80 	jnz.t %d3,1,803005d2 <x+0x6>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030045a:	06 22       	sh %d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8030045c:	91 30 00 2f 	movh.a %a2,61443
80300460:	19 24 24 96 	ld.w %d4,[%a2]25188 <f0036264 <_START2_end+0x4fd36038>>
80300464:	d9 22 24 96 	lea %a2,[%a2]25188 <f0036264 <_START2_end+0x4fd36038>>
80300468:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
8030046c:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030046e:	a6 24       	or %d4,%d2
80300470:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80300474:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
80300476:	54 24       	ld.w %d4,[%a2]
80300478:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
8030047c:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
80300480:	cd 03 04 09 	mtcr $dcon0,%d3
80300484:	0d 00 c0 04 	isync 
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(2));
80300488:	91 00 03 38 	movh.a %a3,32816
8030048c:	80 33       	mov.d %d3,%a3
8030048e:	1b 03 10 30 	addi %d3,%d3,256
80300492:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(2));
80300496:	91 00 06 38 	movh.a %a3,32864
8030049a:	80 33       	mov.d %d3,%a3
8030049c:	1b 03 00 3e 	addi %d3,%d3,-8192
803004a0:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(2));
803004a4:	91 10 00 35 	movh.a %a3,20481
803004a8:	80 33       	mov.d %d3,%a3
803004aa:	1b 03 b0 35 	addi %d3,%d3,23296
803004ae:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
803004b2:	54 23       	ld.w %d3,[%a2]
803004b4:	6f 13 09 00 	jz.t %d3,1,803004c6 <__Core2_start+0x9c>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803004b8:	54 23       	ld.w %d3,[%a2]
803004ba:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803004be:	a6 23       	or %d3,%d2
803004c0:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803004c4:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803004c6:	91 30 00 2f 	movh.a %a2,61443
803004ca:	19 23 24 96 	ld.w %d3,[%a2]25188 <f0036264 <_START2_end+0x4fd36038>>
803004ce:	d9 22 24 96 	lea %a2,[%a2]25188 <f0036264 <_START2_end+0x4fd36038>>
803004d2:	b7 03 10 30 	insert %d3,%d3,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803004d6:	a6 32       	or %d2,%d3
803004d8:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803004dc:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
803004de:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setAddressReg(a0, __SDATA1(2));
803004e0:	91 10 00 07 	movh.a %a0,28673
803004e4:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a1, __SDATA2(2));
803004e8:	91 10 00 18 	movh.a %a1,32769
803004ec:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(2));
803004f0:	91 10 00 88 	movh.a %a8,32769
803004f4:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(2));
803004f8:	91 10 00 99 	movh.a %a9,36865
803004fc:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
80300500:	91 10 00 35 	movh.a %a3,20481
80300504:	91 10 00 25 	movh.a %a2,20481
80300508:	d9 33 c0 05 	lea %a3,[%a3]23552 <50015c00 <__CSA2>>
8030050c:	d9 22 c0 07 	lea %a2,[%a2]31744 <50017c00 <__CSA2_END>>
80300510:	01 32 20 20 	sub.a %a2,%a2,%a3
80300514:	80 22       	mov.d %d2,%a2
80300516:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
8030051a:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
8030051c:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80300520:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
80300522:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80300524:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
80300528:	df 06 2d 00 	jeq %d6,0,80300582 <__Core2_start+0x158>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
8030052c:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80300530:	8f 42 1f 50 	sh %d5,%d2,-12
80300534:	26 75       	and %d5,%d7
80300536:	a6 54       	or %d4,%d5
        if (k == 0U)
80300538:	df 03 14 00 	jeq %d3,0,80300560 <__Core2_start+0x136>
            *prvCsa = nxt_cxi_val;
8030053c:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
8030053e:	5f 03 15 00 	jeq %d3,%d0,80300568 <__Core2_start+0x13e>
    for (k = 0U; k < numOfCsa; k++)
80300542:	c2 13       	add %d3,1
80300544:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80300546:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
8030054a:	5f 36 17 00 	jeq %d6,%d3,80300578 <__Core2_start+0x14e>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
8030054e:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80300550:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80300554:	8f 42 1f 50 	sh %d5,%d2,-12
80300558:	26 75       	and %d5,%d7
8030055a:	a6 54       	or %d4,%d5
        if (k == 0U)
8030055c:	df 03 f0 ff 	jne %d3,0,8030053c <__Core2_start+0x112>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80300560:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
80300564:	5f 03 ef ff 	jne %d3,%d0,80300542 <__Core2_start+0x118>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80300568:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
8030056c:	c2 13       	add %d3,1
8030056e:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80300570:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80300574:	5f 36 ed ff 	jne %d6,%d3,8030054e <__Core2_start+0x124>
80300578:	1b f6 ff 2f 	addi %d2,%d6,-1
8030057c:	06 62       	sh %d2,6
8030057e:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
80300582:	82 02       	mov %d2,0
80300584:	74 22       	st.w [%a2],%d2
    __asm__ volatile ("dsync" : : : "memory");
80300586:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
8030058a:	0d 00 c0 04 	isync 
    stmCount = (unsigned int)(Ifx_Ssw_getStmFrequency() * IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS);
8030058e:	6d e8 9b 1b 	call 80003cc4 <Ifx_Ssw_getStmFrequency>
80300592:	02 24       	mov %d4,%d2
80300594:	6d e8 e7 02 	call 80000b62 <__extendsfdf2>
80300598:	0b 23 10 48 	mov %e4,%d3,%d2
8030059c:	7b c0 b1 6e 	movh %d6,60188
803005a0:	7b a0 f1 73 	movh %d7,16154
803005a4:	1b d6 32 64 	addi %d6,%d6,17197
803005a8:	1b 27 6e 73 	addi %d7,%d7,14050
803005ac:	6d e8 60 04 	call 80000e6c <__muldf3>
803005b0:	0b 23 10 48 	mov %e4,%d3,%d2
803005b4:	6d e8 bb 02 	call 80000b2a <__fixunsdfsi>
    while ((unsigned int)(STM0_TIM0.U - stmCountBegin) < stmCount)
803005b8:	85 f3 10 01 	ld.w %d3,f0001010 <_START2_end+0x4fd00de4>
803005bc:	a2 83       	sub %d3,%d8
803005be:	3f 23 fd ff 	jlt.u %d3,%d2,803005b8 <__Core2_start+0x18e>
    __asm__ volatile ("ji %0" ::"a" (fun));
803005c2:	91 00 03 28 	movh.a %a2,32816
803005c6:	d9 22 66 70 	lea %a2,[%a2]1510 <803005e6 <core2_main>>
803005ca:	dc 02       	ji %a2

803005cc <x>:
    __asm("x: loopu\t x");
803005cc:	fd 00 00 80 	loopu 803005cc <x>
}
803005d0:	00 90       	ret 
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803005d2:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803005d4:	06 22       	sh %d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803005d6:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803005da:	a6 23       	or %d3,%d2
803005dc:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803005e0:	74 23       	st.w [%a2],%d3
803005e2:	1d ff 3d ff 	j 8030045c <__Core2_start+0x32>

803005e6 <core2_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core2_main(void)
{
803005e6:	40 ae       	mov.aa %a14,%sp
    __enable();
803005e8:	0d 00 00 03 	enable 
}
803005ec:	00 00       	nop 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG2 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
803005ee:	6d e8 2d 15 	call 80003048 <IfxScuWdt_getCpuWatchdogPassword>
803005f2:	02 24       	mov %d4,%d2
803005f4:	6d e8 eb 13 	call 80002dca <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
803005f8:	91 00 00 27 	movh.a %a2,28672
803005fc:	d9 24 08 00 	lea %a4,[%a2]8 <70000008 <g_cpuSyncEvent>>
80300600:	6d e8 a2 18 	call 80003744 <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80300604:	82 14       	mov %d4,1
80300606:	91 00 00 27 	movh.a %a2,28672
8030060a:	d9 24 08 00 	lea %a4,[%a2]8 <70000008 <g_cpuSyncEvent>>
8030060e:	6d e8 2f 18 	call 8000366c <IfxCpu_waitEvent>
    
    while(1)
80300612:	1d 00 00 00 	j 80300612 <core2_main+0x2c>

Disassembly of section .text:

80000a58 <deregister_tm_clones>:
80000a58:	7b 00 00 27 	movh %d2,28672
80000a5c:	1b 02 00 20 	addi %d2,%d2,0
80000a60:	91 00 00 47 	movh.a %a4,28672
80000a64:	60 22       	mov.a %a2,%d2
80000a66:	d9 44 00 00 	lea %a4,[%a4]0 <70000000 <__TMC_END__>>
80000a6a:	7d 42 0a 00 	jeq.a %a2,%a4,80000a7e <deregister_tm_clones+0x26>
80000a6e:	91 00 00 20 	movh.a %a2,0
80000a72:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x380>>
80000a76:	bd 02 04 00 	jz.a %a2,80000a7e <deregister_tm_clones+0x26>
80000a7a:	2d 02 00 00 	calli %a2
80000a7e:	00 90       	ret 

80000a80 <register_tm_clones>:
80000a80:	7b 00 00 27 	movh %d2,28672
80000a84:	1b 02 00 20 	addi %d2,%d2,0
80000a88:	91 00 00 47 	movh.a %a4,28672
80000a8c:	60 22       	mov.a %a2,%d2
80000a8e:	d9 44 00 00 	lea %a4,[%a4]0 <70000000 <__TMC_END__>>
80000a92:	01 42 20 20 	sub.a %a2,%a2,%a4
80000a96:	80 22       	mov.d %d2,%a2
80000a98:	8f e2 3f 30 	sha %d3,%d2,-2
80000a9c:	8f 12 1e 20 	sh %d2,%d2,-31
80000aa0:	42 32       	add %d2,%d3
80000aa2:	8f f2 3f 40 	sha %d4,%d2,-1
80000aa6:	df 04 0a 00 	jeq %d4,0,80000aba <register_tm_clones+0x3a>
80000aaa:	91 00 00 20 	movh.a %a2,0
80000aae:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x380>>
80000ab2:	bd 02 04 00 	jz.a %a2,80000aba <register_tm_clones+0x3a>
80000ab6:	2d 02 00 00 	calli %a2
80000aba:	00 90       	ret 

80000abc <__do_global_dtors_aux>:
80000abc:	91 00 00 e7 	movh.a %a14,28672
80000ac0:	39 e2 00 00 	ld.bu %d2,[%a14]0 <70000000 <__TMC_END__>>
80000ac4:	df 02 2d 80 	jne %d2,0,80000b1e <__do_global_dtors_aux+0x62>
80000ac8:	91 00 00 38 	movh.a %a3,32768
80000acc:	91 00 00 28 	movh.a %a2,32768
80000ad0:	d9 33 10 54 	lea %a3,[%a3]16720 <80004150 <__DTOR_END__>>
80000ad4:	d9 22 04 54 	lea %a2,[%a2]16708 <80004144 <__DTOR_LIST__>>
80000ad8:	01 23 20 20 	sub.a %a2,%a3,%a2
80000adc:	80 22       	mov.d %d2,%a2
80000ade:	86 e2       	sha %d2,-2
80000ae0:	1b f2 ff 8f 	addi %d8,%d2,-1
80000ae4:	91 00 00 c7 	movh.a %a12,28672
80000ae8:	7b 00 00 28 	movh %d2,32768
80000aec:	1b 42 14 24 	addi %d2,%d2,16708
80000af0:	60 2d       	mov.a %a13,%d2
80000af2:	19 c2 04 00 	ld.w %d2,[%a12]4 <70000004 <dtor_idx.0>>
80000af6:	7f 82 0f 80 	jge.u %d2,%d8,80000b14 <__do_global_dtors_aux+0x58>
80000afa:	d9 cc 04 00 	lea %a12,[%a12]4 <70000004 <dtor_idx.0>>
80000afe:	c2 12       	add %d2,1
80000b00:	74 c2       	st.w [%a12],%d2
80000b02:	06 22       	sh %d2,2
80000b04:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000b08:	d4 22       	ld.a %a2,[%a2]
80000b0a:	2d 02 00 00 	calli %a2
80000b0e:	54 c2       	ld.w %d2,[%a12]
80000b10:	3f 82 f7 ff 	jlt.u %d2,%d8,80000afe <__do_global_dtors_aux+0x42>
80000b14:	6d ff a2 ff 	call 80000a58 <deregister_tm_clones>
80000b18:	82 12       	mov %d2,1
80000b1a:	e9 e2 00 00 	st.b [%a14]0 <70000000 <__TMC_END__>>,%d2
80000b1e:	00 90       	ret 

80000b20 <call___do_global_dtors_aux>:
80000b20:	00 90       	ret 

80000b22 <frame_dummy>:
80000b22:	6d ff af ff 	call 80000a80 <register_tm_clones>
80000b26:	00 90       	ret 

80000b28 <call_frame_dummy>:
80000b28:	00 90       	ret 

80000b2a <__fixunsdfsi>:
80000b2a:	82 06       	mov %d6,0
80000b2c:	7b 00 1e 74 	movh %d7,16864
80000b30:	60 4d       	mov.a %a13,%d4
80000b32:	60 5c       	mov.a %a12,%d5
80000b34:	6d 00 ae 02 	call 80001090 <__gedf2>
80000b38:	ff 02 07 00 	jge %d2,0,80000b46 <__fixunsdfsi+0x1c>
80000b3c:	80 d4       	mov.d %d4,%a13
80000b3e:	80 c5       	mov.d %d5,%a12
80000b40:	6d 00 c8 02 	call 800010d0 <__fixdfsi>
80000b44:	00 90       	ret 
80000b46:	82 06       	mov %d6,0
80000b48:	7b 00 1e 74 	movh %d7,16864
80000b4c:	80 d4       	mov.d %d4,%a13
80000b4e:	80 c5       	mov.d %d5,%a12
80000b50:	6d 00 6b 01 	call 80000e26 <__subdf3>
80000b54:	0b 23 10 48 	mov %e4,%d3,%d2
80000b58:	6d 00 bc 02 	call 800010d0 <__fixdfsi>
80000b5c:	9b 02 00 28 	addih %d2,%d2,32768
80000b60:	00 90       	ret 

80000b62 <__extendsfdf2>:
80000b62:	20 20       	sub.a %sp,32
80000b64:	d9 a5 10 00 	lea %a5,[%sp]16
80000b68:	d9 a4 0c 00 	lea %a4,[%sp]12
80000b6c:	59 a4 0c 00 	st.w [%sp]12,%d4
80000b70:	6d 00 fe 02 	call 8000116c <__unpack_f>
80000b74:	19 a2 1c 00 	ld.w %d2,[%sp]28
80000b78:	19 a6 18 00 	ld.w %d6,[%sp]24
80000b7c:	53 12 40 40 	mul.u %e4,%d2,1
80000b80:	77 45 00 3f 	dextr %d3,%d5,%d4,30
80000b84:	8f e4 01 20 	sh %d2,%d4,30
80000b88:	19 a5 14 00 	ld.w %d5,[%sp]20
80000b8c:	19 a4 10 00 	ld.w %d4,[%sp]16
80000b90:	74 a2       	st.w [%sp],%d2
80000b92:	59 a3 04 00 	st.w [%sp]4,%d3
80000b96:	6d 00 db 02 	call 8000114c <__make_dp>
80000b9a:	00 90       	ret 

80000b9c <_fpadd_parts>:
80000b9c:	54 42       	ld.w %d2,[%a4]
80000b9e:	40 42       	mov.aa %a2,%a4
80000ba0:	bf 22 c2 80 	jlt.u %d2,2,80000d24 <_fpadd_parts+0x188>
80000ba4:	54 53       	ld.w %d3,[%a5]
80000ba6:	40 52       	mov.aa %a2,%a5
80000ba8:	bf 23 be 80 	jlt.u %d3,2,80000d24 <_fpadd_parts+0x188>
80000bac:	df 42 e3 00 	jeq %d2,4,80000d72 <_fpadd_parts+0x1d6>
80000bb0:	df 43 ba 00 	jeq %d3,4,80000d24 <_fpadd_parts+0x188>
80000bb4:	df 23 b9 00 	jeq %d3,2,80000d26 <_fpadd_parts+0x18a>
80000bb8:	df 22 b6 00 	jeq %d2,2,80000d24 <_fpadd_parts+0x188>
80000bbc:	19 40 08 00 	ld.w %d0,[%a4]8
80000bc0:	19 57 08 00 	ld.w %d7,[%a5]8
80000bc4:	09 44 4c 09 	ld.d %e4,[%a4]12
80000bc8:	0b 70 80 60 	sub %d6,%d0,%d7
80000bcc:	09 52 4c 09 	ld.d %e2,[%a5]12
80000bd0:	bf 06 c2 00 	jlt %d6,0,80000d54 <_fpadd_parts+0x1b8>
80000bd4:	8b 06 84 12 	ge %d1,%d6,64
80000bd8:	df 01 c4 80 	jne %d1,0,80000d60 <_fpadd_parts+0x1c4>
80000bdc:	df 06 2a 00 	jeq %d6,0,80000c30 <_fpadd_parts+0x94>
80000be0:	8b 06 82 72 	ge %d7,%d6,32
80000be4:	2b 32 50 97 	seln %d9,%d7,%d2,%d3
80000be8:	ab 03 a0 87 	seln %d8,%d7,%d3,0
80000bec:	8f f6 01 71 	and %d7,%d6,31
80000bf0:	8b 07 02 11 	rsub %d1,%d7,32
80000bf4:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
80000bf8:	2b 91 40 17 	sel %d1,%d7,%d1,%d9
80000bfc:	8b 06 82 a2 	ge %d10,%d6,32
80000c00:	32 57       	rsub %d7
80000c02:	02 19       	mov %d9,%d1
80000c04:	8f f6 01 61 	and %d6,%d6,31
80000c08:	82 f1       	mov %d1,-1
80000c0a:	0f 78 00 80 	sh %d8,%d8,%d7
80000c0e:	17 11 80 76 	dextr %d7,%d1,%d1,%d6
80000c12:	0f 61 00 60 	sh %d6,%d1,%d6
80000c16:	2b 67 50 7a 	seln %d7,%d10,%d7,%d6
80000c1a:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
80000c1e:	0f 62 e0 10 	andn %d1,%d2,%d6
80000c22:	0f 73 e0 60 	andn %d6,%d3,%d7
80000c26:	a6 16       	or %d6,%d1
80000c28:	8b 06 00 95 	or.ne %d9,%d6,0
80000c2c:	0b 98 10 28 	mov %e2,%d8,%d9
80000c30:	19 41 04 00 	ld.w %d1,[%a4]4
80000c34:	19 56 04 00 	ld.w %d6,[%a5]4
80000c38:	5f 61 4c 00 	jeq %d1,%d6,80000cd0 <_fpadd_parts+0x134>
80000c3c:	0b 24 c0 60 	subx %d6,%d4,%d2
80000c40:	0b 35 d0 70 	subc %d7,%d5,%d3
80000c44:	df 01 06 00 	jeq %d1,0,80000c50 <_fpadd_parts+0xb4>
80000c48:	0b 42 c0 60 	subx %d6,%d2,%d4
80000c4c:	0b 53 d0 70 	subc %d7,%d3,%d5
80000c50:	8b 07 00 31 	rsub %d3,%d7,0
80000c54:	8b 06 00 91 	rsub %d9,%d6,0
80000c58:	ab f3 1f 36 	cadd %d3,%d6,%d3,-1
80000c5c:	82 12       	mov %d2,1
80000c5e:	bf 07 05 00 	jlt %d7,0,80000c68 <_fpadd_parts+0xcc>
80000c62:	02 69       	mov %d9,%d6
80000c64:	02 73       	mov %d3,%d7
80000c66:	82 02       	mov %d2,0
80000c68:	8b f9 9f 70 	addx %d7,%d9,-1
80000c6c:	82 f5       	mov %d5,-1
80000c6e:	8b f3 bf 60 	addc %d6,%d3,-1
80000c72:	06 c5       	sh %d5,-4
80000c74:	59 62 04 00 	st.w [%a6]4,%d2
80000c78:	82 e1       	mov %d1,-2
80000c7a:	0b 56 00 21 	eq %d2,%d6,%d5
80000c7e:	0b 71 30 22 	and.lt.u %d2,%d1,%d7
80000c82:	59 60 08 00 	st.w [%a6]8,%d0
80000c86:	59 69 0c 00 	st.w [%a6]12,%d9
80000c8a:	59 63 10 00 	st.w [%a6]16,%d3
80000c8e:	0b 65 a0 22 	or.lt.u %d2,%d5,%d6
80000c92:	df 02 2b 80 	jne %d2,0,80000ce8 <_fpadd_parts+0x14c>
80000c96:	1b f0 ff 7f 	addi %d7,%d0,-1
80000c9a:	77 93 80 30 	dextr %d3,%d3,%d9,1
80000c9e:	06 19       	sh %d9,1
80000ca0:	8b f9 9f 00 	addx %d0,%d9,-1
80000ca4:	8b f3 bf 60 	addc %d6,%d3,-1
80000ca8:	0b 56 00 21 	eq %d2,%d6,%d5
80000cac:	0b 01 50 22 	and.ge.u %d2,%d1,%d0
80000cb0:	0b 56 a0 22 	or.lt.u %d2,%d6,%d5
80000cb4:	02 78       	mov %d8,%d7
80000cb6:	c2 f7       	add %d7,-1
80000cb8:	df 02 f1 ff 	jne %d2,0,80000c9a <_fpadd_parts+0xfe>
80000cbc:	82 32       	mov %d2,3
80000cbe:	59 69 0c 00 	st.w [%a6]12,%d9
80000cc2:	59 63 10 00 	st.w [%a6]16,%d3
80000cc6:	59 68 08 00 	st.w [%a6]8,%d8
80000cca:	74 62       	st.w [%a6],%d2
80000ccc:	40 62       	mov.aa %a2,%a6
80000cce:	00 90       	ret 
80000cd0:	0b 24 40 90 	addx %d9,%d4,%d2
80000cd4:	0b 35 50 30 	addc %d3,%d5,%d3
80000cd8:	59 61 04 00 	st.w [%a6]4,%d1
80000cdc:	59 60 08 00 	st.w [%a6]8,%d0
80000ce0:	59 69 0c 00 	st.w [%a6]12,%d9
80000ce4:	59 63 10 00 	st.w [%a6]16,%d3
80000ce8:	82 32       	mov %d2,3
80000cea:	7b 00 00 52 	movh %d5,8192
80000cee:	40 62       	mov.aa %a2,%a6
80000cf0:	74 62       	st.w [%a6],%d2
80000cf2:	0b 53 00 21 	eq %d2,%d3,%d5
80000cf6:	b7 02 01 20 	insert %d2,%d2,0,0,1
80000cfa:	0b 53 a0 22 	or.lt.u %d2,%d3,%d5
80000cfe:	df 02 13 80 	jne %d2,0,80000d24 <_fpadd_parts+0x188>
80000d02:	8f f3 1f 20 	sh %d2,%d3,-1
80000d06:	77 93 80 5f 	dextr %d5,%d3,%d9,31
80000d0a:	8f 19 00 31 	and %d3,%d9,1
80000d0e:	59 62 10 00 	st.w [%a6]16,%d2
80000d12:	19 62 08 00 	ld.w %d2,[%a6]8
80000d16:	a6 53       	or %d3,%d5
80000d18:	c2 12       	add %d2,1
80000d1a:	d9 63 08 00 	lea %a3,[%a6]8
80000d1e:	59 63 0c 00 	st.w [%a6]12,%d3
80000d22:	74 32       	st.w [%a3],%d2
80000d24:	00 90       	ret 
80000d26:	40 42       	mov.aa %a2,%a4
80000d28:	df 22 fe ff 	jne %d2,2,80000d24 <_fpadd_parts+0x188>
80000d2c:	40 63       	mov.aa %a3,%a6
80000d2e:	09 44 48 01 	ld.d %e4,[%a4+]8
80000d32:	89 34 48 01 	st.d [%a3+]8,%e4
80000d36:	09 44 48 01 	ld.d %e4,[%a4+]8
80000d3a:	89 34 48 01 	st.d [%a3+]8,%e4
80000d3e:	44 44       	ld.w %d4,[%a4+]
80000d40:	64 34       	st.w [%a3+],%d4
80000d42:	19 23 04 00 	ld.w %d3,[%a2]4
80000d46:	19 52 04 00 	ld.w %d2,[%a5]4
80000d4a:	40 62       	mov.aa %a2,%a6
80000d4c:	26 32       	and %d2,%d3
80000d4e:	59 62 04 00 	st.w [%a6]4,%d2
80000d52:	00 90       	ret 
80000d54:	0b 07 80 60 	sub %d6,%d7,%d0
80000d58:	8b 06 44 12 	lt %d1,%d6,64
80000d5c:	df 01 1d 80 	jne %d1,0,80000d96 <_fpadd_parts+0x1fa>
80000d60:	3f 07 06 00 	jlt %d7,%d0,80000d6c <_fpadd_parts+0x1d0>
80000d64:	d2 04       	mov %e4,0
80000d66:	02 70       	mov %d0,%d7
80000d68:	1d ff 64 ff 	j 80000c30 <_fpadd_parts+0x94>
80000d6c:	d2 02       	mov %e2,0
80000d6e:	1d ff 61 ff 	j 80000c30 <_fpadd_parts+0x94>
80000d72:	40 42       	mov.aa %a2,%a4
80000d74:	df 43 d8 ff 	jne %d3,4,80000d24 <_fpadd_parts+0x188>
80000d78:	19 43 04 00 	ld.w %d3,[%a4]4
80000d7c:	19 52 04 00 	ld.w %d2,[%a5]4
80000d80:	7b 00 00 48 	movh %d4,32768
80000d84:	0b 23 10 21 	ne %d2,%d3,%d2
80000d88:	1b 04 20 40 	addi %d4,%d4,512
80000d8c:	80 43       	mov.d %d3,%a4
80000d8e:	2b 43 50 22 	seln %d2,%d2,%d3,%d4
80000d92:	60 22       	mov.a %a2,%d2
80000d94:	00 90       	ret 
80000d96:	8b 06 82 02 	ge %d0,%d6,32
80000d9a:	2b 54 50 90 	seln %d9,%d0,%d4,%d5
80000d9e:	ab 05 a0 80 	seln %d8,%d0,%d5,0
80000da2:	8f f6 01 01 	and %d0,%d6,31
80000da6:	8b 00 02 11 	rsub %d1,%d0,32
80000daa:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
80000dae:	2b 91 40 10 	sel %d1,%d0,%d1,%d9
80000db2:	8b 06 82 a2 	ge %d10,%d6,32
80000db6:	32 50       	rsub %d0
80000db8:	02 19       	mov %d9,%d1
80000dba:	8f f6 01 61 	and %d6,%d6,31
80000dbe:	82 f1       	mov %d1,-1
80000dc0:	0f 08 00 80 	sh %d8,%d8,%d0
80000dc4:	17 11 80 06 	dextr %d0,%d1,%d1,%d6
80000dc8:	0f 61 00 60 	sh %d6,%d1,%d6
80000dcc:	2b 60 50 0a 	seln %d0,%d10,%d0,%d6
80000dd0:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
80000dd4:	0f 64 e0 10 	andn %d1,%d4,%d6
80000dd8:	0f 05 e0 60 	andn %d6,%d5,%d0
80000ddc:	a6 16       	or %d6,%d1
80000dde:	8b 06 00 95 	or.ne %d9,%d6,0
80000de2:	0b 98 10 48 	mov %e4,%d8,%d9
80000de6:	02 70       	mov %d0,%d7
80000de8:	1d ff 24 ff 	j 80000c30 <_fpadd_parts+0x94>

80000dec <__adddf3>:
80000dec:	20 50       	sub.a %sp,80
80000dee:	d9 a5 14 00 	lea %a5,[%sp]20
80000df2:	d9 a4 04 00 	lea %a4,[%sp]4
80000df6:	89 a4 44 09 	st.d [%sp]4,%e4
80000dfa:	89 a6 4c 09 	st.d [%sp]12,%e6
80000dfe:	6d 00 ca 02 	call 80001392 <__unpack_d>
80000e02:	d9 a5 28 00 	lea %a5,[%sp]40
80000e06:	d9 a4 0c 00 	lea %a4,[%sp]12
80000e0a:	6d 00 c4 02 	call 80001392 <__unpack_d>
80000e0e:	d9 a4 14 00 	lea %a4,[%sp]20
80000e12:	d9 a6 3c 00 	lea %a6,[%sp]60
80000e16:	d9 a5 28 00 	lea %a5,[%sp]40
80000e1a:	6d ff c1 fe 	call 80000b9c <_fpadd_parts>
80000e1e:	40 24       	mov.aa %a4,%a2
80000e20:	6d 00 ea 01 	call 800011f4 <__pack_d>
80000e24:	00 90       	ret 

80000e26 <__subdf3>:
80000e26:	20 50       	sub.a %sp,80
80000e28:	d9 a5 14 00 	lea %a5,[%sp]20
80000e2c:	d9 a4 04 00 	lea %a4,[%sp]4
80000e30:	89 a4 44 09 	st.d [%sp]4,%e4
80000e34:	89 a6 4c 09 	st.d [%sp]12,%e6
80000e38:	6d 00 ad 02 	call 80001392 <__unpack_d>
80000e3c:	d9 a5 28 00 	lea %a5,[%sp]40
80000e40:	d9 a4 0c 00 	lea %a4,[%sp]12
80000e44:	6d 00 a7 02 	call 80001392 <__unpack_d>
80000e48:	19 a2 2c 00 	ld.w %d2,[%sp]44
80000e4c:	d9 a4 14 00 	lea %a4,[%sp]20
80000e50:	8f 12 80 21 	xor %d2,%d2,1
80000e54:	d9 a6 3c 00 	lea %a6,[%sp]60
80000e58:	d9 a5 28 00 	lea %a5,[%sp]40
80000e5c:	59 a2 2c 00 	st.w [%sp]44,%d2
80000e60:	6d ff 9e fe 	call 80000b9c <_fpadd_parts>
80000e64:	40 24       	mov.aa %a4,%a2
80000e66:	6d 00 c7 01 	call 800011f4 <__pack_d>
80000e6a:	00 90       	ret 

80000e6c <__muldf3>:
80000e6c:	20 50       	sub.a %sp,80
80000e6e:	d9 a5 14 00 	lea %a5,[%sp]20
80000e72:	d9 a4 04 00 	lea %a4,[%sp]4
80000e76:	89 a4 44 09 	st.d [%sp]4,%e4
80000e7a:	89 a6 4c 09 	st.d [%sp]12,%e6
80000e7e:	6d 00 8a 02 	call 80001392 <__unpack_d>
80000e82:	d9 a5 28 00 	lea %a5,[%sp]40
80000e86:	d9 a4 0c 00 	lea %a4,[%sp]12
80000e8a:	6d 00 84 02 	call 80001392 <__unpack_d>
80000e8e:	19 a2 14 00 	ld.w %d2,[%sp]20
80000e92:	ff 22 0f 80 	jge.u %d2,2,80000eb0 <__muldf3+0x44>
80000e96:	19 a3 18 00 	ld.w %d3,[%sp]24
80000e9a:	19 a2 2c 00 	ld.w %d2,[%sp]44
80000e9e:	d9 a4 14 00 	lea %a4,[%sp]20
80000ea2:	0b 23 10 21 	ne %d2,%d3,%d2
80000ea6:	59 a2 18 00 	st.w [%sp]24,%d2
80000eaa:	6d 00 a5 01 	call 800011f4 <__pack_d>
80000eae:	00 90       	ret 
80000eb0:	19 a3 28 00 	ld.w %d3,[%sp]40
80000eb4:	bf 23 14 80 	jlt.u %d3,2,80000edc <__muldf3+0x70>
80000eb8:	df 42 0a 80 	jne %d2,4,80000ecc <__muldf3+0x60>
80000ebc:	91 00 00 48 	movh.a %a4,32768
80000ec0:	d9 44 00 80 	lea %a4,[%a4]512 <80000200 <__thenan_df>>
80000ec4:	df 23 f3 7f 	jeq %d3,2,80000eaa <__muldf3+0x3e>
80000ec8:	1d ff e7 ff 	j 80000e96 <__muldf3+0x2a>
80000ecc:	df 43 15 80 	jne %d3,4,80000ef6 <__muldf3+0x8a>
80000ed0:	91 00 00 48 	movh.a %a4,32768
80000ed4:	d9 44 00 80 	lea %a4,[%a4]512 <80000200 <__thenan_df>>
80000ed8:	df 22 e9 7f 	jeq %d2,2,80000eaa <__muldf3+0x3e>
80000edc:	19 a2 2c 00 	ld.w %d2,[%sp]44
80000ee0:	19 a3 18 00 	ld.w %d3,[%sp]24
80000ee4:	d9 a4 28 00 	lea %a4,[%sp]40
80000ee8:	0b 23 10 21 	ne %d2,%d3,%d2
80000eec:	59 a2 2c 00 	st.w [%sp]44,%d2
80000ef0:	6d 00 82 01 	call 800011f4 <__pack_d>
80000ef4:	00 90       	ret 
80000ef6:	19 a5 2c 00 	ld.w %d5,[%sp]44
80000efa:	19 a4 18 00 	ld.w %d4,[%sp]24
80000efe:	0b 45 10 a1 	ne %d10,%d5,%d4
80000f02:	df 22 aa 00 	jeq %d2,2,80001056 <__muldf3+0x1ea>
80000f06:	df 23 ae 00 	jeq %d3,2,80001062 <__muldf3+0x1f6>
80000f0a:	19 a6 34 00 	ld.w %d6,[%sp]52
80000f0e:	19 a4 20 00 	ld.w %d4,[%sp]32
80000f12:	82 03       	mov %d3,0
80000f14:	73 46 68 00 	mul.u %e0,%d6,%d4
80000f18:	19 a2 38 00 	ld.w %d2,[%sp]56
80000f1c:	82 0b       	mov %d11,0
80000f1e:	03 36 0a 11 	madd %d1,%d1,%d6,%d3
80000f22:	02 48       	mov %d8,%d4
80000f24:	19 a7 24 00 	ld.w %d7,[%sp]36
80000f28:	03 4b 0a 11 	madd %d1,%d1,%d11,%d4
80000f2c:	73 42 68 40 	mul.u %e4,%d2,%d4
80000f30:	82 0d       	mov %d13,0
80000f32:	82 0c       	mov %d12,0
80000f34:	03 32 0a 55 	madd %d5,%d5,%d2,%d3
80000f38:	03 8d 0a 55 	madd %d5,%d5,%d13,%d8
80000f3c:	73 27 68 80 	mul.u %e8,%d7,%d2
80000f40:	03 d7 0a 99 	madd %d9,%d9,%d7,%d13
80000f44:	03 2c 0a 99 	madd %d9,%d9,%d12,%d2
80000f48:	03 67 68 24 	madd.u %e2,%e4,%d7,%d6
80000f4c:	03 b7 0a 33 	madd %d3,%d3,%d7,%d11
80000f50:	03 6c 0a 33 	madd %d3,%d3,%d12,%d6
80000f54:	0b 35 00 61 	eq %d6,%d5,%d3
80000f58:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
80000f5c:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
80000f60:	02 67       	mov %d7,%d6
80000f62:	82 06       	mov %d6,0
80000f64:	0b 06 40 60 	addx %d6,%d6,%d0
80000f68:	0b 12 50 50 	addc %d5,%d2,%d1
80000f6c:	0b 51 00 41 	eq %d4,%d1,%d5
80000f70:	0b 06 50 42 	and.ge.u %d4,%d6,%d0
80000f74:	0b 51 a0 42 	or.lt.u %d4,%d1,%d5
80000f78:	df 04 06 80 	jne %d4,0,80000f84 <__muldf3+0x118>
80000f7c:	8b 1b 80 b0 	addx %d11,%d11,1
80000f80:	8b 07 a0 70 	addc %d7,%d7,0
80000f84:	82 04       	mov %d4,0
80000f86:	0b 83 40 30 	addx %d3,%d3,%d8
80000f8a:	0b 94 50 20 	addc %d2,%d4,%d9
80000f8e:	0b b3 40 30 	addx %d3,%d3,%d11
80000f92:	0b 72 50 20 	addc %d2,%d2,%d7
80000f96:	19 a4 1c 00 	ld.w %d4,[%sp]28
80000f9a:	19 a7 30 00 	ld.w %d7,[%sp]48
80000f9e:	59 aa 00 10 	st.w [%sp]64,%d10
80000fa2:	0b 74 00 10 	add %d1,%d4,%d7
80000fa6:	7b 00 00 42 	movh %d4,8192
80000faa:	1b 41 00 00 	addi %d0,%d1,4
80000fae:	0b 42 00 71 	eq %d7,%d2,%d4
80000fb2:	b7 07 01 70 	insert %d7,%d7,0,0,1
80000fb6:	59 a0 04 10 	st.w [%sp]68,%d0
80000fba:	0b 42 a0 72 	or.lt.u %d7,%d2,%d4
80000fbe:	df 07 2b 80 	jne %d7,0,80001014 <__muldf3+0x1a8>
80000fc2:	1b 51 00 70 	addi %d7,%d1,5
80000fc6:	8f 13 00 01 	and %d0,%d3,1
80000fca:	02 71       	mov %d1,%d7
80000fcc:	df 00 07 00 	jeq %d0,0,80000fda <__muldf3+0x16e>
80000fd0:	77 65 80 6f 	dextr %d6,%d5,%d6,31
80000fd4:	06 f5       	sh %d5,-1
80000fd6:	b7 f5 81 5f 	insert %d5,%d5,15,31,1
80000fda:	77 32 80 3f 	dextr %d3,%d2,%d3,31
80000fde:	06 f2       	sh %d2,-1
80000fe0:	0b 24 30 01 	lt.u %d0,%d4,%d2
80000fe4:	0b 24 70 02 	or.eq %d0,%d4,%d2
80000fe8:	c2 17       	add %d7,1
80000fea:	df 00 ee ff 	jne %d0,0,80000fc6 <__muldf3+0x15a>
80000fee:	59 a1 04 10 	st.w [%sp]68,%d1
80000ff2:	8f f3 0f 41 	and %d4,%d3,255
80000ff6:	8b 04 28 42 	ne %d4,%d4,128
80000ffa:	df 04 3a 00 	jeq %d4,0,8000106e <__muldf3+0x202>
80000ffe:	59 a2 0c 10 	st.w [%sp]76,%d2
80001002:	82 32       	mov %d2,3
80001004:	59 a3 08 10 	st.w [%sp]72,%d3
80001008:	d9 a4 3c 00 	lea %a4,[%sp]60
8000100c:	59 a2 3c 00 	st.w [%sp]60,%d2
80001010:	1d ff 4d ff 	j 80000eaa <__muldf3+0x3e>
80001014:	7b 00 00 71 	movh %d7,4096
80001018:	0b 27 30 41 	lt.u %d4,%d7,%d2
8000101c:	0b 27 70 42 	or.eq %d4,%d7,%d2
80001020:	df 04 e9 ff 	jne %d4,0,80000ff2 <__muldf3+0x186>
80001024:	77 32 80 20 	dextr %d2,%d2,%d3,1
80001028:	c2 f0       	add %d0,-1
8000102a:	06 13       	sh %d3,1
8000102c:	ff 05 06 00 	jge %d5,0,80001038 <__muldf3+0x1cc>
80001030:	8f 13 40 11 	or %d1,%d3,1
80001034:	0b 21 10 28 	mov %e2,%d1,%d2
80001038:	0b 72 00 41 	eq %d4,%d2,%d7
8000103c:	b7 04 01 40 	insert %d4,%d4,0,0,1
80001040:	77 65 80 50 	dextr %d5,%d5,%d6,1
80001044:	0b 72 a0 42 	or.lt.u %d4,%d2,%d7
80001048:	06 16       	sh %d6,1
8000104a:	df 04 ed ff 	jne %d4,0,80001024 <__muldf3+0x1b8>
8000104e:	59 a0 04 10 	st.w [%sp]68,%d0
80001052:	1d ff d0 ff 	j 80000ff2 <__muldf3+0x186>
80001056:	59 aa 18 00 	st.w [%sp]24,%d10
8000105a:	d9 a4 14 00 	lea %a4,[%sp]20
8000105e:	1d ff 26 ff 	j 80000eaa <__muldf3+0x3e>
80001062:	59 aa 2c 00 	st.w [%sp]44,%d10
80001066:	d9 a4 28 00 	lea %a4,[%sp]40
8000106a:	1d ff 20 ff 	j 80000eaa <__muldf3+0x3e>
8000106e:	77 32 00 4c 	dextr %d4,%d2,%d3,24
80001072:	a6 65       	or %d5,%d6
80001074:	8b 05 20 52 	ne %d5,%d5,0
80001078:	0f 45 e0 40 	andn %d4,%d5,%d4
8000107c:	df 04 c1 7f 	jeq %d4,0,80000ffe <__muldf3+0x192>
80001080:	8b 03 88 30 	addx %d3,%d3,128
80001084:	8b 02 a0 20 	addc %d2,%d2,0
80001088:	8f f3 cf 31 	andn %d3,%d3,255
8000108c:	1d ff b9 ff 	j 80000ffe <__muldf3+0x192>

80001090 <__gedf2>:
80001090:	20 38       	sub.a %sp,56
80001092:	d9 a5 10 00 	lea %a5,[%sp]16
80001096:	40 a4       	mov.aa %a4,%sp
80001098:	89 a4 40 09 	st.d [%sp],%e4
8000109c:	89 a6 48 09 	st.d [%sp]8,%e6
800010a0:	6d 00 79 01 	call 80001392 <__unpack_d>
800010a4:	d9 a5 24 00 	lea %a5,[%sp]36
800010a8:	d9 a4 08 00 	lea %a4,[%sp]8
800010ac:	6d 00 73 01 	call 80001392 <__unpack_d>
800010b0:	19 a3 10 00 	ld.w %d3,[%sp]16
800010b4:	82 f2       	mov %d2,-1
800010b6:	bf 23 0c 80 	jlt.u %d3,2,800010ce <__gedf2+0x3e>
800010ba:	19 a3 24 00 	ld.w %d3,[%sp]36
800010be:	bf 23 08 80 	jlt.u %d3,2,800010ce <__gedf2+0x3e>
800010c2:	d9 a5 24 00 	lea %a5,[%sp]36
800010c6:	d9 a4 10 00 	lea %a4,[%sp]16
800010ca:	6d 00 c3 01 	call 80001450 <__fpcmp_parts_d>
800010ce:	00 90       	ret 

800010d0 <__fixdfsi>:
800010d0:	20 20       	sub.a %sp,32
800010d2:	d9 a5 0c 00 	lea %a5,[%sp]12
800010d6:	d9 a4 04 00 	lea %a4,[%sp]4
800010da:	89 a4 44 09 	st.d [%sp]4,%e4
800010de:	6d 00 5a 01 	call 80001392 <__unpack_d>
800010e2:	19 a3 0c 00 	ld.w %d3,[%sp]12
800010e6:	82 02       	mov %d2,0
800010e8:	bf 33 25 80 	jlt.u %d3,3,80001132 <__fixdfsi+0x62>
800010ec:	df 43 29 00 	jeq %d3,4,8000113e <__fixdfsi+0x6e>
800010f0:	19 a3 14 00 	ld.w %d3,[%sp]20
800010f4:	bf 03 1f 00 	jlt %d3,0,80001132 <__fixdfsi+0x62>
800010f8:	8b f3 41 22 	lt %d2,%d3,31
800010fc:	19 a6 10 00 	ld.w %d6,[%sp]16
80001100:	df 02 1a 00 	jeq %d2,0,80001134 <__fixdfsi+0x64>
80001104:	8b c3 03 21 	rsub %d2,%d3,60
80001108:	19 a5 1c 00 	ld.w %d5,[%sp]28
8000110c:	19 a4 18 00 	ld.w %d4,[%sp]24
80001110:	8b 02 82 32 	ge %d3,%d2,32
80001114:	2b 54 50 43 	seln %d4,%d3,%d4,%d5
80001118:	ab 05 a0 53 	seln %d5,%d3,%d5,0
8000111c:	8f f2 01 31 	and %d3,%d2,31
80001120:	8b 03 02 21 	rsub %d2,%d3,32
80001124:	17 45 80 22 	dextr %d2,%d5,%d4,%d2
80001128:	2b 42 40 23 	sel %d2,%d3,%d2,%d4
8000112c:	df 06 03 00 	jeq %d6,0,80001132 <__fixdfsi+0x62>
80001130:	32 52       	rsub %d2
80001132:	00 90       	ret 
80001134:	82 f2       	mov %d2,-1
80001136:	06 f2       	sh %d2,-1
80001138:	ab 12 00 26 	cadd %d2,%d6,%d2,1
8000113c:	00 90       	ret 
8000113e:	19 a3 10 00 	ld.w %d3,[%sp]16
80001142:	82 f2       	mov %d2,-1
80001144:	06 f2       	sh %d2,-1
80001146:	ab 12 00 23 	cadd %d2,%d3,%d2,1
8000114a:	00 90       	ret 

8000114c <__make_dp>:
8000114c:	20 18       	sub.a %sp,24
8000114e:	09 a2 d8 09 	ld.da %a2,[%sp]24
80001152:	d9 a4 04 00 	lea %a4,[%sp]4
80001156:	59 a4 04 00 	st.w [%sp]4,%d4
8000115a:	59 a5 08 00 	st.w [%sp]8,%d5
8000115e:	59 a6 0c 00 	st.w [%sp]12,%d6
80001162:	89 a2 d0 09 	st.da [%sp]16,%a2
80001166:	6d 00 47 00 	call 800011f4 <__pack_d>
8000116a:	00 90       	ret 

8000116c <__unpack_f>:
8000116c:	54 42       	ld.w %d2,[%a4]
8000116e:	8f 12 1e 50 	sh %d5,%d2,-31
80001172:	37 02 e8 3b 	extr.u %d3,%d2,23,8
80001176:	b7 02 89 4b 	insert %d4,%d2,0,23,9
8000117a:	59 55 04 00 	st.w [%a5]4,%d5
8000117e:	df 03 16 80 	jne %d3,0,800011aa <__unpack_f+0x3e>
80001182:	df 04 25 00 	jeq %d4,0,800011cc <__unpack_f+0x60>
80001186:	82 33       	mov %d3,3
80001188:	8f 74 00 20 	sh %d2,%d4,7
8000118c:	7b 00 00 54 	movh %d5,16384
80001190:	74 53       	st.w [%a5],%d3
80001192:	3b 10 f8 3f 	mov %d3,-127
80001196:	06 12       	sh %d2,1
80001198:	02 34       	mov %d4,%d3
8000119a:	c2 f3       	add %d3,-1
8000119c:	3f 52 fd ff 	jlt.u %d2,%d5,80001196 <__unpack_f+0x2a>
800011a0:	59 54 08 00 	st.w [%a5]8,%d4
800011a4:	59 52 0c 00 	st.w [%a5]12,%d2
800011a8:	00 90       	ret 
800011aa:	8b f3 2f 52 	ne %d5,%d3,255
800011ae:	df 05 12 00 	jeq %d5,0,800011d2 <__unpack_f+0x66>
800011b2:	82 32       	mov %d2,3
800011b4:	1b 13 f8 3f 	addi %d3,%d3,-127
800011b8:	74 52       	st.w [%a5],%d2
800011ba:	8f 74 00 20 	sh %d2,%d4,7
800011be:	b7 f2 01 2f 	insert %d2,%d2,15,30,1
800011c2:	59 53 08 00 	st.w [%a5]8,%d3
800011c6:	59 52 0c 00 	st.w [%a5]12,%d2
800011ca:	00 90       	ret 
800011cc:	82 22       	mov %d2,2
800011ce:	74 52       	st.w [%a5],%d2
800011d0:	00 90       	ret 
800011d2:	df 04 05 80 	jne %d4,0,800011dc <__unpack_f+0x70>
800011d6:	82 42       	mov %d2,4
800011d8:	74 52       	st.w [%a5],%d2
800011da:	00 90       	ret 
800011dc:	37 02 61 3b 	extr.u %d3,%d2,22,1
800011e0:	06 72       	sh %d2,7
800011e2:	74 53       	st.w [%a5],%d3
800011e4:	7b 00 00 32 	movh %d3,8192
800011e8:	1b 03 f8 3f 	addi %d3,%d3,-128
800011ec:	26 32       	and %d2,%d3
800011ee:	59 52 0c 00 	st.w [%a5]12,%d2
800011f2:	00 90       	ret 

800011f4 <__pack_d>:
800011f4:	54 44       	ld.w %d4,[%a4]
800011f6:	19 43 0c 00 	ld.w %d3,[%a4]12
800011fa:	19 42 10 00 	ld.w %d2,[%a4]16
800011fe:	19 41 04 00 	ld.w %d1,[%a4]4
80001202:	bf 24 56 80 	jlt.u %d4,2,800012ae <__pack_d+0xba>
80001206:	7b 00 ff 57 	movh %d5,32752
8000120a:	d2 06       	mov %e6,0
8000120c:	df 44 0b 00 	jeq %d4,4,80001222 <__pack_d+0x2e>
80001210:	0f 23 a0 50 	or %d5,%d3,%d2
80001214:	8b 05 00 02 	eq %d0,%d5,0
80001218:	8b 24 e0 04 	or.eq %d0,%d4,2
8000121c:	82 05       	mov %d5,0
8000121e:	df 00 0c 00 	jeq %d0,0,80001236 <__pack_d+0x42>
80001222:	0b 10 00 28 	mov %e2,%d1
80001226:	a6 75       	or %d5,%d7
80001228:	8f f2 01 20 	sh %d2,%d2,31
8000122c:	0f 25 a0 40 	or %d4,%d5,%d2
80001230:	02 43       	mov %d3,%d4
80001232:	02 62       	mov %d2,%d6
80001234:	00 90       	ret 
80001236:	19 44 08 00 	ld.w %d4,[%a4]8
8000123a:	3b 20 c0 0f 	mov %d0,-1022
8000123e:	3f 04 41 00 	jlt %d4,%d0,800012c0 <__pack_d+0xcc>
80001242:	3b 00 40 00 	mov %d0,1024
80001246:	7b 00 ff 57 	movh %d5,32752
8000124a:	7f 04 ec 7f 	jge %d4,%d0,80001222 <__pack_d+0x2e>
8000124e:	8f f3 0f 51 	and %d5,%d3,255
80001252:	8b 05 28 52 	ne %d5,%d5,128
80001256:	df 05 1b 00 	jeq %d5,0,8000128c <__pack_d+0x98>
8000125a:	8b f3 87 30 	addx %d3,%d3,127
8000125e:	8b 02 a0 20 	addc %d2,%d2,0
80001262:	7b 00 00 52 	movh %d5,8192
80001266:	0b 25 30 61 	lt.u %d6,%d5,%d2
8000126a:	0b 25 70 62 	or.eq %d6,%d5,%d2
8000126e:	df 06 19 80 	jne %d6,0,800012a0 <__pack_d+0xac>
80001272:	1b f4 3f 40 	addi %d4,%d4,1023
80001276:	0b 40 00 48 	mov %e4,%d4
8000127a:	77 32 00 6c 	dextr %d6,%d2,%d3,24
8000127e:	06 82       	sh %d2,-8
80001280:	b7 02 0c 7a 	insert %d7,%d2,0,20,12
80001284:	8f 44 01 50 	sh %d5,%d4,20
80001288:	1d ff cd ff 	j 80001222 <__pack_d+0x2e>
8000128c:	8f 03 10 51 	and %d5,%d3,256
80001290:	df 05 e9 7f 	jeq %d5,0,80001262 <__pack_d+0x6e>
80001294:	8b 03 88 30 	addx %d3,%d3,128
80001298:	8b 02 a0 20 	addc %d2,%d2,0
8000129c:	1d ff e3 ff 	j 80001262 <__pack_d+0x6e>
800012a0:	77 32 80 3f 	dextr %d3,%d2,%d3,31
800012a4:	1b 04 40 40 	addi %d4,%d4,1024
800012a8:	06 f2       	sh %d2,-1
800012aa:	1d ff e6 ff 	j 80001276 <__pack_d+0x82>
800012ae:	77 32 00 6c 	dextr %d6,%d2,%d3,24
800012b2:	06 82       	sh %d2,-8
800012b4:	b7 12 8d 79 	insert %d7,%d2,1,19,13
800012b8:	7b 00 ff 57 	movh %d5,32752
800012bc:	1d ff b3 ff 	j 80001222 <__pack_d+0x2e>
800012c0:	0b 40 80 40 	sub %d4,%d0,%d4
800012c4:	8b 94 83 02 	ge %d0,%d4,57
800012c8:	df 00 ad ff 	jne %d0,0,80001222 <__pack_d+0x2e>
800012cc:	8b 04 82 52 	ge %d5,%d4,32
800012d0:	2b 23 50 05 	seln %d0,%d5,%d3,%d2
800012d4:	ab 02 a0 75 	seln %d7,%d5,%d2,0
800012d8:	8f f4 01 51 	and %d5,%d4,31
800012dc:	8b 05 02 61 	rsub %d6,%d5,32
800012e0:	17 07 80 66 	dextr %d6,%d7,%d0,%d6
800012e4:	2b 06 40 65 	sel %d6,%d5,%d6,%d0
800012e8:	8b 04 82 82 	ge %d8,%d4,32
800012ec:	32 55       	rsub %d5
800012ee:	02 60       	mov %d0,%d6
800012f0:	8f f4 01 41 	and %d4,%d4,31
800012f4:	82 f6       	mov %d6,-1
800012f6:	0f 57 00 70 	sh %d7,%d7,%d5
800012fa:	17 66 80 54 	dextr %d5,%d6,%d6,%d4
800012fe:	0f 46 00 40 	sh %d4,%d6,%d4
80001302:	2b 45 50 58 	seln %d5,%d8,%d5,%d4
80001306:	ab 04 a0 48 	seln %d4,%d8,%d4,0
8000130a:	0f 43 e0 30 	andn %d3,%d3,%d4
8000130e:	0f 52 e0 20 	andn %d2,%d2,%d5
80001312:	a6 32       	or %d2,%d3
80001314:	02 03       	mov %d3,%d0
80001316:	8b 02 00 35 	or.ne %d3,%d2,0
8000131a:	8f f3 0f 51 	and %d5,%d3,255
8000131e:	82 12       	mov %d2,1
80001320:	8b 05 08 24 	and.eq %d2,%d5,128
80001324:	02 74       	mov %d4,%d7
80001326:	df 02 14 80 	jne %d2,0,8000134e <__pack_d+0x15a>
8000132a:	8b f3 87 30 	addx %d3,%d3,127
8000132e:	8b 07 a0 20 	addc %d2,%d7,0
80001332:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80001336:	7b 00 00 31 	movh %d3,4096
8000133a:	8f 82 1f 70 	sh %d7,%d2,-8
8000133e:	0b 32 50 21 	ge.u %d2,%d2,%d3
80001342:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
80001346:	8f 42 01 50 	sh %d5,%d2,20
8000134a:	1d ff 6c ff 	j 80001222 <__pack_d+0x2e>
8000134e:	8b 03 88 60 	addx %d6,%d3,128
80001352:	8b 07 a0 20 	addc %d2,%d7,0
80001356:	7b 00 00 a1 	movh %d10,4096
8000135a:	8f 82 1f 70 	sh %d7,%d2,-8
8000135e:	77 62 00 6c 	dextr %d6,%d2,%d6,24
80001362:	0b a2 50 21 	ge.u %d2,%d2,%d10
80001366:	53 12 40 80 	mul.u %e8,%d2,1
8000136a:	8f 03 10 01 	and %d0,%d3,256
8000136e:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
80001372:	8f 48 01 50 	sh %d5,%d8,20
80001376:	df 00 56 ff 	jne %d0,0,80001222 <__pack_d+0x2e>
8000137a:	8f 84 1f 70 	sh %d7,%d4,-8
8000137e:	0b a4 50 21 	ge.u %d2,%d4,%d10
80001382:	77 34 00 6c 	dextr %d6,%d4,%d3,24
80001386:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
8000138a:	8f 42 01 50 	sh %d5,%d2,20
8000138e:	1d ff 4a ff 	j 80001222 <__pack_d+0x2e>

80001392 <__unpack_d>:
80001392:	09 48 40 09 	ld.d %e8,[%a4]
80001396:	3b f0 7f 00 	mov %d0,2047
8000139a:	8f 19 1e 70 	sh %d7,%d9,-31
8000139e:	37 09 6b 5a 	extr.u %d5,%d9,20,11
800013a2:	b7 09 0c 6a 	insert %d6,%d9,0,20,12
800013a6:	59 57 04 00 	st.w [%a5]4,%d7
800013aa:	df 05 26 80 	jne %d5,0,800013f6 <__unpack_d+0x64>
800013ae:	8b 08 20 22 	ne %d2,%d8,0
800013b2:	8b 06 00 25 	or.ne %d2,%d6,0
800013b6:	df 02 33 00 	jeq %d2,0,8000141c <__unpack_d+0x8a>
800013ba:	82 32       	mov %d2,3
800013bc:	77 86 00 34 	dextr %d3,%d6,%d8,8
800013c0:	8f 88 00 40 	sh %d4,%d8,8
800013c4:	74 52       	st.w [%a5],%d2
800013c6:	3b 10 c0 5f 	mov %d5,-1023
800013ca:	7b 00 00 61 	movh %d6,4096
800013ce:	77 43 80 30 	dextr %d3,%d3,%d4,1
800013d2:	02 57       	mov %d7,%d5
800013d4:	0b 63 00 21 	eq %d2,%d3,%d6
800013d8:	b7 02 01 20 	insert %d2,%d2,0,0,1
800013dc:	06 14       	sh %d4,1
800013de:	0b 63 a0 22 	or.lt.u %d2,%d3,%d6
800013e2:	c2 f5       	add %d5,-1
800013e4:	df 02 f5 ff 	jne %d2,0,800013ce <__unpack_d+0x3c>
800013e8:	59 57 08 00 	st.w [%a5]8,%d7
800013ec:	59 54 0c 00 	st.w [%a5]12,%d4
800013f0:	59 53 10 00 	st.w [%a5]16,%d3
800013f4:	00 90       	ret 
800013f6:	5f 05 16 00 	jeq %d5,%d0,80001422 <__unpack_d+0x90>
800013fa:	82 32       	mov %d2,3
800013fc:	1b 15 c0 5f 	addi %d5,%d5,-1023
80001400:	8f 88 00 40 	sh %d4,%d8,8
80001404:	74 52       	st.w [%a5],%d2
80001406:	77 86 00 24 	dextr %d2,%d6,%d8,8
8000140a:	59 55 08 00 	st.w [%a5]8,%d5
8000140e:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
80001412:	59 54 0c 00 	st.w [%a5]12,%d4
80001416:	59 52 10 00 	st.w [%a5]16,%d2
8000141a:	00 90       	ret 
8000141c:	82 22       	mov %d2,2
8000141e:	74 52       	st.w [%a5],%d2
80001420:	00 90       	ret 
80001422:	8b 08 20 52 	ne %d5,%d8,0
80001426:	8b 06 00 55 	or.ne %d5,%d6,0
8000142a:	df 05 05 80 	jne %d5,0,80001434 <__unpack_d+0xa2>
8000142e:	82 42       	mov %d2,4
80001430:	74 52       	st.w [%a5],%d2
80001432:	00 90       	ret 
80001434:	77 89 00 34 	dextr %d3,%d9,%d8,8
80001438:	37 09 e1 49 	extr.u %d4,%d9,19,1
8000143c:	b7 03 85 3d 	insert %d3,%d3,0,27,5
80001440:	8f 88 00 20 	sh %d2,%d8,8
80001444:	74 54       	st.w [%a5],%d4
80001446:	59 52 0c 00 	st.w [%a5]12,%d2
8000144a:	59 53 10 00 	st.w [%a5]16,%d3
8000144e:	00 90       	ret 

80001450 <__fpcmp_parts_d>:
80001450:	54 43       	ld.w %d3,[%a4]
80001452:	82 12       	mov %d2,1
80001454:	bf 23 45 80 	jlt.u %d3,2,800014de <__fpcmp_parts_d+0x8e>
80001458:	54 54       	ld.w %d4,[%a5]
8000145a:	bf 24 42 80 	jlt.u %d4,2,800014de <__fpcmp_parts_d+0x8e>
8000145e:	8b 44 00 52 	eq %d5,%d4,4
80001462:	8b 43 00 54 	and.eq %d5,%d3,4
80001466:	df 05 50 80 	jne %d5,0,80001506 <__fpcmp_parts_d+0xb6>
8000146a:	df 43 45 00 	jeq %d3,4,800014f4 <__fpcmp_parts_d+0xa4>
8000146e:	df 44 3d 00 	jeq %d4,4,800014e8 <__fpcmp_parts_d+0x98>
80001472:	8b 24 00 52 	eq %d5,%d4,2
80001476:	8b 23 00 54 	and.eq %d5,%d3,2
8000147a:	82 02       	mov %d2,0
8000147c:	df 05 31 80 	jne %d5,0,800014de <__fpcmp_parts_d+0x8e>
80001480:	df 23 34 00 	jeq %d3,2,800014e8 <__fpcmp_parts_d+0x98>
80001484:	19 42 04 00 	ld.w %d2,[%a4]4
80001488:	df 24 2c 00 	jeq %d4,2,800014e0 <__fpcmp_parts_d+0x90>
8000148c:	19 53 04 00 	ld.w %d3,[%a5]4
80001490:	5f 23 28 80 	jne %d3,%d2,800014e0 <__fpcmp_parts_d+0x90>
80001494:	19 44 08 00 	ld.w %d4,[%a4]8
80001498:	19 53 08 00 	ld.w %d3,[%a5]8
8000149c:	3f 43 22 00 	jlt %d3,%d4,800014e0 <__fpcmp_parts_d+0x90>
800014a0:	3f 34 2f 00 	jlt %d4,%d3,800014fe <__fpcmp_parts_d+0xae>
800014a4:	19 45 10 00 	ld.w %d5,[%a4]16
800014a8:	19 56 10 00 	ld.w %d6,[%a5]16
800014ac:	19 40 0c 00 	ld.w %d0,[%a4]12
800014b0:	0b 65 00 41 	eq %d4,%d5,%d6
800014b4:	19 57 0c 00 	ld.w %d7,[%a5]12
800014b8:	02 43       	mov %d3,%d4
800014ba:	0b 07 50 32 	and.ge.u %d3,%d7,%d0
800014be:	0b 70 50 42 	and.ge.u %d4,%d0,%d7
800014c2:	0b 65 a0 32 	or.lt.u %d3,%d5,%d6
800014c6:	0b 56 a0 42 	or.lt.u %d4,%d6,%d5
800014ca:	82 f5       	mov %d5,-1
800014cc:	ab 15 a0 52 	seln %d5,%d2,%d5,1
800014d0:	82 16       	mov %d6,1
800014d2:	ab f6 bf 22 	seln %d2,%d2,%d6,-1
800014d6:	ab 05 a0 44 	seln %d4,%d4,%d5,0
800014da:	2b 24 40 23 	sel %d2,%d3,%d4,%d2
800014de:	00 90       	ret 
800014e0:	82 13       	mov %d3,1
800014e2:	ab f3 bf 22 	seln %d2,%d2,%d3,-1
800014e6:	00 90       	ret 
800014e8:	19 53 04 00 	ld.w %d3,[%a5]4
800014ec:	82 f2       	mov %d2,-1
800014ee:	ab 12 a0 23 	seln %d2,%d3,%d2,1
800014f2:	00 90       	ret 
800014f4:	19 43 04 00 	ld.w %d3,[%a4]4
800014f8:	ab f2 bf 23 	seln %d2,%d3,%d2,-1
800014fc:	00 90       	ret 
800014fe:	82 f3       	mov %d3,-1
80001500:	ab 13 a0 22 	seln %d2,%d2,%d3,1
80001504:	00 90       	ret 
80001506:	19 53 04 00 	ld.w %d3,[%a5]4
8000150a:	19 42 04 00 	ld.w %d2,[%a4]4
8000150e:	0b 23 80 20 	sub %d2,%d3,%d2
80001512:	00 90       	ret 

80001514 <__do_global_ctors_aux>:
80001514:	91 00 00 28 	movh.a %a2,32768
80001518:	d9 22 38 44 	lea %a2,[%a2]16696 <80004138 <__CTOR_END__>>
8000151c:	19 22 fc ff 	ld.w %d2,[%a2]-4 <7ffffffc <__CSA0_END+0xffc43fc>>
80001520:	d9 23 fc ff 	lea %a3,[%a2]-4 <7ffffffc <__CSA0_END+0xffc43fc>>
80001524:	df f2 0a 00 	jeq %d2,-1,80001538 <__do_global_ctors_aux+0x24>
80001528:	40 3c       	mov.aa %a12,%a3
8000152a:	60 22       	mov.a %a2,%d2
8000152c:	b0 cc       	add.a %a12,-4
8000152e:	2d 02 00 00 	calli %a2
80001532:	54 c2       	ld.w %d2,[%a12]
80001534:	df f2 fb ff 	jne %d2,-1,8000152a <__do_global_ctors_aux+0x16>
80001538:	00 90       	ret 

8000153a <call___do_global_ctors_aux>:
8000153a:	00 90       	ret 

8000153c <IfxScuCcu_calRGainParameters>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxScuCcu_calRGainParameters(IfxScuCcu_ModulationAmplitude modamp, IfxScuCcu_RGain_Values *RGain_P)
{
8000153c:	40 ae       	mov.aa %a14,%sp
8000153e:	20 28       	sub.a %sp,40
80001540:	59 e4 dc ff 	st.w [%a14]-36,%d4
80001544:	b5 e4 d8 ff 	st.a [%a14]-40,%a4
    float32  mod_amp       = IfxScuCcu_MA_percent[modamp];
80001548:	91 00 00 28 	movh.a %a2,32768
8000154c:	d9 22 34 80 	lea %a2,[%a2]564 <80000234 <IfxScuCcu_MA_percent>>
80001550:	19 e2 dc ff 	ld.w %d2,[%a14]-36 <80000234 <IfxScuCcu_MA_percent>>
80001554:	06 22       	sh %d2,2
80001556:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
8000155a:	54 22       	ld.w %d2,[%a2]
8000155c:	59 e2 fc ff 	st.w [%a14]-4,%d2
    float32 *RGainNom_Temp = &(RGain_P->RGainNom);
80001560:	19 e2 d8 ff 	ld.w %d2,[%a14]-40
80001564:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    uint16  *RGain_Temp    = &(RGain_P->RGainHex);
80001568:	19 e2 d8 ff 	ld.w %d2,[%a14]-40
8000156c:	c2 42       	add %d2,4
8000156e:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    Ifx_SCU *scu           = &MODULE_SCU;
80001572:	7b 30 00 2f 	movh %d2,61443
80001576:	1b 02 00 26 	addi %d2,%d2,24576
8000157a:	59 e2 f0 ff 	st.w [%a14]-16,%d2

IFX_INLINE float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
8000157e:	91 30 00 2f 	movh.a %a2,61443
80001582:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
80001586:	54 22       	ld.w %d2,[%a2]
80001588:	37 02 62 2f 	extr.u %d2,%d2,30,2
8000158c:	8f f2 0f 21 	and %d2,%d2,255
80001590:	df 02 0a 80 	jne %d2,0,800015a4 <IfxScuCcu_calRGainParameters+0x68>
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80001594:	7b f0 cb 24 	movh %d2,19647
80001598:	1b 02 c2 2b 	addi %d2,%d2,-17376
8000159c:	59 e2 e4 ff 	st.w [%a14]-28,%d2
800015a0:	1d 00 2b 00 	j 800015f6 <IfxScuCcu_calRGainParameters+0xba>
    }
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
800015a4:	91 30 00 2f 	movh.a %a2,61443
800015a8:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
800015ac:	54 22       	ld.w %d2,[%a2]
800015ae:	37 02 62 2f 	extr.u %d2,%d2,30,2
800015b2:	8f f2 0f 21 	and %d2,%d2,255
800015b6:	df 12 0a 80 	jne %d2,1,800015ca <IfxScuCcu_calRGainParameters+0x8e>
    {
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
800015ba:	7b 90 b9 24 	movh %d2,19353
800015be:	1b 02 68 29 	addi %d2,%d2,-27008
800015c2:	59 e2 e4 ff 	st.w [%a14]-28,%d2
800015c6:	1d 00 18 00 	j 800015f6 <IfxScuCcu_calRGainParameters+0xba>
    }
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
800015ca:	91 30 00 2f 	movh.a %a2,61443
800015ce:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
800015d2:	54 22       	ld.w %d2,[%a2]
800015d4:	37 02 62 2f 	extr.u %d2,%d2,30,2
800015d8:	8f f2 0f 21 	and %d2,%d2,255
800015dc:	df 22 0a 80 	jne %d2,2,800015f0 <IfxScuCcu_calRGainParameters+0xb4>
    {
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
800015e0:	7b 90 b9 24 	movh %d2,19353
800015e4:	1b 02 68 29 	addi %d2,%d2,-27008
800015e8:	59 e2 e4 ff 	st.w [%a14]-28,%d2
800015ec:	1d 00 05 00 	j 800015f6 <IfxScuCcu_calRGainParameters+0xba>
    }
    else
    {
        /* Reserved values, this */
        freq = 0.0f;
800015f0:	82 02       	mov %d2,0
800015f2:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    }

    return freq;
800015f6:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
    float32  Fosc_Hz       = IfxScuCcu_getOscFrequency();
800015fa:	59 e2 ec ff 	st.w [%a14]-20,%d2
    float32  Fdco_hz       = (Fosc_Hz * (scu->SYSPLLCON0.B.NDIV + 1)) / (scu->SYSPLLCON0.B.PDIV + 1);
800015fe:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80001602:	d9 22 18 00 	lea %a2,[%a2]24
80001606:	54 22       	ld.w %d2,[%a2]
80001608:	37 02 e7 24 	extr.u %d2,%d2,9,7
8000160c:	8f f2 0f 21 	and %d2,%d2,255
80001610:	c2 12       	add %d2,1
80001612:	4b 02 41 31 	itof %d3,%d2
80001616:	19 e2 ec ff 	ld.w %d2,[%a14]-20
8000161a:	4b 23 41 30 	mul.f %d3,%d3,%d2
8000161e:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80001622:	d9 22 18 00 	lea %a2,[%a2]24
80001626:	54 22       	ld.w %d2,[%a2]
80001628:	37 02 63 2c 	extr.u %d2,%d2,24,3
8000162c:	8f f2 0f 21 	and %d2,%d2,255
80001630:	c2 12       	add %d2,1
80001632:	4b 02 41 21 	itof %d2,%d2
80001636:	4b 23 51 20 	div.f %d2,%d3,%d2
8000163a:	59 e2 e8 ff 	st.w [%a14]-24,%d2

    *RGainNom_Temp = IFXSCUCCU_GET_RGAIN_NOM(mod_amp, Fdco_hz);
8000163e:	19 e2 fc ff 	ld.w %d2,[%a14]-4
80001642:	7b 80 2c 34 	movh %d3,17096
80001646:	4b 32 51 20 	div.f %d2,%d2,%d3
8000164a:	6b 02 21 32 	add.f %d3,%d2,%d2
8000164e:	19 e2 e8 ff 	ld.w %d2,[%a14]-24
80001652:	7b c0 a5 44 	movh %d4,19036
80001656:	1b 04 a0 4b 	addi %d4,%d4,-17920
8000165a:	4b 42 51 20 	div.f %d2,%d2,%d4
8000165e:	4b 23 41 20 	mul.f %d2,%d3,%d2
80001662:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80001666:	74 22       	st.w [%a2],%d2
    *RGain_Temp    = IFXSCUCCU_GET_RGAIN_HEX(*RGainNom_Temp);
80001668:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
8000166c:	54 22       	ld.w %d2,[%a2]
8000166e:	7b 00 20 34 	movh %d3,16896
80001672:	4b 32 41 20 	mul.f %d2,%d2,%d3
80001676:	7b 00 f0 33 	movh %d3,16128
8000167a:	6b 03 21 22 	add.f %d2,%d2,%d3
8000167e:	4b 02 71 21 	ftouz %d2,%d2
80001682:	37 02 70 20 	extr.u %d2,%d2,0,16
80001686:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
8000168a:	b4 22       	st.h [%a2],%d2
}
8000168c:	00 00       	nop 
8000168e:	00 90       	ret 

80001690 <IfxScuCcu_getPerPllFrequency1>:
    return mscFreq;
}


float32 IfxScuCcu_getPerPllFrequency1(void)
{
80001690:	40 ae       	mov.aa %a14,%sp
80001692:	20 10       	sub.a %sp,16
    Ifx_SCU *scu = &MODULE_SCU;
80001694:	7b 30 00 2f 	movh %d2,61443
80001698:	1b 02 00 26 	addi %d2,%d2,24576
8000169c:	59 e2 fc ff 	st.w [%a14]-4,%d2
    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
800016a0:	91 30 00 2f 	movh.a %a2,61443
800016a4:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
800016a8:	54 22       	ld.w %d2,[%a2]
800016aa:	37 02 62 2f 	extr.u %d2,%d2,30,2
800016ae:	8f f2 0f 21 	and %d2,%d2,255
800016b2:	df 02 0a 80 	jne %d2,0,800016c6 <IfxScuCcu_getPerPllFrequency1+0x36>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
800016b6:	7b f0 cb 24 	movh %d2,19647
800016ba:	1b 02 c2 2b 	addi %d2,%d2,-17376
800016be:	59 e2 f0 ff 	st.w [%a14]-16,%d2
800016c2:	1d 00 2b 00 	j 80001718 <IfxScuCcu_getPerPllFrequency1+0x88>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
800016c6:	91 30 00 2f 	movh.a %a2,61443
800016ca:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
800016ce:	54 22       	ld.w %d2,[%a2]
800016d0:	37 02 62 2f 	extr.u %d2,%d2,30,2
800016d4:	8f f2 0f 21 	and %d2,%d2,255
800016d8:	df 12 0a 80 	jne %d2,1,800016ec <IfxScuCcu_getPerPllFrequency1+0x5c>
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
800016dc:	7b 90 b9 24 	movh %d2,19353
800016e0:	1b 02 68 29 	addi %d2,%d2,-27008
800016e4:	59 e2 f0 ff 	st.w [%a14]-16,%d2
800016e8:	1d 00 18 00 	j 80001718 <IfxScuCcu_getPerPllFrequency1+0x88>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
800016ec:	91 30 00 2f 	movh.a %a2,61443
800016f0:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
800016f4:	54 22       	ld.w %d2,[%a2]
800016f6:	37 02 62 2f 	extr.u %d2,%d2,30,2
800016fa:	8f f2 0f 21 	and %d2,%d2,255
800016fe:	df 22 0a 80 	jne %d2,2,80001712 <IfxScuCcu_getPerPllFrequency1+0x82>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
80001702:	7b 90 b9 24 	movh %d2,19353
80001706:	1b 02 68 29 	addi %d2,%d2,-27008
8000170a:	59 e2 f0 ff 	st.w [%a14]-16,%d2
8000170e:	1d 00 05 00 	j 80001718 <IfxScuCcu_getPerPllFrequency1+0x88>
        freq = 0.0f;
80001712:	82 02       	mov %d2,0
80001714:	59 e2 f0 ff 	st.w [%a14]-16,%d2
    return freq;
80001718:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
    float32  pllFrequency1;
    float32  oscFreq;
    oscFreq       = IfxScuCcu_getOscFrequency();
8000171c:	59 e2 f8 ff 	st.w [%a14]-8,%d2

    pllFrequency1 = (oscFreq * (scu->PERPLLCON0.B.NDIV + 1)) / ((scu->PERPLLCON0.B.PDIV + 1) * (scu->PERPLLCON1.B.K2DIV + 1));
80001720:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80001724:	d9 22 28 00 	lea %a2,[%a2]40
80001728:	54 22       	ld.w %d2,[%a2]
8000172a:	37 02 e7 24 	extr.u %d2,%d2,9,7
8000172e:	8f f2 0f 21 	and %d2,%d2,255
80001732:	c2 12       	add %d2,1
80001734:	4b 02 41 31 	itof %d3,%d2
80001738:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8000173c:	4b 23 41 30 	mul.f %d3,%d3,%d2
80001740:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80001744:	d9 22 28 00 	lea %a2,[%a2]40
80001748:	54 22       	ld.w %d2,[%a2]
8000174a:	37 02 63 2c 	extr.u %d2,%d2,24,3
8000174e:	8f f2 0f 21 	and %d2,%d2,255
80001752:	1b 12 00 40 	addi %d4,%d2,1
80001756:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8000175a:	d9 22 2c 00 	lea %a2,[%a2]44
8000175e:	54 22       	ld.w %d2,[%a2]
80001760:	37 02 63 20 	extr.u %d2,%d2,0,3
80001764:	8f f2 0f 21 	and %d2,%d2,255
80001768:	c2 12       	add %d2,1
8000176a:	e2 42       	mul %d2,%d4
8000176c:	4b 02 41 21 	itof %d2,%d2
80001770:	4b 23 51 20 	div.f %d2,%d3,%d2
80001774:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    return pllFrequency1;
80001778:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
}
8000177c:	00 90       	ret 

8000177e <IfxScuCcu_getPerPllFrequency2>:


float32 IfxScuCcu_getPerPllFrequency2(void)
{
8000177e:	40 ae       	mov.aa %a14,%sp
80001780:	20 10       	sub.a %sp,16
    Ifx_SCU *scu = &MODULE_SCU;
80001782:	7b 30 00 2f 	movh %d2,61443
80001786:	1b 02 00 26 	addi %d2,%d2,24576
8000178a:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
8000178e:	91 30 00 2f 	movh.a %a2,61443
80001792:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
80001796:	54 22       	ld.w %d2,[%a2]
80001798:	37 02 62 2f 	extr.u %d2,%d2,30,2
8000179c:	8f f2 0f 21 	and %d2,%d2,255
800017a0:	df 02 0a 80 	jne %d2,0,800017b4 <IfxScuCcu_getPerPllFrequency2+0x36>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
800017a4:	7b f0 cb 24 	movh %d2,19647
800017a8:	1b 02 c2 2b 	addi %d2,%d2,-17376
800017ac:	59 e2 f0 ff 	st.w [%a14]-16,%d2
800017b0:	1d 00 2b 00 	j 80001806 <IfxScuCcu_getPerPllFrequency2+0x88>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
800017b4:	91 30 00 2f 	movh.a %a2,61443
800017b8:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
800017bc:	54 22       	ld.w %d2,[%a2]
800017be:	37 02 62 2f 	extr.u %d2,%d2,30,2
800017c2:	8f f2 0f 21 	and %d2,%d2,255
800017c6:	df 12 0a 80 	jne %d2,1,800017da <IfxScuCcu_getPerPllFrequency2+0x5c>
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
800017ca:	7b 90 b9 24 	movh %d2,19353
800017ce:	1b 02 68 29 	addi %d2,%d2,-27008
800017d2:	59 e2 f0 ff 	st.w [%a14]-16,%d2
800017d6:	1d 00 18 00 	j 80001806 <IfxScuCcu_getPerPllFrequency2+0x88>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
800017da:	91 30 00 2f 	movh.a %a2,61443
800017de:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
800017e2:	54 22       	ld.w %d2,[%a2]
800017e4:	37 02 62 2f 	extr.u %d2,%d2,30,2
800017e8:	8f f2 0f 21 	and %d2,%d2,255
800017ec:	df 22 0a 80 	jne %d2,2,80001800 <IfxScuCcu_getPerPllFrequency2+0x82>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
800017f0:	7b 90 b9 24 	movh %d2,19353
800017f4:	1b 02 68 29 	addi %d2,%d2,-27008
800017f8:	59 e2 f0 ff 	st.w [%a14]-16,%d2
800017fc:	1d 00 05 00 	j 80001806 <IfxScuCcu_getPerPllFrequency2+0x88>
        freq = 0.0f;
80001800:	82 02       	mov %d2,0
80001802:	59 e2 f0 ff 	st.w [%a14]-16,%d2
    return freq;
80001806:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
    float32  pllFrequency2;
    float32  oscFreq;
    oscFreq = IfxScuCcu_getOscFrequency();
8000180a:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    if (!(scu->PERPLLCON0.B.DIVBY))
8000180e:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80001812:	d9 22 28 00 	lea %a2,[%a2]40
80001816:	54 22       	ld.w %d2,[%a2]
80001818:	37 02 61 20 	extr.u %d2,%d2,0,1
8000181c:	8f f2 0f 21 	and %d2,%d2,255
80001820:	df 02 36 80 	jne %d2,0,8000188c <IfxScuCcu_getPerPllFrequency2+0x10e>
    {
        pllFrequency2 = (oscFreq * (scu->PERPLLCON0.B.NDIV + 1)) / ((scu->PERPLLCON0.B.PDIV + 1) * (scu->PERPLLCON1.B.K3DIV + 1) * 1.6f);
80001824:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80001828:	d9 22 28 00 	lea %a2,[%a2]40
8000182c:	54 22       	ld.w %d2,[%a2]
8000182e:	37 02 e7 24 	extr.u %d2,%d2,9,7
80001832:	8f f2 0f 21 	and %d2,%d2,255
80001836:	c2 12       	add %d2,1
80001838:	4b 02 41 31 	itof %d3,%d2
8000183c:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
80001840:	4b 23 41 30 	mul.f %d3,%d3,%d2
80001844:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80001848:	d9 22 28 00 	lea %a2,[%a2]40
8000184c:	54 22       	ld.w %d2,[%a2]
8000184e:	37 02 63 2c 	extr.u %d2,%d2,24,3
80001852:	8f f2 0f 21 	and %d2,%d2,255
80001856:	1b 12 00 40 	addi %d4,%d2,1
8000185a:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
8000185e:	d9 22 2c 00 	lea %a2,[%a2]44
80001862:	54 22       	ld.w %d2,[%a2]
80001864:	37 02 63 24 	extr.u %d2,%d2,8,3
80001868:	8f f2 0f 21 	and %d2,%d2,255
8000186c:	c2 12       	add %d2,1
8000186e:	e2 42       	mul %d2,%d4
80001870:	4b 02 41 21 	itof %d2,%d2
80001874:	7b d0 fc 43 	movh %d4,16333
80001878:	1b d4 cc 4c 	addi %d4,%d4,-13107
8000187c:	4b 42 41 20 	mul.f %d2,%d2,%d4
80001880:	4b 23 51 20 	div.f %d2,%d3,%d2
80001884:	59 e2 fc ff 	st.w [%a14]-4,%d2
80001888:	1d 00 2f 00 	j 800018e6 <IfxScuCcu_getPerPllFrequency2+0x168>
    }
    else
    {
        pllFrequency2 = (oscFreq * (scu->PERPLLCON0.B.NDIV + 1)) / ((scu->PERPLLCON0.B.PDIV + 1) * (scu->PERPLLCON1.B.K3DIV + 1) * 2);
8000188c:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80001890:	d9 22 28 00 	lea %a2,[%a2]40
80001894:	54 22       	ld.w %d2,[%a2]
80001896:	37 02 e7 24 	extr.u %d2,%d2,9,7
8000189a:	8f f2 0f 21 	and %d2,%d2,255
8000189e:	c2 12       	add %d2,1
800018a0:	4b 02 41 31 	itof %d3,%d2
800018a4:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
800018a8:	4b 23 41 30 	mul.f %d3,%d3,%d2
800018ac:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
800018b0:	d9 22 28 00 	lea %a2,[%a2]40
800018b4:	54 22       	ld.w %d2,[%a2]
800018b6:	37 02 63 2c 	extr.u %d2,%d2,24,3
800018ba:	8f f2 0f 21 	and %d2,%d2,255
800018be:	1b 12 00 40 	addi %d4,%d2,1
800018c2:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
800018c6:	d9 22 2c 00 	lea %a2,[%a2]44
800018ca:	54 22       	ld.w %d2,[%a2]
800018cc:	37 02 63 24 	extr.u %d2,%d2,8,3
800018d0:	8f f2 0f 21 	and %d2,%d2,255
800018d4:	c2 12       	add %d2,1
800018d6:	e2 42       	mul %d2,%d4
800018d8:	06 12       	sh %d2,1
800018da:	4b 02 41 21 	itof %d2,%d2
800018de:	4b 23 51 20 	div.f %d2,%d3,%d2
800018e2:	59 e2 fc ff 	st.w [%a14]-4,%d2
    }

    return pllFrequency2;
800018e6:	19 e2 fc ff 	ld.w %d2,[%a14]-4
}
800018ea:	00 90       	ret 

800018ec <IfxScuCcu_getPllFrequency>:


float32 IfxScuCcu_getPllFrequency(void)
{
800018ec:	40 ae       	mov.aa %a14,%sp
800018ee:	20 10       	sub.a %sp,16
    Ifx_SCU *scu = &MODULE_SCU;
800018f0:	7b 30 00 2f 	movh %d2,61443
800018f4:	1b 02 00 26 	addi %d2,%d2,24576
800018f8:	59 e2 fc ff 	st.w [%a14]-4,%d2
    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
800018fc:	91 30 00 2f 	movh.a %a2,61443
80001900:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
80001904:	54 22       	ld.w %d2,[%a2]
80001906:	37 02 62 2f 	extr.u %d2,%d2,30,2
8000190a:	8f f2 0f 21 	and %d2,%d2,255
8000190e:	df 02 0a 80 	jne %d2,0,80001922 <IfxScuCcu_getPllFrequency+0x36>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80001912:	7b f0 cb 24 	movh %d2,19647
80001916:	1b 02 c2 2b 	addi %d2,%d2,-17376
8000191a:	59 e2 f0 ff 	st.w [%a14]-16,%d2
8000191e:	1d 00 2b 00 	j 80001974 <IfxScuCcu_getPllFrequency+0x88>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
80001922:	91 30 00 2f 	movh.a %a2,61443
80001926:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
8000192a:	54 22       	ld.w %d2,[%a2]
8000192c:	37 02 62 2f 	extr.u %d2,%d2,30,2
80001930:	8f f2 0f 21 	and %d2,%d2,255
80001934:	df 12 0a 80 	jne %d2,1,80001948 <IfxScuCcu_getPllFrequency+0x5c>
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
80001938:	7b 90 b9 24 	movh %d2,19353
8000193c:	1b 02 68 29 	addi %d2,%d2,-27008
80001940:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80001944:	1d 00 18 00 	j 80001974 <IfxScuCcu_getPllFrequency+0x88>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
80001948:	91 30 00 2f 	movh.a %a2,61443
8000194c:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
80001950:	54 22       	ld.w %d2,[%a2]
80001952:	37 02 62 2f 	extr.u %d2,%d2,30,2
80001956:	8f f2 0f 21 	and %d2,%d2,255
8000195a:	df 22 0a 80 	jne %d2,2,8000196e <IfxScuCcu_getPllFrequency+0x82>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
8000195e:	7b 90 b9 24 	movh %d2,19353
80001962:	1b 02 68 29 	addi %d2,%d2,-27008
80001966:	59 e2 f0 ff 	st.w [%a14]-16,%d2
8000196a:	1d 00 05 00 	j 80001974 <IfxScuCcu_getPllFrequency+0x88>
        freq = 0.0f;
8000196e:	82 02       	mov %d2,0
80001970:	59 e2 f0 ff 	st.w [%a14]-16,%d2
    return freq;
80001974:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
80001978:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    freq    = (oscFreq * (scu->SYSPLLCON0.B.NDIV + 1)) / ((scu->SYSPLLCON1.B.K2DIV + 1) * (scu->SYSPLLCON0.B.PDIV + 1));
8000197c:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80001980:	d9 22 18 00 	lea %a2,[%a2]24
80001984:	54 22       	ld.w %d2,[%a2]
80001986:	37 02 e7 24 	extr.u %d2,%d2,9,7
8000198a:	8f f2 0f 21 	and %d2,%d2,255
8000198e:	c2 12       	add %d2,1
80001990:	4b 02 41 31 	itof %d3,%d2
80001994:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80001998:	4b 23 41 30 	mul.f %d3,%d3,%d2
8000199c:	99 e2 fc ff 	ld.a %a2,[%a14]-4
800019a0:	d9 22 1c 00 	lea %a2,[%a2]28
800019a4:	54 22       	ld.w %d2,[%a2]
800019a6:	37 02 63 20 	extr.u %d2,%d2,0,3
800019aa:	8f f2 0f 21 	and %d2,%d2,255
800019ae:	1b 12 00 40 	addi %d4,%d2,1
800019b2:	99 e2 fc ff 	ld.a %a2,[%a14]-4
800019b6:	d9 22 18 00 	lea %a2,[%a2]24
800019ba:	54 22       	ld.w %d2,[%a2]
800019bc:	37 02 63 2c 	extr.u %d2,%d2,24,3
800019c0:	8f f2 0f 21 	and %d2,%d2,255
800019c4:	c2 12       	add %d2,1
800019c6:	e2 42       	mul %d2,%d4
800019c8:	4b 02 41 21 	itof %d2,%d2
800019cc:	4b 23 51 20 	div.f %d2,%d3,%d2
800019d0:	59 e2 f4 ff 	st.w [%a14]-12,%d2
    return freq;
800019d4:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
}
800019d8:	00 90       	ret 

800019da <IfxScuCcu_getSourceFrequency>:
    return freq;
}


float32 IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource fsource)
{
800019da:	40 ae       	mov.aa %a14,%sp
800019dc:	20 10       	sub.a %sp,16
800019de:	59 e4 f4 ff 	st.w [%a14]-12,%d4
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
800019e2:	91 30 00 2f 	movh.a %a2,61443
800019e6:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd35e04>>
800019ea:	54 22       	ld.w %d2,[%a2]
800019ec:	37 02 62 2e 	extr.u %d2,%d2,28,2
800019f0:	8f f2 0f 21 	and %d2,%d2,255
800019f4:	df 02 06 00 	jeq %d2,0,80001a00 <IfxScuCcu_getSourceFrequency+0x26>
800019f8:	df 12 0c 00 	jeq %d2,1,80001a10 <IfxScuCcu_getSourceFrequency+0x36>
800019fc:	1d 00 49 00 	j 80001a8e <IfxScuCcu_getSourceFrequency+0xb4>
    return IFXSCU_EVR_OSC_FREQUENCY;
80001a00:	7b f0 cb 24 	movh %d2,19647
80001a04:	1b 02 c2 2b 	addi %d2,%d2,-17376
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
80001a08:	59 e2 fc ff 	st.w [%a14]-4,%d2
        break;
80001a0c:	1d 00 45 00 	j 80001a96 <IfxScuCcu_getSourceFrequency+0xbc>
80001a10:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
80001a14:	df 22 2f 00 	jeq %d2,2,80001a72 <IfxScuCcu_getSourceFrequency+0x98>
80001a18:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
80001a1c:	ff 32 31 80 	jge.u %d2,3,80001a7e <IfxScuCcu_getSourceFrequency+0xa4>
80001a20:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
80001a24:	df 02 08 00 	jeq %d2,0,80001a34 <IfxScuCcu_getSourceFrequency+0x5a>
80001a28:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
80001a2c:	df 12 0a 00 	jeq %d2,1,80001a40 <IfxScuCcu_getSourceFrequency+0x66>
80001a30:	1d 00 27 00 	j 80001a7e <IfxScuCcu_getSourceFrequency+0xa4>
    case IfxScu_CCUCON0_CLKSEL_fPll:

        switch (fsource)
        {
        case IfxScuCcu_Fsource_0:
            sourcefreq = IfxScuCcu_getPllFrequency();
80001a34:	6d ff 5c ff 	call 800018ec <IfxScuCcu_getPllFrequency>
80001a38:	59 e2 fc ff 	st.w [%a14]-4,%d2
            break;
80001a3c:	1d 00 27 00 	j 80001a8a <IfxScuCcu_getSourceFrequency+0xb0>
        case IfxScuCcu_Fsource_1:
            sourcefreq = IfxScuCcu_getPerPllFrequency1();
80001a40:	6d ff 28 fe 	call 80001690 <IfxScuCcu_getPerPllFrequency1>
80001a44:	59 e2 fc ff 	st.w [%a14]-4,%d2

            if (SCU_CCUCON1.B.PLL1DIVDIS == 0)
80001a48:	91 30 00 2f 	movh.a %a2,61443
80001a4c:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd35e08>>
80001a50:	54 22       	ld.w %d2,[%a2]
80001a52:	37 02 e1 23 	extr.u %d2,%d2,7,1
80001a56:	8f f2 0f 21 	and %d2,%d2,255
80001a5a:	df 02 17 80 	jne %d2,0,80001a88 <IfxScuCcu_getSourceFrequency+0xae>
            {
                sourcefreq = sourcefreq / 2.0f;
80001a5e:	19 e2 fc ff 	ld.w %d2,[%a14]-4
80001a62:	7b 00 00 34 	movh %d3,16384
80001a66:	4b 32 51 20 	div.f %d2,%d2,%d3
80001a6a:	59 e2 fc ff 	st.w [%a14]-4,%d2
            }

            break;
80001a6e:	1d 00 0d 00 	j 80001a88 <IfxScuCcu_getSourceFrequency+0xae>
        case IfxScuCcu_Fsource_2:
            sourcefreq = IfxScuCcu_getPerPllFrequency2();
80001a72:	6d ff 86 fe 	call 8000177e <IfxScuCcu_getPerPllFrequency2>
80001a76:	59 e2 fc ff 	st.w [%a14]-4,%d2
            break;
80001a7a:	1d 00 08 00 	j 80001a8a <IfxScuCcu_getSourceFrequency+0xb0>
        default:
            sourcefreq = 0;
80001a7e:	82 02       	mov %d2,0
80001a80:	59 e2 fc ff 	st.w [%a14]-4,%d2
            break;
80001a84:	1d 00 03 00 	j 80001a8a <IfxScuCcu_getSourceFrequency+0xb0>
            break;
80001a88:	00 00       	nop 
        }

        break;
80001a8a:	1d 00 06 00 	j 80001a96 <IfxScuCcu_getSourceFrequency+0xbc>
    default:
        sourcefreq = 0;
80001a8e:	82 02       	mov %d2,0
80001a90:	59 e2 fc ff 	st.w [%a14]-4,%d2
        break;
80001a94:	00 00       	nop 
    }

    return sourcefreq;
80001a96:	19 e2 fc ff 	ld.w %d2,[%a14]-4
}
80001a9a:	00 90       	ret 

80001a9c <IfxScuCcu_init>:
    return sriFrequency;
}


boolean IfxScuCcu_init(const IfxScuCcu_Config *config)
{
80001a9c:	40 ae       	mov.aa %a14,%sp
80001a9e:	20 a8       	sub.a %sp,168
80001aa0:	b5 e4 dc df 	st.a [%a14]-164,%a4
    boolean status = 0;
80001aa4:	82 02       	mov %d2,0
80001aa6:	e9 e2 ff ff 	st.b [%a14]-1,%d2
    status = IfxScuCcu_configureCcuInitialStep(&config->pllInitialStepConfig);
80001aaa:	19 e2 dc df 	ld.w %d2,[%a14]-164
80001aae:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    uint8                                initError = 0;
80001ab2:	82 02       	mov %d2,0
80001ab4:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
    pllsParamCfg   = &pllInitStepCfg->pllsParameters;
80001ab8:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80001abc:	59 e2 f0 ff 	st.w [%a14]-16,%d2


IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
{
    uint16        password;
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
80001ac0:	7b 30 00 2f 	movh %d2,61443
80001ac4:	1b 82 2a 26 	addi %d2,%d2,25256
80001ac8:	59 e2 ec ff 	st.w [%a14]-20,%d2

    /* Read Password from Safety WDT CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
80001acc:	99 e2 ec ff 	ld.a %a2,[%a14]-20
80001ad0:	54 22       	ld.w %d2,[%a2]
80001ad2:	37 02 6e 21 	extr.u %d2,%d2,2,14
80001ad6:	37 02 70 20 	extr.u %d2,%d2,0,16
80001ada:	f9 e2 ea ff 	st.h [%a14]-22,%d2
    password ^= 0x003F;
80001ade:	c9 e2 ea ff 	ld.h %d2,[%a14]-22
80001ae2:	8f f2 83 21 	xor %d2,%d2,63
80001ae6:	f9 e2 ea ff 	st.h [%a14]-22,%d2

    return password;
80001aea:	b9 e2 ea ff 	ld.hu %d2,[%a14]-22
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
80001aee:	f9 e2 e8 ff 	st.h [%a14]-24,%d2
    IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
80001af2:	b9 e2 e8 ff 	ld.hu %d2,[%a14]-24
80001af6:	f9 e2 e6 ff 	st.h [%a14]-26,%d2
    if (SCU_WDTS_CON0.B.LCK)
80001afa:	91 30 00 2f 	movh.a %a2,61443
80001afe:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80001b02:	54 22       	ld.w %d2,[%a2]
80001b04:	37 02 e1 20 	extr.u %d2,%d2,1,1
80001b08:	8f f2 0f 21 	and %d2,%d2,255
80001b0c:	df 02 18 00 	jeq %d2,0,80001b3c <IfxScuCcu_init+0xa0>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001b10:	b9 e2 e6 ff 	ld.hu %d2,[%a14]-26
80001b14:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001b16:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001b1a:	91 30 00 2f 	movh.a %a2,61443
80001b1e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80001b22:	54 22       	ld.w %d2,[%a2]
80001b24:	37 02 70 28 	extr.u %d2,%d2,16,16
80001b28:	37 02 70 20 	extr.u %d2,%d2,0,16
80001b2c:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001b30:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001b32:	91 30 00 2f 	movh.a %a2,61443
80001b36:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80001b3a:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001b3c:	b9 e2 e6 ff 	ld.hu %d2,[%a14]-26 <f00362a8 <_START2_end+0x4fd3607c>>
80001b40:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001b42:	8f 22 40 31 	or %d3,%d2,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001b46:	91 30 00 2f 	movh.a %a2,61443
80001b4a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80001b4e:	54 22       	ld.w %d2,[%a2]
80001b50:	37 02 70 28 	extr.u %d2,%d2,16,16
80001b54:	37 02 70 20 	extr.u %d2,%d2,0,16
80001b58:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001b5c:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001b5e:	91 30 00 2f 	movh.a %a2,61443
80001b62:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80001b66:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80001b68:	00 00       	nop 
80001b6a:	91 30 00 2f 	movh.a %a2,61443
80001b6e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80001b72:	54 22       	ld.w %d2,[%a2]
80001b74:	37 02 61 20 	extr.u %d2,%d2,0,1
80001b78:	8f f2 0f 21 	and %d2,%d2,255
80001b7c:	df 12 f7 7f 	jeq %d2,1,80001b6a <IfxScuCcu_init+0xce>
}
80001b80:	00 00       	nop 
    timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80001b82:	3b 00 00 21 	mov %d2,4096
80001b86:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while (SCU_CCUCON0.B.LCK != 0U)
80001b8a:	1d 00 10 00 	j 80001baa <IfxScuCcu_init+0x10e>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001b8e:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80001b92:	c2 f2       	add %d2,-1
80001b94:	59 e2 e0 ff 	st.w [%a14]-32,%d2
80001b98:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80001b9c:	ff 12 07 00 	jge %d2,1,80001baa <IfxScuCcu_init+0x10e>
80001ba0:	82 12       	mov %d2,1
80001ba2:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
80001ba6:	1d 00 0d 00 	j 80001bc0 <IfxScuCcu_init+0x124>
    while (SCU_CCUCON0.B.LCK != 0U)
80001baa:	91 30 00 2f 	movh.a %a2,61443
80001bae:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd35e04>>
80001bb2:	54 22       	ld.w %d2,[%a2]
80001bb4:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80001bb8:	8f f2 0f 21 	and %d2,%d2,255
80001bbc:	df 02 e9 ff 	jne %d2,0,80001b8e <IfxScuCcu_init+0xf2>
        scuCcucon0.U        = SCU_CCUCON0.U;
80001bc0:	91 30 00 2f 	movh.a %a2,61443
80001bc4:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd35e04>>
80001bc8:	54 22       	ld.w %d2,[%a2]
80001bca:	59 e2 f8 df 	st.w [%a14]-136 <f0036030 <_START2_end+0x4fd35e04>>,%d2
        scuCcucon0.B.CLKSEL = 0; /*Select the EVR as fsource0/1/2 for the clock distribution */
80001bce:	19 e2 f8 df 	ld.w %d2,[%a14]-136 <f0036030 <_START2_end+0x4fd35e04>>
80001bd2:	7b 00 00 3d 	movh %d3,53248
80001bd6:	c2 f3       	add %d3,-1
80001bd8:	26 32       	and %d2,%d3
80001bda:	59 e2 f8 df 	st.w [%a14]-136,%d2
        scuCcucon0.B.UP     = 1; /*Update the ccucon0 register */
80001bde:	19 e2 f8 df 	ld.w %d2,[%a14]-136
80001be2:	b7 12 01 2f 	insert %d2,%d2,1,30,1
80001be6:	59 e2 f8 df 	st.w [%a14]-136,%d2
        SCU_CCUCON0.U       = scuCcucon0.U;
80001bea:	91 30 00 2f 	movh.a %a2,61443
80001bee:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd35e04>>
80001bf2:	19 e2 f8 df 	ld.w %d2,[%a14]-136 <f0036030 <_START2_end+0x4fd35e04>>
80001bf6:	74 22       	st.w [%a2],%d2
    timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80001bf8:	3b 00 00 21 	mov %d2,4096
80001bfc:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while (SCU_CCUCON0.B.LCK != 0U)
80001c00:	1d 00 10 00 	j 80001c20 <IfxScuCcu_init+0x184>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001c04:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80001c08:	c2 f2       	add %d2,-1
80001c0a:	59 e2 e0 ff 	st.w [%a14]-32,%d2
80001c0e:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80001c12:	ff 12 07 00 	jge %d2,1,80001c20 <IfxScuCcu_init+0x184>
80001c16:	82 12       	mov %d2,1
80001c18:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
80001c1c:	1d 00 0d 00 	j 80001c36 <IfxScuCcu_init+0x19a>
    while (SCU_CCUCON0.B.LCK != 0U)
80001c20:	91 30 00 2f 	movh.a %a2,61443
80001c24:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd35e04>>
80001c28:	54 22       	ld.w %d2,[%a2]
80001c2a:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80001c2e:	8f f2 0f 21 	and %d2,%d2,255
80001c32:	df 02 e9 ff 	jne %d2,0,80001c04 <IfxScuCcu_init+0x168>
        SMU_KEYS.U    = (uint32)0xBCU;        /* Enable access to SMU registers */
80001c36:	91 30 00 2f 	movh.a %a2,61443
80001c3a:	d9 22 b4 06 	lea %a2,[%a2]26676 <f0036834 <_START2_end+0x4fd36608>>
80001c3e:	3b c0 0b 20 	mov %d2,188
80001c42:	74 22       	st.w [%a2],%d2
        SMU_AG8CF0.U &= ~IFXSCUCCU_SMUALARM_MASK;
80001c44:	91 30 00 2f 	movh.a %a2,61443
80001c48:	d9 22 a0 56 	lea %a2,[%a2]26976 <f0036960 <_START2_end+0x4fd36734>>
80001c4c:	54 22       	ld.w %d2,[%a2]
80001c4e:	91 30 00 2f 	movh.a %a2,61443
80001c52:	d9 22 a0 56 	lea %a2,[%a2]26976 <f0036960 <_START2_end+0x4fd36734>>
80001c56:	8f d2 c1 21 	andn %d2,%d2,29
80001c5a:	74 22       	st.w [%a2],%d2
        SMU_AG8CF1.U &= ~IFXSCUCCU_SMUALARM_MASK;
80001c5c:	91 30 00 2f 	movh.a %a2,61443
80001c60:	d9 22 a4 56 	lea %a2,[%a2]26980 <f0036964 <_START2_end+0x4fd36738>>
80001c64:	54 22       	ld.w %d2,[%a2]
80001c66:	91 30 00 2f 	movh.a %a2,61443
80001c6a:	d9 22 a4 56 	lea %a2,[%a2]26980 <f0036964 <_START2_end+0x4fd36738>>
80001c6e:	8f d2 c1 21 	andn %d2,%d2,29
80001c72:	74 22       	st.w [%a2],%d2
        SMU_AG8CF2.U &= ~IFXSCUCCU_SMUALARM_MASK;
80001c74:	91 30 00 2f 	movh.a %a2,61443
80001c78:	d9 22 a8 56 	lea %a2,[%a2]26984 <f0036968 <_START2_end+0x4fd3673c>>
80001c7c:	54 22       	ld.w %d2,[%a2]
80001c7e:	91 30 00 2f 	movh.a %a2,61443
80001c82:	d9 22 a8 56 	lea %a2,[%a2]26984 <f0036968 <_START2_end+0x4fd3673c>>
80001c86:	8f d2 c1 21 	andn %d2,%d2,29
80001c8a:	74 22       	st.w [%a2],%d2
        SMU_KEYS.U    = (uint32)0U;
80001c8c:	91 30 00 2f 	movh.a %a2,61443
80001c90:	d9 22 b4 06 	lea %a2,[%a2]26676 <f0036834 <_START2_end+0x4fd36608>>
80001c94:	82 02       	mov %d2,0
80001c96:	74 22       	st.w [%a2],%d2
    SCU_SYSPLLCON0.B.PLLPWD = 0;
80001c98:	91 30 00 2f 	movh.a %a2,61443
80001c9c:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
80001ca0:	54 22       	ld.w %d2,[%a2]
80001ca2:	7b f0 ff 3f 	movh %d3,65535
80001ca6:	c2 f3       	add %d3,-1
80001ca8:	26 32       	and %d2,%d3
80001caa:	74 22       	st.w [%a2],%d2
    SCU_PERPLLCON0.B.PLLPWD = 0;
80001cac:	91 30 00 2f 	movh.a %a2,61443
80001cb0:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <_START2_end+0x4fd35dfc>>
80001cb4:	54 22       	ld.w %d2,[%a2]
80001cb6:	7b f0 ff 3f 	movh %d3,65535
80001cba:	c2 f3       	add %d3,-1
80001cbc:	26 32       	and %d2,%d3
80001cbe:	74 22       	st.w [%a2],%d2
    timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
80001cc0:	3b 00 00 23 	mov %d2,12288
80001cc4:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
80001cc8:	1d 00 10 00 	j 80001ce8 <IfxScuCcu_init+0x24c>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001ccc:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80001cd0:	c2 f2       	add %d2,-1
80001cd2:	59 e2 e0 ff 	st.w [%a14]-32,%d2
80001cd6:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80001cda:	ff 12 07 00 	jge %d2,1,80001ce8 <IfxScuCcu_init+0x24c>
80001cde:	82 12       	mov %d2,1
80001ce0:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
80001ce4:	1d 00 18 00 	j 80001d14 <IfxScuCcu_init+0x278>
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
80001ce8:	91 30 00 2f 	movh.a %a2,61443
80001cec:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_START2_end+0x4fd35de8>>
80001cf0:	54 22       	ld.w %d2,[%a2]
80001cf2:	37 02 e1 20 	extr.u %d2,%d2,1,1
80001cf6:	8f f2 0f 21 	and %d2,%d2,255
80001cfa:	df 02 e9 7f 	jeq %d2,0,80001ccc <IfxScuCcu_init+0x230>
80001cfe:	91 30 00 2f 	movh.a %a2,61443
80001d02:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fd35df8>>
80001d06:	54 22       	ld.w %d2,[%a2]
80001d08:	37 02 e1 20 	extr.u %d2,%d2,1,1
80001d0c:	8f f2 0f 21 	and %d2,%d2,255
80001d10:	df 02 de 7f 	jeq %d2,0,80001ccc <IfxScuCcu_init+0x230>
    if ((pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fOsc0) || (pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fSysclk))
80001d14:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80001d18:	b0 42       	add.a %a2,4
80001d1a:	54 22       	ld.w %d2,[%a2]
80001d1c:	df 12 08 00 	jeq %d2,1,80001d2c <IfxScuCcu_init+0x290>
80001d20:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80001d24:	b0 42       	add.a %a2,4
80001d26:	54 22       	ld.w %d2,[%a2]
80001d28:	df 22 31 80 	jne %d2,2,80001d8a <IfxScuCcu_init+0x2ee>
        scuOsccon.U      = SCU_OSCCON.U;
80001d2c:	91 30 00 2f 	movh.a %a2,61443
80001d30:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_START2_end+0x4fd35de4>>
80001d34:	54 22       	ld.w %d2,[%a2]
80001d36:	59 e2 f4 df 	st.w [%a14]-140 <f0036010 <_START2_end+0x4fd35de4>>,%d2
        scuOsccon.B.MODE = 0U;
80001d3a:	19 e2 f4 df 	ld.w %d2,[%a14]-140 <f0036010 <_START2_end+0x4fd35de4>>
80001d3e:	8f 02 c6 21 	andn %d2,%d2,96
80001d42:	59 e2 f4 df 	st.w [%a14]-140,%d2
        scuOsccon.B.OSCVAL = (uint32)(pllsParamCfg->xtalFrequency / 1000000U) - 15; /*XTAL range 16MHz to 40MHz*/
80001d46:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80001d4a:	54 22       	ld.w %d2,[%a2]
80001d4c:	7b c0 31 34 	movh %d3,17180
80001d50:	1b 33 e8 3d 	addi %d3,%d3,-8573
80001d54:	73 32 68 20 	mul.u %e2,%d2,%d3
80001d58:	8f e3 1e 20 	sh %d2,%d3,-18
80001d5c:	8f f2 0f 21 	and %d2,%d2,255
80001d60:	1b 12 ff 2f 	addi %d2,%d2,-15
80001d64:	8f f2 0f 21 	and %d2,%d2,255
80001d68:	8f f2 01 21 	and %d2,%d2,31
80001d6c:	8f f2 0f 31 	and %d3,%d2,255
80001d70:	19 e2 f4 df 	ld.w %d2,[%a14]-140
80001d74:	37 32 05 28 	insert %d2,%d2,%d3,16,5
80001d78:	59 e2 f4 df 	st.w [%a14]-140,%d2
        SCU_OSCCON.U       = scuOsccon.U;
80001d7c:	91 30 00 2f 	movh.a %a2,61443
80001d80:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_START2_end+0x4fd35de4>>
80001d84:	19 e2 f4 df 	ld.w %d2,[%a14]-140 <f0036010 <_START2_end+0x4fd35de4>>
80001d88:	74 22       	st.w [%a2],%d2
        sysPllCon0.U       = SCU_SYSPLLCON0.U;
80001d8a:	91 30 00 2f 	movh.a %a2,61443
80001d8e:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
80001d92:	54 22       	ld.w %d2,[%a2]
80001d94:	59 e2 f0 df 	st.w [%a14]-144 <f0036018 <_START2_end+0x4fd35dec>>,%d2
        sysPllCon0.B.PDIV  = pllsParamCfg->sysPllConfig.pDivider;
80001d98:	99 e2 f0 ff 	ld.a %a2,[%a14]-16 <f0036018 <_START2_end+0x4fd35dec>>
80001d9c:	39 22 08 00 	ld.bu %d2,[%a2]8 <f0036018 <_START2_end+0x4fd35dec>>
80001da0:	8f 72 00 21 	and %d2,%d2,7
80001da4:	8f f2 0f 31 	and %d3,%d2,255
80001da8:	19 e2 f0 df 	ld.w %d2,[%a14]-144
80001dac:	37 32 03 2c 	insert %d2,%d2,%d3,24,3
80001db0:	59 e2 f0 df 	st.w [%a14]-144,%d2
        sysPllCon0.B.NDIV  = pllsParamCfg->sysPllConfig.nDivider;
80001db4:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80001db8:	39 22 09 00 	ld.bu %d2,[%a2]9
80001dbc:	8f f2 07 21 	and %d2,%d2,127
80001dc0:	8f f2 0f 31 	and %d3,%d2,255
80001dc4:	19 e2 f0 df 	ld.w %d2,[%a14]-144
80001dc8:	37 32 87 24 	insert %d2,%d2,%d3,9,7
80001dcc:	59 e2 f0 df 	st.w [%a14]-144,%d2
        sysPllCon0.B.INSEL = pllsParamCfg->pllInputClockSelection;
80001dd0:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80001dd4:	b0 42       	add.a %a2,4
80001dd6:	54 22       	ld.w %d2,[%a2]
80001dd8:	8f 32 00 21 	and %d2,%d2,3
80001ddc:	8f f2 0f 31 	and %d3,%d2,255
80001de0:	19 e2 f0 df 	ld.w %d2,[%a14]-144
80001de4:	37 32 02 2f 	insert %d2,%d2,%d3,30,2
80001de8:	59 e2 f0 df 	st.w [%a14]-144,%d2
        SCU_SYSPLLCON0.U   = sysPllCon0.U;
80001dec:	91 30 00 2f 	movh.a %a2,61443
80001df0:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
80001df4:	19 e2 f0 df 	ld.w %d2,[%a14]-144 <f0036018 <_START2_end+0x4fd35dec>>
80001df8:	74 22       	st.w [%a2],%d2
        scuPerPllCon0.U       = SCU_PERPLLCON0.U;
80001dfa:	91 30 00 2f 	movh.a %a2,61443
80001dfe:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <_START2_end+0x4fd35dfc>>
80001e02:	54 22       	ld.w %d2,[%a2]
80001e04:	59 e2 ec df 	st.w [%a14]-148 <f0036028 <_START2_end+0x4fd35dfc>>,%d2
        scuPerPllCon0.B.DIVBY = pllsParamCfg->perPllConfig.k3DividerBypass;
80001e08:	99 e2 f0 ff 	ld.a %a2,[%a14]-16 <f0036028 <_START2_end+0x4fd35dfc>>
80001e0c:	39 22 10 00 	ld.bu %d2,[%a2]16 <f0036028 <_START2_end+0x4fd35dfc>>
80001e10:	8f 12 00 21 	and %d2,%d2,1
80001e14:	8f f2 0f 31 	and %d3,%d2,255
80001e18:	19 e2 ec df 	ld.w %d2,[%a14]-148
80001e1c:	67 32 00 20 	ins.t %d2,%d2,0,%d3,0
80001e20:	59 e2 ec df 	st.w [%a14]-148,%d2
        scuPerPllCon0.B.PDIV  = pllsParamCfg->perPllConfig.pDivider;
80001e24:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80001e28:	39 22 0c 00 	ld.bu %d2,[%a2]12
80001e2c:	8f 72 00 21 	and %d2,%d2,7
80001e30:	8f f2 0f 31 	and %d3,%d2,255
80001e34:	19 e2 ec df 	ld.w %d2,[%a14]-148
80001e38:	37 32 03 2c 	insert %d2,%d2,%d3,24,3
80001e3c:	59 e2 ec df 	st.w [%a14]-148,%d2
        scuPerPllCon0.B.NDIV  = pllsParamCfg->perPllConfig.nDivider;
80001e40:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80001e44:	39 22 0d 00 	ld.bu %d2,[%a2]13
80001e48:	8f f2 07 21 	and %d2,%d2,127
80001e4c:	8f f2 0f 31 	and %d3,%d2,255
80001e50:	19 e2 ec df 	ld.w %d2,[%a14]-148
80001e54:	37 32 87 24 	insert %d2,%d2,%d3,9,7
80001e58:	59 e2 ec df 	st.w [%a14]-148,%d2
        SCU_PERPLLCON0.U      = scuPerPllCon0.U;
80001e5c:	91 30 00 2f 	movh.a %a2,61443
80001e60:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <_START2_end+0x4fd35dfc>>
80001e64:	19 e2 ec df 	ld.w %d2,[%a14]-148 <f0036028 <_START2_end+0x4fd35dfc>>
80001e68:	74 22       	st.w [%a2],%d2
    SCU_SYSPLLCON0.B.PLLPWD = 1;
80001e6a:	91 30 00 2f 	movh.a %a2,61443
80001e6e:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
80001e72:	54 22       	ld.w %d2,[%a2]
80001e74:	b7 12 01 28 	insert %d2,%d2,1,16,1
80001e78:	74 22       	st.w [%a2],%d2
    SCU_PERPLLCON0.B.PLLPWD = 1;
80001e7a:	91 30 00 2f 	movh.a %a2,61443
80001e7e:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <_START2_end+0x4fd35dfc>>
80001e82:	54 22       	ld.w %d2,[%a2]
80001e84:	b7 12 01 28 	insert %d2,%d2,1,16,1
80001e88:	74 22       	st.w [%a2],%d2
    timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
80001e8a:	3b 00 00 23 	mov %d2,12288
80001e8e:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
80001e92:	1d 00 10 00 	j 80001eb2 <IfxScuCcu_init+0x416>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001e96:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80001e9a:	c2 f2       	add %d2,-1
80001e9c:	59 e2 e0 ff 	st.w [%a14]-32,%d2
80001ea0:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80001ea4:	ff 12 07 00 	jge %d2,1,80001eb2 <IfxScuCcu_init+0x416>
80001ea8:	82 12       	mov %d2,1
80001eaa:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
80001eae:	1d 00 18 00 	j 80001ede <IfxScuCcu_init+0x442>
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
80001eb2:	91 30 00 2f 	movh.a %a2,61443
80001eb6:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_START2_end+0x4fd35de8>>
80001eba:	54 22       	ld.w %d2,[%a2]
80001ebc:	37 02 e1 20 	extr.u %d2,%d2,1,1
80001ec0:	8f f2 0f 21 	and %d2,%d2,255
80001ec4:	df 12 e9 7f 	jeq %d2,1,80001e96 <IfxScuCcu_init+0x3fa>
80001ec8:	91 30 00 2f 	movh.a %a2,61443
80001ecc:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fd35df8>>
80001ed0:	54 22       	ld.w %d2,[%a2]
80001ed2:	37 02 e1 20 	extr.u %d2,%d2,1,1
80001ed6:	8f f2 0f 21 	and %d2,%d2,255
80001eda:	df 12 de 7f 	jeq %d2,1,80001e96 <IfxScuCcu_init+0x3fa>
    timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
80001ede:	3b 00 00 26 	mov %d2,24576
80001ee2:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
80001ee6:	1d 00 10 00 	j 80001f06 <IfxScuCcu_init+0x46a>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001eea:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80001eee:	c2 f2       	add %d2,-1
80001ef0:	59 e2 e0 ff 	st.w [%a14]-32,%d2
80001ef4:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80001ef8:	ff 12 07 00 	jge %d2,1,80001f06 <IfxScuCcu_init+0x46a>
80001efc:	82 12       	mov %d2,1
80001efe:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
80001f02:	1d 00 23 00 	j 80001f48 <IfxScuCcu_init+0x4ac>
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
80001f06:	91 30 00 2f 	movh.a %a2,61443
80001f0a:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_START2_end+0x4fd35de8>>
80001f0e:	54 22       	ld.w %d2,[%a2]
80001f10:	37 02 e1 22 	extr.u %d2,%d2,5,1
80001f14:	8f f2 0f 21 	and %d2,%d2,255
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
80001f18:	df 02 e9 7f 	jeq %d2,0,80001eea <IfxScuCcu_init+0x44e>
80001f1c:	91 30 00 2f 	movh.a %a2,61443
80001f20:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fd35df8>>
80001f24:	54 22       	ld.w %d2,[%a2]
80001f26:	37 02 e1 22 	extr.u %d2,%d2,5,1
80001f2a:	8f f2 0f 21 	and %d2,%d2,255
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
80001f2e:	df 02 de 7f 	jeq %d2,0,80001eea <IfxScuCcu_init+0x44e>
           (SCU_PERPLLSTAT.B.K3RDY == 0U))
80001f32:	91 30 00 2f 	movh.a %a2,61443
80001f36:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fd35df8>>
80001f3a:	54 22       	ld.w %d2,[%a2]
80001f3c:	37 02 61 22 	extr.u %d2,%d2,4,1
80001f40:	8f f2 0f 21 	and %d2,%d2,255
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
80001f44:	df 02 d3 7f 	jeq %d2,0,80001eea <IfxScuCcu_init+0x44e>
    SCU_SYSPLLCON1.B.K2DIV = pllsParamCfg->sysPllConfig.k2Divider;
80001f48:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80001f4c:	39 22 0a 00 	ld.bu %d2,[%a2]10
80001f50:	91 30 00 2f 	movh.a %a2,61443
80001f54:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_START2_end+0x4fd35df0>>
80001f58:	8f 72 00 21 	and %d2,%d2,7
80001f5c:	8f f2 0f 31 	and %d3,%d2,255
80001f60:	54 22       	ld.w %d2,[%a2]
80001f62:	37 32 03 20 	insert %d2,%d2,%d3,0,3
80001f66:	74 22       	st.w [%a2],%d2
        scuPerPllCon1.U       = SCU_PERPLLCON1.U;
80001f68:	91 30 00 2f 	movh.a %a2,61443
80001f6c:	d9 22 2c 06 	lea %a2,[%a2]24620 <f003602c <_START2_end+0x4fd35e00>>
80001f70:	54 22       	ld.w %d2,[%a2]
80001f72:	59 e2 e8 df 	st.w [%a14]-152 <f003602c <_START2_end+0x4fd35e00>>,%d2
        scuPerPllCon1.B.K2DIV = pllsParamCfg->perPllConfig.k2Divider;
80001f76:	99 e2 f0 ff 	ld.a %a2,[%a14]-16 <f003602c <_START2_end+0x4fd35e00>>
80001f7a:	39 22 0e 00 	ld.bu %d2,[%a2]14 <f003602c <_START2_end+0x4fd35e00>>
80001f7e:	8f 72 00 21 	and %d2,%d2,7
80001f82:	8f f2 0f 31 	and %d3,%d2,255
80001f86:	19 e2 e8 df 	ld.w %d2,[%a14]-152
80001f8a:	37 32 03 20 	insert %d2,%d2,%d3,0,3
80001f8e:	59 e2 e8 df 	st.w [%a14]-152,%d2
        scuPerPllCon1.B.K3DIV = pllsParamCfg->perPllConfig.k3Divider;
80001f92:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80001f96:	39 22 0f 00 	ld.bu %d2,[%a2]15
80001f9a:	8f 72 00 21 	and %d2,%d2,7
80001f9e:	8f f2 0f 31 	and %d3,%d2,255
80001fa2:	19 e2 e8 df 	ld.w %d2,[%a14]-152
80001fa6:	37 32 03 24 	insert %d2,%d2,%d3,8,3
80001faa:	59 e2 e8 df 	st.w [%a14]-152,%d2
        SCU_PERPLLCON1.U      = scuPerPllCon1.U;
80001fae:	91 30 00 2f 	movh.a %a2,61443
80001fb2:	d9 22 2c 06 	lea %a2,[%a2]24620 <f003602c <_START2_end+0x4fd35e00>>
80001fb6:	19 e2 e8 df 	ld.w %d2,[%a14]-152 <f003602c <_START2_end+0x4fd35e00>>
80001fba:	74 22       	st.w [%a2],%d2
    timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
80001fbc:	3b 00 00 26 	mov %d2,24576
80001fc0:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
80001fc4:	1d 00 10 00 	j 80001fe4 <IfxScuCcu_init+0x548>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001fc8:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80001fcc:	c2 f2       	add %d2,-1
80001fce:	59 e2 e0 ff 	st.w [%a14]-32,%d2
80001fd2:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80001fd6:	ff 12 07 00 	jge %d2,1,80001fe4 <IfxScuCcu_init+0x548>
80001fda:	82 12       	mov %d2,1
80001fdc:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
80001fe0:	1d 00 23 00 	j 80002026 <IfxScuCcu_init+0x58a>
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
80001fe4:	91 30 00 2f 	movh.a %a2,61443
80001fe8:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_START2_end+0x4fd35de8>>
80001fec:	54 22       	ld.w %d2,[%a2]
80001fee:	37 02 e1 22 	extr.u %d2,%d2,5,1
80001ff2:	8f f2 0f 21 	and %d2,%d2,255
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
80001ff6:	df 02 e9 7f 	jeq %d2,0,80001fc8 <IfxScuCcu_init+0x52c>
80001ffa:	91 30 00 2f 	movh.a %a2,61443
80001ffe:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fd35df8>>
80002002:	54 22       	ld.w %d2,[%a2]
80002004:	37 02 e1 22 	extr.u %d2,%d2,5,1
80002008:	8f f2 0f 21 	and %d2,%d2,255
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
8000200c:	df 02 de 7f 	jeq %d2,0,80001fc8 <IfxScuCcu_init+0x52c>
           (SCU_PERPLLSTAT.B.K3RDY == 0U))
80002010:	91 30 00 2f 	movh.a %a2,61443
80002014:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fd35df8>>
80002018:	54 22       	ld.w %d2,[%a2]
8000201a:	37 02 61 22 	extr.u %d2,%d2,4,1
8000201e:	8f f2 0f 21 	and %d2,%d2,255
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
80002022:	df 02 d3 7f 	jeq %d2,0,80001fc8 <IfxScuCcu_init+0x52c>
    timeoutCycleCount = IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT;
80002026:	7b 50 00 20 	movh %d2,5
8000202a:	1b 02 3e 29 	addi %d2,%d2,-27680
8000202e:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
80002032:	1d 00 10 00 	j 80002052 <IfxScuCcu_init+0x5b6>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80002036:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
8000203a:	c2 f2       	add %d2,-1
8000203c:	59 e2 e0 ff 	st.w [%a14]-32,%d2
80002040:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80002044:	ff 12 07 00 	jge %d2,1,80002052 <IfxScuCcu_init+0x5b6>
80002048:	82 12       	mov %d2,1
8000204a:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
8000204e:	1d 00 18 00 	j 8000207e <IfxScuCcu_init+0x5e2>
    while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
80002052:	91 30 00 2f 	movh.a %a2,61443
80002056:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_START2_end+0x4fd35de4>>
8000205a:	54 22       	ld.w %d2,[%a2]
8000205c:	37 02 e1 20 	extr.u %d2,%d2,1,1
80002060:	8f f2 0f 21 	and %d2,%d2,255
80002064:	df 02 0d 80 	jne %d2,0,8000207e <IfxScuCcu_init+0x5e2>
80002068:	91 30 00 2f 	movh.a %a2,61443
8000206c:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_START2_end+0x4fd35de4>>
80002070:	54 22       	ld.w %d2,[%a2]
80002072:	37 02 61 24 	extr.u %d2,%d2,8,1
80002076:	8f f2 0f 21 	and %d2,%d2,255
8000207a:	df 02 de 7f 	jeq %d2,0,80002036 <IfxScuCcu_init+0x59a>
        SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart Sys PLL lock detection */
8000207e:	91 30 00 2f 	movh.a %a2,61443
80002082:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
80002086:	54 22       	ld.w %d2,[%a2]
80002088:	b7 12 01 29 	insert %d2,%d2,1,18,1
8000208c:	74 22       	st.w [%a2],%d2
        SCU_PERPLLCON0.B.RESLD = 1;             /* Restart Per PLL lock detection */
8000208e:	91 30 00 2f 	movh.a %a2,61443
80002092:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <_START2_end+0x4fd35dfc>>
80002096:	54 22       	ld.w %d2,[%a2]
80002098:	b7 12 01 29 	insert %d2,%d2,1,18,1
8000209c:	74 22       	st.w [%a2],%d2
        timeoutCycleCount      = IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT;
8000209e:	3b 00 00 23 	mov %d2,12288
800020a2:	59 e2 e0 ff 	st.w [%a14]-32,%d2
        while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
800020a6:	1d 00 10 00 	j 800020c6 <IfxScuCcu_init+0x62a>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800020aa:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
800020ae:	c2 f2       	add %d2,-1
800020b0:	59 e2 e0 ff 	st.w [%a14]-32,%d2
800020b4:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
800020b8:	ff 12 07 00 	jge %d2,1,800020c6 <IfxScuCcu_init+0x62a>
800020bc:	82 12       	mov %d2,1
800020be:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
800020c2:	1d 00 18 00 	j 800020f2 <IfxScuCcu_init+0x656>
        while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
800020c6:	91 30 00 2f 	movh.a %a2,61443
800020ca:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_START2_end+0x4fd35de8>>
800020ce:	54 22       	ld.w %d2,[%a2]
800020d0:	37 02 61 21 	extr.u %d2,%d2,2,1
800020d4:	8f f2 0f 21 	and %d2,%d2,255
800020d8:	df 02 e9 7f 	jeq %d2,0,800020aa <IfxScuCcu_init+0x60e>
800020dc:	91 30 00 2f 	movh.a %a2,61443
800020e0:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fd35df8>>
800020e4:	54 22       	ld.w %d2,[%a2]
800020e6:	37 02 61 21 	extr.u %d2,%d2,2,1
800020ea:	8f f2 0f 21 	and %d2,%d2,255
800020ee:	df 02 de 7f 	jeq %d2,0,800020aa <IfxScuCcu_init+0x60e>
        SMU_KEYS.U = (uint32)0xBCU;           /* Enable access to SMU registers */
800020f2:	91 30 00 2f 	movh.a %a2,61443
800020f6:	d9 22 b4 06 	lea %a2,[%a2]26676 <f0036834 <_START2_end+0x4fd36608>>
800020fa:	3b c0 0b 20 	mov %d2,188
800020fe:	74 22       	st.w [%a2],%d2
        SMU_CMD.U  = (uint32)0x00000005;
80002100:	91 30 00 2f 	movh.a %a2,61443
80002104:	d9 22 a0 06 	lea %a2,[%a2]26656 <f0036820 <_START2_end+0x4fd365f4>>
80002108:	82 52       	mov %d2,5
8000210a:	74 22       	st.w [%a2],%d2
        SMU_AG8.U  = IFXSCUCCU_SMUALARM_MASK; /* Clear SMU Alarms*/
8000210c:	91 30 00 2f 	movh.a %a2,61443
80002110:	d9 22 a0 76 	lea %a2,[%a2]27104 <f00369e0 <_START2_end+0x4fd367b4>>
80002114:	3b d0 01 20 	mov %d2,29
80002118:	74 22       	st.w [%a2],%d2
        SMU_KEYS.U = (uint32)0U;
8000211a:	91 30 00 2f 	movh.a %a2,61443
8000211e:	d9 22 b4 06 	lea %a2,[%a2]26676 <f0036834 <_START2_end+0x4fd36608>>
80002122:	82 02       	mov %d2,0
80002124:	74 22       	st.w [%a2],%d2
        scu_ccucon0.U        = SCU_CCUCON0.U;
80002126:	91 30 00 2f 	movh.a %a2,61443
8000212a:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd35e04>>
8000212e:	54 22       	ld.w %d2,[%a2]
80002130:	59 e2 e4 df 	st.w [%a14]-156 <f0036030 <_START2_end+0x4fd35e04>>,%d2
        scu_ccucon0.B.CLKSEL = 1; /*Select the PLLs for fsource0/1/2 */
80002134:	19 e2 e4 df 	ld.w %d2,[%a14]-156 <f0036030 <_START2_end+0x4fd35e04>>
80002138:	b7 12 02 2e 	insert %d2,%d2,1,28,2
8000213c:	59 e2 e4 df 	st.w [%a14]-156,%d2
        scu_ccucon0.B.UP     = 1; /*Update the ccucon0 register */
80002140:	19 e2 e4 df 	ld.w %d2,[%a14]-156
80002144:	b7 12 01 2f 	insert %d2,%d2,1,30,1
80002148:	59 e2 e4 df 	st.w [%a14]-156,%d2
        timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
8000214c:	3b 00 00 21 	mov %d2,4096
80002150:	59 e2 e0 ff 	st.w [%a14]-32,%d2
        while (SCU_CCUCON0.B.LCK != 0U)
80002154:	1d 00 10 00 	j 80002174 <IfxScuCcu_init+0x6d8>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80002158:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
8000215c:	c2 f2       	add %d2,-1
8000215e:	59 e2 e0 ff 	st.w [%a14]-32,%d2
80002162:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80002166:	ff 12 07 00 	jge %d2,1,80002174 <IfxScuCcu_init+0x6d8>
8000216a:	82 12       	mov %d2,1
8000216c:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
80002170:	1d 00 0d 00 	j 8000218a <IfxScuCcu_init+0x6ee>
        while (SCU_CCUCON0.B.LCK != 0U)
80002174:	91 30 00 2f 	movh.a %a2,61443
80002178:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd35e04>>
8000217c:	54 22       	ld.w %d2,[%a2]
8000217e:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80002182:	8f f2 0f 21 	and %d2,%d2,255
80002186:	df 02 e9 ff 	jne %d2,0,80002158 <IfxScuCcu_init+0x6bc>
        SCU_CCUCON0.U     = scu_ccucon0.U;
8000218a:	91 30 00 2f 	movh.a %a2,61443
8000218e:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd35e04>>
80002192:	19 e2 e4 df 	ld.w %d2,[%a14]-156 <f0036030 <_START2_end+0x4fd35e04>>
80002196:	74 22       	st.w [%a2],%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80002198:	3b 00 00 21 	mov %d2,4096
8000219c:	59 e2 e0 ff 	st.w [%a14]-32,%d2
        while (SCU_CCUCON0.B.LCK != 0U)
800021a0:	1d 00 10 00 	j 800021c0 <IfxScuCcu_init+0x724>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800021a4:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
800021a8:	c2 f2       	add %d2,-1
800021aa:	59 e2 e0 ff 	st.w [%a14]-32,%d2
800021ae:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
800021b2:	ff 12 07 00 	jge %d2,1,800021c0 <IfxScuCcu_init+0x724>
800021b6:	82 12       	mov %d2,1
800021b8:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
800021bc:	1d 00 0d 00 	j 800021d6 <IfxScuCcu_init+0x73a>
        while (SCU_CCUCON0.B.LCK != 0U)
800021c0:	91 30 00 2f 	movh.a %a2,61443
800021c4:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd35e04>>
800021c8:	54 22       	ld.w %d2,[%a2]
800021ca:	37 02 e1 2f 	extr.u %d2,%d2,31,1
800021ce:	8f f2 0f 21 	and %d2,%d2,255
800021d2:	df 02 e9 ff 	jne %d2,0,800021a4 <IfxScuCcu_init+0x708>
    IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
800021d6:	b9 e2 e8 ff 	ld.hu %d2,[%a14]-24
800021da:	f9 e2 de ff 	st.h [%a14]-34,%d2
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800021de:	91 30 00 2f 	movh.a %a2,61443
800021e2:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
800021e6:	54 22       	ld.w %d2,[%a2]
800021e8:	37 02 e1 20 	extr.u %d2,%d2,1,1
800021ec:	8f f2 0f 21 	and %d2,%d2,255
800021f0:	df 02 18 00 	jeq %d2,0,80002220 <IfxScuCcu_init+0x784>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800021f4:	b9 e2 de ff 	ld.hu %d2,[%a14]-34
800021f8:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800021fa:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800021fe:	91 30 00 2f 	movh.a %a2,61443
80002202:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002206:	54 22       	ld.w %d2,[%a2]
80002208:	37 02 70 28 	extr.u %d2,%d2,16,16
8000220c:	37 02 70 20 	extr.u %d2,%d2,0,16
80002210:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002214:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002216:	91 30 00 2f 	movh.a %a2,61443
8000221a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
8000221e:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002220:	b9 e2 de ff 	ld.hu %d2,[%a14]-34 <f00362a8 <_START2_end+0x4fd3607c>>
80002224:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002226:	8f 32 40 31 	or %d3,%d2,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000222a:	91 30 00 2f 	movh.a %a2,61443
8000222e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002232:	54 22       	ld.w %d2,[%a2]
80002234:	37 02 70 28 	extr.u %d2,%d2,16,16
80002238:	37 02 70 20 	extr.u %d2,%d2,0,16
8000223c:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002240:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002242:	91 30 00 2f 	movh.a %a2,61443
80002246:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
8000224a:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
8000224c:	00 00       	nop 
8000224e:	91 30 00 2f 	movh.a %a2,61443
80002252:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002256:	54 22       	ld.w %d2,[%a2]
80002258:	37 02 61 20 	extr.u %d2,%d2,0,1
8000225c:	8f f2 0f 21 	and %d2,%d2,255
80002260:	df 02 f7 7f 	jeq %d2,0,8000224e <IfxScuCcu_init+0x7b2>
    {}
}
80002264:	00 00       	nop 
    return (boolean)initError;
80002266:	39 e2 f7 ff 	ld.bu %d2,[%a14]-9
8000226a:	e9 e2 ff ff 	st.b [%a14]-1,%d2

    if (!status)
8000226e:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
80002272:	df 02 0a 80 	jne %d2,0,80002286 <IfxScuCcu_init+0x7ea>
    {
        IfxScuCcu_modulation_init(config->modulationConfig);  /* initialize modulation */
80002276:	99 e2 dc df 	ld.a %a2,[%a14]-164
8000227a:	d9 22 1c 10 	lea %a2,[%a2]92
8000227e:	54 22       	ld.w %d2,[%a2]
80002280:	60 24       	mov.a %a4,%d2
80002282:	6d 00 03 05 	call 80002c88 <IfxScuCcu_modulation_init>
    }

    if (!status)
80002286:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
8000228a:	df 02 c3 83 	jne %d2,0,80002a10 <IfxScuCcu_init+0xf74>
    {
        status = IfxScuCcu_distributeClockInline(&config->clockDistribution);
8000228e:	19 e2 dc df 	ld.w %d2,[%a14]-164
80002292:	1b 02 02 20 	addi %d2,%d2,32
80002296:	59 e2 d8 ff 	st.w [%a14]-40,%d2
    uint32 initError = 0;
8000229a:	82 02       	mov %d2,0
8000229c:	59 e2 d4 ff 	st.w [%a14]-44,%d2
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
800022a0:	7b 30 00 2f 	movh %d2,61443
800022a4:	1b 82 2a 26 	addi %d2,%d2,25256
800022a8:	59 e2 d0 ff 	st.w [%a14]-48,%d2
    password  = watchdog->CON0.B.PW;
800022ac:	99 e2 d0 ff 	ld.a %a2,[%a14]-48
800022b0:	54 22       	ld.w %d2,[%a2]
800022b2:	37 02 6e 21 	extr.u %d2,%d2,2,14
800022b6:	37 02 70 20 	extr.u %d2,%d2,0,16
800022ba:	f9 e2 ce ff 	st.h [%a14]-50,%d2
    password ^= 0x003F;
800022be:	c9 e2 ce ff 	ld.h %d2,[%a14]-50
800022c2:	8f f2 83 21 	xor %d2,%d2,63
800022c6:	f9 e2 ce ff 	st.h [%a14]-50,%d2
    return password;
800022ca:	b9 e2 ce ff 	ld.hu %d2,[%a14]-50
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
800022ce:	f9 e2 cc ff 	st.h [%a14]-52,%d2
    IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
800022d2:	b9 e2 cc ff 	ld.hu %d2,[%a14]-52
800022d6:	f9 e2 ca ff 	st.h [%a14]-54,%d2
    if (SCU_WDTS_CON0.B.LCK)
800022da:	91 30 00 2f 	movh.a %a2,61443
800022de:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
800022e2:	54 22       	ld.w %d2,[%a2]
800022e4:	37 02 e1 20 	extr.u %d2,%d2,1,1
800022e8:	8f f2 0f 21 	and %d2,%d2,255
800022ec:	df 02 18 00 	jeq %d2,0,8000231c <IfxScuCcu_init+0x880>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800022f0:	b9 e2 ca ff 	ld.hu %d2,[%a14]-54
800022f4:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800022f6:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800022fa:	91 30 00 2f 	movh.a %a2,61443
800022fe:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002302:	54 22       	ld.w %d2,[%a2]
80002304:	37 02 70 28 	extr.u %d2,%d2,16,16
80002308:	37 02 70 20 	extr.u %d2,%d2,0,16
8000230c:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002310:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002312:	91 30 00 2f 	movh.a %a2,61443
80002316:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
8000231a:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000231c:	b9 e2 ca ff 	ld.hu %d2,[%a14]-54 <f00362a8 <_START2_end+0x4fd3607c>>
80002320:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002322:	8f 22 40 31 	or %d3,%d2,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002326:	91 30 00 2f 	movh.a %a2,61443
8000232a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
8000232e:	54 22       	ld.w %d2,[%a2]
80002330:	37 02 70 28 	extr.u %d2,%d2,16,16
80002334:	37 02 70 20 	extr.u %d2,%d2,0,16
80002338:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000233c:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000233e:	91 30 00 2f 	movh.a %a2,61443
80002342:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002346:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80002348:	00 00       	nop 
8000234a:	91 30 00 2f 	movh.a %a2,61443
8000234e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002352:	54 22       	ld.w %d2,[%a2]
80002354:	37 02 61 20 	extr.u %d2,%d2,0,1
80002358:	8f f2 0f 21 	and %d2,%d2,255
8000235c:	df 12 f7 7f 	jeq %d2,1,8000234a <IfxScuCcu_init+0x8ae>
}
80002360:	00 00       	nop 
        ccucon0.U         = SCU_CCUCON0.U & ~clockDistributionConfig->ccucon0.mask;
80002362:	91 30 00 2f 	movh.a %a2,61443
80002366:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd35e04>>
8000236a:	54 23       	ld.w %d3,[%a2]
8000236c:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036030 <_START2_end+0x4fd35e04>>
80002370:	b0 42       	add.a %a2,4
80002372:	54 22       	ld.w %d2,[%a2]
80002374:	46 02       	not %d2
80002376:	26 32       	and %d2,%d3
80002378:	59 e2 d4 ef 	st.w [%a14]-108,%d2
        ccucon0.U        |= (clockDistributionConfig->ccucon0.mask & clockDistributionConfig->ccucon0.value);
8000237c:	19 e3 d4 ef 	ld.w %d3,[%a14]-108
80002380:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80002384:	b0 42       	add.a %a2,4
80002386:	54 24       	ld.w %d4,[%a2]
80002388:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
8000238c:	54 22       	ld.w %d2,[%a2]
8000238e:	26 42       	and %d2,%d4
80002390:	a6 32       	or %d2,%d3
80002392:	59 e2 d4 ef 	st.w [%a14]-108,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80002396:	3b 00 00 21 	mov %d2,4096
8000239a:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON0.B.LCK != 0U)
8000239e:	1d 00 10 00 	j 800023be <IfxScuCcu_init+0x922>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800023a2:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
800023a6:	c2 f2       	add %d2,-1
800023a8:	59 e2 c4 ff 	st.w [%a14]-60,%d2
800023ac:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
800023b0:	ff 12 07 00 	jge %d2,1,800023be <IfxScuCcu_init+0x922>
800023b4:	82 12       	mov %d2,1
800023b6:	59 e2 d4 ff 	st.w [%a14]-44,%d2
800023ba:	1d 00 0d 00 	j 800023d4 <IfxScuCcu_init+0x938>
        while (SCU_CCUCON0.B.LCK != 0U)
800023be:	91 30 00 2f 	movh.a %a2,61443
800023c2:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd35e04>>
800023c6:	54 22       	ld.w %d2,[%a2]
800023c8:	37 02 e1 2f 	extr.u %d2,%d2,31,1
800023cc:	8f f2 0f 21 	and %d2,%d2,255
800023d0:	df 02 e9 ff 	jne %d2,0,800023a2 <IfxScuCcu_init+0x906>
        SCU_CCUCON0.U     = ccucon0.U;      /*Set update bit explicitly to make above configurations effective */
800023d4:	91 30 00 2f 	movh.a %a2,61443
800023d8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd35e04>>
800023dc:	19 e2 d4 ef 	ld.w %d2,[%a14]-108 <f0036030 <_START2_end+0x4fd35e04>>
800023e0:	74 22       	st.w [%a2],%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800023e2:	3b 00 00 21 	mov %d2,4096
800023e6:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON0.B.LCK != 0U)
800023ea:	1d 00 10 00 	j 8000240a <IfxScuCcu_init+0x96e>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800023ee:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
800023f2:	c2 f2       	add %d2,-1
800023f4:	59 e2 c4 ff 	st.w [%a14]-60,%d2
800023f8:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
800023fc:	ff 12 07 00 	jge %d2,1,8000240a <IfxScuCcu_init+0x96e>
80002400:	82 12       	mov %d2,1
80002402:	59 e2 d4 ff 	st.w [%a14]-44,%d2
80002406:	1d 00 0d 00 	j 80002420 <IfxScuCcu_init+0x984>
        while (SCU_CCUCON0.B.LCK != 0U)
8000240a:	91 30 00 2f 	movh.a %a2,61443
8000240e:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd35e04>>
80002412:	54 22       	ld.w %d2,[%a2]
80002414:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80002418:	8f f2 0f 21 	and %d2,%d2,255
8000241c:	df 02 e9 ff 	jne %d2,0,800023ee <IfxScuCcu_init+0x952>
        ccucon1.U = SCU_CCUCON1.U;
80002420:	91 30 00 2f 	movh.a %a2,61443
80002424:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd35e08>>
80002428:	54 22       	ld.w %d2,[%a2]
8000242a:	59 e2 d0 ef 	st.w [%a14]-112 <f0036034 <_START2_end+0x4fd35e08>>,%d2
        if (ccucon1.B.CLKSELMCAN
8000242e:	19 e2 d0 ef 	ld.w %d2,[%a14]-112 <f0036034 <_START2_end+0x4fd35e08>>
80002432:	8f 02 03 21 	and %d2,%d2,48
80002436:	df 02 10 80 	jne %d2,0,80002456 <IfxScuCcu_init+0x9ba>
            || ccucon1.B.CLKSELMSC
8000243a:	19 e2 d0 ef 	ld.w %d2,[%a14]-112
8000243e:	7b 00 03 30 	movh %d3,48
80002442:	26 32       	and %d2,%d3
80002444:	df 02 09 80 	jne %d2,0,80002456 <IfxScuCcu_init+0x9ba>
            || ccucon1.B.CLKSELQSPI)
80002448:	19 e2 d0 ef 	ld.w %d2,[%a14]-112
8000244c:	7b 00 00 33 	movh %d3,12288
80002450:	26 32       	and %d2,%d3
80002452:	df 02 7b 00 	jeq %d2,0,80002548 <IfxScuCcu_init+0xaac>
            ccucon1.U  = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
80002456:	91 30 00 2f 	movh.a %a2,61443
8000245a:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd35e08>>
8000245e:	54 23       	ld.w %d3,[%a2]
80002460:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036034 <_START2_end+0x4fd35e08>>
80002464:	d9 22 0c 00 	lea %a2,[%a2]12 <f0036034 <_START2_end+0x4fd35e08>>
80002468:	54 22       	ld.w %d2,[%a2]
8000246a:	46 02       	not %d2
8000246c:	26 32       	and %d2,%d3
8000246e:	59 e2 d0 ef 	st.w [%a14]-112,%d2
            ccucon1.U |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
80002472:	19 e3 d0 ef 	ld.w %d3,[%a14]-112
80002476:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
8000247a:	d9 22 0c 00 	lea %a2,[%a2]12
8000247e:	54 24       	ld.w %d4,[%a2]
80002480:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80002484:	d9 22 08 00 	lea %a2,[%a2]8
80002488:	54 22       	ld.w %d2,[%a2]
8000248a:	26 42       	and %d2,%d4
8000248c:	a6 32       	or %d2,%d3
8000248e:	59 e2 d0 ef 	st.w [%a14]-112,%d2
            ccucon1.B.CLKSELMCAN = (uint32)0;
80002492:	19 e2 d0 ef 	ld.w %d2,[%a14]-112
80002496:	8f 02 c3 21 	andn %d2,%d2,48
8000249a:	59 e2 d0 ef 	st.w [%a14]-112,%d2
            ccucon1.B.CLKSELMSC  = (uint32)0;
8000249e:	19 e2 d0 ef 	ld.w %d2,[%a14]-112
800024a2:	7b 00 fd 3f 	movh %d3,65488
800024a6:	c2 f3       	add %d3,-1
800024a8:	26 32       	and %d2,%d3
800024aa:	59 e2 d0 ef 	st.w [%a14]-112,%d2
            ccucon1.B.CLKSELQSPI = (uint32)0;
800024ae:	19 e2 d0 ef 	ld.w %d2,[%a14]-112
800024b2:	7b 00 00 3d 	movh %d3,53248
800024b6:	c2 f3       	add %d3,-1
800024b8:	26 32       	and %d2,%d3
800024ba:	59 e2 d0 ef 	st.w [%a14]-112,%d2
            timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800024be:	3b 00 00 21 	mov %d2,4096
800024c2:	59 e2 c4 ff 	st.w [%a14]-60,%d2
            while (SCU_CCUCON1.B.LCK != 0U)
800024c6:	1d 00 10 00 	j 800024e6 <IfxScuCcu_init+0xa4a>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800024ca:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
800024ce:	c2 f2       	add %d2,-1
800024d0:	59 e2 c4 ff 	st.w [%a14]-60,%d2
800024d4:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
800024d8:	ff 12 07 00 	jge %d2,1,800024e6 <IfxScuCcu_init+0xa4a>
800024dc:	82 12       	mov %d2,1
800024de:	59 e2 d4 ff 	st.w [%a14]-44,%d2
800024e2:	1d 00 0d 00 	j 800024fc <IfxScuCcu_init+0xa60>
            while (SCU_CCUCON1.B.LCK != 0U)
800024e6:	91 30 00 2f 	movh.a %a2,61443
800024ea:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd35e08>>
800024ee:	54 22       	ld.w %d2,[%a2]
800024f0:	37 02 e1 2f 	extr.u %d2,%d2,31,1
800024f4:	8f f2 0f 21 	and %d2,%d2,255
800024f8:	df 02 e9 ff 	jne %d2,0,800024ca <IfxScuCcu_init+0xa2e>
            SCU_CCUCON1.U     = ccucon1.U;
800024fc:	91 30 00 2f 	movh.a %a2,61443
80002500:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd35e08>>
80002504:	19 e2 d0 ef 	ld.w %d2,[%a14]-112 <f0036034 <_START2_end+0x4fd35e08>>
80002508:	74 22       	st.w [%a2],%d2
            timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
8000250a:	3b 00 00 21 	mov %d2,4096
8000250e:	59 e2 c4 ff 	st.w [%a14]-60,%d2
            while (SCU_CCUCON1.B.LCK != 0U)
80002512:	1d 00 10 00 	j 80002532 <IfxScuCcu_init+0xa96>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80002516:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
8000251a:	c2 f2       	add %d2,-1
8000251c:	59 e2 c4 ff 	st.w [%a14]-60,%d2
80002520:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80002524:	ff 12 07 00 	jge %d2,1,80002532 <IfxScuCcu_init+0xa96>
80002528:	82 12       	mov %d2,1
8000252a:	59 e2 d4 ff 	st.w [%a14]-44,%d2
8000252e:	1d 00 0d 00 	j 80002548 <IfxScuCcu_init+0xaac>
            while (SCU_CCUCON1.B.LCK != 0U)
80002532:	91 30 00 2f 	movh.a %a2,61443
80002536:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd35e08>>
8000253a:	54 22       	ld.w %d2,[%a2]
8000253c:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80002540:	8f f2 0f 21 	and %d2,%d2,255
80002544:	df 02 e9 ff 	jne %d2,0,80002516 <IfxScuCcu_init+0xa7a>
        ccucon1.U         = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
80002548:	91 30 00 2f 	movh.a %a2,61443
8000254c:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd35e08>>
80002550:	54 23       	ld.w %d3,[%a2]
80002552:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036034 <_START2_end+0x4fd35e08>>
80002556:	d9 22 0c 00 	lea %a2,[%a2]12 <f0036034 <_START2_end+0x4fd35e08>>
8000255a:	54 22       	ld.w %d2,[%a2]
8000255c:	46 02       	not %d2
8000255e:	26 32       	and %d2,%d3
80002560:	59 e2 d0 ef 	st.w [%a14]-112,%d2
        ccucon1.U        |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
80002564:	19 e3 d0 ef 	ld.w %d3,[%a14]-112
80002568:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
8000256c:	d9 22 0c 00 	lea %a2,[%a2]12
80002570:	54 24       	ld.w %d4,[%a2]
80002572:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80002576:	d9 22 08 00 	lea %a2,[%a2]8
8000257a:	54 22       	ld.w %d2,[%a2]
8000257c:	26 42       	and %d2,%d4
8000257e:	a6 32       	or %d2,%d3
80002580:	59 e2 d0 ef 	st.w [%a14]-112,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80002584:	3b 00 00 21 	mov %d2,4096
80002588:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON1.B.LCK != 0U)
8000258c:	1d 00 10 00 	j 800025ac <IfxScuCcu_init+0xb10>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80002590:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80002594:	c2 f2       	add %d2,-1
80002596:	59 e2 c4 ff 	st.w [%a14]-60,%d2
8000259a:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
8000259e:	ff 12 07 00 	jge %d2,1,800025ac <IfxScuCcu_init+0xb10>
800025a2:	82 12       	mov %d2,1
800025a4:	59 e2 d4 ff 	st.w [%a14]-44,%d2
800025a8:	1d 00 0d 00 	j 800025c2 <IfxScuCcu_init+0xb26>
        while (SCU_CCUCON1.B.LCK != 0U)
800025ac:	91 30 00 2f 	movh.a %a2,61443
800025b0:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd35e08>>
800025b4:	54 22       	ld.w %d2,[%a2]
800025b6:	37 02 e1 2f 	extr.u %d2,%d2,31,1
800025ba:	8f f2 0f 21 	and %d2,%d2,255
800025be:	df 02 e9 ff 	jne %d2,0,80002590 <IfxScuCcu_init+0xaf4>
        SCU_CCUCON1.U     = ccucon1.U;
800025c2:	91 30 00 2f 	movh.a %a2,61443
800025c6:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd35e08>>
800025ca:	19 e2 d0 ef 	ld.w %d2,[%a14]-112 <f0036034 <_START2_end+0x4fd35e08>>
800025ce:	74 22       	st.w [%a2],%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800025d0:	3b 00 00 21 	mov %d2,4096
800025d4:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON1.B.LCK != 0U)
800025d8:	1d 00 10 00 	j 800025f8 <IfxScuCcu_init+0xb5c>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800025dc:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
800025e0:	c2 f2       	add %d2,-1
800025e2:	59 e2 c4 ff 	st.w [%a14]-60,%d2
800025e6:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
800025ea:	ff 12 07 00 	jge %d2,1,800025f8 <IfxScuCcu_init+0xb5c>
800025ee:	82 12       	mov %d2,1
800025f0:	59 e2 d4 ff 	st.w [%a14]-44,%d2
800025f4:	1d 00 0d 00 	j 8000260e <IfxScuCcu_init+0xb72>
        while (SCU_CCUCON1.B.LCK != 0U)
800025f8:	91 30 00 2f 	movh.a %a2,61443
800025fc:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fd35e08>>
80002600:	54 22       	ld.w %d2,[%a2]
80002602:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80002606:	8f f2 0f 21 	and %d2,%d2,255
8000260a:	df 02 e9 ff 	jne %d2,0,800025dc <IfxScuCcu_init+0xb40>
        ccucon2.U = SCU_CCUCON2.U;
8000260e:	91 30 00 2f 	movh.a %a2,61443
80002612:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fd35e14>>
80002616:	54 22       	ld.w %d2,[%a2]
80002618:	59 e2 cc ef 	st.w [%a14]-116 <f0036040 <_START2_end+0x4fd35e14>>,%d2
        if (ccucon2.B.CLKSELASCLINS)
8000261c:	19 e2 cc ef 	ld.w %d2,[%a14]-116 <f0036040 <_START2_end+0x4fd35e14>>
80002620:	3b 00 00 33 	mov %d3,12288
80002624:	26 32       	and %d2,%d3
80002626:	df 02 6c 00 	jeq %d2,0,800026fe <IfxScuCcu_init+0xc62>
            ccucon2.U               = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
8000262a:	91 30 00 2f 	movh.a %a2,61443
8000262e:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fd35e14>>
80002632:	54 23       	ld.w %d3,[%a2]
80002634:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036040 <_START2_end+0x4fd35e14>>
80002638:	d9 22 14 00 	lea %a2,[%a2]20 <f0036040 <_START2_end+0x4fd35e14>>
8000263c:	54 22       	ld.w %d2,[%a2]
8000263e:	46 02       	not %d2
80002640:	26 32       	and %d2,%d3
80002642:	59 e2 cc ef 	st.w [%a14]-116,%d2
            ccucon2.U              |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
80002646:	19 e3 cc ef 	ld.w %d3,[%a14]-116
8000264a:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
8000264e:	d9 22 14 00 	lea %a2,[%a2]20
80002652:	54 24       	ld.w %d4,[%a2]
80002654:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80002658:	d9 22 10 00 	lea %a2,[%a2]16
8000265c:	54 22       	ld.w %d2,[%a2]
8000265e:	26 42       	and %d2,%d4
80002660:	a6 32       	or %d2,%d3
80002662:	59 e2 cc ef 	st.w [%a14]-116,%d2
            ccucon2.B.CLKSELASCLINS = (uint32)0;
80002666:	19 e2 cc ef 	ld.w %d2,[%a14]-116
8000266a:	3b f0 ff 3c 	mov %d3,-12289
8000266e:	26 32       	and %d2,%d3
80002670:	59 e2 cc ef 	st.w [%a14]-116,%d2
            timeoutCycleCount       = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80002674:	3b 00 00 21 	mov %d2,4096
80002678:	59 e2 c4 ff 	st.w [%a14]-60,%d2
            while (SCU_CCUCON2.B.LCK != 0U)
8000267c:	1d 00 10 00 	j 8000269c <IfxScuCcu_init+0xc00>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80002680:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80002684:	c2 f2       	add %d2,-1
80002686:	59 e2 c4 ff 	st.w [%a14]-60,%d2
8000268a:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
8000268e:	ff 12 07 00 	jge %d2,1,8000269c <IfxScuCcu_init+0xc00>
80002692:	82 12       	mov %d2,1
80002694:	59 e2 d4 ff 	st.w [%a14]-44,%d2
80002698:	1d 00 0d 00 	j 800026b2 <IfxScuCcu_init+0xc16>
            while (SCU_CCUCON2.B.LCK != 0U)
8000269c:	91 30 00 2f 	movh.a %a2,61443
800026a0:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fd35e14>>
800026a4:	54 22       	ld.w %d2,[%a2]
800026a6:	37 02 e1 2f 	extr.u %d2,%d2,31,1
800026aa:	8f f2 0f 21 	and %d2,%d2,255
800026ae:	df 02 e9 ff 	jne %d2,0,80002680 <IfxScuCcu_init+0xbe4>
            SCU_CCUCON2.U     = ccucon2.U;
800026b2:	91 30 00 2f 	movh.a %a2,61443
800026b6:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fd35e14>>
800026ba:	19 e2 cc ef 	ld.w %d2,[%a14]-116 <f0036040 <_START2_end+0x4fd35e14>>
800026be:	74 22       	st.w [%a2],%d2
            timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800026c0:	3b 00 00 21 	mov %d2,4096
800026c4:	59 e2 c4 ff 	st.w [%a14]-60,%d2
            while (SCU_CCUCON2.B.LCK != 0U)
800026c8:	1d 00 10 00 	j 800026e8 <IfxScuCcu_init+0xc4c>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800026cc:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
800026d0:	c2 f2       	add %d2,-1
800026d2:	59 e2 c4 ff 	st.w [%a14]-60,%d2
800026d6:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
800026da:	ff 12 07 00 	jge %d2,1,800026e8 <IfxScuCcu_init+0xc4c>
800026de:	82 12       	mov %d2,1
800026e0:	59 e2 d4 ff 	st.w [%a14]-44,%d2
800026e4:	1d 00 0d 00 	j 800026fe <IfxScuCcu_init+0xc62>
            while (SCU_CCUCON2.B.LCK != 0U)
800026e8:	91 30 00 2f 	movh.a %a2,61443
800026ec:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fd35e14>>
800026f0:	54 22       	ld.w %d2,[%a2]
800026f2:	37 02 e1 2f 	extr.u %d2,%d2,31,1
800026f6:	8f f2 0f 21 	and %d2,%d2,255
800026fa:	df 02 e9 ff 	jne %d2,0,800026cc <IfxScuCcu_init+0xc30>
        ccucon2.U         = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
800026fe:	91 30 00 2f 	movh.a %a2,61443
80002702:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fd35e14>>
80002706:	54 23       	ld.w %d3,[%a2]
80002708:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036040 <_START2_end+0x4fd35e14>>
8000270c:	d9 22 14 00 	lea %a2,[%a2]20 <f0036040 <_START2_end+0x4fd35e14>>
80002710:	54 22       	ld.w %d2,[%a2]
80002712:	46 02       	not %d2
80002714:	26 32       	and %d2,%d3
80002716:	59 e2 cc ef 	st.w [%a14]-116,%d2
        ccucon2.U        |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
8000271a:	19 e3 cc ef 	ld.w %d3,[%a14]-116
8000271e:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80002722:	d9 22 14 00 	lea %a2,[%a2]20
80002726:	54 24       	ld.w %d4,[%a2]
80002728:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
8000272c:	d9 22 10 00 	lea %a2,[%a2]16
80002730:	54 22       	ld.w %d2,[%a2]
80002732:	26 42       	and %d2,%d4
80002734:	a6 32       	or %d2,%d3
80002736:	59 e2 cc ef 	st.w [%a14]-116,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
8000273a:	3b 00 00 21 	mov %d2,4096
8000273e:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON2.B.LCK != 0U)
80002742:	1d 00 10 00 	j 80002762 <IfxScuCcu_init+0xcc6>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80002746:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
8000274a:	c2 f2       	add %d2,-1
8000274c:	59 e2 c4 ff 	st.w [%a14]-60,%d2
80002750:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80002754:	ff 12 07 00 	jge %d2,1,80002762 <IfxScuCcu_init+0xcc6>
80002758:	82 12       	mov %d2,1
8000275a:	59 e2 d4 ff 	st.w [%a14]-44,%d2
8000275e:	1d 00 0d 00 	j 80002778 <IfxScuCcu_init+0xcdc>
        while (SCU_CCUCON2.B.LCK != 0U)
80002762:	91 30 00 2f 	movh.a %a2,61443
80002766:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fd35e14>>
8000276a:	54 22       	ld.w %d2,[%a2]
8000276c:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80002770:	8f f2 0f 21 	and %d2,%d2,255
80002774:	df 02 e9 ff 	jne %d2,0,80002746 <IfxScuCcu_init+0xcaa>
        SCU_CCUCON2.U     = ccucon2.U;
80002778:	91 30 00 2f 	movh.a %a2,61443
8000277c:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fd35e14>>
80002780:	19 e2 cc ef 	ld.w %d2,[%a14]-116 <f0036040 <_START2_end+0x4fd35e14>>
80002784:	74 22       	st.w [%a2],%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80002786:	3b 00 00 21 	mov %d2,4096
8000278a:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON2.B.LCK != 0U)
8000278e:	1d 00 10 00 	j 800027ae <IfxScuCcu_init+0xd12>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80002792:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80002796:	c2 f2       	add %d2,-1
80002798:	59 e2 c4 ff 	st.w [%a14]-60,%d2
8000279c:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
800027a0:	ff 12 07 00 	jge %d2,1,800027ae <IfxScuCcu_init+0xd12>
800027a4:	82 12       	mov %d2,1
800027a6:	59 e2 d4 ff 	st.w [%a14]-44,%d2
800027aa:	1d 00 0d 00 	j 800027c4 <IfxScuCcu_init+0xd28>
        while (SCU_CCUCON2.B.LCK != 0U)
800027ae:	91 30 00 2f 	movh.a %a2,61443
800027b2:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fd35e14>>
800027b6:	54 22       	ld.w %d2,[%a2]
800027b8:	37 02 e1 2f 	extr.u %d2,%d2,31,1
800027bc:	8f f2 0f 21 	and %d2,%d2,255
800027c0:	df 02 e9 ff 	jne %d2,0,80002792 <IfxScuCcu_init+0xcf6>
        ccucon5.U         = SCU_CCUCON5.U & ~clockDistributionConfig->ccucon5.mask;
800027c4:	91 30 00 2f 	movh.a %a2,61443
800027c8:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_START2_end+0x4fd35e20>>
800027cc:	54 23       	ld.w %d3,[%a2]
800027ce:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f003604c <_START2_end+0x4fd35e20>>
800027d2:	d9 22 1c 00 	lea %a2,[%a2]28 <f003604c <_START2_end+0x4fd35e20>>
800027d6:	54 22       	ld.w %d2,[%a2]
800027d8:	46 02       	not %d2
800027da:	26 32       	and %d2,%d3
800027dc:	59 e2 c8 ef 	st.w [%a14]-120,%d2
        ccucon5.U        |= (clockDistributionConfig->ccucon5.mask & clockDistributionConfig->ccucon5.value);
800027e0:	19 e3 c8 ef 	ld.w %d3,[%a14]-120
800027e4:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
800027e8:	d9 22 1c 00 	lea %a2,[%a2]28
800027ec:	54 24       	ld.w %d4,[%a2]
800027ee:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
800027f2:	d9 22 18 00 	lea %a2,[%a2]24
800027f6:	54 22       	ld.w %d2,[%a2]
800027f8:	26 42       	and %d2,%d4
800027fa:	a6 32       	or %d2,%d3
800027fc:	59 e2 c8 ef 	st.w [%a14]-120,%d2
        ccucon5.B.UP      = 1;
80002800:	19 e2 c8 ef 	ld.w %d2,[%a14]-120
80002804:	b7 12 01 2f 	insert %d2,%d2,1,30,1
80002808:	59 e2 c8 ef 	st.w [%a14]-120,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
8000280c:	3b 00 00 21 	mov %d2,4096
80002810:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON5.B.LCK != 0U)
80002814:	1d 00 10 00 	j 80002834 <IfxScuCcu_init+0xd98>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80002818:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
8000281c:	c2 f2       	add %d2,-1
8000281e:	59 e2 c4 ff 	st.w [%a14]-60,%d2
80002822:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80002826:	ff 12 07 00 	jge %d2,1,80002834 <IfxScuCcu_init+0xd98>
8000282a:	82 12       	mov %d2,1
8000282c:	59 e2 d4 ff 	st.w [%a14]-44,%d2
80002830:	1d 00 0d 00 	j 8000284a <IfxScuCcu_init+0xdae>
        while (SCU_CCUCON5.B.LCK != 0U)
80002834:	91 30 00 2f 	movh.a %a2,61443
80002838:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_START2_end+0x4fd35e20>>
8000283c:	54 22       	ld.w %d2,[%a2]
8000283e:	37 02 e1 2f 	extr.u %d2,%d2,31,1
80002842:	8f f2 0f 21 	and %d2,%d2,255
80002846:	df 02 e9 ff 	jne %d2,0,80002818 <IfxScuCcu_init+0xd7c>
        SCU_CCUCON5.U     = ccucon5.U;
8000284a:	91 30 00 2f 	movh.a %a2,61443
8000284e:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_START2_end+0x4fd35e20>>
80002852:	19 e2 c8 ef 	ld.w %d2,[%a14]-120 <f003604c <_START2_end+0x4fd35e20>>
80002856:	74 22       	st.w [%a2],%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80002858:	3b 00 00 21 	mov %d2,4096
8000285c:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON5.B.LCK != 0U)
80002860:	1d 00 10 00 	j 80002880 <IfxScuCcu_init+0xde4>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80002864:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80002868:	c2 f2       	add %d2,-1
8000286a:	59 e2 c4 ff 	st.w [%a14]-60,%d2
8000286e:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
80002872:	ff 12 07 00 	jge %d2,1,80002880 <IfxScuCcu_init+0xde4>
80002876:	82 12       	mov %d2,1
80002878:	59 e2 d4 ff 	st.w [%a14]-44,%d2
8000287c:	1d 00 0d 00 	j 80002896 <IfxScuCcu_init+0xdfa>
        while (SCU_CCUCON5.B.LCK != 0U)
80002880:	91 30 00 2f 	movh.a %a2,61443
80002884:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_START2_end+0x4fd35e20>>
80002888:	54 22       	ld.w %d2,[%a2]
8000288a:	37 02 e1 2f 	extr.u %d2,%d2,31,1
8000288e:	8f f2 0f 21 	and %d2,%d2,255
80002892:	df 02 e9 ff 	jne %d2,0,80002864 <IfxScuCcu_init+0xdc8>
        ccucon6.U     = SCU_CCUCON6.U & ~clockDistributionConfig->ccucon6.mask;
80002896:	91 30 00 2f 	movh.a %a2,61443
8000289a:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_START2_end+0x4fd35e54>>
8000289e:	54 23       	ld.w %d3,[%a2]
800028a0:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036080 <_START2_end+0x4fd35e54>>
800028a4:	d9 22 24 00 	lea %a2,[%a2]36 <f0036080 <_START2_end+0x4fd35e54>>
800028a8:	54 22       	ld.w %d2,[%a2]
800028aa:	46 02       	not %d2
800028ac:	26 32       	and %d2,%d3
800028ae:	59 e2 c4 ef 	st.w [%a14]-124,%d2
        ccucon6.U    |= (clockDistributionConfig->ccucon6.mask & clockDistributionConfig->ccucon6.value);
800028b2:	19 e3 c4 ef 	ld.w %d3,[%a14]-124
800028b6:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
800028ba:	d9 22 24 00 	lea %a2,[%a2]36
800028be:	54 24       	ld.w %d4,[%a2]
800028c0:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
800028c4:	d9 22 20 00 	lea %a2,[%a2]32
800028c8:	54 22       	ld.w %d2,[%a2]
800028ca:	26 42       	and %d2,%d4
800028cc:	a6 32       	or %d2,%d3
800028ce:	59 e2 c4 ef 	st.w [%a14]-124,%d2
        SCU_CCUCON6.U = ccucon6.U;
800028d2:	91 30 00 2f 	movh.a %a2,61443
800028d6:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_START2_end+0x4fd35e54>>
800028da:	19 e2 c4 ef 	ld.w %d2,[%a14]-124 <f0036080 <_START2_end+0x4fd35e54>>
800028de:	74 22       	st.w [%a2],%d2
        ccucon7.U     = SCU_CCUCON7.U & ~clockDistributionConfig->ccucon7.mask;
800028e0:	91 30 00 2f 	movh.a %a2,61443
800028e4:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_START2_end+0x4fd35e58>>
800028e8:	54 23       	ld.w %d3,[%a2]
800028ea:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036084 <_START2_end+0x4fd35e58>>
800028ee:	d9 22 2c 00 	lea %a2,[%a2]44 <f0036084 <_START2_end+0x4fd35e58>>
800028f2:	54 22       	ld.w %d2,[%a2]
800028f4:	46 02       	not %d2
800028f6:	26 32       	and %d2,%d3
800028f8:	59 e2 c0 ef 	st.w [%a14]-128,%d2
        ccucon7.U    |= (clockDistributionConfig->ccucon7.mask & clockDistributionConfig->ccucon7.value);
800028fc:	19 e3 c0 ef 	ld.w %d3,[%a14]-128
80002900:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80002904:	d9 22 2c 00 	lea %a2,[%a2]44
80002908:	54 24       	ld.w %d4,[%a2]
8000290a:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
8000290e:	d9 22 28 00 	lea %a2,[%a2]40
80002912:	54 22       	ld.w %d2,[%a2]
80002914:	26 42       	and %d2,%d4
80002916:	a6 32       	or %d2,%d3
80002918:	59 e2 c0 ef 	st.w [%a14]-128,%d2
        SCU_CCUCON7.U = ccucon7.U;
8000291c:	91 30 00 2f 	movh.a %a2,61443
80002920:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_START2_end+0x4fd35e58>>
80002924:	19 e2 c0 ef 	ld.w %d2,[%a14]-128 <f0036084 <_START2_end+0x4fd35e58>>
80002928:	74 22       	st.w [%a2],%d2
        ccucon8.U     = SCU_CCUCON8.U & ~clockDistributionConfig->ccucon8.mask;
8000292a:	91 30 00 2f 	movh.a %a2,61443
8000292e:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_START2_end+0x4fd35e5c>>
80002932:	54 23       	ld.w %d3,[%a2]
80002934:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036088 <_START2_end+0x4fd35e5c>>
80002938:	d9 22 34 00 	lea %a2,[%a2]52 <f0036088 <_START2_end+0x4fd35e5c>>
8000293c:	54 22       	ld.w %d2,[%a2]
8000293e:	46 02       	not %d2
80002940:	26 32       	and %d2,%d3
80002942:	59 e2 fc df 	st.w [%a14]-132,%d2
        ccucon8.U    |= (clockDistributionConfig->ccucon8.mask & clockDistributionConfig->ccucon8.value);
80002946:	19 e3 fc df 	ld.w %d3,[%a14]-132
8000294a:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
8000294e:	d9 22 34 00 	lea %a2,[%a2]52
80002952:	54 24       	ld.w %d4,[%a2]
80002954:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
80002958:	d9 22 30 00 	lea %a2,[%a2]48
8000295c:	54 22       	ld.w %d2,[%a2]
8000295e:	26 42       	and %d2,%d4
80002960:	a6 32       	or %d2,%d3
80002962:	59 e2 fc df 	st.w [%a14]-132,%d2
        SCU_CCUCON8.U = ccucon8.U;
80002966:	91 30 00 2f 	movh.a %a2,61443
8000296a:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_START2_end+0x4fd35e5c>>
8000296e:	19 e2 fc df 	ld.w %d2,[%a14]-132 <f0036088 <_START2_end+0x4fd35e5c>>
80002972:	74 22       	st.w [%a2],%d2
    IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
80002974:	b9 e2 cc ff 	ld.hu %d2,[%a14]-52 <f0036088 <_START2_end+0x4fd35e5c>>
80002978:	f9 e2 c2 ff 	st.h [%a14]-62 <f0036088 <_START2_end+0x4fd35e5c>>,%d2
    if (SCU_WDTS_CON0.B.LCK)
8000297c:	91 30 00 2f 	movh.a %a2,61443
80002980:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002984:	54 22       	ld.w %d2,[%a2]
80002986:	37 02 e1 20 	extr.u %d2,%d2,1,1
8000298a:	8f f2 0f 21 	and %d2,%d2,255
8000298e:	df 02 18 00 	jeq %d2,0,800029be <IfxScuCcu_init+0xf22>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002992:	b9 e2 c2 ff 	ld.hu %d2,[%a14]-62
80002996:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002998:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000299c:	91 30 00 2f 	movh.a %a2,61443
800029a0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
800029a4:	54 22       	ld.w %d2,[%a2]
800029a6:	37 02 70 28 	extr.u %d2,%d2,16,16
800029aa:	37 02 70 20 	extr.u %d2,%d2,0,16
800029ae:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800029b2:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800029b4:	91 30 00 2f 	movh.a %a2,61443
800029b8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
800029bc:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800029be:	b9 e2 c2 ff 	ld.hu %d2,[%a14]-62 <f00362a8 <_START2_end+0x4fd3607c>>
800029c2:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800029c4:	8f 32 40 31 	or %d3,%d2,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800029c8:	91 30 00 2f 	movh.a %a2,61443
800029cc:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
800029d0:	54 22       	ld.w %d2,[%a2]
800029d2:	37 02 70 28 	extr.u %d2,%d2,16,16
800029d6:	37 02 70 20 	extr.u %d2,%d2,0,16
800029da:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800029de:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800029e0:	91 30 00 2f 	movh.a %a2,61443
800029e4:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
800029e8:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
800029ea:	00 00       	nop 
800029ec:	91 30 00 2f 	movh.a %a2,61443
800029f0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
800029f4:	54 22       	ld.w %d2,[%a2]
800029f6:	37 02 61 20 	extr.u %d2,%d2,0,1
800029fa:	8f f2 0f 21 	and %d2,%d2,255
800029fe:	df 02 f7 7f 	jeq %d2,0,800029ec <IfxScuCcu_init+0xf50>
}
80002a02:	00 00       	nop 
    return (boolean)initError;
80002a04:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
80002a08:	8f f2 0f 21 	and %d2,%d2,255
80002a0c:	e9 e2 ff ff 	st.b [%a14]-1,%d2
        IfxScuWdt_setCpuEndinit(endInitPW);
    }

#endif

    if (!status)
80002a10:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
80002a14:	df 02 37 81 	jne %d2,0,80002c82 <IfxScuCcu_init+0x11e6>
    {
        status = IfxScuCcu_throttleSysPllClockInline(&config->sysPllThrottleConfig);
80002a18:	19 e2 dc df 	ld.w %d2,[%a14]-164
80002a1c:	1b 82 01 20 	addi %d2,%d2,24
80002a20:	59 e2 fc ef 	st.w [%a14]-68,%d2
}


IFX_INLINE boolean IfxScuCcu_throttleSysPllClockInline(const IfxScuCcu_PllThrottleConfig *pllThrottleConfig)
{
    uint8  initError = 0;
80002a24:	82 02       	mov %d2,0
80002a26:	e9 e2 fb ef 	st.b [%a14]-69,%d2
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
80002a2a:	7b 30 00 2f 	movh %d2,61443
80002a2e:	1b 82 2a 26 	addi %d2,%d2,25256
80002a32:	59 e2 f4 ef 	st.w [%a14]-76,%d2
    password  = watchdog->CON0.B.PW;
80002a36:	99 e2 f4 ef 	ld.a %a2,[%a14]-76
80002a3a:	54 22       	ld.w %d2,[%a2]
80002a3c:	37 02 6e 21 	extr.u %d2,%d2,2,14
80002a40:	37 02 70 20 	extr.u %d2,%d2,0,16
80002a44:	f9 e2 f2 ef 	st.h [%a14]-78,%d2
    password ^= 0x003F;
80002a48:	c9 e2 f2 ef 	ld.h %d2,[%a14]-78
80002a4c:	8f f2 83 21 	xor %d2,%d2,63
80002a50:	f9 e2 f2 ef 	st.h [%a14]-78,%d2
    return password;
80002a54:	b9 e2 f2 ef 	ld.hu %d2,[%a14]-78
    uint8  pllStepsCount;
    uint16 endinitSfty_pw;
    uint32 timeoutCycleCount;

    /*get the watch-dog passwords for usage with this function*/
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
80002a58:	f9 e2 f0 ef 	st.h [%a14]-80,%d2

    /*Start Pll ramp up sequence */
    for (pllStepsCount = 0; pllStepsCount < pllThrottleConfig->numOfSteps; pllStepsCount++)
80002a5c:	82 02       	mov %d2,0
80002a5e:	e9 e2 ef ef 	st.b [%a14]-81,%d2
80002a62:	1d 00 05 01 	j 80002c6c <IfxScuCcu_init+0x11d0>
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
80002a66:	b9 e2 f0 ef 	ld.hu %d2,[%a14]-80
80002a6a:	f9 e2 ec ef 	st.h [%a14]-84,%d2
    if (SCU_WDTS_CON0.B.LCK)
80002a6e:	91 30 00 2f 	movh.a %a2,61443
80002a72:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002a76:	54 22       	ld.w %d2,[%a2]
80002a78:	37 02 e1 20 	extr.u %d2,%d2,1,1
80002a7c:	8f f2 0f 21 	and %d2,%d2,255
80002a80:	df 02 18 00 	jeq %d2,0,80002ab0 <IfxScuCcu_init+0x1014>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002a84:	b9 e2 ec ef 	ld.hu %d2,[%a14]-84
80002a88:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002a8a:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002a8e:	91 30 00 2f 	movh.a %a2,61443
80002a92:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002a96:	54 22       	ld.w %d2,[%a2]
80002a98:	37 02 70 28 	extr.u %d2,%d2,16,16
80002a9c:	37 02 70 20 	extr.u %d2,%d2,0,16
80002aa0:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002aa4:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002aa6:	91 30 00 2f 	movh.a %a2,61443
80002aaa:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002aae:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002ab0:	b9 e2 ec ef 	ld.hu %d2,[%a14]-84 <f00362a8 <_START2_end+0x4fd3607c>>
80002ab4:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002ab6:	8f 22 40 31 	or %d3,%d2,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002aba:	91 30 00 2f 	movh.a %a2,61443
80002abe:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002ac2:	54 22       	ld.w %d2,[%a2]
80002ac4:	37 02 70 28 	extr.u %d2,%d2,16,16
80002ac8:	37 02 70 20 	extr.u %d2,%d2,0,16
80002acc:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002ad0:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002ad2:	91 30 00 2f 	movh.a %a2,61443
80002ad6:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002ada:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80002adc:	00 00       	nop 
80002ade:	91 30 00 2f 	movh.a %a2,61443
80002ae2:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002ae6:	54 22       	ld.w %d2,[%a2]
80002ae8:	37 02 61 20 	extr.u %d2,%d2,0,1
80002aec:	8f f2 0f 21 	and %d2,%d2,255
80002af0:	df 12 f7 7f 	jeq %d2,1,80002ade <IfxScuCcu_init+0x1042>
}
80002af4:	00 00       	nop 

            /*Configure K2 divider */
            timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
80002af6:	3b 00 00 26 	mov %d2,24576
80002afa:	59 e2 e8 ef 	st.w [%a14]-88,%d2

            while (SCU_SYSPLLSTAT.B.K2RDY == 0U)
80002afe:	1d 00 10 00 	j 80002b1e <IfxScuCcu_init+0x1082>
            {
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80002b02:	19 e2 e8 ef 	ld.w %d2,[%a14]-88
80002b06:	c2 f2       	add %d2,-1
80002b08:	59 e2 e8 ef 	st.w [%a14]-88,%d2
80002b0c:	19 e2 e8 ef 	ld.w %d2,[%a14]-88
80002b10:	ff 12 07 00 	jge %d2,1,80002b1e <IfxScuCcu_init+0x1082>
80002b14:	82 12       	mov %d2,1
80002b16:	e9 e2 fb ef 	st.b [%a14]-69,%d2
80002b1a:	1d 00 0d 00 	j 80002b34 <IfxScuCcu_init+0x1098>
            while (SCU_SYSPLLSTAT.B.K2RDY == 0U)
80002b1e:	91 30 00 2f 	movh.a %a2,61443
80002b22:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_START2_end+0x4fd35de8>>
80002b26:	54 22       	ld.w %d2,[%a2]
80002b28:	37 02 e1 22 	extr.u %d2,%d2,5,1
80002b2c:	8f f2 0f 21 	and %d2,%d2,255
80002b30:	df 02 e9 7f 	jeq %d2,0,80002b02 <IfxScuCcu_init+0x1066>
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_SYSPLLCON1.B.K2DIV = pllThrottleConfig->pllSteps[pllStepsCount].k2Step;
80002b34:	99 e2 fc ef 	ld.a %a2,[%a14]-68
80002b38:	b0 42       	add.a %a2,4
80002b3a:	54 23       	ld.w %d3,[%a2]
80002b3c:	39 e2 ef ef 	ld.bu %d2,[%a14]-81
80002b40:	06 32       	sh %d2,3
80002b42:	60 32       	mov.a %a2,%d3
80002b44:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002b48:	14 22       	ld.bu %d2,[%a2]
80002b4a:	91 30 00 2f 	movh.a %a2,61443
80002b4e:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_START2_end+0x4fd35df0>>
80002b52:	8f 72 00 21 	and %d2,%d2,7
80002b56:	8f f2 0f 31 	and %d3,%d2,255
80002b5a:	54 22       	ld.w %d2,[%a2]
80002b5c:	37 32 03 20 	insert %d2,%d2,%d3,0,3
80002b60:	74 22       	st.w [%a2],%d2
            IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
80002b62:	b9 e2 f0 ef 	ld.hu %d2,[%a14]-80
80002b66:	f9 e2 e6 ef 	st.h [%a14]-90,%d2
    if (SCU_WDTS_CON0.B.LCK)
80002b6a:	91 30 00 2f 	movh.a %a2,61443
80002b6e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002b72:	54 22       	ld.w %d2,[%a2]
80002b74:	37 02 e1 20 	extr.u %d2,%d2,1,1
80002b78:	8f f2 0f 21 	and %d2,%d2,255
80002b7c:	df 02 18 00 	jeq %d2,0,80002bac <IfxScuCcu_init+0x1110>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002b80:	b9 e2 e6 ef 	ld.hu %d2,[%a14]-90
80002b84:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002b86:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002b8a:	91 30 00 2f 	movh.a %a2,61443
80002b8e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002b92:	54 22       	ld.w %d2,[%a2]
80002b94:	37 02 70 28 	extr.u %d2,%d2,16,16
80002b98:	37 02 70 20 	extr.u %d2,%d2,0,16
80002b9c:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002ba0:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002ba2:	91 30 00 2f 	movh.a %a2,61443
80002ba6:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002baa:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002bac:	b9 e2 e6 ef 	ld.hu %d2,[%a14]-90 <f00362a8 <_START2_end+0x4fd3607c>>
80002bb0:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002bb2:	8f 32 40 31 	or %d3,%d2,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002bb6:	91 30 00 2f 	movh.a %a2,61443
80002bba:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002bbe:	54 22       	ld.w %d2,[%a2]
80002bc0:	37 02 70 28 	extr.u %d2,%d2,16,16
80002bc4:	37 02 70 20 	extr.u %d2,%d2,0,16
80002bc8:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002bcc:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002bce:	91 30 00 2f 	movh.a %a2,61443
80002bd2:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002bd6:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80002bd8:	00 00       	nop 
80002bda:	91 30 00 2f 	movh.a %a2,61443
80002bde:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002be2:	54 22       	ld.w %d2,[%a2]
80002be4:	37 02 61 20 	extr.u %d2,%d2,0,1
80002be8:	8f f2 0f 21 	and %d2,%d2,255
80002bec:	df 02 f7 7f 	jeq %d2,0,80002bda <IfxScuCcu_init+0x113e>
}
80002bf0:	00 00       	nop 
        }

        /*Wait for waitCounter corresponding to the pll step */
        IfxScuCcu_wait(pllThrottleConfig->pllSteps[pllStepsCount].waitTime);
80002bf2:	99 e2 fc ef 	ld.a %a2,[%a14]-68
80002bf6:	b0 42       	add.a %a2,4
80002bf8:	54 23       	ld.w %d3,[%a2]
80002bfa:	39 e2 ef ef 	ld.bu %d2,[%a14]-81
80002bfe:	06 32       	sh %d2,3
80002c00:	60 32       	mov.a %a2,%d3
80002c02:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002c06:	b0 42       	add.a %a2,4
80002c08:	54 22       	ld.w %d2,[%a2]
80002c0a:	59 e2 e0 ef 	st.w [%a14]-96,%d2
    return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON0.B.STMDIV;
80002c0e:	82 04       	mov %d4,0
80002c10:	6d ff e5 f6 	call 800019da <IfxScuCcu_getSourceFrequency>
80002c14:	02 23       	mov %d3,%d2
80002c16:	91 30 00 2f 	movh.a %a2,61443
80002c1a:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd35e04>>
80002c1e:	54 22       	ld.w %d2,[%a2]
80002c20:	37 02 64 20 	extr.u %d2,%d2,0,4
80002c24:	8f f2 0f 21 	and %d2,%d2,255
80002c28:	4b 02 41 21 	itof %d2,%d2
80002c2c:	4b 23 51 30 	div.f %d3,%d3,%d2
}


IFX_INLINE void IfxScuCcu_wait(float32 timeSec)
{
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
80002c30:	19 e2 e0 ef 	ld.w %d2,[%a14]-96
80002c34:	4b 23 41 20 	mul.f %d2,%d3,%d2
80002c38:	4b 02 71 21 	ftouz %d2,%d2
80002c3c:	59 e2 dc ef 	st.w [%a14]-100,%d2
    uint32 stmCountBegin = STM0_TIM0.U;
80002c40:	c5 f2 10 01 	lea %a2,f0001010 <_START2_end+0x4fd00de4>
80002c44:	54 22       	ld.w %d2,[%a2]
80002c46:	59 e2 d8 ef 	st.w [%a14]-104,%d2

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
80002c4a:	00 00       	nop 
80002c4c:	c5 f2 10 01 	lea %a2,f0001010 <_START2_end+0x4fd00de4>
80002c50:	54 23       	ld.w %d3,[%a2]
80002c52:	19 e2 d8 ef 	ld.w %d2,[%a14]-104
80002c56:	a2 23       	sub %d3,%d2
80002c58:	19 e2 dc ef 	ld.w %d2,[%a14]-100
80002c5c:	3f 23 f8 ff 	jlt.u %d3,%d2,80002c4c <IfxScuCcu_init+0x11b0>
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
80002c60:	00 00       	nop 
    for (pllStepsCount = 0; pllStepsCount < pllThrottleConfig->numOfSteps; pllStepsCount++)
80002c62:	39 e2 ef ef 	ld.bu %d2,[%a14]-81
80002c66:	c2 12       	add %d2,1
80002c68:	e9 e2 ef ef 	st.b [%a14]-81,%d2
80002c6c:	99 e2 fc ef 	ld.a %a2,[%a14]-68
80002c70:	14 22       	ld.bu %d2,[%a2]
80002c72:	39 e3 ef ef 	ld.bu %d3,[%a14]-81
80002c76:	3f 23 f8 fe 	jlt.u %d3,%d2,80002a66 <IfxScuCcu_init+0xfca>
    return (boolean)initError;
80002c7a:	39 e2 fb ef 	ld.bu %d2,[%a14]-69
80002c7e:	e9 e2 ff ff 	st.b [%a14]-1,%d2
    }

    return status;
80002c82:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
}
80002c86:	00 90       	ret 

80002c88 <IfxScuCcu_modulation_init>:
    *cfg = IfxScuCcu_defaultClockConfig;
}


void IfxScuCcu_modulation_init(const IfxScuCcu_Mod_Config *Mod_Cfg)
{
80002c88:	40 ae       	mov.aa %a14,%sp
80002c8a:	20 28       	sub.a %sp,40
80002c8c:	b5 e4 dc ff 	st.a [%a14]-36,%a4
    uint16                        endinitSfty_pw;
    IfxScuCcu_RGain_Values        RGain_P;
    IfxScuCcu_ModEn               mod_enable = Mod_Cfg->Mod_Enable;
80002c90:	99 e2 dc ff 	ld.a %a2,[%a14]-36
80002c94:	54 22       	ld.w %d2,[%a2]
80002c96:	59 e2 fc ff 	st.w [%a14]-4,%d2
    IfxScuCcu_ModulationAmplitude Mod_Amp    = Mod_Cfg->Mod_Amp;
80002c9a:	99 e2 dc ff 	ld.a %a2,[%a14]-36
80002c9e:	b0 42       	add.a %a2,4
80002ca0:	54 22       	ld.w %d2,[%a2]
80002ca2:	59 e2 f8 ff 	st.w [%a14]-8,%d2

    Ifx_SCU_SYSPLLCON0            syspllcon0;
    Ifx_SCU_SYSPLLCON2            syspllcon2;

    if (mod_enable == IfxScuCcu_ModEn_enabled)  /* do this only if modulation is enabled */
80002ca6:	19 e2 fc ff 	ld.w %d2,[%a14]-4
80002caa:	df 12 42 80 	jne %d2,1,80002d2e <IfxScuCcu_modulation_init+0xa6>
    {
        /* Get the parameters */
        IfxScuCcu_calRGainParameters(Mod_Amp, &RGain_P);
80002cae:	d9 e2 ec ff 	lea %a2,[%a14]-20
80002cb2:	40 24       	mov.aa %a4,%a2
80002cb4:	19 e4 f8 ff 	ld.w %d4,[%a14]-8
80002cb8:	6d ff 42 f4 	call 8000153c <IfxScuCcu_calRGainParameters>

        /* clear endinit protection */
        endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80002cbc:	6d 00 f0 01 	call 8000309c <IfxScuWdt_getSafetyWatchdogPassword>
80002cc0:	f9 e2 f6 ff 	st.h [%a14]-10,%d2
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80002cc4:	b9 e2 f6 ff 	ld.hu %d2,[%a14]-10
80002cc8:	02 24       	mov %d4,%d2
80002cca:	6d 00 34 00 	call 80002d32 <IfxScuWdt_clearSafetyEndinit>

        /* write all registers here */

        /* Write SYSPLLCON2 with RGain */
        syspllcon2.U        = SCU_SYSPLLCON2.U;
80002cce:	91 30 00 2f 	movh.a %a2,61443
80002cd2:	d9 22 20 06 	lea %a2,[%a2]24608 <f0036020 <_START2_end+0x4fd35df4>>
80002cd6:	54 22       	ld.w %d2,[%a2]
80002cd8:	59 e2 e4 ff 	st.w [%a14]-28 <f0036020 <_START2_end+0x4fd35df4>>,%d2
        syspllcon2.B.MODCFG = IFXSCUCCU_GET_MODCFG(RGain_P.RGainHex);
80002cdc:	b9 e2 f0 ff 	ld.hu %d2,[%a14]-16 <f0036020 <_START2_end+0x4fd35df4>>
80002ce0:	3b 00 40 3f 	mov %d3,-3072
80002ce4:	a6 32       	or %d2,%d3
80002ce6:	37 02 70 20 	extr.u %d2,%d2,0,16
80002cea:	f9 e2 e4 ff 	st.h [%a14]-28,%d2
        SCU_SYSPLLCON2.U    = syspllcon2.U;
80002cee:	91 30 00 2f 	movh.a %a2,61443
80002cf2:	d9 22 20 06 	lea %a2,[%a2]24608 <f0036020 <_START2_end+0x4fd35df4>>
80002cf6:	19 e2 e4 ff 	ld.w %d2,[%a14]-28 <f0036020 <_START2_end+0x4fd35df4>>
80002cfa:	74 22       	st.w [%a2],%d2

        /* enable modulation now */
        syspllcon0.U       = SCU_SYSPLLCON0.U;
80002cfc:	91 30 00 2f 	movh.a %a2,61443
80002d00:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
80002d04:	54 22       	ld.w %d2,[%a2]
80002d06:	59 e2 e8 ff 	st.w [%a14]-24 <f0036018 <_START2_end+0x4fd35dec>>,%d2
        syspllcon0.B.MODEN = (uint32)IfxScuCcu_ModEn_enabled;
80002d0a:	19 e2 e8 ff 	ld.w %d2,[%a14]-24 <f0036018 <_START2_end+0x4fd35dec>>
80002d0e:	b7 12 01 21 	insert %d2,%d2,1,2,1
80002d12:	59 e2 e8 ff 	st.w [%a14]-24,%d2
        SCU_SYSPLLCON0.U   = syspllcon0.U;
80002d16:	91 30 00 2f 	movh.a %a2,61443
80002d1a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
80002d1e:	19 e2 e8 ff 	ld.w %d2,[%a14]-24 <f0036018 <_START2_end+0x4fd35dec>>
80002d22:	74 22       	st.w [%a2],%d2

        /* set the endinit protection again */
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80002d24:	b9 e2 f6 ff 	ld.hu %d2,[%a14]-10 <f0036018 <_START2_end+0x4fd35dec>>
80002d28:	02 24       	mov %d4,%d2
80002d2a:	6d 00 d3 01 	call 800030d0 <IfxScuWdt_setSafetyEndinit>
    }
}
80002d2e:	00 00       	nop 
80002d30:	00 90       	ret 

80002d32 <IfxScuWdt_clearSafetyEndinit>:
    {}
}


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
80002d32:	40 ae       	mov.aa %a14,%sp
80002d34:	20 10       	sub.a %sp,16
80002d36:	02 42       	mov %d2,%d4
80002d38:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    IfxScuWdt_clearSafetyEndinitInline(password);
80002d3c:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
80002d40:	f9 e2 fe ff 	st.h [%a14]-2,%d2
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80002d44:	91 30 00 2f 	movh.a %a2,61443
80002d48:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002d4c:	54 22       	ld.w %d2,[%a2]
80002d4e:	37 02 e1 20 	extr.u %d2,%d2,1,1
80002d52:	8f f2 0f 21 	and %d2,%d2,255
80002d56:	df 02 18 00 	jeq %d2,0,80002d86 <IfxScuWdt_clearSafetyEndinit+0x54>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002d5a:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
80002d5e:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002d60:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002d64:	91 30 00 2f 	movh.a %a2,61443
80002d68:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002d6c:	54 22       	ld.w %d2,[%a2]
80002d6e:	37 02 70 28 	extr.u %d2,%d2,16,16
80002d72:	37 02 70 20 	extr.u %d2,%d2,0,16
80002d76:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002d7a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002d7c:	91 30 00 2f 	movh.a %a2,61443
80002d80:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002d84:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002d86:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2 <f00362a8 <_START2_end+0x4fd3607c>>
80002d8a:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002d8c:	8f 22 40 31 	or %d3,%d2,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002d90:	91 30 00 2f 	movh.a %a2,61443
80002d94:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002d98:	54 22       	ld.w %d2,[%a2]
80002d9a:	37 02 70 28 	extr.u %d2,%d2,16,16
80002d9e:	37 02 70 20 	extr.u %d2,%d2,0,16
80002da2:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002da6:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002da8:	91 30 00 2f 	movh.a %a2,61443
80002dac:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002db0:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80002db2:	91 30 00 2f 	movh.a %a2,61443
80002db6:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002dba:	54 22       	ld.w %d2,[%a2]
80002dbc:	37 02 61 20 	extr.u %d2,%d2,0,1
80002dc0:	8f f2 0f 21 	and %d2,%d2,255
80002dc4:	df 12 f7 7f 	jeq %d2,1,80002db2 <IfxScuWdt_clearSafetyEndinit+0x80>
}
80002dc8:	00 90       	ret 

80002dca <IfxScuWdt_disableCpuWatchdog>:


void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
80002dca:	40 ae       	mov.aa %a14,%sp
80002dcc:	20 28       	sub.a %sp,40
80002dce:	02 42       	mov %d2,%d4
80002dd0:	f9 e2 dc ff 	st.h [%a14]-36,%d2


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80002dd4:	4d c0 e1 2f 	mfcr %d2,$core_id
80002dd8:	59 e2 e4 ff 	st.w [%a14]-28,%d2
80002ddc:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
80002de0:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80002de4:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80002de8:	37 02 63 20 	extr.u %d2,%d2,0,3
80002dec:	8f f2 0f 21 	and %d2,%d2,255
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
80002df0:	59 e2 fc ff 	st.w [%a14]-4,%d2
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
80002df4:	19 e2 fc ff 	ld.w %d2,[%a14]-4
80002df8:	53 c2 20 20 	mul %d2,%d2,12
80002dfc:	1b c2 24 26 	addi %d2,%d2,25164
80002e00:	9b 32 00 2f 	addih %d2,%d2,61443
80002e04:	59 e2 f8 ff 	st.w [%a14]-8,%d2

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
80002e08:	b9 e2 dc ff 	ld.hu %d2,[%a14]-36
80002e0c:	19 e3 f8 ff 	ld.w %d3,[%a14]-8
80002e10:	59 e3 ec ff 	st.w [%a14]-20,%d3
80002e14:	f9 e2 ea ff 	st.h [%a14]-22,%d2
    if (watchdog->CON0.B.LCK)
80002e18:	99 e2 ec ff 	ld.a %a2,[%a14]-20
80002e1c:	54 22       	ld.w %d2,[%a2]
80002e1e:	37 02 e1 20 	extr.u %d2,%d2,1,1
80002e22:	8f f2 0f 21 	and %d2,%d2,255
80002e26:	df 02 14 00 	jeq %d2,0,80002e4e <IfxScuWdt_disableCpuWatchdog+0x84>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002e2a:	b9 e2 ea ff 	ld.hu %d2,[%a14]-22
80002e2e:	06 22       	sh %d2,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80002e30:	8f 12 40 31 	or %d3,%d2,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002e34:	99 e2 ec ff 	ld.a %a2,[%a14]-20
80002e38:	54 22       	ld.w %d2,[%a2]
80002e3a:	37 02 70 28 	extr.u %d2,%d2,16,16
80002e3e:	37 02 70 20 	extr.u %d2,%d2,0,16
80002e42:	8f 02 01 20 	sh %d2,%d2,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002e46:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002e48:	99 e2 ec ff 	ld.a %a2,[%a14]-20
80002e4c:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002e4e:	b9 e2 ea ff 	ld.hu %d2,[%a14]-22
80002e52:	06 22       	sh %d2,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80002e54:	8f 22 40 31 	or %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002e58:	99 e2 ec ff 	ld.a %a2,[%a14]-20
80002e5c:	54 22       	ld.w %d2,[%a2]
80002e5e:	37 02 70 28 	extr.u %d2,%d2,16,16
80002e62:	37 02 70 20 	extr.u %d2,%d2,0,16
80002e66:	8f 02 01 20 	sh %d2,%d2,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002e6a:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002e6c:	99 e2 ec ff 	ld.a %a2,[%a14]-20
80002e70:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80002e72:	99 e2 ec ff 	ld.a %a2,[%a14]-20
80002e76:	54 22       	ld.w %d2,[%a2]
80002e78:	37 02 61 20 	extr.u %d2,%d2,0,1
80002e7c:	8f f2 0f 21 	and %d2,%d2,255
80002e80:	df 12 f9 7f 	jeq %d2,1,80002e72 <IfxScuWdt_disableCpuWatchdog+0xa8>
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
80002e84:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80002e88:	d9 23 04 00 	lea %a3,[%a2]4
80002e8c:	54 32       	ld.w %d2,[%a3]
80002e8e:	b7 12 81 21 	insert %d2,%d2,1,3,1
80002e92:	b0 42       	add.a %a2,4
80002e94:	74 22       	st.w [%a2],%d2
    IfxScuWdt_setCpuEndinitInline(wdt, password);
80002e96:	b9 e2 dc ff 	ld.hu %d2,[%a14]-36
80002e9a:	19 e3 f8 ff 	ld.w %d3,[%a14]-8
80002e9e:	59 e3 f4 ff 	st.w [%a14]-12,%d3
80002ea2:	f9 e2 f2 ff 	st.h [%a14]-14,%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80002ea6:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
80002eaa:	54 22       	ld.w %d2,[%a2]
80002eac:	37 02 e1 20 	extr.u %d2,%d2,1,1
80002eb0:	8f f2 0f 21 	and %d2,%d2,255
80002eb4:	df 02 14 00 	jeq %d2,0,80002edc <IfxScuWdt_disableCpuWatchdog+0x112>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002eb8:	b9 e2 f2 ff 	ld.hu %d2,[%a14]-14
80002ebc:	06 22       	sh %d2,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80002ebe:	8f 12 40 31 	or %d3,%d2,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002ec2:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
80002ec6:	54 22       	ld.w %d2,[%a2]
80002ec8:	37 02 70 28 	extr.u %d2,%d2,16,16
80002ecc:	37 02 70 20 	extr.u %d2,%d2,0,16
80002ed0:	8f 02 01 20 	sh %d2,%d2,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002ed4:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002ed6:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
80002eda:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002edc:	b9 e2 f2 ff 	ld.hu %d2,[%a14]-14
80002ee0:	06 22       	sh %d2,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80002ee2:	8f 32 40 31 	or %d3,%d2,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002ee6:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
80002eea:	54 22       	ld.w %d2,[%a2]
80002eec:	37 02 70 28 	extr.u %d2,%d2,16,16
80002ef0:	37 02 70 20 	extr.u %d2,%d2,0,16
80002ef4:	8f 02 01 20 	sh %d2,%d2,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002ef8:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002efa:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
80002efe:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80002f00:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
80002f04:	54 22       	ld.w %d2,[%a2]
80002f06:	37 02 61 20 	extr.u %d2,%d2,0,1
80002f0a:	8f f2 0f 21 	and %d2,%d2,255
80002f0e:	df 02 f9 7f 	jeq %d2,0,80002f00 <IfxScuWdt_disableCpuWatchdog+0x136>
}
80002f12:	00 90       	ret 

80002f14 <IfxScuWdt_disableSafetyWatchdog>:


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
80002f14:	40 ae       	mov.aa %a14,%sp
80002f16:	20 10       	sub.a %sp,16
80002f18:	02 42       	mov %d2,%d4
80002f1a:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    IfxScuWdt_clearSafetyEndinitInline(password);
80002f1e:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
80002f22:	f9 e2 fc ff 	st.h [%a14]-4,%d2
    if (SCU_WDTS_CON0.B.LCK)
80002f26:	91 30 00 2f 	movh.a %a2,61443
80002f2a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002f2e:	54 22       	ld.w %d2,[%a2]
80002f30:	37 02 e1 20 	extr.u %d2,%d2,1,1
80002f34:	8f f2 0f 21 	and %d2,%d2,255
80002f38:	df 02 18 00 	jeq %d2,0,80002f68 <IfxScuWdt_disableSafetyWatchdog+0x54>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002f3c:	b9 e2 fc ff 	ld.hu %d2,[%a14]-4
80002f40:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002f42:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002f46:	91 30 00 2f 	movh.a %a2,61443
80002f4a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002f4e:	54 22       	ld.w %d2,[%a2]
80002f50:	37 02 70 28 	extr.u %d2,%d2,16,16
80002f54:	37 02 70 20 	extr.u %d2,%d2,0,16
80002f58:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002f5c:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002f5e:	91 30 00 2f 	movh.a %a2,61443
80002f62:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002f66:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002f68:	b9 e2 fc ff 	ld.hu %d2,[%a14]-4 <f00362a8 <_START2_end+0x4fd3607c>>
80002f6c:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002f6e:	8f 22 40 31 	or %d3,%d2,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002f72:	91 30 00 2f 	movh.a %a2,61443
80002f76:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002f7a:	54 22       	ld.w %d2,[%a2]
80002f7c:	37 02 70 28 	extr.u %d2,%d2,16,16
80002f80:	37 02 70 20 	extr.u %d2,%d2,0,16
80002f84:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002f88:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002f8a:	91 30 00 2f 	movh.a %a2,61443
80002f8e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002f92:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80002f94:	91 30 00 2f 	movh.a %a2,61443
80002f98:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002f9c:	54 22       	ld.w %d2,[%a2]
80002f9e:	37 02 61 20 	extr.u %d2,%d2,0,1
80002fa2:	8f f2 0f 21 	and %d2,%d2,255
80002fa6:	df 12 f7 7f 	jeq %d2,1,80002f94 <IfxScuWdt_disableSafetyWatchdog+0x80>
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
80002faa:	91 30 00 2f 	movh.a %a2,61443
80002fae:	d9 22 2c a6 	lea %a2,[%a2]25260 <f00362ac <_START2_end+0x4fd36080>>
80002fb2:	54 22       	ld.w %d2,[%a2]
80002fb4:	b7 12 81 21 	insert %d2,%d2,1,3,1
80002fb8:	74 22       	st.w [%a2],%d2
    IfxScuWdt_setSafetyEndinitInline(password);
80002fba:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
80002fbe:	f9 e2 fe ff 	st.h [%a14]-2,%d2
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80002fc2:	91 30 00 2f 	movh.a %a2,61443
80002fc6:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002fca:	54 22       	ld.w %d2,[%a2]
80002fcc:	37 02 e1 20 	extr.u %d2,%d2,1,1
80002fd0:	8f f2 0f 21 	and %d2,%d2,255
80002fd4:	df 02 18 00 	jeq %d2,0,80003004 <IfxScuWdt_disableSafetyWatchdog+0xf0>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002fd8:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
80002fdc:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002fde:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002fe2:	91 30 00 2f 	movh.a %a2,61443
80002fe6:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80002fea:	54 22       	ld.w %d2,[%a2]
80002fec:	37 02 70 28 	extr.u %d2,%d2,16,16
80002ff0:	37 02 70 20 	extr.u %d2,%d2,0,16
80002ff4:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002ff8:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002ffa:	91 30 00 2f 	movh.a %a2,61443
80002ffe:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80003002:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003004:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2 <f00362a8 <_START2_end+0x4fd3607c>>
80003008:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8000300a:	8f 32 40 31 	or %d3,%d2,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000300e:	91 30 00 2f 	movh.a %a2,61443
80003012:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80003016:	54 22       	ld.w %d2,[%a2]
80003018:	37 02 70 28 	extr.u %d2,%d2,16,16
8000301c:	37 02 70 20 	extr.u %d2,%d2,0,16
80003020:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003024:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003026:	91 30 00 2f 	movh.a %a2,61443
8000302a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
8000302e:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80003030:	91 30 00 2f 	movh.a %a2,61443
80003034:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80003038:	54 22       	ld.w %d2,[%a2]
8000303a:	37 02 61 20 	extr.u %d2,%d2,0,1
8000303e:	8f f2 0f 21 	and %d2,%d2,255
80003042:	df 02 f7 7f 	jeq %d2,0,80003030 <IfxScuWdt_disableSafetyWatchdog+0x11c>
}
80003046:	00 90       	ret 

80003048 <IfxScuWdt_getCpuWatchdogPassword>:
    IfxScuWdt_setSafetyEndinitInline(password);
}


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
80003048:	40 ae       	mov.aa %a14,%sp
8000304a:	20 10       	sub.a %sp,16
    reg.U = __mfcr(CPU_CORE_ID);
8000304c:	4d c0 e1 2f 	mfcr %d2,$core_id
80003050:	59 e2 f4 ff 	st.w [%a14]-12,%d2
80003054:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
80003058:	59 e2 f0 ff 	st.w [%a14]-16,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000305c:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80003060:	37 02 63 20 	extr.u %d2,%d2,0,3
80003064:	8f f2 0f 21 	and %d2,%d2,255
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
80003068:	53 c2 20 20 	mul %d2,%d2,12
8000306c:	1b c2 24 26 	addi %d2,%d2,25164
80003070:	9b 32 00 2f 	addih %d2,%d2,61443
80003074:	59 e2 fc ff 	st.w [%a14]-4,%d2
    password  = watchdog->CON0.B.PW;
80003078:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8000307c:	54 22       	ld.w %d2,[%a2]
8000307e:	37 02 6e 21 	extr.u %d2,%d2,2,14
80003082:	37 02 70 20 	extr.u %d2,%d2,0,16
80003086:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    password ^= 0x003F;
8000308a:	c9 e2 fa ff 	ld.h %d2,[%a14]-6
8000308e:	8f f2 83 21 	xor %d2,%d2,63
80003092:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    return password;
80003096:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
}
8000309a:	00 90       	ret 

8000309c <IfxScuWdt_getSafetyWatchdogPassword>:
    return password;
}


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
8000309c:	40 ae       	mov.aa %a14,%sp
8000309e:	20 08       	sub.a %sp,8
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
800030a0:	7b 30 00 2f 	movh %d2,61443
800030a4:	1b 82 2a 26 	addi %d2,%d2,25256
800030a8:	59 e2 fc ff 	st.w [%a14]-4,%d2
    password  = watchdog->CON0.B.PW;
800030ac:	99 e2 fc ff 	ld.a %a2,[%a14]-4
800030b0:	54 22       	ld.w %d2,[%a2]
800030b2:	37 02 6e 21 	extr.u %d2,%d2,2,14
800030b6:	37 02 70 20 	extr.u %d2,%d2,0,16
800030ba:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    password ^= 0x003F;
800030be:	c9 e2 fa ff 	ld.h %d2,[%a14]-6
800030c2:	8f f2 83 21 	xor %d2,%d2,63
800030c6:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    return password;
800030ca:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
800030ce:	00 90       	ret 

800030d0 <IfxScuWdt_setSafetyEndinit>:
    {}
}


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
800030d0:	40 ae       	mov.aa %a14,%sp
800030d2:	20 10       	sub.a %sp,16
800030d4:	02 42       	mov %d2,%d4
800030d6:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    IfxScuWdt_setSafetyEndinitInline(password);
800030da:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
800030de:	f9 e2 fe ff 	st.h [%a14]-2,%d2
    if (SCU_WDTS_CON0.B.LCK)
800030e2:	91 30 00 2f 	movh.a %a2,61443
800030e6:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
800030ea:	54 22       	ld.w %d2,[%a2]
800030ec:	37 02 e1 20 	extr.u %d2,%d2,1,1
800030f0:	8f f2 0f 21 	and %d2,%d2,255
800030f4:	df 02 18 00 	jeq %d2,0,80003124 <IfxScuWdt_setSafetyEndinit+0x54>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800030f8:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
800030fc:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800030fe:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80003102:	91 30 00 2f 	movh.a %a2,61443
80003106:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
8000310a:	54 22       	ld.w %d2,[%a2]
8000310c:	37 02 70 28 	extr.u %d2,%d2,16,16
80003110:	37 02 70 20 	extr.u %d2,%d2,0,16
80003114:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003118:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000311a:	91 30 00 2f 	movh.a %a2,61443
8000311e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80003122:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003124:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2 <f00362a8 <_START2_end+0x4fd3607c>>
80003128:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8000312a:	8f 32 40 31 	or %d3,%d2,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000312e:	91 30 00 2f 	movh.a %a2,61443
80003132:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80003136:	54 22       	ld.w %d2,[%a2]
80003138:	37 02 70 28 	extr.u %d2,%d2,16,16
8000313c:	37 02 70 20 	extr.u %d2,%d2,0,16
80003140:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003144:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003146:	91 30 00 2f 	movh.a %a2,61443
8000314a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
8000314e:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80003150:	91 30 00 2f 	movh.a %a2,61443
80003154:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80003158:	54 22       	ld.w %d2,[%a2]
8000315a:	37 02 61 20 	extr.u %d2,%d2,0,1
8000315e:	8f f2 0f 21 	and %d2,%d2,255
80003162:	df 02 f7 7f 	jeq %d2,0,80003150 <IfxScuWdt_setSafetyEndinit+0x80>
}
80003166:	00 90       	ret 

80003168 <IfxCpu_Trap_memoryManagementError>:
{
80003168:	40 ae       	mov.aa %a14,%sp
8000316a:	20 30       	sub.a %sp,48
8000316c:	59 e4 d4 ff 	st.w [%a14]-44,%d4
80003170:	82 02       	mov %d2,0
80003172:	e9 e2 ff ff 	st.b [%a14]-1,%d2
80003176:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
8000317a:	59 e2 f8 ff 	st.w [%a14]-8,%d2
}

IFX_INLINE void* Ifx__getA11(void)
{
    uint32 *res;
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
8000317e:	40 b2       	mov.aa %a2,%a11
80003180:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
80003184:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
80003188:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
8000318c:	79 e2 ff ff 	ld.b %d2,[%a14]-1
80003190:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
80003194:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80003198:	8f f2 0f 21 	and %d2,%d2,255
8000319c:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
800031a0:	4d c0 e1 2f 	mfcr %d2,$core_id
800031a4:	59 e2 f0 ff 	st.w [%a14]-16,%d2
800031a8:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
800031ac:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
800031b0:	19 e2 dc ff 	ld.w %d2,[%a14]-36
800031b4:	37 02 63 20 	extr.u %d2,%d2,0,3
800031b8:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
800031bc:	8f 72 00 21 	and %d2,%d2,7
800031c0:	8f f2 0f 31 	and %d3,%d2,255
800031c4:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
800031c8:	37 32 03 28 	insert %d2,%d2,%d3,16,3
800031cc:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
800031d0:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
800031d4:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_MME_HOOK(trapWatch);
800031d8:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm__ volatile ("debug" : : : "memory");
800031dc:	00 a0       	debug 
}
800031de:	00 00       	nop 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800031e0:	0d 00 40 02 	rslcx 
    __asm("rfe");
800031e4:	00 80       	rfe 
}
800031e6:	00 00       	nop 
800031e8:	00 90       	ret 

800031ea <IfxCpu_Trap_internalProtectionError>:
{
800031ea:	40 ae       	mov.aa %a14,%sp
800031ec:	20 30       	sub.a %sp,48
800031ee:	59 e4 d4 ff 	st.w [%a14]-44,%d4
800031f2:	82 12       	mov %d2,1
800031f4:	e9 e2 ff ff 	st.b [%a14]-1,%d2
800031f8:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
800031fc:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80003200:	40 b2       	mov.aa %a2,%a11
80003202:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
80003206:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
8000320a:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
8000320e:	79 e2 ff ff 	ld.b %d2,[%a14]-1
80003212:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
80003216:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8000321a:	8f f2 0f 21 	and %d2,%d2,255
8000321e:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
80003222:	4d c0 e1 2f 	mfcr %d2,$core_id
80003226:	59 e2 f0 ff 	st.w [%a14]-16,%d2
8000322a:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
8000322e:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
80003232:	19 e2 dc ff 	ld.w %d2,[%a14]-36
80003236:	37 02 63 20 	extr.u %d2,%d2,0,3
8000323a:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
8000323e:	8f 72 00 21 	and %d2,%d2,7
80003242:	8f f2 0f 31 	and %d3,%d2,255
80003246:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
8000324a:	37 32 03 28 	insert %d2,%d2,%d3,16,3
8000324e:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
80003252:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
80003256:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_IPE_HOOK(trapWatch);
8000325a:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm__ volatile ("debug" : : : "memory");
8000325e:	00 a0       	debug 
}
80003260:	00 00       	nop 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003262:	0d 00 40 02 	rslcx 
    __asm("rfe");
80003266:	00 80       	rfe 
}
80003268:	00 00       	nop 
8000326a:	00 90       	ret 

8000326c <IfxCpu_Trap_instructionError>:
{
8000326c:	40 ae       	mov.aa %a14,%sp
8000326e:	20 30       	sub.a %sp,48
80003270:	59 e4 d4 ff 	st.w [%a14]-44,%d4
80003274:	82 22       	mov %d2,2
80003276:	e9 e2 ff ff 	st.b [%a14]-1,%d2
8000327a:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
8000327e:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80003282:	40 b2       	mov.aa %a2,%a11
80003284:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
80003288:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
8000328c:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
80003290:	79 e2 ff ff 	ld.b %d2,[%a14]-1
80003294:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
80003298:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8000329c:	8f f2 0f 21 	and %d2,%d2,255
800032a0:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
800032a4:	4d c0 e1 2f 	mfcr %d2,$core_id
800032a8:	59 e2 f0 ff 	st.w [%a14]-16,%d2
800032ac:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
800032b0:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
800032b4:	19 e2 dc ff 	ld.w %d2,[%a14]-36
800032b8:	37 02 63 20 	extr.u %d2,%d2,0,3
800032bc:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
800032c0:	8f 72 00 21 	and %d2,%d2,7
800032c4:	8f f2 0f 31 	and %d3,%d2,255
800032c8:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
800032cc:	37 32 03 28 	insert %d2,%d2,%d3,16,3
800032d0:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
800032d4:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
800032d8:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_IE_HOOK(trapWatch);
800032dc:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm__ volatile ("debug" : : : "memory");
800032e0:	00 a0       	debug 
}
800032e2:	00 00       	nop 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800032e4:	0d 00 40 02 	rslcx 
    __asm("rfe");
800032e8:	00 80       	rfe 
}
800032ea:	00 00       	nop 
800032ec:	00 90       	ret 

800032ee <IfxCpu_Trap_contextManagementError>:
{
800032ee:	40 ae       	mov.aa %a14,%sp
800032f0:	20 30       	sub.a %sp,48
800032f2:	59 e4 d4 ff 	st.w [%a14]-44,%d4
800032f6:	82 32       	mov %d2,3
800032f8:	e9 e2 ff ff 	st.b [%a14]-1,%d2
800032fc:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
80003300:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80003304:	40 b2       	mov.aa %a2,%a11
80003306:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
8000330a:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
8000330e:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
80003312:	79 e2 ff ff 	ld.b %d2,[%a14]-1
80003316:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
8000331a:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8000331e:	8f f2 0f 21 	and %d2,%d2,255
80003322:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
80003326:	4d c0 e1 2f 	mfcr %d2,$core_id
8000332a:	59 e2 f0 ff 	st.w [%a14]-16,%d2
8000332e:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80003332:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
80003336:	19 e2 dc ff 	ld.w %d2,[%a14]-36
8000333a:	37 02 63 20 	extr.u %d2,%d2,0,3
8000333e:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003342:	8f 72 00 21 	and %d2,%d2,7
80003346:	8f f2 0f 31 	and %d3,%d2,255
8000334a:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
8000334e:	37 32 03 28 	insert %d2,%d2,%d3,16,3
80003352:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
80003356:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
8000335a:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_CME_HOOK(trapWatch);
8000335e:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm__ volatile ("debug" : : : "memory");
80003362:	00 a0       	debug 
}
80003364:	00 00       	nop 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003366:	0d 00 40 02 	rslcx 
    __asm("rfe");
8000336a:	00 80       	rfe 
}
8000336c:	00 00       	nop 
8000336e:	00 90       	ret 

80003370 <IfxCpu_Trap_busError>:
{
80003370:	40 ae       	mov.aa %a14,%sp
80003372:	20 30       	sub.a %sp,48
80003374:	59 e4 d4 ff 	st.w [%a14]-44,%d4
80003378:	82 42       	mov %d2,4
8000337a:	e9 e2 ff ff 	st.b [%a14]-1,%d2
8000337e:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
80003382:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80003386:	40 b2       	mov.aa %a2,%a11
80003388:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
8000338c:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
80003390:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
80003394:	79 e2 ff ff 	ld.b %d2,[%a14]-1
80003398:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
8000339c:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
800033a0:	8f f2 0f 21 	and %d2,%d2,255
800033a4:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
800033a8:	4d c0 e1 2f 	mfcr %d2,$core_id
800033ac:	59 e2 f0 ff 	st.w [%a14]-16,%d2
800033b0:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
800033b4:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
800033b8:	19 e2 dc ff 	ld.w %d2,[%a14]-36
800033bc:	37 02 63 20 	extr.u %d2,%d2,0,3
800033c0:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
800033c4:	8f 72 00 21 	and %d2,%d2,7
800033c8:	8f f2 0f 31 	and %d3,%d2,255
800033cc:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
800033d0:	37 32 03 28 	insert %d2,%d2,%d3,16,3
800033d4:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
800033d8:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
800033dc:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_BE_HOOK(trapWatch);
800033e0:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm__ volatile ("debug" : : : "memory");
800033e4:	00 a0       	debug 
}
800033e6:	00 00       	nop 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800033e8:	0d 00 40 02 	rslcx 
    __asm("rfe");
800033ec:	00 80       	rfe 
}
800033ee:	00 00       	nop 
800033f0:	00 90       	ret 

800033f2 <IfxCpu_Trap_assertion>:
{
800033f2:	40 ae       	mov.aa %a14,%sp
800033f4:	20 30       	sub.a %sp,48
800033f6:	59 e4 d4 ff 	st.w [%a14]-44,%d4
800033fa:	82 52       	mov %d2,5
800033fc:	e9 e2 ff ff 	st.b [%a14]-1,%d2
80003400:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
80003404:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80003408:	40 b2       	mov.aa %a2,%a11
8000340a:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
8000340e:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
80003412:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
80003416:	79 e2 ff ff 	ld.b %d2,[%a14]-1
8000341a:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
8000341e:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80003422:	8f f2 0f 21 	and %d2,%d2,255
80003426:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
8000342a:	4d c0 e1 2f 	mfcr %d2,$core_id
8000342e:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80003432:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80003436:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
8000343a:	19 e2 dc ff 	ld.w %d2,[%a14]-36
8000343e:	37 02 63 20 	extr.u %d2,%d2,0,3
80003442:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003446:	8f 72 00 21 	and %d2,%d2,7
8000344a:	8f f2 0f 31 	and %d3,%d2,255
8000344e:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
80003452:	37 32 03 28 	insert %d2,%d2,%d3,16,3
80003456:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
8000345a:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
8000345e:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_ASSERT_HOOK(trapWatch);
80003462:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm__ volatile ("debug" : : : "memory");
80003466:	00 a0       	debug 
}
80003468:	00 00       	nop 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
8000346a:	0d 00 40 02 	rslcx 
    __asm("rfe");
8000346e:	00 80       	rfe 
}
80003470:	00 00       	nop 
80003472:	00 90       	ret 

80003474 <IfxCpu_Trap_systemCall_Cpu0>:
{
80003474:	40 ae       	mov.aa %a14,%sp
80003476:	20 30       	sub.a %sp,48
80003478:	59 e4 d4 ff 	st.w [%a14]-44,%d4
8000347c:	82 62       	mov %d2,6
8000347e:	e9 e2 ff ff 	st.b [%a14]-1,%d2
80003482:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
80003486:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
8000348a:	40 b2       	mov.aa %a2,%a11
8000348c:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
80003490:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
80003494:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
80003498:	79 e2 ff ff 	ld.b %d2,[%a14]-1
8000349c:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
800034a0:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
800034a4:	8f f2 0f 21 	and %d2,%d2,255
800034a8:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
800034ac:	4d c0 e1 2f 	mfcr %d2,$core_id
800034b0:	59 e2 f0 ff 	st.w [%a14]-16,%d2
800034b4:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
800034b8:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
800034bc:	19 e2 dc ff 	ld.w %d2,[%a14]-36
800034c0:	37 02 63 20 	extr.u %d2,%d2,0,3
800034c4:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
800034c8:	8f 72 00 21 	and %d2,%d2,7
800034cc:	8f f2 0f 31 	and %d3,%d2,255
800034d0:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
800034d4:	37 32 03 28 	insert %d2,%d2,%d3,16,3
800034d8:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
800034dc:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
800034e0:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK(trapWatch);
800034e4:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800034e8:	0d 00 40 02 	rslcx 
    __asm("rfe");
800034ec:	00 80       	rfe 
}
800034ee:	00 00       	nop 
800034f0:	00 90       	ret 

800034f2 <IfxCpu_Trap_systemCall_Cpu1>:
{
800034f2:	40 ae       	mov.aa %a14,%sp
800034f4:	20 30       	sub.a %sp,48
800034f6:	59 e4 d4 ff 	st.w [%a14]-44,%d4
800034fa:	82 62       	mov %d2,6
800034fc:	e9 e2 ff ff 	st.b [%a14]-1,%d2
80003500:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
80003504:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80003508:	40 b2       	mov.aa %a2,%a11
8000350a:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
8000350e:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
80003512:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
80003516:	79 e2 ff ff 	ld.b %d2,[%a14]-1
8000351a:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
8000351e:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80003522:	8f f2 0f 21 	and %d2,%d2,255
80003526:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
8000352a:	4d c0 e1 2f 	mfcr %d2,$core_id
8000352e:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80003532:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80003536:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
8000353a:	19 e2 dc ff 	ld.w %d2,[%a14]-36
8000353e:	37 02 63 20 	extr.u %d2,%d2,0,3
80003542:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003546:	8f 72 00 21 	and %d2,%d2,7
8000354a:	8f f2 0f 31 	and %d3,%d2,255
8000354e:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
80003552:	37 32 03 28 	insert %d2,%d2,%d3,16,3
80003556:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
8000355a:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
8000355e:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK(trapWatch);
80003562:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003566:	0d 00 40 02 	rslcx 
    __asm("rfe");
8000356a:	00 80       	rfe 
}
8000356c:	00 00       	nop 
8000356e:	00 90       	ret 

80003570 <IfxCpu_Trap_systemCall_Cpu2>:
{
80003570:	40 ae       	mov.aa %a14,%sp
80003572:	20 30       	sub.a %sp,48
80003574:	59 e4 d4 ff 	st.w [%a14]-44,%d4
80003578:	82 62       	mov %d2,6
8000357a:	e9 e2 ff ff 	st.b [%a14]-1,%d2
8000357e:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
80003582:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80003586:	40 b2       	mov.aa %a2,%a11
80003588:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
8000358c:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
80003590:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
80003594:	79 e2 ff ff 	ld.b %d2,[%a14]-1
80003598:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
8000359c:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
800035a0:	8f f2 0f 21 	and %d2,%d2,255
800035a4:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
800035a8:	4d c0 e1 2f 	mfcr %d2,$core_id
800035ac:	59 e2 f0 ff 	st.w [%a14]-16,%d2
800035b0:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
800035b4:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
800035b8:	19 e2 dc ff 	ld.w %d2,[%a14]-36
800035bc:	37 02 63 20 	extr.u %d2,%d2,0,3
800035c0:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
800035c4:	8f 72 00 21 	and %d2,%d2,7
800035c8:	8f f2 0f 31 	and %d3,%d2,255
800035cc:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
800035d0:	37 32 03 28 	insert %d2,%d2,%d3,16,3
800035d4:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
800035d8:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
800035dc:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK(trapWatch);
800035e0:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800035e4:	0d 00 40 02 	rslcx 
    __asm("rfe");
800035e8:	00 80       	rfe 
}
800035ea:	00 00       	nop 
800035ec:	00 90       	ret 

800035ee <IfxCpu_Trap_nonMaskableInterrupt>:
{
800035ee:	40 ae       	mov.aa %a14,%sp
800035f0:	20 30       	sub.a %sp,48
800035f2:	59 e4 d4 ff 	st.w [%a14]-44,%d4
800035f6:	82 72       	mov %d2,7
800035f8:	e9 e2 ff ff 	st.b [%a14]-1,%d2
800035fc:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
80003600:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80003604:	40 b2       	mov.aa %a2,%a11
80003606:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
8000360a:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
8000360e:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
80003612:	79 e2 ff ff 	ld.b %d2,[%a14]-1
80003616:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
8000361a:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
8000361e:	8f f2 0f 21 	and %d2,%d2,255
80003622:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
80003626:	4d c0 e1 2f 	mfcr %d2,$core_id
8000362a:	59 e2 f0 ff 	st.w [%a14]-16,%d2
8000362e:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80003632:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
80003636:	19 e2 dc ff 	ld.w %d2,[%a14]-36
8000363a:	37 02 63 20 	extr.u %d2,%d2,0,3
8000363e:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
80003642:	8f 72 00 21 	and %d2,%d2,7
80003646:	8f f2 0f 31 	and %d3,%d2,255
8000364a:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
8000364e:	37 32 03 28 	insert %d2,%d2,%d3,16,3
80003652:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
80003656:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
8000365a:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_NMI_HOOK(trapWatch);    
8000365e:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80003662:	0d 00 40 02 	rslcx 
    __asm("rfe");
80003666:	00 80       	rfe 
}
80003668:	00 00       	nop 
8000366a:	00 90       	ret 

8000366c <IfxCpu_waitEvent>:
    return retVal;
}


boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec)
{
8000366c:	40 ae       	mov.aa %a14,%sp
8000366e:	20 20       	sub.a %sp,32
80003670:	b5 e4 e4 ff 	st.a [%a14]-28,%a4
80003674:	59 e4 e0 ff 	st.w [%a14]-32,%d4
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
80003678:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
8000367c:	7b 00 00 3f 	movh %d3,61440
80003680:	26 32       	and %d2,%d3
80003682:	7b 00 00 3d 	movh %d3,53248
80003686:	5f 32 17 80 	jne %d2,%d3,800036b4 <IfxCpu_waitEvent+0x48>
8000368a:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
8000368e:	82 f3       	mov %d3,-1
80003690:	8f 43 1f 30 	sh %d3,%d3,-12
80003694:	26 32       	and %d2,%d3
80003696:	7b 00 00 37 	movh %d3,28672
8000369a:	a6 23       	or %d3,%d2
8000369c:	4d c0 e1 2f 	mfcr %d2,$core_id
800036a0:	59 e2 f8 ff 	st.w [%a14]-8,%d2
800036a4:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
800036a8:	8f c2 01 20 	sh %d2,%d2,28
800036ac:	0b 23 80 20 	sub %d2,%d3,%d2
800036b0:	1d 00 04 00 	j 800036b8 <IfxCpu_waitEvent+0x4c>
800036b4:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
800036b8:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    boolean          errorcnt      = 0U;
800036bc:	82 02       	mov %d2,0
800036be:	e9 e2 ff ff 	st.b [%a14]-1,%d2
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON0.B.STMDIV;
800036c2:	82 04       	mov %d4,0
800036c4:	6d ff 8b f1 	call 800019da <IfxScuCcu_getSourceFrequency>
800036c8:	02 23       	mov %d3,%d2
800036ca:	91 30 00 2f 	movh.a %a2,61443
800036ce:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd35e04>>
800036d2:	54 22       	ld.w %d2,[%a2]
800036d4:	37 02 64 20 	extr.u %d2,%d2,0,4
800036d8:	8f f2 0f 21 	and %d2,%d2,255
800036dc:	4b 02 41 21 	itof %d2,%d2
800036e0:	4b 23 51 20 	div.f %d2,%d3,%d2
    /* Divide with 1000, gives the count value equivalent to milliseconds */
    uint32           stmCount      = (uint32)((IfxScuCcu_getStmFrequency() / 1000) * timeoutMilliSec);
800036e4:	7b a0 47 34 	movh %d3,17530
800036e8:	4b 32 51 30 	div.f %d3,%d2,%d3
800036ec:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
800036f0:	4b 02 61 21 	utof %d2,%d2
800036f4:	4b 23 41 20 	mul.f %d2,%d3,%d2
800036f8:	4b 02 71 21 	ftouz %d2,%d2
800036fc:	59 e2 f0 ff 	st.w [%a14]-16,%d2
    uint32           stmCountBegin = STM0_TIM0.U;
80003700:	c5 f2 10 01 	lea %a2,f0001010 <_START2_end+0x4fd00de4>
80003704:	54 22       	ld.w %d2,[%a2]
80003706:	59 e2 ec ff 	st.w [%a14]-20,%d2

    while ((*sync & IFXCPU_CFG_ALLCORE_DONE) != IFXCPU_CFG_ALLCORE_DONE)
8000370a:	1d 00 13 00 	j 80003730 <IfxCpu_waitEvent+0xc4>
    __asm__ volatile ("nop" : : : "memory");
8000370e:	00 00       	nop 
}
80003710:	00 00       	nop 
    {
        __nop();

        if ((uint32)(STM0_TIM0.U - stmCountBegin) >= stmCount)
80003712:	c5 f2 10 01 	lea %a2,f0001010 <_START2_end+0x4fd00de4>
80003716:	54 23       	ld.w %d3,[%a2]
80003718:	19 e2 ec ff 	ld.w %d2,[%a14]-20
8000371c:	a2 23       	sub %d3,%d2
8000371e:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80003722:	3f 23 07 80 	jlt.u %d3,%d2,80003730 <IfxCpu_waitEvent+0xc4>
        {
            errorcnt = 1;
80003726:	82 12       	mov %d2,1
80003728:	e9 e2 ff ff 	st.b [%a14]-1,%d2
            break;
8000372c:	1d 00 09 00 	j 8000373e <IfxCpu_waitEvent+0xd2>
    while ((*sync & IFXCPU_CFG_ALLCORE_DONE) != IFXCPU_CFG_ALLCORE_DONE)
80003730:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
80003734:	54 22       	ld.w %d2,[%a2]
80003736:	8f 72 00 21 	and %d2,%d2,7
8000373a:	df 72 ea ff 	jne %d2,7,8000370e <IfxCpu_waitEvent+0xa2>
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }

    return errorcnt;
8000373e:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
}
80003742:	00 90       	ret 

80003744 <IfxCpu_emitEvent>:


void IfxCpu_emitEvent(IfxCpu_syncEvent *event)
{
80003744:	40 ae       	mov.aa %a14,%sp
80003746:	20 18       	sub.a %sp,24
80003748:	b5 e4 ec ff 	st.a [%a14]-20,%a4
    Ifx__imaskldmst(event, 1, __mfcr(CPU_CORE_ID), 1);
8000374c:	4d c0 e1 2f 	mfcr %d2,$core_id
80003750:	59 e2 fc ff 	st.w [%a14]-4,%d2
80003754:	19 e2 fc ff 	ld.w %d2,[%a14]-4
80003758:	82 13       	mov %d3,1
8000375a:	57 30 21 22 	imask %e2,%d3,%d2,1
8000375e:	89 e2 74 f9 	st.d [%a14]-12,%e2
80003762:	99 e2 ec ff 	ld.a %a2,[%a14]-20
80003766:	09 e2 74 f9 	ld.d %e2,[%a14]-12
8000376a:	49 22 40 08 	ldmst [%a2]0,%e2
}
8000376e:	00 00       	nop 
80003770:	00 90       	ret 

80003772 <Ifx_Ssw_clearCpuEndinit>:
    return Ifx_Ssw_getSafetyWatchdogPasswordInline();
}


void Ifx_Ssw_clearCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
80003772:	40 ae       	mov.aa %a14,%sp
80003774:	20 10       	sub.a %sp,16
80003776:	b5 e4 f4 ff 	st.a [%a14]-12,%a4
8000377a:	02 42       	mov %d2,%d4
8000377c:	f9 e2 f0 ff 	st.h [%a14]-16,%d2
    Ifx_Ssw_clearCpuEndinitInline(watchdog, password);
80003780:	b9 e2 f0 ff 	ld.hu %d2,[%a14]-16
80003784:	19 e3 f4 ff 	ld.w %d3,[%a14]-12
80003788:	59 e3 fc ff 	st.w [%a14]-4,%d3
8000378c:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    if (watchdog->CON0.B.LCK)
80003790:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80003794:	54 22       	ld.w %d2,[%a2]
80003796:	37 02 e1 20 	extr.u %d2,%d2,1,1
8000379a:	8f f2 0f 21 	and %d2,%d2,255
8000379e:	df 02 15 00 	jeq %d2,0,800037c8 <Ifx_Ssw_clearCpuEndinit+0x56>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800037a2:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
800037a6:	8f 22 00 30 	sh %d3,%d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800037aa:	99 e2 fc ff 	ld.a %a2,[%a14]-4
800037ae:	54 22       	ld.w %d2,[%a2]
800037b0:	37 02 70 28 	extr.u %d2,%d2,16,16
800037b4:	37 02 70 20 	extr.u %d2,%d2,0,16
800037b8:	8f 02 01 20 	sh %d2,%d2,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800037bc:	a6 32       	or %d2,%d3
800037be:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800037c2:	99 e2 fc ff 	ld.a %a2,[%a14]-4
800037c6:	74 22       	st.w [%a2],%d2
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800037c8:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
800037cc:	8f 22 00 30 	sh %d3,%d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800037d0:	99 e2 fc ff 	ld.a %a2,[%a14]-4
800037d4:	54 22       	ld.w %d2,[%a2]
800037d6:	37 02 70 28 	extr.u %d2,%d2,16,16
800037da:	37 02 70 20 	extr.u %d2,%d2,0,16
800037de:	8f 02 01 20 	sh %d2,%d2,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800037e2:	a6 32       	or %d2,%d3
800037e4:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800037e8:	99 e2 fc ff 	ld.a %a2,[%a14]-4
800037ec:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
800037ee:	99 e2 fc ff 	ld.a %a2,[%a14]-4
800037f2:	54 22       	ld.w %d2,[%a2]
}
800037f4:	00 00       	nop 
800037f6:	00 90       	ret 

800037f8 <Ifx_Ssw_setCpuEndinit>:


void Ifx_Ssw_setCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
800037f8:	40 ae       	mov.aa %a14,%sp
800037fa:	20 10       	sub.a %sp,16
800037fc:	b5 e4 f4 ff 	st.a [%a14]-12,%a4
80003800:	02 42       	mov %d2,%d4
80003802:	f9 e2 f0 ff 	st.h [%a14]-16,%d2
    Ifx_Ssw_setCpuEndinitInline(watchdog, password);
80003806:	b9 e2 f0 ff 	ld.hu %d2,[%a14]-16
8000380a:	19 e3 f4 ff 	ld.w %d3,[%a14]-12
8000380e:	59 e3 fc ff 	st.w [%a14]-4,%d3
80003812:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    if (watchdog->CON0.B.LCK)
80003816:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8000381a:	54 22       	ld.w %d2,[%a2]
8000381c:	37 02 e1 20 	extr.u %d2,%d2,1,1
80003820:	8f f2 0f 21 	and %d2,%d2,255
80003824:	df 02 15 00 	jeq %d2,0,8000384e <Ifx_Ssw_setCpuEndinit+0x56>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003828:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
8000382c:	8f 22 00 30 	sh %d3,%d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003830:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80003834:	54 22       	ld.w %d2,[%a2]
80003836:	37 02 70 28 	extr.u %d2,%d2,16,16
8000383a:	37 02 70 20 	extr.u %d2,%d2,0,16
8000383e:	8f 02 01 20 	sh %d2,%d2,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003842:	a6 32       	or %d2,%d3
80003844:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003848:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8000384c:	74 22       	st.w [%a2],%d2
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000384e:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
80003852:	8f 22 00 30 	sh %d3,%d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003856:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8000385a:	54 22       	ld.w %d2,[%a2]
8000385c:	37 02 70 28 	extr.u %d2,%d2,16,16
80003860:	37 02 70 20 	extr.u %d2,%d2,0,16
80003864:	8f 02 01 20 	sh %d2,%d2,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003868:	a6 32       	or %d2,%d3
8000386a:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000386e:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80003872:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
80003874:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80003878:	54 22       	ld.w %d2,[%a2]
}
8000387a:	00 00       	nop 
8000387c:	00 90       	ret 

8000387e <Ifx_Ssw_clearSafetyEndinit>:


void Ifx_Ssw_clearSafetyEndinit(unsigned short password)
{
8000387e:	40 ae       	mov.aa %a14,%sp
80003880:	20 10       	sub.a %sp,16
80003882:	02 42       	mov %d2,%d4
80003884:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    Ifx_Ssw_clearSafetyEndinitInline(password);
80003888:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
8000388c:	f9 e2 fe ff 	st.h [%a14]-2,%d2
    if (SCU_WDTS_CON0.B.LCK)
80003890:	91 30 00 2f 	movh.a %a2,61443
80003894:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80003898:	54 22       	ld.w %d2,[%a2]
8000389a:	37 02 e1 20 	extr.u %d2,%d2,1,1
8000389e:	8f f2 0f 21 	and %d2,%d2,255
800038a2:	df 02 19 00 	jeq %d2,0,800038d4 <Ifx_Ssw_clearSafetyEndinit+0x56>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
800038a6:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
800038aa:	8f 22 00 30 	sh %d3,%d2,2
                          ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800038ae:	91 30 00 2f 	movh.a %a2,61443
800038b2:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
800038b6:	54 22       	ld.w %d2,[%a2]
800038b8:	37 02 70 28 	extr.u %d2,%d2,16,16
800038bc:	37 02 70 20 	extr.u %d2,%d2,0,16
800038c0:	8f 02 01 20 	sh %d2,%d2,16
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
800038c4:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800038c6:	91 30 00 2f 	movh.a %a2,61443
800038ca:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
800038ce:	8f 12 40 21 	or %d2,%d2,1
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800038d2:	74 22       	st.w [%a2],%d2
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
800038d4:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
800038d8:	8f 22 00 30 	sh %d3,%d2,2
                      ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800038dc:	91 30 00 2f 	movh.a %a2,61443
800038e0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
800038e4:	54 22       	ld.w %d2,[%a2]
800038e6:	37 02 70 28 	extr.u %d2,%d2,16,16
800038ea:	37 02 70 20 	extr.u %d2,%d2,0,16
800038ee:	8f 02 01 20 	sh %d2,%d2,16
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
800038f2:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800038f4:	91 30 00 2f 	movh.a %a2,61443
800038f8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
800038fc:	8f 22 40 21 	or %d2,%d2,2
    SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003900:	74 22       	st.w [%a2],%d2
    SCU_WDTS_CON0.U;
80003902:	91 30 00 2f 	movh.a %a2,61443
80003906:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
8000390a:	54 22       	ld.w %d2,[%a2]
}
8000390c:	00 00       	nop 
8000390e:	00 90       	ret 

80003910 <Ifx_Ssw_setSafetyEndinit>:


void Ifx_Ssw_setSafetyEndinit(unsigned short password)
{
80003910:	40 ae       	mov.aa %a14,%sp
80003912:	20 10       	sub.a %sp,16
80003914:	02 42       	mov %d2,%d4
80003916:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    Ifx_Ssw_setSafetyEndinitInline(password);
8000391a:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
8000391e:	f9 e2 fe ff 	st.h [%a14]-2,%d2
    if (SCU_WDTS_CON0.B.LCK)
80003922:	91 30 00 2f 	movh.a %a2,61443
80003926:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
8000392a:	54 22       	ld.w %d2,[%a2]
8000392c:	37 02 e1 20 	extr.u %d2,%d2,1,1
80003930:	8f f2 0f 21 	and %d2,%d2,255
80003934:	df 02 19 00 	jeq %d2,0,80003966 <Ifx_Ssw_setSafetyEndinit+0x56>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003938:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
8000393c:	8f 22 00 30 	sh %d3,%d2,2
                          ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80003940:	91 30 00 2f 	movh.a %a2,61443
80003944:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80003948:	54 22       	ld.w %d2,[%a2]
8000394a:	37 02 70 28 	extr.u %d2,%d2,16,16
8000394e:	37 02 70 20 	extr.u %d2,%d2,0,16
80003952:	8f 02 01 20 	sh %d2,%d2,16
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003956:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003958:	91 30 00 2f 	movh.a %a2,61443
8000395c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003960:	8f 12 40 21 	or %d2,%d2,1
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003964:	74 22       	st.w [%a2],%d2
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003966:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
8000396a:	8f 22 00 30 	sh %d3,%d2,2
                      ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000396e:	91 30 00 2f 	movh.a %a2,61443
80003972:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80003976:	54 22       	ld.w %d2,[%a2]
80003978:	37 02 70 28 	extr.u %d2,%d2,16,16
8000397c:	37 02 70 20 	extr.u %d2,%d2,0,16
80003980:	8f 02 01 20 	sh %d2,%d2,16
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003984:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003986:	91 30 00 2f 	movh.a %a2,61443
8000398a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000398e:	8f 32 40 21 	or %d2,%d2,3
    SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003992:	74 22       	st.w [%a2],%d2
    SCU_WDTS_CON0.U;
80003994:	91 30 00 2f 	movh.a %a2,61443
80003998:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
8000399c:	54 22       	ld.w %d2,[%a2]
}
8000399e:	00 00       	nop 
800039a0:	00 90       	ret 

800039a2 <Ifx_Ssw_serviceCpuWatchdog>:


void Ifx_Ssw_serviceCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
800039a2:	40 ae       	mov.aa %a14,%sp
800039a4:	20 10       	sub.a %sp,16
800039a6:	b5 e4 f4 ff 	st.a [%a14]-12,%a4
800039aa:	02 42       	mov %d2,%d4
800039ac:	f9 e2 f0 ff 	st.h [%a14]-16,%d2
    Ifx_Ssw_setCpuEndinitInline(watchdog, password);
800039b0:	b9 e2 f0 ff 	ld.hu %d2,[%a14]-16
800039b4:	19 e3 f4 ff 	ld.w %d3,[%a14]-12
800039b8:	59 e3 fc ff 	st.w [%a14]-4,%d3
800039bc:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    if (watchdog->CON0.B.LCK)
800039c0:	99 e2 fc ff 	ld.a %a2,[%a14]-4
800039c4:	54 22       	ld.w %d2,[%a2]
800039c6:	37 02 e1 20 	extr.u %d2,%d2,1,1
800039ca:	8f f2 0f 21 	and %d2,%d2,255
800039ce:	df 02 15 00 	jeq %d2,0,800039f8 <Ifx_Ssw_serviceCpuWatchdog+0x56>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800039d2:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
800039d6:	8f 22 00 30 	sh %d3,%d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800039da:	99 e2 fc ff 	ld.a %a2,[%a14]-4
800039de:	54 22       	ld.w %d2,[%a2]
800039e0:	37 02 70 28 	extr.u %d2,%d2,16,16
800039e4:	37 02 70 20 	extr.u %d2,%d2,0,16
800039e8:	8f 02 01 20 	sh %d2,%d2,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800039ec:	a6 32       	or %d2,%d3
800039ee:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800039f2:	99 e2 fc ff 	ld.a %a2,[%a14]-4
800039f6:	74 22       	st.w [%a2],%d2
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800039f8:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
800039fc:	8f 22 00 30 	sh %d3,%d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003a00:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80003a04:	54 22       	ld.w %d2,[%a2]
80003a06:	37 02 70 28 	extr.u %d2,%d2,16,16
80003a0a:	37 02 70 20 	extr.u %d2,%d2,0,16
80003a0e:	8f 02 01 20 	sh %d2,%d2,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003a12:	a6 32       	or %d2,%d3
80003a14:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003a18:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80003a1c:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
80003a1e:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80003a22:	54 22       	ld.w %d2,[%a2]
}
80003a24:	00 00       	nop 
80003a26:	00 90       	ret 

80003a28 <Ifx_Ssw_serviceSafetyWatchdog>:


void Ifx_Ssw_serviceSafetyWatchdog(unsigned short password)
{
80003a28:	40 ae       	mov.aa %a14,%sp
80003a2a:	20 10       	sub.a %sp,16
80003a2c:	02 42       	mov %d2,%d4
80003a2e:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    Ifx_Ssw_setSafetyEndinitInline(password);
80003a32:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
80003a36:	f9 e2 fe ff 	st.h [%a14]-2,%d2
    if (SCU_WDTS_CON0.B.LCK)
80003a3a:	91 30 00 2f 	movh.a %a2,61443
80003a3e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80003a42:	54 22       	ld.w %d2,[%a2]
80003a44:	37 02 e1 20 	extr.u %d2,%d2,1,1
80003a48:	8f f2 0f 21 	and %d2,%d2,255
80003a4c:	df 02 19 00 	jeq %d2,0,80003a7e <Ifx_Ssw_serviceSafetyWatchdog+0x56>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003a50:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
80003a54:	8f 22 00 30 	sh %d3,%d2,2
                          ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80003a58:	91 30 00 2f 	movh.a %a2,61443
80003a5c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80003a60:	54 22       	ld.w %d2,[%a2]
80003a62:	37 02 70 28 	extr.u %d2,%d2,16,16
80003a66:	37 02 70 20 	extr.u %d2,%d2,0,16
80003a6a:	8f 02 01 20 	sh %d2,%d2,16
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003a6e:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003a70:	91 30 00 2f 	movh.a %a2,61443
80003a74:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003a78:	8f 12 40 21 	or %d2,%d2,1
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003a7c:	74 22       	st.w [%a2],%d2
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003a7e:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
80003a82:	8f 22 00 30 	sh %d3,%d2,2
                      ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80003a86:	91 30 00 2f 	movh.a %a2,61443
80003a8a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80003a8e:	54 22       	ld.w %d2,[%a2]
80003a90:	37 02 70 28 	extr.u %d2,%d2,16,16
80003a94:	37 02 70 20 	extr.u %d2,%d2,0,16
80003a98:	8f 02 01 20 	sh %d2,%d2,16
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003a9c:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003a9e:	91 30 00 2f 	movh.a %a2,61443
80003aa2:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003aa6:	8f 32 40 21 	or %d2,%d2,3
    SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003aaa:	74 22       	st.w [%a2],%d2
    SCU_WDTS_CON0.U;
80003aac:	91 30 00 2f 	movh.a %a2,61443
80003ab0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fd3607c>>
80003ab4:	54 22       	ld.w %d2,[%a2]
}
80003ab6:	00 00       	nop 
80003ab8:	00 90       	ret 

80003aba <Ifx_Ssw_disableCpuWatchdog>:


void Ifx_Ssw_disableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
80003aba:	40 ae       	mov.aa %a14,%sp
80003abc:	20 20       	sub.a %sp,32
80003abe:	b5 e4 e4 ff 	st.a [%a14]-28,%a4
80003ac2:	02 42       	mov %d2,%d4
80003ac4:	f9 e2 e0 ff 	st.h [%a14]-32,%d2
    /* Select CPU Watchdog based on Core Id */
    unsigned int    cpuIndex;
    cpuIndex = Ifx_Ssw_MFCR(CPU_CORE_ID);
80003ac8:	4d c0 e1 2f 	mfcr %d2,$core_id
80003acc:	59 e2 fc ff 	st.w [%a14]-4,%d2
80003ad0:	19 e2 fc ff 	ld.w %d2,[%a14]-4
80003ad4:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    cpuIndex = (unsigned int)((unsigned int)cpuIndex >> IFX_CPU_CORE_ID_CORE_ID_OFF) & IFX_CPU_CORE_ID_CORE_ID_MSK;
80003ad8:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80003adc:	8f 72 00 21 	and %d2,%d2,7
80003ae0:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80003ae4:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80003ae8:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80003aec:	82 52       	mov %d2,5
80003aee:	59 e2 ec ff 	st.w [%a14]-20,%d2
    __asm__ volatile ("min.u %0, %1, %2" : "=d" (res) : "d" (a), "d" (b));
80003af2:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80003af6:	19 e3 ec ff 	ld.w %d3,[%a14]-20
80003afa:	0b 32 90 21 	min.u %d2,%d2,%d3
80003afe:	59 e2 e8 ff 	st.w [%a14]-24,%d2
    return res;
80003b02:	19 e2 e8 ff 	ld.w %d2,[%a14]-24
    cpuIndex = Ifx_Ssw_MINU(cpuIndex, 5);
80003b06:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    Ifx_SCU_WDTCPU *wdt = &MODULE_SCU.WDTCPU[cpuIndex];
80003b0a:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80003b0e:	53 c2 20 20 	mul %d2,%d2,12
80003b12:	1b c2 24 26 	addi %d2,%d2,25164
80003b16:	9b 32 00 2f 	addih %d2,%d2,61443
80003b1a:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    Ifx_Ssw_clearCpuEndinit(wdt, password);
80003b1e:	b9 e2 e0 ff 	ld.hu %d2,[%a14]-32
80003b22:	02 24       	mov %d4,%d2
80003b24:	99 e4 f4 ff 	ld.a %a4,[%a14]-12
80003b28:	6d ff 25 fe 	call 80003772 <Ifx_Ssw_clearCpuEndinit>
    wdt->CON1.B.DR = 1U;         /* Set DR bit in Config_1 register */
80003b2c:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
80003b30:	d9 23 04 00 	lea %a3,[%a2]4
80003b34:	54 32       	ld.w %d2,[%a3]
80003b36:	b7 12 81 21 	insert %d2,%d2,1,3,1
80003b3a:	b0 42       	add.a %a2,4
80003b3c:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setCpuEndinit(wdt, password);
80003b3e:	b9 e2 e0 ff 	ld.hu %d2,[%a14]-32
80003b42:	02 24       	mov %d4,%d2
80003b44:	99 e4 f4 ff 	ld.a %a4,[%a14]-12
80003b48:	6d ff 58 fe 	call 800037f8 <Ifx_Ssw_setCpuEndinit>
}
80003b4c:	00 00       	nop 
80003b4e:	00 90       	ret 

80003b50 <Ifx_Ssw_enableCpuWatchdog>:


void Ifx_Ssw_enableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
80003b50:	40 ae       	mov.aa %a14,%sp
80003b52:	20 20       	sub.a %sp,32
80003b54:	b5 e4 e4 ff 	st.a [%a14]-28,%a4
80003b58:	02 42       	mov %d2,%d4
80003b5a:	f9 e2 e0 ff 	st.h [%a14]-32,%d2
    /* Select CPU Watchdog based on Core Id */
    unsigned int    cpuIndex;
    cpuIndex = Ifx_Ssw_MFCR(CPU_CORE_ID);
80003b5e:	4d c0 e1 2f 	mfcr %d2,$core_id
80003b62:	59 e2 fc ff 	st.w [%a14]-4,%d2
80003b66:	19 e2 fc ff 	ld.w %d2,[%a14]-4
80003b6a:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    cpuIndex = (unsigned int)((unsigned int)cpuIndex >> IFX_CPU_CORE_ID_CORE_ID_OFF) & IFX_CPU_CORE_ID_CORE_ID_MSK;
80003b6e:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80003b72:	8f 72 00 21 	and %d2,%d2,7
80003b76:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80003b7a:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80003b7e:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80003b82:	82 52       	mov %d2,5
80003b84:	59 e2 ec ff 	st.w [%a14]-20,%d2
    __asm__ volatile ("min.u %0, %1, %2" : "=d" (res) : "d" (a), "d" (b));
80003b88:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80003b8c:	19 e3 ec ff 	ld.w %d3,[%a14]-20
80003b90:	0b 32 90 21 	min.u %d2,%d2,%d3
80003b94:	59 e2 e8 ff 	st.w [%a14]-24,%d2
    return res;
80003b98:	19 e2 e8 ff 	ld.w %d2,[%a14]-24
    cpuIndex = Ifx_Ssw_MINU(cpuIndex, 5);
80003b9c:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    Ifx_SCU_WDTCPU *wdt = &MODULE_SCU.WDTCPU[cpuIndex];
80003ba0:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80003ba4:	53 c2 20 20 	mul %d2,%d2,12
80003ba8:	1b c2 24 26 	addi %d2,%d2,25164
80003bac:	9b 32 00 2f 	addih %d2,%d2,61443
80003bb0:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    Ifx_Ssw_clearCpuEndinit(wdt, password);
80003bb4:	b9 e2 e0 ff 	ld.hu %d2,[%a14]-32
80003bb8:	02 24       	mov %d4,%d2
80003bba:	99 e4 f4 ff 	ld.a %a4,[%a14]-12
80003bbe:	6d ff da fd 	call 80003772 <Ifx_Ssw_clearCpuEndinit>
    wdt->CON1.B.DR = 0U;         /* Clear DR bit in Config_1 register */
80003bc2:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
80003bc6:	d9 23 04 00 	lea %a3,[%a2]4
80003bca:	54 32       	ld.w %d2,[%a3]
80003bcc:	8f 82 c0 21 	andn %d2,%d2,8
80003bd0:	b0 42       	add.a %a2,4
80003bd2:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setCpuEndinit(wdt, password);
80003bd4:	b9 e2 e0 ff 	ld.hu %d2,[%a14]-32
80003bd8:	02 24       	mov %d4,%d2
80003bda:	99 e4 f4 ff 	ld.a %a4,[%a14]-12
80003bde:	6d ff 0d fe 	call 800037f8 <Ifx_Ssw_setCpuEndinit>
}
80003be2:	00 00       	nop 
80003be4:	00 90       	ret 

80003be6 <Ifx_Ssw_disableSafetyWatchdog>:


void Ifx_Ssw_disableSafetyWatchdog(unsigned short password)
{
80003be6:	40 ae       	mov.aa %a14,%sp
80003be8:	20 08       	sub.a %sp,8
80003bea:	02 42       	mov %d2,%d4
80003bec:	f9 e2 fc ff 	st.h [%a14]-4,%d2
    Ifx_Ssw_clearSafetyEndinit(password);
80003bf0:	b9 e2 fc ff 	ld.hu %d2,[%a14]-4
80003bf4:	02 24       	mov %d4,%d2
80003bf6:	6d ff 44 fe 	call 8000387e <Ifx_Ssw_clearSafetyEndinit>
    SCU_WDTS_CON1.B.DR = 1U;     /* Set DR bit in Config_1 register */
80003bfa:	91 30 00 2f 	movh.a %a2,61443
80003bfe:	d9 22 2c a6 	lea %a2,[%a2]25260 <f00362ac <_START2_end+0x4fd36080>>
80003c02:	54 22       	ld.w %d2,[%a2]
80003c04:	b7 12 81 21 	insert %d2,%d2,1,3,1
80003c08:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setSafetyEndinit(password);
80003c0a:	b9 e2 fc ff 	ld.hu %d2,[%a14]-4
80003c0e:	02 24       	mov %d4,%d2
80003c10:	6d ff 80 fe 	call 80003910 <Ifx_Ssw_setSafetyEndinit>
}
80003c14:	00 00       	nop 
80003c16:	00 90       	ret 

80003c18 <Ifx_Ssw_enableSafetyWatchdog>:


void Ifx_Ssw_enableSafetyWatchdog(unsigned short password)
{
80003c18:	40 ae       	mov.aa %a14,%sp
80003c1a:	20 08       	sub.a %sp,8
80003c1c:	02 42       	mov %d2,%d4
80003c1e:	f9 e2 fc ff 	st.h [%a14]-4,%d2
    Ifx_Ssw_clearSafetyEndinit(password);
80003c22:	b9 e2 fc ff 	ld.hu %d2,[%a14]-4
80003c26:	02 24       	mov %d4,%d2
80003c28:	6d ff 2b fe 	call 8000387e <Ifx_Ssw_clearSafetyEndinit>
    SCU_WDTS_CON1.B.DR = 0U;     /* Clear DR bit in Config_1 register */
80003c2c:	91 30 00 2f 	movh.a %a2,61443
80003c30:	d9 22 2c a6 	lea %a2,[%a2]25260 <f00362ac <_START2_end+0x4fd36080>>
80003c34:	54 22       	ld.w %d2,[%a2]
80003c36:	8f 82 c0 21 	andn %d2,%d2,8
80003c3a:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setSafetyEndinit(password);
80003c3c:	b9 e2 fc ff 	ld.hu %d2,[%a14]-4
80003c40:	02 24       	mov %d4,%d2
80003c42:	6d ff 67 fe 	call 80003910 <Ifx_Ssw_setSafetyEndinit>
}
80003c46:	00 00       	nop 
80003c48:	00 90       	ret 

80003c4a <Ifx_Ssw_startCore>:


void Ifx_Ssw_startCore(Ifx_CPU *cpu, unsigned int programCounter)
{
80003c4a:	40 ae       	mov.aa %a14,%sp
80003c4c:	20 10       	sub.a %sp,16
80003c4e:	b5 e4 f4 ff 	st.a [%a14]-12,%a4
80003c52:	59 e4 f0 ff 	st.w [%a14]-16,%d4
    /* Set the PC */
    cpu->PC.B.PC = (unsigned int)programCounter >> 1U;
80003c56:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
80003c5a:	06 f2       	sh %d2,-1
80003c5c:	82 f3       	mov %d3,-1
80003c5e:	06 f3       	sh %d3,-1
80003c60:	26 23       	and %d3,%d2
80003c62:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
80003c66:	60 22       	mov.a %a2,%d2
80003c68:	d9 22 c8 8f 	lea %a2,[%a2]-504
80003c6c:	11 22 00 20 	addih.a %a2,%a2,2
80003c70:	54 22       	ld.w %d2,[%a2]
80003c72:	37 32 9f 20 	insert %d2,%d2,%d3,1,31
80003c76:	74 22       	st.w [%a2],%d2

    /* release boot halt mode if required */
    Ifx_CPU_SYSCON syscon;
    syscon = cpu->SYSCON;
80003c78:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
80003c7c:	60 22       	mov.a %a2,%d2
80003c7e:	d9 22 d4 8f 	lea %a2,[%a2]-492
80003c82:	11 22 00 20 	addih.a %a2,%a2,2
80003c86:	54 22       	ld.w %d2,[%a2]
80003c88:	59 e2 fc ff 	st.w [%a14]-4,%d2

    if (syscon.B.BHALT)
80003c8c:	19 e2 fc ff 	ld.w %d2,[%a14]-4
80003c90:	37 02 61 2c 	extr.u %d2,%d2,24,1
80003c94:	8f f2 0f 21 	and %d2,%d2,255
80003c98:	df 02 14 00 	jeq %d2,0,80003cc0 <Ifx_Ssw_startCore+0x76>
    {
        syscon.B.BHALT = 0U;
80003c9c:	19 e2 fc ff 	ld.w %d2,[%a14]-4
80003ca0:	7b 00 f0 3f 	movh %d3,65280
80003ca4:	c2 f3       	add %d3,-1
80003ca6:	26 32       	and %d2,%d3
80003ca8:	59 e2 fc ff 	st.w [%a14]-4,%d2
        cpu->SYSCON    = syscon;
80003cac:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
80003cb0:	60 22       	mov.a %a2,%d2
80003cb2:	d9 22 d4 8f 	lea %a2,[%a2]-492
80003cb6:	11 22 00 20 	addih.a %a2,%a2,2
80003cba:	19 e2 fc ff 	ld.w %d2,[%a14]-4
80003cbe:	74 22       	st.w [%a2],%d2
    }

}
80003cc0:	00 00       	nop 
80003cc2:	00 90       	ret 

80003cc4 <Ifx_Ssw_getStmFrequency>:
    Ifx_Ssw_setCpuEndinit(wdt, cpuWdtPw);
}


float Ifx_Ssw_getStmFrequency(void)
{
80003cc4:	40 ae       	mov.aa %a14,%sp
80003cc6:	20 10       	sub.a %sp,16
    float        oscFreq    = IFX_CFG_SSW_XTAL_FREQUENCY;
80003cc8:	7b 90 b9 24 	movh %d2,19353
80003ccc:	1b 02 68 29 	addi %d2,%d2,-27008
80003cd0:	59 e2 fc ff 	st.w [%a14]-4,%d2
    float        sourcefreq = IFX_CFG_SSW_EVR_OSC_FREQUENCY;
80003cd4:	7b f0 cb 24 	movh %d2,19647
80003cd8:	1b 02 c2 2b 	addi %d2,%d2,-17376
80003cdc:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    unsigned int insel      = SCU_SYSPLLCON0.B.INSEL;
80003ce0:	91 30 00 2f 	movh.a %a2,61443
80003ce4:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
80003ce8:	54 22       	ld.w %d2,[%a2]
80003cea:	37 02 62 2f 	extr.u %d2,%d2,30,2
80003cee:	8f f2 0f 21 	and %d2,%d2,255
80003cf2:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    if (insel == 2U)
80003cf6:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
80003cfa:	df 22 0a 80 	jne %d2,2,80003d0e <Ifx_Ssw_getStmFrequency+0x4a>
    {
        oscFreq = IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY;
80003cfe:	7b 90 b9 24 	movh %d2,19353
80003d02:	1b 02 68 29 	addi %d2,%d2,-27008
80003d06:	59 e2 fc ff 	st.w [%a14]-4,%d2
80003d0a:	1d 00 14 00 	j 80003d32 <Ifx_Ssw_getStmFrequency+0x6e>
    }
    else if (insel == 1U)
80003d0e:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
80003d12:	df 12 0a 80 	jne %d2,1,80003d26 <Ifx_Ssw_getStmFrequency+0x62>
    {
        oscFreq = IFX_CFG_SSW_XTAL_FREQUENCY;
80003d16:	7b 90 b9 24 	movh %d2,19353
80003d1a:	1b 02 68 29 	addi %d2,%d2,-27008
80003d1e:	59 e2 fc ff 	st.w [%a14]-4,%d2
80003d22:	1d 00 08 00 	j 80003d32 <Ifx_Ssw_getStmFrequency+0x6e>
    }
    else
    {
        oscFreq = IFX_CFG_SSW_EVR_OSC_FREQUENCY;
80003d26:	7b f0 cb 24 	movh %d2,19647
80003d2a:	1b 02 c2 2b 	addi %d2,%d2,-17376
80003d2e:	59 e2 fc ff 	st.w [%a14]-4,%d2
    }

    if (SCU_CCUCON0.B.CLKSEL != 0U)
80003d32:	91 30 00 2f 	movh.a %a2,61443
80003d36:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd35e04>>
80003d3a:	54 22       	ld.w %d2,[%a2]
80003d3c:	37 02 62 2e 	extr.u %d2,%d2,28,2
80003d40:	8f f2 0f 21 	and %d2,%d2,255
80003d44:	df 02 2e 00 	jeq %d2,0,80003da0 <Ifx_Ssw_getStmFrequency+0xdc>
    {
        sourcefreq = (oscFreq * (SCU_SYSPLLCON0.B.NDIV + 1U)) /
80003d48:	91 30 00 2f 	movh.a %a2,61443
80003d4c:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
80003d50:	54 22       	ld.w %d2,[%a2]
80003d52:	37 02 e7 24 	extr.u %d2,%d2,9,7
80003d56:	8f f2 0f 21 	and %d2,%d2,255
80003d5a:	c2 12       	add %d2,1
80003d5c:	4b 02 61 31 	utof %d3,%d2
80003d60:	19 e2 fc ff 	ld.w %d2,[%a14]-4
80003d64:	4b 23 41 30 	mul.f %d3,%d3,%d2
                     ((SCU_SYSPLLCON0.B.PDIV + 1U) * (SCU_SYSPLLCON1.B.K2DIV + 1U));
80003d68:	91 30 00 2f 	movh.a %a2,61443
80003d6c:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fd35dec>>
80003d70:	54 22       	ld.w %d2,[%a2]
80003d72:	37 02 63 2c 	extr.u %d2,%d2,24,3
80003d76:	8f f2 0f 21 	and %d2,%d2,255
80003d7a:	1b 12 00 40 	addi %d4,%d2,1
80003d7e:	91 30 00 2f 	movh.a %a2,61443
80003d82:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_START2_end+0x4fd35df0>>
80003d86:	54 22       	ld.w %d2,[%a2]
80003d88:	37 02 63 20 	extr.u %d2,%d2,0,3
80003d8c:	8f f2 0f 21 	and %d2,%d2,255
80003d90:	c2 12       	add %d2,1
80003d92:	e2 42       	mul %d2,%d4
        sourcefreq = (oscFreq * (SCU_SYSPLLCON0.B.NDIV + 1U)) /
80003d94:	4b 02 61 21 	utof %d2,%d2
80003d98:	4b 23 51 20 	div.f %d2,%d3,%d2
80003d9c:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    }

    return sourcefreq / SCU_CCUCON0.B.STMDIV;
80003da0:	91 30 00 2f 	movh.a %a2,61443
80003da4:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fd35e04>>
80003da8:	54 22       	ld.w %d2,[%a2]
80003daa:	37 02 64 20 	extr.u %d2,%d2,0,4
80003dae:	8f f2 0f 21 	and %d2,%d2,255
80003db2:	4b 02 41 21 	itof %d2,%d2
80003db6:	19 e3 f8 ff 	ld.w %d3,[%a14]-8
80003dba:	4b 23 51 20 	div.f %d2,%d3,%d2
}
80003dbe:	00 90       	ret 

80003dc0 <Ifx_Ssw_doCppInit>:

void Ifx_Ssw_doCppInit(void)
{
80003dc0:	40 ae       	mov.aa %a14,%sp
80003dc2:	20 18       	sub.a %sp,24
{
    Ifx_Ssw_CTablePtr pBlockDest, pBlockSrc;
    unsigned int      uiLength, uiCnt;
    unsigned int     *pTable;
    /* clear table */
    pTable = (unsigned int *)&__clear_table;
80003dc4:	91 00 00 28 	movh.a %a2,32768
80003dc8:	d9 22 44 40 	lea %a2,[%a2]1284 <80000504 <__clear_table>>
80003dcc:	b5 e2 fc ff 	st.a [%a14]-4 <80000504 <__clear_table>>,%a2

    while (pTable)
80003dd0:	1d 00 58 00 	j 80003e80 <Ifx_Ssw_doCppInit+0xc0>
    {
        pBlockDest.uiPtr = (unsigned int *)*pTable++;
80003dd4:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80003dd8:	80 22       	mov.d %d2,%a2
80003dda:	c2 42       	add %d2,4
80003ddc:	59 e2 fc ff 	st.w [%a14]-4,%d2
80003de0:	54 22       	ld.w %d2,[%a2]
80003de2:	59 e2 f0 ff 	st.w [%a14]-16,%d2
        uiLength         = *pTable++;
80003de6:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80003dea:	80 22       	mov.d %d2,%a2
80003dec:	c2 42       	add %d2,4
80003dee:	59 e2 fc ff 	st.w [%a14]-4,%d2
80003df2:	54 22       	ld.w %d2,[%a2]
80003df4:	59 e2 f8 ff 	st.w [%a14]-8,%d2

        /* we are finished when length == -1 */
        if (uiLength == 0xFFFFFFFF)
80003df8:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80003dfc:	df f2 48 00 	jeq %d2,-1,80003e8c <Ifx_Ssw_doCppInit+0xcc>
        {
            break;
        }

        uiCnt = uiLength / 8;
80003e00:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80003e04:	06 d2       	sh %d2,-3
80003e06:	59 e2 f4 ff 	st.w [%a14]-12,%d2

        while (uiCnt--)
80003e0a:	1d 00 0d 00 	j 80003e24 <Ifx_Ssw_doCppInit+0x64>
        {
            *pBlockDest.ullPtr++ = 0;
80003e0e:	99 e4 f0 ff 	ld.a %a4,[%a14]-16
80003e12:	80 42       	mov.d %d2,%a4
80003e14:	1b 82 00 20 	addi %d2,%d2,8
80003e18:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80003e1c:	a0 02       	mov.a %a2,0
80003e1e:	a0 03       	mov.a %a3,0
80003e20:	89 42 c0 09 	st.da [%a4],%a2
        while (uiCnt--)
80003e24:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
80003e28:	1b f2 ff 3f 	addi %d3,%d2,-1
80003e2c:	59 e3 f4 ff 	st.w [%a14]-12,%d3
80003e30:	df 02 ef ff 	jne %d2,0,80003e0e <Ifx_Ssw_doCppInit+0x4e>
        }

        if (uiLength & 0x4)
80003e34:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80003e38:	8f 42 00 21 	and %d2,%d2,4
80003e3c:	df 02 0a 00 	jeq %d2,0,80003e50 <Ifx_Ssw_doCppInit+0x90>
        {
            *pBlockDest.uiPtr++ = 0;
80003e40:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80003e44:	80 22       	mov.d %d2,%a2
80003e46:	c2 42       	add %d2,4
80003e48:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80003e4c:	82 02       	mov %d2,0
80003e4e:	74 22       	st.w [%a2],%d2
        }

        if (uiLength & 0x2)
80003e50:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80003e54:	8f 22 00 21 	and %d2,%d2,2
80003e58:	df 02 0a 00 	jeq %d2,0,80003e6c <Ifx_Ssw_doCppInit+0xac>
        {
            *pBlockDest.usPtr++ = 0;
80003e5c:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80003e60:	80 22       	mov.d %d2,%a2
80003e62:	c2 22       	add %d2,2
80003e64:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80003e68:	82 02       	mov %d2,0
80003e6a:	b4 22       	st.h [%a2],%d2
        }

        if (uiLength & 0x1)
80003e6c:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80003e70:	8f 12 00 21 	and %d2,%d2,1
80003e74:	df 02 06 00 	jeq %d2,0,80003e80 <Ifx_Ssw_doCppInit+0xc0>
        {
            *pBlockDest.ucPtr = 0;
80003e78:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80003e7c:	82 02       	mov %d2,0
80003e7e:	34 22       	st.b [%a2],%d2
    while (pTable)
80003e80:	19 e2 fc ff 	ld.w %d2,[%a14]-4
80003e84:	df 02 a8 ff 	jne %d2,0,80003dd4 <Ifx_Ssw_doCppInit+0x14>
80003e88:	1d 00 03 00 	j 80003e8e <Ifx_Ssw_doCppInit+0xce>
            break;
80003e8c:	00 00       	nop 
        }
    }

    /* copy table */
    pTable = (unsigned int *)&__copy_table;
80003e8e:	91 00 00 28 	movh.a %a2,32768
80003e92:	d9 22 4c 60 	lea %a2,[%a2]1420 <8000058c <__copy_table>>
80003e96:	b5 e2 fc ff 	st.a [%a14]-4 <8000058c <__copy_table>>,%a2

    while (pTable)
80003e9a:	1d 00 77 00 	j 80003f88 <Ifx_Ssw_doCppInit+0x1c8>
    {
        pBlockSrc.uiPtr  = (unsigned int *)*pTable++;
80003e9e:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80003ea2:	80 22       	mov.d %d2,%a2
80003ea4:	c2 42       	add %d2,4
80003ea6:	59 e2 fc ff 	st.w [%a14]-4,%d2
80003eaa:	54 22       	ld.w %d2,[%a2]
80003eac:	59 e2 ec ff 	st.w [%a14]-20,%d2
        pBlockDest.uiPtr = (unsigned int *)*pTable++;
80003eb0:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80003eb4:	80 22       	mov.d %d2,%a2
80003eb6:	c2 42       	add %d2,4
80003eb8:	59 e2 fc ff 	st.w [%a14]-4,%d2
80003ebc:	54 22       	ld.w %d2,[%a2]
80003ebe:	59 e2 f0 ff 	st.w [%a14]-16,%d2
        uiLength         = *pTable++;
80003ec2:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80003ec6:	80 22       	mov.d %d2,%a2
80003ec8:	c2 42       	add %d2,4
80003eca:	59 e2 fc ff 	st.w [%a14]-4,%d2
80003ece:	54 22       	ld.w %d2,[%a2]
80003ed0:	59 e2 f8 ff 	st.w [%a14]-8,%d2

        /* we are finished when length == -1 */
        if (uiLength == 0xFFFFFFFF)
80003ed4:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80003ed8:	df f2 5e 00 	jeq %d2,-1,80003f94 <Ifx_Ssw_doCppInit+0x1d4>
        {
            break;
        }

        uiCnt = uiLength / 8;
80003edc:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80003ee0:	06 d2       	sh %d2,-3
80003ee2:	59 e2 f4 ff 	st.w [%a14]-12,%d2

        while (uiCnt--)
80003ee6:	1d 00 14 00 	j 80003f0e <Ifx_Ssw_doCppInit+0x14e>
        {
            *pBlockDest.ullPtr++ = *pBlockSrc.ullPtr++;
80003eea:	99 e2 ec ff 	ld.a %a2,[%a14]-20
80003eee:	80 22       	mov.d %d2,%a2
80003ef0:	1b 82 00 20 	addi %d2,%d2,8
80003ef4:	59 e2 ec ff 	st.w [%a14]-20,%d2
80003ef8:	99 e4 f0 ff 	ld.a %a4,[%a14]-16
80003efc:	80 42       	mov.d %d2,%a4
80003efe:	1b 82 00 20 	addi %d2,%d2,8
80003f02:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80003f06:	09 22 c0 09 	ld.da %a2,[%a2]
80003f0a:	89 42 c0 09 	st.da [%a4],%a2
        while (uiCnt--)
80003f0e:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
80003f12:	1b f2 ff 3f 	addi %d3,%d2,-1
80003f16:	59 e3 f4 ff 	st.w [%a14]-12,%d3
80003f1a:	df 02 e8 ff 	jne %d2,0,80003eea <Ifx_Ssw_doCppInit+0x12a>
        }

        if (uiLength & 0x4)
80003f1e:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80003f22:	8f 42 00 21 	and %d2,%d2,4
80003f26:	df 02 10 00 	jeq %d2,0,80003f46 <Ifx_Ssw_doCppInit+0x186>
        {
            *pBlockDest.uiPtr++ = *pBlockSrc.uiPtr++;
80003f2a:	99 e3 ec ff 	ld.a %a3,[%a14]-20
80003f2e:	80 32       	mov.d %d2,%a3
80003f30:	c2 42       	add %d2,4
80003f32:	59 e2 ec ff 	st.w [%a14]-20,%d2
80003f36:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80003f3a:	80 22       	mov.d %d2,%a2
80003f3c:	c2 42       	add %d2,4
80003f3e:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80003f42:	54 32       	ld.w %d2,[%a3]
80003f44:	74 22       	st.w [%a2],%d2
        }

        if (uiLength & 0x2)
80003f46:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80003f4a:	8f 22 00 21 	and %d2,%d2,2
80003f4e:	df 02 11 00 	jeq %d2,0,80003f70 <Ifx_Ssw_doCppInit+0x1b0>
        {
            *pBlockDest.usPtr++ = *pBlockSrc.usPtr++;
80003f52:	99 e3 ec ff 	ld.a %a3,[%a14]-20
80003f56:	80 32       	mov.d %d2,%a3
80003f58:	c2 22       	add %d2,2
80003f5a:	59 e2 ec ff 	st.w [%a14]-20,%d2
80003f5e:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80003f62:	80 22       	mov.d %d2,%a2
80003f64:	c2 22       	add %d2,2
80003f66:	59 e2 f0 ff 	st.w [%a14]-16,%d2
80003f6a:	b9 32 00 00 	ld.hu %d2,[%a3]0
80003f6e:	b4 22       	st.h [%a2],%d2
        }

        if (uiLength & 0x1)
80003f70:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
80003f74:	8f 12 00 21 	and %d2,%d2,1
80003f78:	df 02 08 00 	jeq %d2,0,80003f88 <Ifx_Ssw_doCppInit+0x1c8>
        {
            *pBlockDest.ucPtr = *pBlockSrc.ucPtr;
80003f7c:	99 e3 ec ff 	ld.a %a3,[%a14]-20
80003f80:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
80003f84:	14 32       	ld.bu %d2,[%a3]
80003f86:	34 22       	st.b [%a2],%d2
    while (pTable)
80003f88:	19 e2 fc ff 	ld.w %d2,[%a14]-4
80003f8c:	df 02 89 ff 	jne %d2,0,80003e9e <Ifx_Ssw_doCppInit+0xde>
        }
    }
}
80003f90:	1d 00 03 00 	j 80003f96 <Ifx_Ssw_doCppInit+0x1d6>
            break;
80003f94:	00 00       	nop 
}
80003f96:	00 00       	nop 
	#elif defined(__HIGHTEC__) && !defined(__clang__)
		extern void _init(void); /* cpp initialization */
		_init();
	#elif defined(__GNUC__) && !defined(__HIGHTEC__)
		extern void _init(void); /* cpp initialization */
		_init();
80003f98:	6d ff 54 e5 	call 80000a40 <_init>
	#elif defined(__ghs__)
		extern void _main(void); /* cpp initialization */
		_main();
	#endif
}
80003f9c:	00 00       	nop 
80003f9e:	00 90       	ret 

80003fa0 <Ifx_Ssw_Pms_Init>:
#pragma GCC optimize ("O1")
#endif

#if (IFX_CFG_SSW_ENABLE_PMS_INIT == 1U)
void Ifx_Ssw_Pms_Init(void)
{
80003fa0:	40 ae       	mov.aa %a14,%sp
    uint16 password = MODULE_SCU.SEICON0.B.EPW ^ 0x003F;
80003fa2:	91 30 00 2f 	movh.a %a2,61443
80003fa6:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_START2_end+0x4fd35dd4>>
80003faa:	19 22 34 a0 	ld.w %d2,[%a2]692 <f00302b4 <_START2_end+0x4fd30088>>
80003fae:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint32                                      regVal;
    uint16                                      endinitSfty_pw = IfxScuWdt_getGlobalSafetyEndinitPasswordInline();
    const IfxPmsEvr_initSequencePhase          *phaseConfig;
    const IfxPmsEvr_StepDownRegulatorRegConfig *regConfig;

    if (PMS_EVRSTAT.B.EVRC == 1U)
80003fb2:	91 50 02 2f 	movh.a %a2,61477
80003fb6:	d9 22 2c 08 	lea %a2,[%a2]-32724 <f024802c <_START2_end+0x4ff47e00>>
80003fba:	54 23       	ld.w %d3,[%a2]
80003fbc:	6f 03 04 80 	jnz.t %d3,0,80003fc4 <Ifx_Ssw_Pms_Init+0x24>
}


IFX_SSW_INLINE void Ifx_Ssw_jumpBackToLink(void)
{
    __asm__ volatile ("ji %a11");
80003fc0:	dc 0b       	ji %a11
        __debug();
        /* Application may have call to error handling here */
    }

    Ifx_Ssw_jumpBackToLink();
}
80003fc2:	00 90       	ret 
    {
        /*Loop through each configured phase*/
        for (phaseConfig = &sequence->phaseConfig[0];
80003fc4:	91 00 00 28 	movh.a %a2,32768
80003fc8:	d9 23 2c f0 	lea %a3,[%a2]1004 <800003ec <IfxPmsEvr_cfgSequenceDefault>>
80003fcc:	b0 43       	add.a %a3,4
80003fce:	d4 33       	ld.a %a3,[%a3]
             phaseConfig < &sequence->phaseConfig[sequence->numOfPhases];
80003fd0:	39 27 2c f0 	ld.bu %d7,[%a2]1004 <800003ec <IfxPmsEvr_cfgSequenceDefault>>
80003fd4:	53 c7 20 70 	mul %d7,%d7,12
80003fd8:	80 33       	mov.d %d3,%a3
80003fda:	42 73       	add %d3,%d7
80003fdc:	80 34       	mov.d %d4,%a3
80003fde:	7f 34 f1 ff 	jge.u %d4,%d3,80003fc0 <Ifx_Ssw_Pms_Init+0x20>
             phaseConfig++)
        {
            IfxScuWdt_clearGlobalSafetyEndinitInline(endinitSfty_pw);
80003fe2:	8f f2 83 21 	xor %d2,%d2,63
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
80003fe6:	06 22       	sh %d2,2
80003fe8:	7b c0 ff 0f 	movh %d0,65532
80003fec:	a6 20       	or %d0,%d2
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF) | (1 << IFX_SCU_SEICON0_ENDINIT_OFF);
80003fee:	7b c0 ff 1f 	movh %d1,65532
80003ff2:	c2 21       	add %d1,2
80003ff4:	a6 21       	or %d1,%d2
    boolean                                     pmsInitDone    = TRUE;
80003ff6:	82 18       	mov %d8,1
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
80003ff8:	91 30 00 4f 	movh.a %a4,61443
80003ffc:	d9 44 00 06 	lea %a4,[%a4]24576 <f0036000 <_START2_end+0x4fd35dd4>>
    while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
80004000:	02 84       	mov %d4,%d8
                 * However, for this function, as this is used only with CPU0 startup no wait required
                 */
                (*((volatile uint32 *)regConfig->regAddr)) = regVal; /*Write to the physical register*/
            }

            PMS_EVRSDCTRL0.B.UP = 1;
80004002:	91 50 02 5f 	movh.a %a5,61477
80004006:	d9 55 08 48 	lea %a5,[%a5]-32504 <f0248108 <_START2_end+0x4ff47edc>>
            /*Now, wait for the UP bit at EVRSDCTRL0 is reset, which is to indicate the configurations are done*/
            do
            {
                if (--timeoutCount <= 0)
                {
                    pmsInitDone = FALSE;
8000400a:	82 09       	mov %d9,0
}


IFX_INLINE void IfxPmsEvr_wait(float32 waitInSec)
{
    uint32 stmCount      = (uint32)((float32)33000000UL * waitInSec);
8000400c:	7b c0 bf 64 	movh %d6,19452
80004010:	1b 06 52 6c 	addi %d6,%d6,-15072
    uint32 stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
80004014:	c5 f6 10 01 	lea %a6,f0001010 <_START2_end+0x4fd00de4>
             phaseConfig < &sequence->phaseConfig[sequence->numOfPhases];
80004018:	d9 2c 2c f0 	lea %a12,[%a2]1004 <800003ec <IfxPmsEvr_cfgSequenceDefault>>
8000401c:	1d 00 15 00 	j 80004046 <Ifx_Ssw_Pms_Init+0xa6>
    uint32 stmCount      = (uint32)((float32)33000000UL * waitInSec);
80004020:	19 32 08 00 	ld.w %d2,[%a3]8
80004024:	4b 26 41 20 	mul.f %d2,%d6,%d2
80004028:	4b 02 71 31 	ftouz %d3,%d2
    uint32 stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
8000402c:	54 65       	ld.w %d5,[%a6]

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
8000402e:	54 62       	ld.w %d2,[%a6]
80004030:	a2 52       	sub %d2,%d5
80004032:	3f 32 fe ff 	jlt.u %d2,%d3,8000402e <Ifx_Ssw_Pms_Init+0x8e>
             phaseConfig++)
80004036:	d9 33 0c 00 	lea %a3,[%a3]12
             phaseConfig < &sequence->phaseConfig[sequence->numOfPhases];
8000403a:	19 c2 04 00 	ld.w %d2,[%a12]4
8000403e:	42 72       	add %d2,%d7
80004040:	80 33       	mov.d %d3,%a3
80004042:	7f 23 3d 80 	jge.u %d3,%d2,800040bc <Ifx_Ssw_Pms_Init+0x11c>
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
80004046:	59 40 34 a0 	st.w [%a4]692 <f00302b4 <_START2_end+0x4fd30088>>,%d0
    while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
8000404a:	19 42 34 a0 	ld.w %d2,[%a4]692 <f00302b4 <_START2_end+0x4fd30088>>
8000404e:	37 02 e1 20 	extr.u %d2,%d2,1,1
80004052:	5f 42 fc 7f 	jeq %d2,%d4,8000404a <Ifx_Ssw_Pms_Init+0xaa>
            for (regConfig = &phaseConfig->regConfig[0];
80004056:	99 32 04 00 	ld.a %a2,[%a3]4
                 regConfig < &phaseConfig->regConfig[phaseConfig->numOfRegisters];
8000405a:	14 32       	ld.bu %d2,[%a3]
8000405c:	80 23       	mov.d %d3,%a2
8000405e:	13 c2 20 23 	madd %d2,%d3,%d2,12
80004062:	7f 23 16 80 	jge.u %d3,%d2,8000408e <Ifx_Ssw_Pms_Init+0xee>
                regVal  = (*((volatile uint32 *)regConfig->regAddr));
80004066:	d4 27       	ld.a %a7,[%a2]
80004068:	54 72       	ld.w %d2,[%a7]
                regVal &= ~regConfig->mask;
8000406a:	19 23 08 00 	ld.w %d3,[%a2]8
8000406e:	0f 32 e0 20 	andn %d2,%d2,%d3
                regVal |= regConfig->value;
80004072:	19 23 04 00 	ld.w %d3,[%a2]4
80004076:	a6 32       	or %d2,%d3
                (*((volatile uint32 *)regConfig->regAddr)) = regVal; /*Write to the physical register*/
80004078:	74 72       	st.w [%a7],%d2
                 regConfig++)
8000407a:	d9 22 0c 00 	lea %a2,[%a2]12
                 regConfig < &phaseConfig->regConfig[phaseConfig->numOfRegisters];
8000407e:	14 32       	ld.bu %d2,[%a3]
80004080:	19 33 04 00 	ld.w %d3,[%a3]4
80004084:	13 c2 20 23 	madd %d2,%d3,%d2,12
80004088:	80 23       	mov.d %d3,%a2
8000408a:	3f 23 ee ff 	jlt.u %d3,%d2,80004066 <Ifx_Ssw_Pms_Init+0xc6>
            PMS_EVRSDCTRL0.B.UP = 1;
8000408e:	54 52       	ld.w %d2,[%a5]
80004090:	b7 12 01 2f 	insert %d2,%d2,1,30,1
80004094:	74 52       	st.w [%a5],%d2
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF) | (1 << IFX_SCU_SEICON0_ENDINIT_OFF);
80004096:	59 41 34 a0 	st.w [%a4]692 <f00302b4 <_START2_end+0x4fd30088>>,%d1
    while (MODULE_SCU.SEICON0.B.ENDINIT == 0)
8000409a:	19 42 34 a0 	ld.w %d2,[%a4]692 <f00302b4 <_START2_end+0x4fd30088>>
8000409e:	6f 12 fe 7f 	jz.t %d2,1,8000409a <Ifx_Ssw_Pms_Init+0xfa>
800040a2:	3b f0 0f 20 	mov %d2,255
            } while (PMS_EVRSDCTRL0.B.UP == 1);
800040a6:	54 53       	ld.w %d3,[%a5]
800040a8:	37 03 61 3f 	extr.u %d3,%d3,30,1
800040ac:	5f 43 ba ff 	jne %d3,%d4,80004020 <Ifx_Ssw_Pms_Init+0x80>
                if (--timeoutCount <= 0)
800040b0:	c2 f2       	add %d2,-1
800040b2:	df 02 fa ff 	jne %d2,0,800040a6 <Ifx_Ssw_Pms_Init+0x106>
                    pmsInitDone = FALSE;
800040b6:	02 98       	mov %d8,%d9
800040b8:	1d ff b4 ff 	j 80004020 <Ifx_Ssw_Pms_Init+0x80>
    if (IfxPmsEvr_runInitSequence(&IfxPmsEvr_cfgSequenceDefault) == 0)
800040bc:	df 08 82 ff 	jne %d8,0,80003fc0 <Ifx_Ssw_Pms_Init+0x20>
    __asm__ volatile ("debug" : : : "memory");
800040c0:	00 a0       	debug 
}
800040c2:	1d ff 7f ff 	j 80003fc0 <Ifx_Ssw_Pms_Init+0x20>

800040c6 <Ifx_Ssw_Pms_InitCheck>:

#if (IFX_CFG_SSW_ENABLE_PMS_INIT_CHECK == 1U)
void Ifx_Ssw_Pms_InitCheck(void)
{
800040c6:	40 ae       	mov.aa %a14,%sp
    if (PMS_EVRSTAT.B.EVRC == 1U)
800040c8:	91 50 02 2f 	movh.a %a2,61477
800040cc:	d9 22 2c 08 	lea %a2,[%a2]-32724 <f024802c <_START2_end+0x4ff47e00>>
800040d0:	54 22       	ld.w %d2,[%a2]
800040d2:	6f 02 04 80 	jnz.t %d2,0,800040da <Ifx_Ssw_Pms_InitCheck+0x14>
800040d6:	dc 0b       	ji %a11
    {
        __debug();
        /* Application may have call to error handling here */
    }
    Ifx_Ssw_jumpBackToLink();
}
800040d8:	00 90       	ret 
        for (regCfgCount = 0; regCfgCount < checkConfig->numOfRegisters; regCfgCount++)
800040da:	91 00 00 28 	movh.a %a2,32768
800040de:	39 25 7c 30 	ld.bu %d5,[%a2]1276 <800004fc <IfxPmsEvr_checkRegCfgDefault>>
800040e2:	bf 15 1d 00 	jlt %d5,1,8000411c <Ifx_Ssw_Pms_InitCheck+0x56>
            const IfxPmsEvr_StepDownRegulatorRegConfig *regConfig = &checkConfig->regConfig[regCfgCount];
800040e6:	91 00 00 28 	movh.a %a2,32768
800040ea:	99 22 40 40 	ld.a %a2,[%a2]1280 <80000500 <IfxPmsEvr_checkRegCfgDefault+0x4>>
    boolean allRight = TRUE;
800040ee:	82 12       	mov %d2,1
        for (regCfgCount = 0; regCfgCount < checkConfig->numOfRegisters; regCfgCount++)
800040f0:	82 03       	mov %d3,0
            regVal  = (*((volatile uint32 *)regConfig->regAddr));
800040f2:	d4 23       	ld.a %a3,[%a2]
800040f4:	54 34       	ld.w %d4,[%a3]
            regVal &= regConfig->mask;
800040f6:	19 26 08 00 	ld.w %d6,[%a2]8
800040fa:	26 64       	and %d4,%d6
            if (regVal != regConfig->value)
800040fc:	19 26 04 00 	ld.w %d6,[%a2]4
                allRight = FALSE;
80004100:	0b 64 00 41 	eq %d4,%d4,%d6
80004104:	ab 02 80 24 	sel %d2,%d4,%d2,0
        for (regCfgCount = 0; regCfgCount < checkConfig->numOfRegisters; regCfgCount++)
80004108:	c2 13       	add %d3,1
8000410a:	d9 22 0c 00 	lea %a2,[%a2]12
8000410e:	5f 53 f2 ff 	jne %d3,%d5,800040f2 <Ifx_Ssw_Pms_InitCheck+0x2c>
        if (allRight == TRUE)
80004112:	df 12 05 00 	jeq %d2,1,8000411c <Ifx_Ssw_Pms_InitCheck+0x56>
    __asm__ volatile ("debug" : : : "memory");
80004116:	00 a0       	debug 
}
80004118:	1d ff df ff 	j 800040d6 <Ifx_Ssw_Pms_InitCheck+0x10>
            if (PMS_EVRSTAT.B.SDVOK != 1)
8000411c:	91 50 02 2f 	movh.a %a2,61477
80004120:	d9 22 2c 08 	lea %a2,[%a2]-32724 <f024802c <_START2_end+0x4ff47e00>>
80004124:	54 22       	ld.w %d2,[%a2]
80004126:	ef 52 d8 ff 	jnz.t %d2,21,800040d6 <Ifx_Ssw_Pms_InitCheck+0x10>
8000412a:	1d ff f6 ff 	j 80004116 <Ifx_Ssw_Pms_InitCheck+0x50>

8000412e <Ifx_Ssw_Pms_InitCheck_end>:
	...
