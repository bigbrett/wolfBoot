
test-app.elf:     file format elf32-tricore

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .CPU2.ustack  00000800  50014e00  50014e00  00000274  2**0
                  ALLOC
  1 .CPU2.istack  00000400  50015700  50015700  00000274  2**0
                  ALLOC
  2 .CPU2.csa     00002000  50015c00  50015c00  00000274  2**0
                  ALLOC
  3 .CPU1.ustack  00000800  60038e00  60038e00  00000274  2**0
                  ALLOC
  4 .CPU1.istack  00000400  60039700  60039700  00000274  2**0
                  ALLOC
  5 .CPU1.csa     00002000  60039c00  60039c00  00000274  2**0
                  ALLOC
  6 .CPU0.ustack  00000800  70038e00  70038e00  00000274  2**0
                  ALLOC
  7 .CPU0.istack  00000400  70039700  70039700  00000274  2**0
                  ALLOC
  8 .CPU0.csa     00002000  70039c00  70039c00  00000274  2**0
                  ALLOC
  9 .start_tc0    0000000c  a0300000  a0300000  00004e48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .traptab_tc0  00000100  80300100  80300100  00000280  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 11 .traptab_tc1  00000100  80300200  80300200  00000380  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 12 .traptab_tc2  00000100  80300300  80300300  00000480  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 13 .start_tc1    0000000c  a03f6400  a03f6400  00004e54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .start_tc2    0000000c  a03f6420  a03f6420  00004e60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .inttab_tc0_000 00000000  80300400  80300400  00004e6c  2**0
                  CONTENTS
 16 .inttab_tc0_001 00000000  80300420  80300420  00004e6c  2**0
                  CONTENTS
 17 .inttab_tc0_002 00000000  80300440  80300440  00004e6c  2**0
                  CONTENTS
 18 .inttab_tc0_003 00000000  80300460  80300460  00004e6c  2**0
                  CONTENTS
 19 .inttab_tc0_004 00000000  80300480  80300480  00004e6c  2**0
                  CONTENTS
 20 .inttab_tc0_005 00000000  803004a0  803004a0  00004e6c  2**0
                  CONTENTS
 21 .inttab_tc0_006 00000000  803004c0  803004c0  00004e6c  2**0
                  CONTENTS
 22 .inttab_tc0_007 00000000  803004e0  803004e0  00004e6c  2**0
                  CONTENTS
 23 .inttab_tc0_008 00000000  80300500  80300500  00004e6c  2**0
                  CONTENTS
 24 .inttab_tc0_009 00000000  80300520  80300520  00004e6c  2**0
                  CONTENTS
 25 .inttab_tc0_00A 00000000  80300540  80300540  00004e6c  2**0
                  CONTENTS
 26 .inttab_tc0_00B 00000000  80300560  80300560  00004e6c  2**0
                  CONTENTS
 27 .inttab_tc0_00C 00000000  80300580  80300580  00004e6c  2**0
                  CONTENTS
 28 .inttab_tc0_00D 00000000  803005a0  803005a0  00004e6c  2**0
                  CONTENTS
 29 .inttab_tc0_00E 00000000  803005c0  803005c0  00004e6c  2**0
                  CONTENTS
 30 .inttab_tc0_00F 00000000  803005e0  803005e0  00004e6c  2**0
                  CONTENTS
 31 .inttab_tc0_010 00000000  80300600  80300600  00004e6c  2**0
                  CONTENTS
 32 .inttab_tc0_011 00000000  80300620  80300620  00004e6c  2**0
                  CONTENTS
 33 .inttab_tc0_012 00000000  80300640  80300640  00004e6c  2**0
                  CONTENTS
 34 .inttab_tc0_013 00000000  80300660  80300660  00004e6c  2**0
                  CONTENTS
 35 .inttab_tc0_014 00000000  80300680  80300680  00004e6c  2**0
                  CONTENTS
 36 .inttab_tc0_015 00000000  803006a0  803006a0  00004e6c  2**0
                  CONTENTS
 37 .inttab_tc0_016 00000000  803006c0  803006c0  00004e6c  2**0
                  CONTENTS
 38 .inttab_tc0_017 00000000  803006e0  803006e0  00004e6c  2**0
                  CONTENTS
 39 .inttab_tc0_018 00000000  80300700  80300700  00004e6c  2**0
                  CONTENTS
 40 .inttab_tc0_019 00000000  80300720  80300720  00004e6c  2**0
                  CONTENTS
 41 .inttab_tc0_01A 00000000  80300740  80300740  00004e6c  2**0
                  CONTENTS
 42 .inttab_tc0_01B 00000000  80300760  80300760  00004e6c  2**0
                  CONTENTS
 43 .inttab_tc0_01C 00000000  80300780  80300780  00004e6c  2**0
                  CONTENTS
 44 .inttab_tc0_01D 00000000  803007a0  803007a0  00004e6c  2**0
                  CONTENTS
 45 .inttab_tc0_01E 00000000  803007c0  803007c0  00004e6c  2**0
                  CONTENTS
 46 .inttab_tc0_01F 00000000  803007e0  803007e0  00004e6c  2**0
                  CONTENTS
 47 .inttab_tc0_020 00000000  80300800  80300800  00004e6c  2**0
                  CONTENTS
 48 .inttab_tc0_021 00000000  80300820  80300820  00004e6c  2**0
                  CONTENTS
 49 .inttab_tc0_022 00000000  80300840  80300840  00004e6c  2**0
                  CONTENTS
 50 .inttab_tc0_023 00000000  80300860  80300860  00004e6c  2**0
                  CONTENTS
 51 .inttab_tc0_024 00000000  80300880  80300880  00004e6c  2**0
                  CONTENTS
 52 .inttab_tc0_025 00000000  803008a0  803008a0  00004e6c  2**0
                  CONTENTS
 53 .inttab_tc0_026 00000000  803008c0  803008c0  00004e6c  2**0
                  CONTENTS
 54 .inttab_tc0_027 00000000  803008e0  803008e0  00004e6c  2**0
                  CONTENTS
 55 .inttab_tc0_028 00000000  80300900  80300900  00004e6c  2**0
                  CONTENTS
 56 .inttab_tc0_029 00000000  80300920  80300920  00004e6c  2**0
                  CONTENTS
 57 .inttab_tc0_02A 00000000  80300940  80300940  00004e6c  2**0
                  CONTENTS
 58 .inttab_tc0_02B 00000000  80300960  80300960  00004e6c  2**0
                  CONTENTS
 59 .inttab_tc0_02C 00000000  80300980  80300980  00004e6c  2**0
                  CONTENTS
 60 .inttab_tc0_02D 00000000  803009a0  803009a0  00004e6c  2**0
                  CONTENTS
 61 .inttab_tc0_02E 00000000  803009c0  803009c0  00004e6c  2**0
                  CONTENTS
 62 .inttab_tc0_02F 00000000  803009e0  803009e0  00004e6c  2**0
                  CONTENTS
 63 .inttab_tc0_030 00000000  80300a00  80300a00  00004e6c  2**0
                  CONTENTS
 64 .inttab_tc0_031 00000000  80300a20  80300a20  00004e6c  2**0
                  CONTENTS
 65 .inttab_tc0_032 00000000  80300a40  80300a40  00004e6c  2**0
                  CONTENTS
 66 .inttab_tc0_033 00000000  80300a60  80300a60  00004e6c  2**0
                  CONTENTS
 67 .inttab_tc0_034 00000000  80300a80  80300a80  00004e6c  2**0
                  CONTENTS
 68 .inttab_tc0_035 00000000  80300aa0  80300aa0  00004e6c  2**0
                  CONTENTS
 69 .inttab_tc0_036 00000000  80300ac0  80300ac0  00004e6c  2**0
                  CONTENTS
 70 .inttab_tc0_037 00000000  80300ae0  80300ae0  00004e6c  2**0
                  CONTENTS
 71 .inttab_tc0_038 00000000  80300b00  80300b00  00004e6c  2**0
                  CONTENTS
 72 .inttab_tc0_039 00000000  80300b20  80300b20  00004e6c  2**0
                  CONTENTS
 73 .inttab_tc0_03A 00000000  80300b40  80300b40  00004e6c  2**0
                  CONTENTS
 74 .inttab_tc0_03B 00000000  80300b60  80300b60  00004e6c  2**0
                  CONTENTS
 75 .inttab_tc0_03C 00000000  80300b80  80300b80  00004e6c  2**0
                  CONTENTS
 76 .inttab_tc0_03D 00000000  80300ba0  80300ba0  00004e6c  2**0
                  CONTENTS
 77 .inttab_tc0_03E 00000000  80300bc0  80300bc0  00004e6c  2**0
                  CONTENTS
 78 .inttab_tc0_03F 00000000  80300be0  80300be0  00004e6c  2**0
                  CONTENTS
 79 .inttab_tc0_040 00000000  80300c00  80300c00  00004e6c  2**0
                  CONTENTS
 80 .inttab_tc0_041 00000000  80300c20  80300c20  00004e6c  2**0
                  CONTENTS
 81 .inttab_tc0_042 00000000  80300c40  80300c40  00004e6c  2**0
                  CONTENTS
 82 .inttab_tc0_043 00000000  80300c60  80300c60  00004e6c  2**0
                  CONTENTS
 83 .inttab_tc0_044 00000000  80300c80  80300c80  00004e6c  2**0
                  CONTENTS
 84 .inttab_tc0_045 00000000  80300ca0  80300ca0  00004e6c  2**0
                  CONTENTS
 85 .inttab_tc0_046 00000000  80300cc0  80300cc0  00004e6c  2**0
                  CONTENTS
 86 .inttab_tc0_047 00000000  80300ce0  80300ce0  00004e6c  2**0
                  CONTENTS
 87 .inttab_tc0_048 00000000  80300d00  80300d00  00004e6c  2**0
                  CONTENTS
 88 .inttab_tc0_049 00000000  80300d20  80300d20  00004e6c  2**0
                  CONTENTS
 89 .inttab_tc0_04A 00000000  80300d40  80300d40  00004e6c  2**0
                  CONTENTS
 90 .inttab_tc0_04B 00000000  80300d60  80300d60  00004e6c  2**0
                  CONTENTS
 91 .inttab_tc0_04C 00000000  80300d80  80300d80  00004e6c  2**0
                  CONTENTS
 92 .inttab_tc0_04D 00000000  80300da0  80300da0  00004e6c  2**0
                  CONTENTS
 93 .inttab_tc0_04E 00000000  80300dc0  80300dc0  00004e6c  2**0
                  CONTENTS
 94 .inttab_tc0_04F 00000000  80300de0  80300de0  00004e6c  2**0
                  CONTENTS
 95 .inttab_tc0_050 00000000  80300e00  80300e00  00004e6c  2**0
                  CONTENTS
 96 .inttab_tc0_051 00000000  80300e20  80300e20  00004e6c  2**0
                  CONTENTS
 97 .inttab_tc0_052 00000000  80300e40  80300e40  00004e6c  2**0
                  CONTENTS
 98 .inttab_tc0_053 00000000  80300e60  80300e60  00004e6c  2**0
                  CONTENTS
 99 .inttab_tc0_054 00000000  80300e80  80300e80  00004e6c  2**0
                  CONTENTS
100 .inttab_tc0_055 00000000  80300ea0  80300ea0  00004e6c  2**0
                  CONTENTS
101 .inttab_tc0_056 00000000  80300ec0  80300ec0  00004e6c  2**0
                  CONTENTS
102 .inttab_tc0_057 00000000  80300ee0  80300ee0  00004e6c  2**0
                  CONTENTS
103 .inttab_tc0_058 00000000  80300f00  80300f00  00004e6c  2**0
                  CONTENTS
104 .inttab_tc0_059 00000000  80300f20  80300f20  00004e6c  2**0
                  CONTENTS
105 .inttab_tc0_05A 00000000  80300f40  80300f40  00004e6c  2**0
                  CONTENTS
106 .inttab_tc0_05B 00000000  80300f60  80300f60  00004e6c  2**0
                  CONTENTS
107 .inttab_tc0_05C 00000000  80300f80  80300f80  00004e6c  2**0
                  CONTENTS
108 .inttab_tc0_05D 00000000  80300fa0  80300fa0  00004e6c  2**0
                  CONTENTS
109 .inttab_tc0_05E 00000000  80300fc0  80300fc0  00004e6c  2**0
                  CONTENTS
110 .inttab_tc0_05F 00000000  80300fe0  80300fe0  00004e6c  2**0
                  CONTENTS
111 .inttab_tc0_060 00000000  80301000  80301000  00004e6c  2**0
                  CONTENTS
112 .inttab_tc0_061 00000000  80301020  80301020  00004e6c  2**0
                  CONTENTS
113 .inttab_tc0_062 00000000  80301040  80301040  00004e6c  2**0
                  CONTENTS
114 .inttab_tc0_063 00000000  80301060  80301060  00004e6c  2**0
                  CONTENTS
115 .inttab_tc0_064 00000000  80301080  80301080  00004e6c  2**0
                  CONTENTS
116 .inttab_tc0_065 00000000  803010a0  803010a0  00004e6c  2**0
                  CONTENTS
117 .inttab_tc0_066 00000000  803010c0  803010c0  00004e6c  2**0
                  CONTENTS
118 .inttab_tc0_067 00000000  803010e0  803010e0  00004e6c  2**0
                  CONTENTS
119 .inttab_tc0_068 00000000  80301100  80301100  00004e6c  2**0
                  CONTENTS
120 .inttab_tc0_069 00000000  80301120  80301120  00004e6c  2**0
                  CONTENTS
121 .inttab_tc0_06A 00000000  80301140  80301140  00004e6c  2**0
                  CONTENTS
122 .inttab_tc0_06B 00000000  80301160  80301160  00004e6c  2**0
                  CONTENTS
123 .inttab_tc0_06C 00000000  80301180  80301180  00004e6c  2**0
                  CONTENTS
124 .inttab_tc0_06D 00000000  803011a0  803011a0  00004e6c  2**0
                  CONTENTS
125 .inttab_tc0_06E 00000000  803011c0  803011c0  00004e6c  2**0
                  CONTENTS
126 .inttab_tc0_06F 00000000  803011e0  803011e0  00004e6c  2**0
                  CONTENTS
127 .inttab_tc0_070 00000000  80301200  80301200  00004e6c  2**0
                  CONTENTS
128 .inttab_tc0_071 00000000  80301220  80301220  00004e6c  2**0
                  CONTENTS
129 .inttab_tc0_072 00000000  80301240  80301240  00004e6c  2**0
                  CONTENTS
130 .inttab_tc0_073 00000000  80301260  80301260  00004e6c  2**0
                  CONTENTS
131 .inttab_tc0_074 00000000  80301280  80301280  00004e6c  2**0
                  CONTENTS
132 .inttab_tc0_075 00000000  803012a0  803012a0  00004e6c  2**0
                  CONTENTS
133 .inttab_tc0_076 00000000  803012c0  803012c0  00004e6c  2**0
                  CONTENTS
134 .inttab_tc0_077 00000000  803012e0  803012e0  00004e6c  2**0
                  CONTENTS
135 .inttab_tc0_078 00000000  80301300  80301300  00004e6c  2**0
                  CONTENTS
136 .inttab_tc0_079 00000000  80301320  80301320  00004e6c  2**0
                  CONTENTS
137 .inttab_tc0_07A 00000000  80301340  80301340  00004e6c  2**0
                  CONTENTS
138 .inttab_tc0_07B 00000000  80301360  80301360  00004e6c  2**0
                  CONTENTS
139 .inttab_tc0_07C 00000000  80301380  80301380  00004e6c  2**0
                  CONTENTS
140 .inttab_tc0_07D 00000000  803013a0  803013a0  00004e6c  2**0
                  CONTENTS
141 .inttab_tc0_07E 00000000  803013c0  803013c0  00004e6c  2**0
                  CONTENTS
142 .inttab_tc0_07F 00000000  803013e0  803013e0  00004e6c  2**0
                  CONTENTS
143 .inttab_tc0_080 00000000  80301400  80301400  00004e6c  2**0
                  CONTENTS
144 .inttab_tc0_081 00000000  80301420  80301420  00004e6c  2**0
                  CONTENTS
145 .inttab_tc0_082 00000000  80301440  80301440  00004e6c  2**0
                  CONTENTS
146 .inttab_tc0_083 00000000  80301460  80301460  00004e6c  2**0
                  CONTENTS
147 .inttab_tc0_084 00000000  80301480  80301480  00004e6c  2**0
                  CONTENTS
148 .inttab_tc0_085 00000000  803014a0  803014a0  00004e6c  2**0
                  CONTENTS
149 .inttab_tc0_086 00000000  803014c0  803014c0  00004e6c  2**0
                  CONTENTS
150 .inttab_tc0_087 00000000  803014e0  803014e0  00004e6c  2**0
                  CONTENTS
151 .inttab_tc0_088 00000000  80301500  80301500  00004e6c  2**0
                  CONTENTS
152 .inttab_tc0_089 00000000  80301520  80301520  00004e6c  2**0
                  CONTENTS
153 .inttab_tc0_08A 00000000  80301540  80301540  00004e6c  2**0
                  CONTENTS
154 .inttab_tc0_08B 00000000  80301560  80301560  00004e6c  2**0
                  CONTENTS
155 .inttab_tc0_08C 00000000  80301580  80301580  00004e6c  2**0
                  CONTENTS
156 .inttab_tc0_08D 00000000  803015a0  803015a0  00004e6c  2**0
                  CONTENTS
157 .inttab_tc0_08E 00000000  803015c0  803015c0  00004e6c  2**0
                  CONTENTS
158 .inttab_tc0_08F 00000000  803015e0  803015e0  00004e6c  2**0
                  CONTENTS
159 .inttab_tc0_090 00000000  80301600  80301600  00004e6c  2**0
                  CONTENTS
160 .inttab_tc0_091 00000000  80301620  80301620  00004e6c  2**0
                  CONTENTS
161 .inttab_tc0_092 00000000  80301640  80301640  00004e6c  2**0
                  CONTENTS
162 .inttab_tc0_093 00000000  80301660  80301660  00004e6c  2**0
                  CONTENTS
163 .inttab_tc0_094 00000000  80301680  80301680  00004e6c  2**0
                  CONTENTS
164 .inttab_tc0_095 00000000  803016a0  803016a0  00004e6c  2**0
                  CONTENTS
165 .inttab_tc0_096 00000000  803016c0  803016c0  00004e6c  2**0
                  CONTENTS
166 .inttab_tc0_097 00000000  803016e0  803016e0  00004e6c  2**0
                  CONTENTS
167 .inttab_tc0_098 00000000  80301700  80301700  00004e6c  2**0
                  CONTENTS
168 .inttab_tc0_099 00000000  80301720  80301720  00004e6c  2**0
                  CONTENTS
169 .inttab_tc0_09A 00000000  80301740  80301740  00004e6c  2**0
                  CONTENTS
170 .inttab_tc0_09B 00000000  80301760  80301760  00004e6c  2**0
                  CONTENTS
171 .inttab_tc0_09C 00000000  80301780  80301780  00004e6c  2**0
                  CONTENTS
172 .inttab_tc0_09D 00000000  803017a0  803017a0  00004e6c  2**0
                  CONTENTS
173 .inttab_tc0_09E 00000000  803017c0  803017c0  00004e6c  2**0
                  CONTENTS
174 .inttab_tc0_09F 00000000  803017e0  803017e0  00004e6c  2**0
                  CONTENTS
175 .inttab_tc0_0A0 00000000  80301800  80301800  00004e6c  2**0
                  CONTENTS
176 .inttab_tc0_0A1 00000000  80301820  80301820  00004e6c  2**0
                  CONTENTS
177 .inttab_tc0_0A2 00000000  80301840  80301840  00004e6c  2**0
                  CONTENTS
178 .inttab_tc0_0A3 00000000  80301860  80301860  00004e6c  2**0
                  CONTENTS
179 .inttab_tc0_0A4 00000000  80301880  80301880  00004e6c  2**0
                  CONTENTS
180 .inttab_tc0_0A5 00000000  803018a0  803018a0  00004e6c  2**0
                  CONTENTS
181 .inttab_tc0_0A6 00000000  803018c0  803018c0  00004e6c  2**0
                  CONTENTS
182 .inttab_tc0_0A7 00000000  803018e0  803018e0  00004e6c  2**0
                  CONTENTS
183 .inttab_tc0_0A8 00000000  80301900  80301900  00004e6c  2**0
                  CONTENTS
184 .inttab_tc0_0A9 00000000  80301920  80301920  00004e6c  2**0
                  CONTENTS
185 .inttab_tc0_0AA 00000000  80301940  80301940  00004e6c  2**0
                  CONTENTS
186 .inttab_tc0_0AB 00000000  80301960  80301960  00004e6c  2**0
                  CONTENTS
187 .inttab_tc0_0AC 00000000  80301980  80301980  00004e6c  2**0
                  CONTENTS
188 .inttab_tc0_0AD 00000000  803019a0  803019a0  00004e6c  2**0
                  CONTENTS
189 .inttab_tc0_0AE 00000000  803019c0  803019c0  00004e6c  2**0
                  CONTENTS
190 .inttab_tc0_0AF 00000000  803019e0  803019e0  00004e6c  2**0
                  CONTENTS
191 .inttab_tc0_0B0 00000000  80301a00  80301a00  00004e6c  2**0
                  CONTENTS
192 .inttab_tc0_0B1 00000000  80301a20  80301a20  00004e6c  2**0
                  CONTENTS
193 .inttab_tc0_0B2 00000000  80301a40  80301a40  00004e6c  2**0
                  CONTENTS
194 .inttab_tc0_0B3 00000000  80301a60  80301a60  00004e6c  2**0
                  CONTENTS
195 .inttab_tc0_0B4 00000000  80301a80  80301a80  00004e6c  2**0
                  CONTENTS
196 .inttab_tc0_0B5 00000000  80301aa0  80301aa0  00004e6c  2**0
                  CONTENTS
197 .inttab_tc0_0B6 00000000  80301ac0  80301ac0  00004e6c  2**0
                  CONTENTS
198 .inttab_tc0_0B7 00000000  80301ae0  80301ae0  00004e6c  2**0
                  CONTENTS
199 .inttab_tc0_0B8 00000000  80301b00  80301b00  00004e6c  2**0
                  CONTENTS
200 .inttab_tc0_0B9 00000000  80301b20  80301b20  00004e6c  2**0
                  CONTENTS
201 .inttab_tc0_0BA 00000000  80301b40  80301b40  00004e6c  2**0
                  CONTENTS
202 .inttab_tc0_0BB 00000000  80301b60  80301b60  00004e6c  2**0
                  CONTENTS
203 .inttab_tc0_0BC 00000000  80301b80  80301b80  00004e6c  2**0
                  CONTENTS
204 .inttab_tc0_0BD 00000000  80301ba0  80301ba0  00004e6c  2**0
                  CONTENTS
205 .inttab_tc0_0BE 00000000  80301bc0  80301bc0  00004e6c  2**0
                  CONTENTS
206 .inttab_tc0_0BF 00000000  80301be0  80301be0  00004e6c  2**0
                  CONTENTS
207 .inttab_tc0_0C0 00000000  80301c00  80301c00  00004e6c  2**0
                  CONTENTS
208 .inttab_tc0_0C1 00000000  80301c20  80301c20  00004e6c  2**0
                  CONTENTS
209 .inttab_tc0_0C2 00000000  80301c40  80301c40  00004e6c  2**0
                  CONTENTS
210 .inttab_tc0_0C3 00000000  80301c60  80301c60  00004e6c  2**0
                  CONTENTS
211 .inttab_tc0_0C4 00000000  80301c80  80301c80  00004e6c  2**0
                  CONTENTS
212 .inttab_tc0_0C5 00000000  80301ca0  80301ca0  00004e6c  2**0
                  CONTENTS
213 .inttab_tc0_0C6 00000000  80301cc0  80301cc0  00004e6c  2**0
                  CONTENTS
214 .inttab_tc0_0C7 00000000  80301ce0  80301ce0  00004e6c  2**0
                  CONTENTS
215 .inttab_tc0_0C8 00000000  80301d00  80301d00  00004e6c  2**0
                  CONTENTS
216 .inttab_tc0_0C9 00000000  80301d20  80301d20  00004e6c  2**0
                  CONTENTS
217 .inttab_tc0_0CA 00000000  80301d40  80301d40  00004e6c  2**0
                  CONTENTS
218 .inttab_tc0_0CB 00000000  80301d60  80301d60  00004e6c  2**0
                  CONTENTS
219 .inttab_tc0_0CC 00000000  80301d80  80301d80  00004e6c  2**0
                  CONTENTS
220 .inttab_tc0_0CD 00000000  80301da0  80301da0  00004e6c  2**0
                  CONTENTS
221 .inttab_tc0_0CE 00000000  80301dc0  80301dc0  00004e6c  2**0
                  CONTENTS
222 .inttab_tc0_0CF 00000000  80301de0  80301de0  00004e6c  2**0
                  CONTENTS
223 .inttab_tc0_0D0 00000000  80301e00  80301e00  00004e6c  2**0
                  CONTENTS
224 .inttab_tc0_0D1 00000000  80301e20  80301e20  00004e6c  2**0
                  CONTENTS
225 .inttab_tc0_0D2 00000000  80301e40  80301e40  00004e6c  2**0
                  CONTENTS
226 .inttab_tc0_0D3 00000000  80301e60  80301e60  00004e6c  2**0
                  CONTENTS
227 .inttab_tc0_0D4 00000000  80301e80  80301e80  00004e6c  2**0
                  CONTENTS
228 .inttab_tc0_0D5 00000000  80301ea0  80301ea0  00004e6c  2**0
                  CONTENTS
229 .inttab_tc0_0D6 00000000  80301ec0  80301ec0  00004e6c  2**0
                  CONTENTS
230 .inttab_tc0_0D7 00000000  80301ee0  80301ee0  00004e6c  2**0
                  CONTENTS
231 .inttab_tc0_0D8 00000000  80301f00  80301f00  00004e6c  2**0
                  CONTENTS
232 .inttab_tc0_0D9 00000000  80301f20  80301f20  00004e6c  2**0
                  CONTENTS
233 .inttab_tc0_0DA 00000000  80301f40  80301f40  00004e6c  2**0
                  CONTENTS
234 .inttab_tc0_0DB 00000000  80301f60  80301f60  00004e6c  2**0
                  CONTENTS
235 .inttab_tc0_0DC 00000000  80301f80  80301f80  00004e6c  2**0
                  CONTENTS
236 .inttab_tc0_0DD 00000000  80301fa0  80301fa0  00004e6c  2**0
                  CONTENTS
237 .inttab_tc0_0DE 00000000  80301fc0  80301fc0  00004e6c  2**0
                  CONTENTS
238 .inttab_tc0_0DF 00000000  80301fe0  80301fe0  00004e6c  2**0
                  CONTENTS
239 .inttab_tc0_0E0 00000000  80302000  80302000  00004e6c  2**0
                  CONTENTS
240 .inttab_tc0_0E1 00000000  80302020  80302020  00004e6c  2**0
                  CONTENTS
241 .inttab_tc0_0E2 00000000  80302040  80302040  00004e6c  2**0
                  CONTENTS
242 .inttab_tc0_0E3 00000000  80302060  80302060  00004e6c  2**0
                  CONTENTS
243 .inttab_tc0_0E4 00000000  80302080  80302080  00004e6c  2**0
                  CONTENTS
244 .inttab_tc0_0E5 00000000  803020a0  803020a0  00004e6c  2**0
                  CONTENTS
245 .inttab_tc0_0E6 00000000  803020c0  803020c0  00004e6c  2**0
                  CONTENTS
246 .inttab_tc0_0E7 00000000  803020e0  803020e0  00004e6c  2**0
                  CONTENTS
247 .inttab_tc0_0E8 00000000  80302100  80302100  00004e6c  2**0
                  CONTENTS
248 .inttab_tc0_0E9 00000000  80302120  80302120  00004e6c  2**0
                  CONTENTS
249 .inttab_tc0_0EA 00000000  80302140  80302140  00004e6c  2**0
                  CONTENTS
250 .inttab_tc0_0EB 00000000  80302160  80302160  00004e6c  2**0
                  CONTENTS
251 .inttab_tc0_0EC 00000000  80302180  80302180  00004e6c  2**0
                  CONTENTS
252 .inttab_tc0_0ED 00000000  803021a0  803021a0  00004e6c  2**0
                  CONTENTS
253 .inttab_tc0_0EE 00000000  803021c0  803021c0  00004e6c  2**0
                  CONTENTS
254 .inttab_tc0_0EF 00000000  803021e0  803021e0  00004e6c  2**0
                  CONTENTS
255 .inttab_tc0_0F0 00000000  80302200  80302200  00004e6c  2**0
                  CONTENTS
256 .inttab_tc0_0F1 00000000  80302220  80302220  00004e6c  2**0
                  CONTENTS
257 .inttab_tc0_0F2 00000000  80302240  80302240  00004e6c  2**0
                  CONTENTS
258 .inttab_tc0_0F3 00000000  80302260  80302260  00004e6c  2**0
                  CONTENTS
259 .inttab_tc0_0F4 00000000  80302280  80302280  00004e6c  2**0
                  CONTENTS
260 .inttab_tc0_0F5 00000000  803022a0  803022a0  00004e6c  2**0
                  CONTENTS
261 .inttab_tc0_0F6 00000000  803022c0  803022c0  00004e6c  2**0
                  CONTENTS
262 .inttab_tc0_0F7 00000000  803022e0  803022e0  00004e6c  2**0
                  CONTENTS
263 .inttab_tc0_0F8 00000000  80302300  80302300  00004e6c  2**0
                  CONTENTS
264 .inttab_tc0_0F9 00000000  80302320  80302320  00004e6c  2**0
                  CONTENTS
265 .inttab_tc0_0FA 00000000  80302340  80302340  00004e6c  2**0
                  CONTENTS
266 .inttab_tc0_0FB 00000000  80302360  80302360  00004e6c  2**0
                  CONTENTS
267 .inttab_tc0_0FC 00000000  80302380  80302380  00004e6c  2**0
                  CONTENTS
268 .inttab_tc0_0FD 00000000  803023a0  803023a0  00004e6c  2**0
                  CONTENTS
269 .inttab_tc0_0FE 00000000  803023c0  803023c0  00004e6c  2**0
                  CONTENTS
270 .inttab_tc0_0FF 00000000  803023e0  803023e0  00004e6c  2**0
                  CONTENTS
271 .inttab_tc1_000 00000000  80302400  80302400  00004e6c  2**0
                  CONTENTS
272 .inttab_tc1_001 00000000  80302420  80302420  00004e6c  2**0
                  CONTENTS
273 .inttab_tc1_002 00000000  80302440  80302440  00004e6c  2**0
                  CONTENTS
274 .inttab_tc1_003 00000000  80302460  80302460  00004e6c  2**0
                  CONTENTS
275 .inttab_tc1_004 00000000  80302480  80302480  00004e6c  2**0
                  CONTENTS
276 .inttab_tc1_005 00000000  803024a0  803024a0  00004e6c  2**0
                  CONTENTS
277 .inttab_tc1_006 00000000  803024c0  803024c0  00004e6c  2**0
                  CONTENTS
278 .inttab_tc1_007 00000000  803024e0  803024e0  00004e6c  2**0
                  CONTENTS
279 .inttab_tc1_008 00000000  80302500  80302500  00004e6c  2**0
                  CONTENTS
280 .inttab_tc1_009 00000000  80302520  80302520  00004e6c  2**0
                  CONTENTS
281 .inttab_tc1_00A 00000000  80302540  80302540  00004e6c  2**0
                  CONTENTS
282 .inttab_tc1_00B 00000000  80302560  80302560  00004e6c  2**0
                  CONTENTS
283 .inttab_tc1_00C 00000000  80302580  80302580  00004e6c  2**0
                  CONTENTS
284 .inttab_tc1_00D 00000000  803025a0  803025a0  00004e6c  2**0
                  CONTENTS
285 .inttab_tc1_00E 00000000  803025c0  803025c0  00004e6c  2**0
                  CONTENTS
286 .inttab_tc1_00F 00000000  803025e0  803025e0  00004e6c  2**0
                  CONTENTS
287 .inttab_tc1_010 00000000  80302600  80302600  00004e6c  2**0
                  CONTENTS
288 .inttab_tc1_011 00000000  80302620  80302620  00004e6c  2**0
                  CONTENTS
289 .inttab_tc1_012 00000000  80302640  80302640  00004e6c  2**0
                  CONTENTS
290 .inttab_tc1_013 00000000  80302660  80302660  00004e6c  2**0
                  CONTENTS
291 .inttab_tc1_014 00000000  80302680  80302680  00004e6c  2**0
                  CONTENTS
292 .inttab_tc1_015 00000000  803026a0  803026a0  00004e6c  2**0
                  CONTENTS
293 .inttab_tc1_016 00000000  803026c0  803026c0  00004e6c  2**0
                  CONTENTS
294 .inttab_tc1_017 00000000  803026e0  803026e0  00004e6c  2**0
                  CONTENTS
295 .inttab_tc1_018 00000000  80302700  80302700  00004e6c  2**0
                  CONTENTS
296 .inttab_tc1_019 00000000  80302720  80302720  00004e6c  2**0
                  CONTENTS
297 .inttab_tc1_01A 00000000  80302740  80302740  00004e6c  2**0
                  CONTENTS
298 .inttab_tc1_01B 00000000  80302760  80302760  00004e6c  2**0
                  CONTENTS
299 .inttab_tc1_01C 00000000  80302780  80302780  00004e6c  2**0
                  CONTENTS
300 .inttab_tc1_01D 00000000  803027a0  803027a0  00004e6c  2**0
                  CONTENTS
301 .inttab_tc1_01E 00000000  803027c0  803027c0  00004e6c  2**0
                  CONTENTS
302 .inttab_tc1_01F 00000000  803027e0  803027e0  00004e6c  2**0
                  CONTENTS
303 .inttab_tc1_020 00000000  80302800  80302800  00004e6c  2**0
                  CONTENTS
304 .inttab_tc1_021 00000000  80302820  80302820  00004e6c  2**0
                  CONTENTS
305 .inttab_tc1_022 00000000  80302840  80302840  00004e6c  2**0
                  CONTENTS
306 .inttab_tc1_023 00000000  80302860  80302860  00004e6c  2**0
                  CONTENTS
307 .inttab_tc1_024 00000000  80302880  80302880  00004e6c  2**0
                  CONTENTS
308 .inttab_tc1_025 00000000  803028a0  803028a0  00004e6c  2**0
                  CONTENTS
309 .inttab_tc1_026 00000000  803028c0  803028c0  00004e6c  2**0
                  CONTENTS
310 .inttab_tc1_027 00000000  803028e0  803028e0  00004e6c  2**0
                  CONTENTS
311 .inttab_tc1_028 00000000  80302900  80302900  00004e6c  2**0
                  CONTENTS
312 .inttab_tc1_029 00000000  80302920  80302920  00004e6c  2**0
                  CONTENTS
313 .inttab_tc1_02A 00000000  80302940  80302940  00004e6c  2**0
                  CONTENTS
314 .inttab_tc1_02B 00000000  80302960  80302960  00004e6c  2**0
                  CONTENTS
315 .inttab_tc1_02C 00000000  80302980  80302980  00004e6c  2**0
                  CONTENTS
316 .inttab_tc1_02D 00000000  803029a0  803029a0  00004e6c  2**0
                  CONTENTS
317 .inttab_tc1_02E 00000000  803029c0  803029c0  00004e6c  2**0
                  CONTENTS
318 .inttab_tc1_02F 00000000  803029e0  803029e0  00004e6c  2**0
                  CONTENTS
319 .inttab_tc1_030 00000000  80302a00  80302a00  00004e6c  2**0
                  CONTENTS
320 .inttab_tc1_031 00000000  80302a20  80302a20  00004e6c  2**0
                  CONTENTS
321 .inttab_tc1_032 00000000  80302a40  80302a40  00004e6c  2**0
                  CONTENTS
322 .inttab_tc1_033 00000000  80302a60  80302a60  00004e6c  2**0
                  CONTENTS
323 .inttab_tc1_034 00000000  80302a80  80302a80  00004e6c  2**0
                  CONTENTS
324 .inttab_tc1_035 00000000  80302aa0  80302aa0  00004e6c  2**0
                  CONTENTS
325 .inttab_tc1_036 00000000  80302ac0  80302ac0  00004e6c  2**0
                  CONTENTS
326 .inttab_tc1_037 00000000  80302ae0  80302ae0  00004e6c  2**0
                  CONTENTS
327 .inttab_tc1_038 00000000  80302b00  80302b00  00004e6c  2**0
                  CONTENTS
328 .inttab_tc1_039 00000000  80302b20  80302b20  00004e6c  2**0
                  CONTENTS
329 .inttab_tc1_03A 00000000  80302b40  80302b40  00004e6c  2**0
                  CONTENTS
330 .inttab_tc1_03B 00000000  80302b60  80302b60  00004e6c  2**0
                  CONTENTS
331 .inttab_tc1_03C 00000000  80302b80  80302b80  00004e6c  2**0
                  CONTENTS
332 .inttab_tc1_03D 00000000  80302ba0  80302ba0  00004e6c  2**0
                  CONTENTS
333 .inttab_tc1_03E 00000000  80302bc0  80302bc0  00004e6c  2**0
                  CONTENTS
334 .inttab_tc1_03F 00000000  80302be0  80302be0  00004e6c  2**0
                  CONTENTS
335 .inttab_tc1_040 00000000  80302c00  80302c00  00004e6c  2**0
                  CONTENTS
336 .inttab_tc1_041 00000000  80302c20  80302c20  00004e6c  2**0
                  CONTENTS
337 .inttab_tc1_042 00000000  80302c40  80302c40  00004e6c  2**0
                  CONTENTS
338 .inttab_tc1_043 00000000  80302c60  80302c60  00004e6c  2**0
                  CONTENTS
339 .inttab_tc1_044 00000000  80302c80  80302c80  00004e6c  2**0
                  CONTENTS
340 .inttab_tc1_045 00000000  80302ca0  80302ca0  00004e6c  2**0
                  CONTENTS
341 .inttab_tc1_046 00000000  80302cc0  80302cc0  00004e6c  2**0
                  CONTENTS
342 .inttab_tc1_047 00000000  80302ce0  80302ce0  00004e6c  2**0
                  CONTENTS
343 .inttab_tc1_048 00000000  80302d00  80302d00  00004e6c  2**0
                  CONTENTS
344 .inttab_tc1_049 00000000  80302d20  80302d20  00004e6c  2**0
                  CONTENTS
345 .inttab_tc1_04A 00000000  80302d40  80302d40  00004e6c  2**0
                  CONTENTS
346 .inttab_tc1_04B 00000000  80302d60  80302d60  00004e6c  2**0
                  CONTENTS
347 .inttab_tc1_04C 00000000  80302d80  80302d80  00004e6c  2**0
                  CONTENTS
348 .inttab_tc1_04D 00000000  80302da0  80302da0  00004e6c  2**0
                  CONTENTS
349 .inttab_tc1_04E 00000000  80302dc0  80302dc0  00004e6c  2**0
                  CONTENTS
350 .inttab_tc1_04F 00000000  80302de0  80302de0  00004e6c  2**0
                  CONTENTS
351 .inttab_tc1_050 00000000  80302e00  80302e00  00004e6c  2**0
                  CONTENTS
352 .inttab_tc1_051 00000000  80302e20  80302e20  00004e6c  2**0
                  CONTENTS
353 .inttab_tc1_052 00000000  80302e40  80302e40  00004e6c  2**0
                  CONTENTS
354 .inttab_tc1_053 00000000  80302e60  80302e60  00004e6c  2**0
                  CONTENTS
355 .inttab_tc1_054 00000000  80302e80  80302e80  00004e6c  2**0
                  CONTENTS
356 .inttab_tc1_055 00000000  80302ea0  80302ea0  00004e6c  2**0
                  CONTENTS
357 .inttab_tc1_056 00000000  80302ec0  80302ec0  00004e6c  2**0
                  CONTENTS
358 .inttab_tc1_057 00000000  80302ee0  80302ee0  00004e6c  2**0
                  CONTENTS
359 .inttab_tc1_058 00000000  80302f00  80302f00  00004e6c  2**0
                  CONTENTS
360 .inttab_tc1_059 00000000  80302f20  80302f20  00004e6c  2**0
                  CONTENTS
361 .inttab_tc1_05A 00000000  80302f40  80302f40  00004e6c  2**0
                  CONTENTS
362 .inttab_tc1_05B 00000000  80302f60  80302f60  00004e6c  2**0
                  CONTENTS
363 .inttab_tc1_05C 00000000  80302f80  80302f80  00004e6c  2**0
                  CONTENTS
364 .inttab_tc1_05D 00000000  80302fa0  80302fa0  00004e6c  2**0
                  CONTENTS
365 .inttab_tc1_05E 00000000  80302fc0  80302fc0  00004e6c  2**0
                  CONTENTS
366 .inttab_tc1_05F 00000000  80302fe0  80302fe0  00004e6c  2**0
                  CONTENTS
367 .inttab_tc1_060 00000000  80303000  80303000  00004e6c  2**0
                  CONTENTS
368 .inttab_tc1_061 00000000  80303020  80303020  00004e6c  2**0
                  CONTENTS
369 .inttab_tc1_062 00000000  80303040  80303040  00004e6c  2**0
                  CONTENTS
370 .inttab_tc1_063 00000000  80303060  80303060  00004e6c  2**0
                  CONTENTS
371 .inttab_tc1_064 00000000  80303080  80303080  00004e6c  2**0
                  CONTENTS
372 .inttab_tc1_065 00000000  803030a0  803030a0  00004e6c  2**0
                  CONTENTS
373 .inttab_tc1_066 00000000  803030c0  803030c0  00004e6c  2**0
                  CONTENTS
374 .inttab_tc1_067 00000000  803030e0  803030e0  00004e6c  2**0
                  CONTENTS
375 .inttab_tc1_068 00000000  80303100  80303100  00004e6c  2**0
                  CONTENTS
376 .inttab_tc1_069 00000000  80303120  80303120  00004e6c  2**0
                  CONTENTS
377 .inttab_tc1_06A 00000000  80303140  80303140  00004e6c  2**0
                  CONTENTS
378 .inttab_tc1_06B 00000000  80303160  80303160  00004e6c  2**0
                  CONTENTS
379 .inttab_tc1_06C 00000000  80303180  80303180  00004e6c  2**0
                  CONTENTS
380 .inttab_tc1_06D 00000000  803031a0  803031a0  00004e6c  2**0
                  CONTENTS
381 .inttab_tc1_06E 00000000  803031c0  803031c0  00004e6c  2**0
                  CONTENTS
382 .inttab_tc1_06F 00000000  803031e0  803031e0  00004e6c  2**0
                  CONTENTS
383 .inttab_tc1_070 00000000  80303200  80303200  00004e6c  2**0
                  CONTENTS
384 .inttab_tc1_071 00000000  80303220  80303220  00004e6c  2**0
                  CONTENTS
385 .inttab_tc1_072 00000000  80303240  80303240  00004e6c  2**0
                  CONTENTS
386 .inttab_tc1_073 00000000  80303260  80303260  00004e6c  2**0
                  CONTENTS
387 .inttab_tc1_074 00000000  80303280  80303280  00004e6c  2**0
                  CONTENTS
388 .inttab_tc1_075 00000000  803032a0  803032a0  00004e6c  2**0
                  CONTENTS
389 .inttab_tc1_076 00000000  803032c0  803032c0  00004e6c  2**0
                  CONTENTS
390 .inttab_tc1_077 00000000  803032e0  803032e0  00004e6c  2**0
                  CONTENTS
391 .inttab_tc1_078 00000000  80303300  80303300  00004e6c  2**0
                  CONTENTS
392 .inttab_tc1_079 00000000  80303320  80303320  00004e6c  2**0
                  CONTENTS
393 .inttab_tc1_07A 00000000  80303340  80303340  00004e6c  2**0
                  CONTENTS
394 .inttab_tc1_07B 00000000  80303360  80303360  00004e6c  2**0
                  CONTENTS
395 .inttab_tc1_07C 00000000  80303380  80303380  00004e6c  2**0
                  CONTENTS
396 .inttab_tc1_07D 00000000  803033a0  803033a0  00004e6c  2**0
                  CONTENTS
397 .inttab_tc1_07E 00000000  803033c0  803033c0  00004e6c  2**0
                  CONTENTS
398 .inttab_tc1_07F 00000000  803033e0  803033e0  00004e6c  2**0
                  CONTENTS
399 .inttab_tc1_080 00000000  80303400  80303400  00004e6c  2**0
                  CONTENTS
400 .inttab_tc1_081 00000000  80303420  80303420  00004e6c  2**0
                  CONTENTS
401 .inttab_tc1_082 00000000  80303440  80303440  00004e6c  2**0
                  CONTENTS
402 .inttab_tc1_083 00000000  80303460  80303460  00004e6c  2**0
                  CONTENTS
403 .inttab_tc1_084 00000000  80303480  80303480  00004e6c  2**0
                  CONTENTS
404 .inttab_tc1_085 00000000  803034a0  803034a0  00004e6c  2**0
                  CONTENTS
405 .inttab_tc1_086 00000000  803034c0  803034c0  00004e6c  2**0
                  CONTENTS
406 .inttab_tc1_087 00000000  803034e0  803034e0  00004e6c  2**0
                  CONTENTS
407 .inttab_tc1_088 00000000  80303500  80303500  00004e6c  2**0
                  CONTENTS
408 .inttab_tc1_089 00000000  80303520  80303520  00004e6c  2**0
                  CONTENTS
409 .inttab_tc1_08A 00000000  80303540  80303540  00004e6c  2**0
                  CONTENTS
410 .inttab_tc1_08B 00000000  80303560  80303560  00004e6c  2**0
                  CONTENTS
411 .inttab_tc1_08C 00000000  80303580  80303580  00004e6c  2**0
                  CONTENTS
412 .inttab_tc1_08D 00000000  803035a0  803035a0  00004e6c  2**0
                  CONTENTS
413 .inttab_tc1_08E 00000000  803035c0  803035c0  00004e6c  2**0
                  CONTENTS
414 .inttab_tc1_08F 00000000  803035e0  803035e0  00004e6c  2**0
                  CONTENTS
415 .inttab_tc1_090 00000000  80303600  80303600  00004e6c  2**0
                  CONTENTS
416 .inttab_tc1_091 00000000  80303620  80303620  00004e6c  2**0
                  CONTENTS
417 .inttab_tc1_092 00000000  80303640  80303640  00004e6c  2**0
                  CONTENTS
418 .inttab_tc1_093 00000000  80303660  80303660  00004e6c  2**0
                  CONTENTS
419 .inttab_tc1_094 00000000  80303680  80303680  00004e6c  2**0
                  CONTENTS
420 .inttab_tc1_095 00000000  803036a0  803036a0  00004e6c  2**0
                  CONTENTS
421 .inttab_tc1_096 00000000  803036c0  803036c0  00004e6c  2**0
                  CONTENTS
422 .inttab_tc1_097 00000000  803036e0  803036e0  00004e6c  2**0
                  CONTENTS
423 .inttab_tc1_098 00000000  80303700  80303700  00004e6c  2**0
                  CONTENTS
424 .inttab_tc1_099 00000000  80303720  80303720  00004e6c  2**0
                  CONTENTS
425 .inttab_tc1_09A 00000000  80303740  80303740  00004e6c  2**0
                  CONTENTS
426 .inttab_tc1_09B 00000000  80303760  80303760  00004e6c  2**0
                  CONTENTS
427 .inttab_tc1_09C 00000000  80303780  80303780  00004e6c  2**0
                  CONTENTS
428 .inttab_tc1_09D 00000000  803037a0  803037a0  00004e6c  2**0
                  CONTENTS
429 .inttab_tc1_09E 00000000  803037c0  803037c0  00004e6c  2**0
                  CONTENTS
430 .inttab_tc1_09F 00000000  803037e0  803037e0  00004e6c  2**0
                  CONTENTS
431 .inttab_tc1_0A0 00000000  80303800  80303800  00004e6c  2**0
                  CONTENTS
432 .inttab_tc1_0A1 00000000  80303820  80303820  00004e6c  2**0
                  CONTENTS
433 .inttab_tc1_0A2 00000000  80303840  80303840  00004e6c  2**0
                  CONTENTS
434 .inttab_tc1_0A3 00000000  80303860  80303860  00004e6c  2**0
                  CONTENTS
435 .inttab_tc1_0A4 00000000  80303880  80303880  00004e6c  2**0
                  CONTENTS
436 .inttab_tc1_0A5 00000000  803038a0  803038a0  00004e6c  2**0
                  CONTENTS
437 .inttab_tc1_0A6 00000000  803038c0  803038c0  00004e6c  2**0
                  CONTENTS
438 .inttab_tc1_0A7 00000000  803038e0  803038e0  00004e6c  2**0
                  CONTENTS
439 .inttab_tc1_0A8 00000000  80303900  80303900  00004e6c  2**0
                  CONTENTS
440 .inttab_tc1_0A9 00000000  80303920  80303920  00004e6c  2**0
                  CONTENTS
441 .inttab_tc1_0AA 00000000  80303940  80303940  00004e6c  2**0
                  CONTENTS
442 .inttab_tc1_0AB 00000000  80303960  80303960  00004e6c  2**0
                  CONTENTS
443 .inttab_tc1_0AC 00000000  80303980  80303980  00004e6c  2**0
                  CONTENTS
444 .inttab_tc1_0AD 00000000  803039a0  803039a0  00004e6c  2**0
                  CONTENTS
445 .inttab_tc1_0AE 00000000  803039c0  803039c0  00004e6c  2**0
                  CONTENTS
446 .inttab_tc1_0AF 00000000  803039e0  803039e0  00004e6c  2**0
                  CONTENTS
447 .inttab_tc1_0B0 00000000  80303a00  80303a00  00004e6c  2**0
                  CONTENTS
448 .inttab_tc1_0B1 00000000  80303a20  80303a20  00004e6c  2**0
                  CONTENTS
449 .inttab_tc1_0B2 00000000  80303a40  80303a40  00004e6c  2**0
                  CONTENTS
450 .inttab_tc1_0B3 00000000  80303a60  80303a60  00004e6c  2**0
                  CONTENTS
451 .inttab_tc1_0B4 00000000  80303a80  80303a80  00004e6c  2**0
                  CONTENTS
452 .inttab_tc1_0B5 00000000  80303aa0  80303aa0  00004e6c  2**0
                  CONTENTS
453 .inttab_tc1_0B6 00000000  80303ac0  80303ac0  00004e6c  2**0
                  CONTENTS
454 .inttab_tc1_0B7 00000000  80303ae0  80303ae0  00004e6c  2**0
                  CONTENTS
455 .inttab_tc1_0B8 00000000  80303b00  80303b00  00004e6c  2**0
                  CONTENTS
456 .inttab_tc1_0B9 00000000  80303b20  80303b20  00004e6c  2**0
                  CONTENTS
457 .inttab_tc1_0BA 00000000  80303b40  80303b40  00004e6c  2**0
                  CONTENTS
458 .inttab_tc1_0BB 00000000  80303b60  80303b60  00004e6c  2**0
                  CONTENTS
459 .inttab_tc1_0BC 00000000  80303b80  80303b80  00004e6c  2**0
                  CONTENTS
460 .inttab_tc1_0BD 00000000  80303ba0  80303ba0  00004e6c  2**0
                  CONTENTS
461 .inttab_tc1_0BE 00000000  80303bc0  80303bc0  00004e6c  2**0
                  CONTENTS
462 .inttab_tc1_0BF 00000000  80303be0  80303be0  00004e6c  2**0
                  CONTENTS
463 .inttab_tc1_0C0 00000000  80303c00  80303c00  00004e6c  2**0
                  CONTENTS
464 .inttab_tc1_0C1 00000000  80303c20  80303c20  00004e6c  2**0
                  CONTENTS
465 .inttab_tc1_0C2 00000000  80303c40  80303c40  00004e6c  2**0
                  CONTENTS
466 .inttab_tc1_0C3 00000000  80303c60  80303c60  00004e6c  2**0
                  CONTENTS
467 .inttab_tc1_0C4 00000000  80303c80  80303c80  00004e6c  2**0
                  CONTENTS
468 .inttab_tc1_0C5 00000000  80303ca0  80303ca0  00004e6c  2**0
                  CONTENTS
469 .inttab_tc1_0C6 00000000  80303cc0  80303cc0  00004e6c  2**0
                  CONTENTS
470 .inttab_tc1_0C7 00000000  80303ce0  80303ce0  00004e6c  2**0
                  CONTENTS
471 .inttab_tc1_0C8 00000000  80303d00  80303d00  00004e6c  2**0
                  CONTENTS
472 .inttab_tc1_0C9 00000000  80303d20  80303d20  00004e6c  2**0
                  CONTENTS
473 .inttab_tc1_0CA 00000000  80303d40  80303d40  00004e6c  2**0
                  CONTENTS
474 .inttab_tc1_0CB 00000000  80303d60  80303d60  00004e6c  2**0
                  CONTENTS
475 .inttab_tc1_0CC 00000000  80303d80  80303d80  00004e6c  2**0
                  CONTENTS
476 .inttab_tc1_0CD 00000000  80303da0  80303da0  00004e6c  2**0
                  CONTENTS
477 .inttab_tc1_0CE 00000000  80303dc0  80303dc0  00004e6c  2**0
                  CONTENTS
478 .inttab_tc1_0CF 00000000  80303de0  80303de0  00004e6c  2**0
                  CONTENTS
479 .inttab_tc1_0D0 00000000  80303e00  80303e00  00004e6c  2**0
                  CONTENTS
480 .inttab_tc1_0D1 00000000  80303e20  80303e20  00004e6c  2**0
                  CONTENTS
481 .inttab_tc1_0D2 00000000  80303e40  80303e40  00004e6c  2**0
                  CONTENTS
482 .inttab_tc1_0D3 00000000  80303e60  80303e60  00004e6c  2**0
                  CONTENTS
483 .inttab_tc1_0D4 00000000  80303e80  80303e80  00004e6c  2**0
                  CONTENTS
484 .inttab_tc1_0D5 00000000  80303ea0  80303ea0  00004e6c  2**0
                  CONTENTS
485 .inttab_tc1_0D6 00000000  80303ec0  80303ec0  00004e6c  2**0
                  CONTENTS
486 .inttab_tc1_0D7 00000000  80303ee0  80303ee0  00004e6c  2**0
                  CONTENTS
487 .inttab_tc1_0D8 00000000  80303f00  80303f00  00004e6c  2**0
                  CONTENTS
488 .inttab_tc1_0D9 00000000  80303f20  80303f20  00004e6c  2**0
                  CONTENTS
489 .inttab_tc1_0DA 00000000  80303f40  80303f40  00004e6c  2**0
                  CONTENTS
490 .inttab_tc1_0DB 00000000  80303f60  80303f60  00004e6c  2**0
                  CONTENTS
491 .inttab_tc1_0DC 00000000  80303f80  80303f80  00004e6c  2**0
                  CONTENTS
492 .inttab_tc1_0DD 00000000  80303fa0  80303fa0  00004e6c  2**0
                  CONTENTS
493 .inttab_tc1_0DE 00000000  80303fc0  80303fc0  00004e6c  2**0
                  CONTENTS
494 .inttab_tc1_0DF 00000000  80303fe0  80303fe0  00004e6c  2**0
                  CONTENTS
495 .inttab_tc1_0E0 00000000  80304000  80304000  00004e6c  2**0
                  CONTENTS
496 .inttab_tc1_0E1 00000000  80304020  80304020  00004e6c  2**0
                  CONTENTS
497 .inttab_tc1_0E2 00000000  80304040  80304040  00004e6c  2**0
                  CONTENTS
498 .inttab_tc1_0E3 00000000  80304060  80304060  00004e6c  2**0
                  CONTENTS
499 .inttab_tc1_0E4 00000000  80304080  80304080  00004e6c  2**0
                  CONTENTS
500 .inttab_tc1_0E5 00000000  803040a0  803040a0  00004e6c  2**0
                  CONTENTS
501 .inttab_tc1_0E6 00000000  803040c0  803040c0  00004e6c  2**0
                  CONTENTS
502 .inttab_tc1_0E7 00000000  803040e0  803040e0  00004e6c  2**0
                  CONTENTS
503 .inttab_tc1_0E8 00000000  80304100  80304100  00004e6c  2**0
                  CONTENTS
504 .inttab_tc1_0E9 00000000  80304120  80304120  00004e6c  2**0
                  CONTENTS
505 .inttab_tc1_0EA 00000000  80304140  80304140  00004e6c  2**0
                  CONTENTS
506 .inttab_tc1_0EB 00000000  80304160  80304160  00004e6c  2**0
                  CONTENTS
507 .inttab_tc1_0EC 00000000  80304180  80304180  00004e6c  2**0
                  CONTENTS
508 .inttab_tc1_0ED 00000000  803041a0  803041a0  00004e6c  2**0
                  CONTENTS
509 .inttab_tc1_0EE 00000000  803041c0  803041c0  00004e6c  2**0
                  CONTENTS
510 .inttab_tc1_0EF 00000000  803041e0  803041e0  00004e6c  2**0
                  CONTENTS
511 .inttab_tc1_0F0 00000000  80304200  80304200  00004e6c  2**0
                  CONTENTS
512 .inttab_tc1_0F1 00000000  80304220  80304220  00004e6c  2**0
                  CONTENTS
513 .inttab_tc1_0F2 00000000  80304240  80304240  00004e6c  2**0
                  CONTENTS
514 .inttab_tc1_0F3 00000000  80304260  80304260  00004e6c  2**0
                  CONTENTS
515 .inttab_tc1_0F4 00000000  80304280  80304280  00004e6c  2**0
                  CONTENTS
516 .inttab_tc1_0F5 00000000  803042a0  803042a0  00004e6c  2**0
                  CONTENTS
517 .inttab_tc1_0F6 00000000  803042c0  803042c0  00004e6c  2**0
                  CONTENTS
518 .inttab_tc1_0F7 00000000  803042e0  803042e0  00004e6c  2**0
                  CONTENTS
519 .inttab_tc1_0F8 00000000  80304300  80304300  00004e6c  2**0
                  CONTENTS
520 .inttab_tc1_0F9 00000000  80304320  80304320  00004e6c  2**0
                  CONTENTS
521 .inttab_tc1_0FA 00000000  80304340  80304340  00004e6c  2**0
                  CONTENTS
522 .inttab_tc1_0FB 00000000  80304360  80304360  00004e6c  2**0
                  CONTENTS
523 .inttab_tc1_0FC 00000000  80304380  80304380  00004e6c  2**0
                  CONTENTS
524 .inttab_tc1_0FD 00000000  803043a0  803043a0  00004e6c  2**0
                  CONTENTS
525 .inttab_tc1_0FE 00000000  803043c0  803043c0  00004e6c  2**0
                  CONTENTS
526 .inttab_tc1_0FF 00000000  803043e0  803043e0  00004e6c  2**0
                  CONTENTS
527 .inttab_tc2_000 00000000  803f4400  803f4400  00004e6c  2**0
                  CONTENTS
528 .inttab_tc2_001 00000000  803f4420  803f4420  00004e6c  2**0
                  CONTENTS
529 .inttab_tc2_002 00000000  803f4440  803f4440  00004e6c  2**0
                  CONTENTS
530 .inttab_tc2_003 00000000  803f4460  803f4460  00004e6c  2**0
                  CONTENTS
531 .inttab_tc2_004 00000000  803f4480  803f4480  00004e6c  2**0
                  CONTENTS
532 .inttab_tc2_005 00000000  803f44a0  803f44a0  00004e6c  2**0
                  CONTENTS
533 .inttab_tc2_006 00000000  803f44c0  803f44c0  00004e6c  2**0
                  CONTENTS
534 .inttab_tc2_007 00000000  803f44e0  803f44e0  00004e6c  2**0
                  CONTENTS
535 .inttab_tc2_008 00000000  803f4500  803f4500  00004e6c  2**0
                  CONTENTS
536 .inttab_tc2_009 00000000  803f4520  803f4520  00004e6c  2**0
                  CONTENTS
537 .inttab_tc2_00A 00000000  803f4540  803f4540  00004e6c  2**0
                  CONTENTS
538 .inttab_tc2_00B 00000000  803f4560  803f4560  00004e6c  2**0
                  CONTENTS
539 .inttab_tc2_00C 00000000  803f4580  803f4580  00004e6c  2**0
                  CONTENTS
540 .inttab_tc2_00D 00000000  803f45a0  803f45a0  00004e6c  2**0
                  CONTENTS
541 .inttab_tc2_00E 00000000  803f45c0  803f45c0  00004e6c  2**0
                  CONTENTS
542 .inttab_tc2_00F 00000000  803f45e0  803f45e0  00004e6c  2**0
                  CONTENTS
543 .inttab_tc2_010 00000000  803f4600  803f4600  00004e6c  2**0
                  CONTENTS
544 .inttab_tc2_011 00000000  803f4620  803f4620  00004e6c  2**0
                  CONTENTS
545 .inttab_tc2_012 00000000  803f4640  803f4640  00004e6c  2**0
                  CONTENTS
546 .inttab_tc2_013 00000000  803f4660  803f4660  00004e6c  2**0
                  CONTENTS
547 .inttab_tc2_014 00000000  803f4680  803f4680  00004e6c  2**0
                  CONTENTS
548 .inttab_tc2_015 00000000  803f46a0  803f46a0  00004e6c  2**0
                  CONTENTS
549 .inttab_tc2_016 00000000  803f46c0  803f46c0  00004e6c  2**0
                  CONTENTS
550 .inttab_tc2_017 00000000  803f46e0  803f46e0  00004e6c  2**0
                  CONTENTS
551 .inttab_tc2_018 00000000  803f4700  803f4700  00004e6c  2**0
                  CONTENTS
552 .inttab_tc2_019 00000000  803f4720  803f4720  00004e6c  2**0
                  CONTENTS
553 .inttab_tc2_01A 00000000  803f4740  803f4740  00004e6c  2**0
                  CONTENTS
554 .inttab_tc2_01B 00000000  803f4760  803f4760  00004e6c  2**0
                  CONTENTS
555 .inttab_tc2_01C 00000000  803f4780  803f4780  00004e6c  2**0
                  CONTENTS
556 .inttab_tc2_01D 00000000  803f47a0  803f47a0  00004e6c  2**0
                  CONTENTS
557 .inttab_tc2_01E 00000000  803f47c0  803f47c0  00004e6c  2**0
                  CONTENTS
558 .inttab_tc2_01F 00000000  803f47e0  803f47e0  00004e6c  2**0
                  CONTENTS
559 .inttab_tc2_020 00000000  803f4800  803f4800  00004e6c  2**0
                  CONTENTS
560 .inttab_tc2_021 00000000  803f4820  803f4820  00004e6c  2**0
                  CONTENTS
561 .inttab_tc2_022 00000000  803f4840  803f4840  00004e6c  2**0
                  CONTENTS
562 .inttab_tc2_023 00000000  803f4860  803f4860  00004e6c  2**0
                  CONTENTS
563 .inttab_tc2_024 00000000  803f4880  803f4880  00004e6c  2**0
                  CONTENTS
564 .inttab_tc2_025 00000000  803f48a0  803f48a0  00004e6c  2**0
                  CONTENTS
565 .inttab_tc2_026 00000000  803f48c0  803f48c0  00004e6c  2**0
                  CONTENTS
566 .inttab_tc2_027 00000000  803f48e0  803f48e0  00004e6c  2**0
                  CONTENTS
567 .inttab_tc2_028 00000000  803f4900  803f4900  00004e6c  2**0
                  CONTENTS
568 .inttab_tc2_029 00000000  803f4920  803f4920  00004e6c  2**0
                  CONTENTS
569 .inttab_tc2_02A 00000000  803f4940  803f4940  00004e6c  2**0
                  CONTENTS
570 .inttab_tc2_02B 00000000  803f4960  803f4960  00004e6c  2**0
                  CONTENTS
571 .inttab_tc2_02C 00000000  803f4980  803f4980  00004e6c  2**0
                  CONTENTS
572 .inttab_tc2_02D 00000000  803f49a0  803f49a0  00004e6c  2**0
                  CONTENTS
573 .inttab_tc2_02E 00000000  803f49c0  803f49c0  00004e6c  2**0
                  CONTENTS
574 .inttab_tc2_02F 00000000  803f49e0  803f49e0  00004e6c  2**0
                  CONTENTS
575 .inttab_tc2_030 00000000  803f4a00  803f4a00  00004e6c  2**0
                  CONTENTS
576 .inttab_tc2_031 00000000  803f4a20  803f4a20  00004e6c  2**0
                  CONTENTS
577 .inttab_tc2_032 00000000  803f4a40  803f4a40  00004e6c  2**0
                  CONTENTS
578 .inttab_tc2_033 00000000  803f4a60  803f4a60  00004e6c  2**0
                  CONTENTS
579 .inttab_tc2_034 00000000  803f4a80  803f4a80  00004e6c  2**0
                  CONTENTS
580 .inttab_tc2_035 00000000  803f4aa0  803f4aa0  00004e6c  2**0
                  CONTENTS
581 .inttab_tc2_036 00000000  803f4ac0  803f4ac0  00004e6c  2**0
                  CONTENTS
582 .inttab_tc2_037 00000000  803f4ae0  803f4ae0  00004e6c  2**0
                  CONTENTS
583 .inttab_tc2_038 00000000  803f4b00  803f4b00  00004e6c  2**0
                  CONTENTS
584 .inttab_tc2_039 00000000  803f4b20  803f4b20  00004e6c  2**0
                  CONTENTS
585 .inttab_tc2_03A 00000000  803f4b40  803f4b40  00004e6c  2**0
                  CONTENTS
586 .inttab_tc2_03B 00000000  803f4b60  803f4b60  00004e6c  2**0
                  CONTENTS
587 .inttab_tc2_03C 00000000  803f4b80  803f4b80  00004e6c  2**0
                  CONTENTS
588 .inttab_tc2_03D 00000000  803f4ba0  803f4ba0  00004e6c  2**0
                  CONTENTS
589 .inttab_tc2_03E 00000000  803f4bc0  803f4bc0  00004e6c  2**0
                  CONTENTS
590 .inttab_tc2_03F 00000000  803f4be0  803f4be0  00004e6c  2**0
                  CONTENTS
591 .inttab_tc2_040 00000000  803f4c00  803f4c00  00004e6c  2**0
                  CONTENTS
592 .inttab_tc2_041 00000000  803f4c20  803f4c20  00004e6c  2**0
                  CONTENTS
593 .inttab_tc2_042 00000000  803f4c40  803f4c40  00004e6c  2**0
                  CONTENTS
594 .inttab_tc2_043 00000000  803f4c60  803f4c60  00004e6c  2**0
                  CONTENTS
595 .inttab_tc2_044 00000000  803f4c80  803f4c80  00004e6c  2**0
                  CONTENTS
596 .inttab_tc2_045 00000000  803f4ca0  803f4ca0  00004e6c  2**0
                  CONTENTS
597 .inttab_tc2_046 00000000  803f4cc0  803f4cc0  00004e6c  2**0
                  CONTENTS
598 .inttab_tc2_047 00000000  803f4ce0  803f4ce0  00004e6c  2**0
                  CONTENTS
599 .inttab_tc2_048 00000000  803f4d00  803f4d00  00004e6c  2**0
                  CONTENTS
600 .inttab_tc2_049 00000000  803f4d20  803f4d20  00004e6c  2**0
                  CONTENTS
601 .inttab_tc2_04A 00000000  803f4d40  803f4d40  00004e6c  2**0
                  CONTENTS
602 .inttab_tc2_04B 00000000  803f4d60  803f4d60  00004e6c  2**0
                  CONTENTS
603 .inttab_tc2_04C 00000000  803f4d80  803f4d80  00004e6c  2**0
                  CONTENTS
604 .inttab_tc2_04D 00000000  803f4da0  803f4da0  00004e6c  2**0
                  CONTENTS
605 .inttab_tc2_04E 00000000  803f4dc0  803f4dc0  00004e6c  2**0
                  CONTENTS
606 .inttab_tc2_04F 00000000  803f4de0  803f4de0  00004e6c  2**0
                  CONTENTS
607 .inttab_tc2_050 00000000  803f4e00  803f4e00  00004e6c  2**0
                  CONTENTS
608 .inttab_tc2_051 00000000  803f4e20  803f4e20  00004e6c  2**0
                  CONTENTS
609 .inttab_tc2_052 00000000  803f4e40  803f4e40  00004e6c  2**0
                  CONTENTS
610 .inttab_tc2_053 00000000  803f4e60  803f4e60  00004e6c  2**0
                  CONTENTS
611 .inttab_tc2_054 00000000  803f4e80  803f4e80  00004e6c  2**0
                  CONTENTS
612 .inttab_tc2_055 00000000  803f4ea0  803f4ea0  00004e6c  2**0
                  CONTENTS
613 .inttab_tc2_056 00000000  803f4ec0  803f4ec0  00004e6c  2**0
                  CONTENTS
614 .inttab_tc2_057 00000000  803f4ee0  803f4ee0  00004e6c  2**0
                  CONTENTS
615 .inttab_tc2_058 00000000  803f4f00  803f4f00  00004e6c  2**0
                  CONTENTS
616 .inttab_tc2_059 00000000  803f4f20  803f4f20  00004e6c  2**0
                  CONTENTS
617 .inttab_tc2_05A 00000000  803f4f40  803f4f40  00004e6c  2**0
                  CONTENTS
618 .inttab_tc2_05B 00000000  803f4f60  803f4f60  00004e6c  2**0
                  CONTENTS
619 .inttab_tc2_05C 00000000  803f4f80  803f4f80  00004e6c  2**0
                  CONTENTS
620 .inttab_tc2_05D 00000000  803f4fa0  803f4fa0  00004e6c  2**0
                  CONTENTS
621 .inttab_tc2_05E 00000000  803f4fc0  803f4fc0  00004e6c  2**0
                  CONTENTS
622 .inttab_tc2_05F 00000000  803f4fe0  803f4fe0  00004e6c  2**0
                  CONTENTS
623 .inttab_tc2_060 00000000  803f5000  803f5000  00004e6c  2**0
                  CONTENTS
624 .inttab_tc2_061 00000000  803f5020  803f5020  00004e6c  2**0
                  CONTENTS
625 .inttab_tc2_062 00000000  803f5040  803f5040  00004e6c  2**0
                  CONTENTS
626 .inttab_tc2_063 00000000  803f5060  803f5060  00004e6c  2**0
                  CONTENTS
627 .inttab_tc2_064 00000000  803f5080  803f5080  00004e6c  2**0
                  CONTENTS
628 .inttab_tc2_065 00000000  803f50a0  803f50a0  00004e6c  2**0
                  CONTENTS
629 .inttab_tc2_066 00000000  803f50c0  803f50c0  00004e6c  2**0
                  CONTENTS
630 .inttab_tc2_067 00000000  803f50e0  803f50e0  00004e6c  2**0
                  CONTENTS
631 .inttab_tc2_068 00000000  803f5100  803f5100  00004e6c  2**0
                  CONTENTS
632 .inttab_tc2_069 00000000  803f5120  803f5120  00004e6c  2**0
                  CONTENTS
633 .inttab_tc2_06A 00000000  803f5140  803f5140  00004e6c  2**0
                  CONTENTS
634 .inttab_tc2_06B 00000000  803f5160  803f5160  00004e6c  2**0
                  CONTENTS
635 .inttab_tc2_06C 00000000  803f5180  803f5180  00004e6c  2**0
                  CONTENTS
636 .inttab_tc2_06D 00000000  803f51a0  803f51a0  00004e6c  2**0
                  CONTENTS
637 .inttab_tc2_06E 00000000  803f51c0  803f51c0  00004e6c  2**0
                  CONTENTS
638 .inttab_tc2_06F 00000000  803f51e0  803f51e0  00004e6c  2**0
                  CONTENTS
639 .inttab_tc2_070 00000000  803f5200  803f5200  00004e6c  2**0
                  CONTENTS
640 .inttab_tc2_071 00000000  803f5220  803f5220  00004e6c  2**0
                  CONTENTS
641 .inttab_tc2_072 00000000  803f5240  803f5240  00004e6c  2**0
                  CONTENTS
642 .inttab_tc2_073 00000000  803f5260  803f5260  00004e6c  2**0
                  CONTENTS
643 .inttab_tc2_074 00000000  803f5280  803f5280  00004e6c  2**0
                  CONTENTS
644 .inttab_tc2_075 00000000  803f52a0  803f52a0  00004e6c  2**0
                  CONTENTS
645 .inttab_tc2_076 00000000  803f52c0  803f52c0  00004e6c  2**0
                  CONTENTS
646 .inttab_tc2_077 00000000  803f52e0  803f52e0  00004e6c  2**0
                  CONTENTS
647 .inttab_tc2_078 00000000  803f5300  803f5300  00004e6c  2**0
                  CONTENTS
648 .inttab_tc2_079 00000000  803f5320  803f5320  00004e6c  2**0
                  CONTENTS
649 .inttab_tc2_07A 00000000  803f5340  803f5340  00004e6c  2**0
                  CONTENTS
650 .inttab_tc2_07B 00000000  803f5360  803f5360  00004e6c  2**0
                  CONTENTS
651 .inttab_tc2_07C 00000000  803f5380  803f5380  00004e6c  2**0
                  CONTENTS
652 .inttab_tc2_07D 00000000  803f53a0  803f53a0  00004e6c  2**0
                  CONTENTS
653 .inttab_tc2_07E 00000000  803f53c0  803f53c0  00004e6c  2**0
                  CONTENTS
654 .inttab_tc2_07F 00000000  803f53e0  803f53e0  00004e6c  2**0
                  CONTENTS
655 .inttab_tc2_080 00000000  803f5400  803f5400  00004e6c  2**0
                  CONTENTS
656 .inttab_tc2_081 00000000  803f5420  803f5420  00004e6c  2**0
                  CONTENTS
657 .inttab_tc2_082 00000000  803f5440  803f5440  00004e6c  2**0
                  CONTENTS
658 .inttab_tc2_083 00000000  803f5460  803f5460  00004e6c  2**0
                  CONTENTS
659 .inttab_tc2_084 00000000  803f5480  803f5480  00004e6c  2**0
                  CONTENTS
660 .inttab_tc2_085 00000000  803f54a0  803f54a0  00004e6c  2**0
                  CONTENTS
661 .inttab_tc2_086 00000000  803f54c0  803f54c0  00004e6c  2**0
                  CONTENTS
662 .inttab_tc2_087 00000000  803f54e0  803f54e0  00004e6c  2**0
                  CONTENTS
663 .inttab_tc2_088 00000000  803f5500  803f5500  00004e6c  2**0
                  CONTENTS
664 .inttab_tc2_089 00000000  803f5520  803f5520  00004e6c  2**0
                  CONTENTS
665 .inttab_tc2_08A 00000000  803f5540  803f5540  00004e6c  2**0
                  CONTENTS
666 .inttab_tc2_08B 00000000  803f5560  803f5560  00004e6c  2**0
                  CONTENTS
667 .inttab_tc2_08C 00000000  803f5580  803f5580  00004e6c  2**0
                  CONTENTS
668 .inttab_tc2_08D 00000000  803f55a0  803f55a0  00004e6c  2**0
                  CONTENTS
669 .inttab_tc2_08E 00000000  803f55c0  803f55c0  00004e6c  2**0
                  CONTENTS
670 .inttab_tc2_08F 00000000  803f55e0  803f55e0  00004e6c  2**0
                  CONTENTS
671 .inttab_tc2_090 00000000  803f5600  803f5600  00004e6c  2**0
                  CONTENTS
672 .inttab_tc2_091 00000000  803f5620  803f5620  00004e6c  2**0
                  CONTENTS
673 .inttab_tc2_092 00000000  803f5640  803f5640  00004e6c  2**0
                  CONTENTS
674 .inttab_tc2_093 00000000  803f5660  803f5660  00004e6c  2**0
                  CONTENTS
675 .inttab_tc2_094 00000000  803f5680  803f5680  00004e6c  2**0
                  CONTENTS
676 .inttab_tc2_095 00000000  803f56a0  803f56a0  00004e6c  2**0
                  CONTENTS
677 .inttab_tc2_096 00000000  803f56c0  803f56c0  00004e6c  2**0
                  CONTENTS
678 .inttab_tc2_097 00000000  803f56e0  803f56e0  00004e6c  2**0
                  CONTENTS
679 .inttab_tc2_098 00000000  803f5700  803f5700  00004e6c  2**0
                  CONTENTS
680 .inttab_tc2_099 00000000  803f5720  803f5720  00004e6c  2**0
                  CONTENTS
681 .inttab_tc2_09A 00000000  803f5740  803f5740  00004e6c  2**0
                  CONTENTS
682 .inttab_tc2_09B 00000000  803f5760  803f5760  00004e6c  2**0
                  CONTENTS
683 .inttab_tc2_09C 00000000  803f5780  803f5780  00004e6c  2**0
                  CONTENTS
684 .inttab_tc2_09D 00000000  803f57a0  803f57a0  00004e6c  2**0
                  CONTENTS
685 .inttab_tc2_09E 00000000  803f57c0  803f57c0  00004e6c  2**0
                  CONTENTS
686 .inttab_tc2_09F 00000000  803f57e0  803f57e0  00004e6c  2**0
                  CONTENTS
687 .inttab_tc2_0A0 00000000  803f5800  803f5800  00004e6c  2**0
                  CONTENTS
688 .inttab_tc2_0A1 00000000  803f5820  803f5820  00004e6c  2**0
                  CONTENTS
689 .inttab_tc2_0A2 00000000  803f5840  803f5840  00004e6c  2**0
                  CONTENTS
690 .inttab_tc2_0A3 00000000  803f5860  803f5860  00004e6c  2**0
                  CONTENTS
691 .inttab_tc2_0A4 00000000  803f5880  803f5880  00004e6c  2**0
                  CONTENTS
692 .inttab_tc2_0A5 00000000  803f58a0  803f58a0  00004e6c  2**0
                  CONTENTS
693 .inttab_tc2_0A6 00000000  803f58c0  803f58c0  00004e6c  2**0
                  CONTENTS
694 .inttab_tc2_0A7 00000000  803f58e0  803f58e0  00004e6c  2**0
                  CONTENTS
695 .inttab_tc2_0A8 00000000  803f5900  803f5900  00004e6c  2**0
                  CONTENTS
696 .inttab_tc2_0A9 00000000  803f5920  803f5920  00004e6c  2**0
                  CONTENTS
697 .inttab_tc2_0AA 00000000  803f5940  803f5940  00004e6c  2**0
                  CONTENTS
698 .inttab_tc2_0AB 00000000  803f5960  803f5960  00004e6c  2**0
                  CONTENTS
699 .inttab_tc2_0AC 00000000  803f5980  803f5980  00004e6c  2**0
                  CONTENTS
700 .inttab_tc2_0AD 00000000  803f59a0  803f59a0  00004e6c  2**0
                  CONTENTS
701 .inttab_tc2_0AE 00000000  803f59c0  803f59c0  00004e6c  2**0
                  CONTENTS
702 .inttab_tc2_0AF 00000000  803f59e0  803f59e0  00004e6c  2**0
                  CONTENTS
703 .inttab_tc2_0B0 00000000  803f5a00  803f5a00  00004e6c  2**0
                  CONTENTS
704 .inttab_tc2_0B1 00000000  803f5a20  803f5a20  00004e6c  2**0
                  CONTENTS
705 .inttab_tc2_0B2 00000000  803f5a40  803f5a40  00004e6c  2**0
                  CONTENTS
706 .inttab_tc2_0B3 00000000  803f5a60  803f5a60  00004e6c  2**0
                  CONTENTS
707 .inttab_tc2_0B4 00000000  803f5a80  803f5a80  00004e6c  2**0
                  CONTENTS
708 .inttab_tc2_0B5 00000000  803f5aa0  803f5aa0  00004e6c  2**0
                  CONTENTS
709 .inttab_tc2_0B6 00000000  803f5ac0  803f5ac0  00004e6c  2**0
                  CONTENTS
710 .inttab_tc2_0B7 00000000  803f5ae0  803f5ae0  00004e6c  2**0
                  CONTENTS
711 .inttab_tc2_0B8 00000000  803f5b00  803f5b00  00004e6c  2**0
                  CONTENTS
712 .inttab_tc2_0B9 00000000  803f5b20  803f5b20  00004e6c  2**0
                  CONTENTS
713 .inttab_tc2_0BA 00000000  803f5b40  803f5b40  00004e6c  2**0
                  CONTENTS
714 .inttab_tc2_0BB 00000000  803f5b60  803f5b60  00004e6c  2**0
                  CONTENTS
715 .inttab_tc2_0BC 00000000  803f5b80  803f5b80  00004e6c  2**0
                  CONTENTS
716 .inttab_tc2_0BD 00000000  803f5ba0  803f5ba0  00004e6c  2**0
                  CONTENTS
717 .inttab_tc2_0BE 00000000  803f5bc0  803f5bc0  00004e6c  2**0
                  CONTENTS
718 .inttab_tc2_0BF 00000000  803f5be0  803f5be0  00004e6c  2**0
                  CONTENTS
719 .inttab_tc2_0C0 00000000  803f5c00  803f5c00  00004e6c  2**0
                  CONTENTS
720 .inttab_tc2_0C1 00000000  803f5c20  803f5c20  00004e6c  2**0
                  CONTENTS
721 .inttab_tc2_0C2 00000000  803f5c40  803f5c40  00004e6c  2**0
                  CONTENTS
722 .inttab_tc2_0C3 00000000  803f5c60  803f5c60  00004e6c  2**0
                  CONTENTS
723 .inttab_tc2_0C4 00000000  803f5c80  803f5c80  00004e6c  2**0
                  CONTENTS
724 .inttab_tc2_0C5 00000000  803f5ca0  803f5ca0  00004e6c  2**0
                  CONTENTS
725 .inttab_tc2_0C6 00000000  803f5cc0  803f5cc0  00004e6c  2**0
                  CONTENTS
726 .inttab_tc2_0C7 00000000  803f5ce0  803f5ce0  00004e6c  2**0
                  CONTENTS
727 .inttab_tc2_0C8 00000000  803f5d00  803f5d00  00004e6c  2**0
                  CONTENTS
728 .inttab_tc2_0C9 00000000  803f5d20  803f5d20  00004e6c  2**0
                  CONTENTS
729 .inttab_tc2_0CA 00000000  803f5d40  803f5d40  00004e6c  2**0
                  CONTENTS
730 .inttab_tc2_0CB 00000000  803f5d60  803f5d60  00004e6c  2**0
                  CONTENTS
731 .inttab_tc2_0CC 00000000  803f5d80  803f5d80  00004e6c  2**0
                  CONTENTS
732 .inttab_tc2_0CD 00000000  803f5da0  803f5da0  00004e6c  2**0
                  CONTENTS
733 .inttab_tc2_0CE 00000000  803f5dc0  803f5dc0  00004e6c  2**0
                  CONTENTS
734 .inttab_tc2_0CF 00000000  803f5de0  803f5de0  00004e6c  2**0
                  CONTENTS
735 .inttab_tc2_0D0 00000000  803f5e00  803f5e00  00004e6c  2**0
                  CONTENTS
736 .inttab_tc2_0D1 00000000  803f5e20  803f5e20  00004e6c  2**0
                  CONTENTS
737 .inttab_tc2_0D2 00000000  803f5e40  803f5e40  00004e6c  2**0
                  CONTENTS
738 .inttab_tc2_0D3 00000000  803f5e60  803f5e60  00004e6c  2**0
                  CONTENTS
739 .inttab_tc2_0D4 00000000  803f5e80  803f5e80  00004e6c  2**0
                  CONTENTS
740 .inttab_tc2_0D5 00000000  803f5ea0  803f5ea0  00004e6c  2**0
                  CONTENTS
741 .inttab_tc2_0D6 00000000  803f5ec0  803f5ec0  00004e6c  2**0
                  CONTENTS
742 .inttab_tc2_0D7 00000000  803f5ee0  803f5ee0  00004e6c  2**0
                  CONTENTS
743 .inttab_tc2_0D8 00000000  803f5f00  803f5f00  00004e6c  2**0
                  CONTENTS
744 .inttab_tc2_0D9 00000000  803f5f20  803f5f20  00004e6c  2**0
                  CONTENTS
745 .inttab_tc2_0DA 00000000  803f5f40  803f5f40  00004e6c  2**0
                  CONTENTS
746 .inttab_tc2_0DB 00000000  803f5f60  803f5f60  00004e6c  2**0
                  CONTENTS
747 .inttab_tc2_0DC 00000000  803f5f80  803f5f80  00004e6c  2**0
                  CONTENTS
748 .inttab_tc2_0DD 00000000  803f5fa0  803f5fa0  00004e6c  2**0
                  CONTENTS
749 .inttab_tc2_0DE 00000000  803f5fc0  803f5fc0  00004e6c  2**0
                  CONTENTS
750 .inttab_tc2_0DF 00000000  803f5fe0  803f5fe0  00004e6c  2**0
                  CONTENTS
751 .inttab_tc2_0E0 00000000  803f6000  803f6000  00004e6c  2**0
                  CONTENTS
752 .inttab_tc2_0E1 00000000  803f6020  803f6020  00004e6c  2**0
                  CONTENTS
753 .inttab_tc2_0E2 00000000  803f6040  803f6040  00004e6c  2**0
                  CONTENTS
754 .inttab_tc2_0E3 00000000  803f6060  803f6060  00004e6c  2**0
                  CONTENTS
755 .inttab_tc2_0E4 00000000  803f6080  803f6080  00004e6c  2**0
                  CONTENTS
756 .inttab_tc2_0E5 00000000  803f60a0  803f60a0  00004e6c  2**0
                  CONTENTS
757 .inttab_tc2_0E6 00000000  803f60c0  803f60c0  00004e6c  2**0
                  CONTENTS
758 .inttab_tc2_0E7 00000000  803f60e0  803f60e0  00004e6c  2**0
                  CONTENTS
759 .inttab_tc2_0E8 00000000  803f6100  803f6100  00004e6c  2**0
                  CONTENTS
760 .inttab_tc2_0E9 00000000  803f6120  803f6120  00004e6c  2**0
                  CONTENTS
761 .inttab_tc2_0EA 00000000  803f6140  803f6140  00004e6c  2**0
                  CONTENTS
762 .inttab_tc2_0EB 00000000  803f6160  803f6160  00004e6c  2**0
                  CONTENTS
763 .inttab_tc2_0EC 00000000  803f6180  803f6180  00004e6c  2**0
                  CONTENTS
764 .inttab_tc2_0ED 00000000  803f61a0  803f61a0  00004e6c  2**0
                  CONTENTS
765 .inttab_tc2_0EE 00000000  803f61c0  803f61c0  00004e6c  2**0
                  CONTENTS
766 .inttab_tc2_0EF 00000000  803f61e0  803f61e0  00004e6c  2**0
                  CONTENTS
767 .inttab_tc2_0F0 00000000  803f6200  803f6200  00004e6c  2**0
                  CONTENTS
768 .inttab_tc2_0F1 00000000  803f6220  803f6220  00004e6c  2**0
                  CONTENTS
769 .inttab_tc2_0F2 00000000  803f6240  803f6240  00004e6c  2**0
                  CONTENTS
770 .inttab_tc2_0F3 00000000  803f6260  803f6260  00004e6c  2**0
                  CONTENTS
771 .inttab_tc2_0F4 00000000  803f6280  803f6280  00004e6c  2**0
                  CONTENTS
772 .inttab_tc2_0F5 00000000  803f62a0  803f62a0  00004e6c  2**0
                  CONTENTS
773 .inttab_tc2_0F6 00000000  803f62c0  803f62c0  00004e6c  2**0
                  CONTENTS
774 .inttab_tc2_0F7 00000000  803f62e0  803f62e0  00004e6c  2**0
                  CONTENTS
775 .inttab_tc2_0F8 00000000  803f6300  803f6300  00004e6c  2**0
                  CONTENTS
776 .inttab_tc2_0F9 00000000  803f6320  803f6320  00004e6c  2**0
                  CONTENTS
777 .inttab_tc2_0FA 00000000  803f6340  803f6340  00004e6c  2**0
                  CONTENTS
778 .inttab_tc2_0FB 00000000  803f6360  803f6360  00004e6c  2**0
                  CONTENTS
779 .inttab_tc2_0FC 00000000  803f6380  803f6380  00004e6c  2**0
                  CONTENTS
780 .inttab_tc2_0FD 00000000  803f63a0  803f63a0  00004e6c  2**0
                  CONTENTS
781 .inttab_tc2_0FE 00000000  803f63c0  803f63c0  00004e6c  2**0
                  CONTENTS
782 .inttab_tc2_0FF 00000000  803f63e0  803f63e0  00004e6c  2**0
                  CONTENTS
783 .CPU2.zdata   00000000  50000000  50000000  00004e6c  2**0
                  CONTENTS
784 .CPU1.zdata   00000000  60000000  60000000  00004e6c  2**0
                  CONTENTS
785 .CPU0.zdata   00000000  70000000  70000000  00004e6c  2**0
                  CONTENTS
786 .zdata_powerOn 00000000  70000000  70000000  00004e6c  2**0
                  CONTENTS
787 .zdata        00000000  70000000  70000000  00004e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
788 .lmuzdata     00000000  90000000  90000000  00004e6c  2**0
                  CONTENTS
789 .sdata        00000000  70000000  70000000  00004e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
790 .CPU2.data    00000000  50000000  50000000  00004e6c  2**0
                  CONTENTS
791 .CPU2.lmudata 00000000  90020000  90020000  00004e6c  2**0
                  CONTENTS
792 .CPU1.data    00000000  60000000  60000000  00004e6c  2**0
                  CONTENTS
793 .CPU1.lmudata 00000000  90010000  90010000  00004e6c  2**0
                  CONTENTS
794 .CPU0.data    00000000  70000000  70000000  00004e6c  2**0
                  CONTENTS
795 .CPU0.lmudata 00000000  90000000  90000000  00004e6c  2**0
                  CONTENTS
796 .sdata4       00000000  90000000  90000000  00004e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
797 .data         00000000  70000000  70000000  00004e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
798 .bss          0000000c  70000000  803f642c  00000580  2**3
                  ALLOC
799 .heap         00001000  7000000c  803f642c  00000580  2**0
                  ALLOC
800 .lmudata      00000000  90000000  90000000  00004e6c  2**0
                  CONTENTS
801 .rodata       0000047c  803f642c  803f642c  00000580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
802 .CPU0.psram_text 00000000  70100000  70100000  00004e6c  2**0
                  CONTENTS
803 .CPU1.psram_text 00000000  60100000  60100000  00004e6c  2**0
                  CONTENTS
804 .CPU2.psram_text 00000000  50100000  50100000  00004e6c  2**0
                  CONTENTS
805 .CPU0.text    000003c8  803f68a8  803f68a8  000009fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
806 .init         00000010  803f6c70  803f6c70  00000dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
807 .fini         00000008  803f6c80  803f6c80  00000dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
808 .CPU1.text    000001fe  803f6c88  803f6c88  00000ddc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
809 .CPU2.text    000001ec  803f6e86  803f6e86  00000fda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
810 .text         00003c62  803f7072  803f7072  000011c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
811 .eh_frame     00000004  803facd4  803facd4  00004e28  2**0
                  ALLOC
812 .gcc_except_table 00000000  803facd8  803facd8  00004e6c  2**0
                  CONTENTS
813 .ctors        00000010  803facd8  803facd8  00004e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
814 .dtors        00000010  803face8  803face8  00004e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
815 .comment      0000001b  00000000  00000000  00004e6c  2**0
                  CONTENTS, READONLY
816 .debug_aranges 00000830  00000000  00000000  00004e88  2**3
                  CONTENTS, READONLY, DEBUGGING
817 .debug_info   00070f05  00000000  00000000  000056b8  2**0
                  CONTENTS, READONLY, DEBUGGING
818 .debug_abbrev 00003f25  00000000  00000000  000765bd  2**0
                  CONTENTS, READONLY, DEBUGGING
819 .debug_line   0000d61e  00000000  00000000  0007a4e2  2**0
                  CONTENTS, READONLY, DEBUGGING
820 .debug_frame  00001158  00000000  00000000  00087b00  2**2
                  CONTENTS, READONLY, DEBUGGING
821 .debug_str    000018e1  00000000  00000000  00088c58  2**0
                  CONTENTS, READONLY, DEBUGGING
822 .debug_loc    00000ef9  00000000  00000000  0008a539  2**0
                  CONTENTS, READONLY, DEBUGGING
823 .debug_ranges 000000b0  00000000  00000000  0008b438  2**3
                  CONTENTS, READONLY, DEBUGGING
824 .debug_rnglists 0000065b  00000000  00000000  0008b4e8  2**0
                  CONTENTS, READONLY, DEBUGGING
825 .debug_macro  00017081  00000000  00000000  0008bb43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .start_tc0:

a0300000 <_START>:
}


IFX_SSW_INLINE void Ifx_Ssw_jumpToFunction(void (*fun)(void))
{
    __asm__ volatile ("ji %0" ::"a" (fun));
a0300000:	91 f0 03 28 	movh.a %a2,32831
a0300004:	d9 22 ac 26 	lea %a2,[%a2]26796 <803f68ac <__StartUpSoftware>>
a0300008:	dc 02       	ji %a2
#endif

void _START(void)
{
    Ifx_Ssw_jumpToFunction(__StartUpSoftware);
}
a030000a:	00 90       	ret 

Disassembly of section .traptab_tc0:

80300100 <IfxCpu_Trap_vectorTable0>:
#pragma ghs section
#pragma ghs section text=".traptab_cpu0"
#endif
void IfxCpu_Trap_vectorTable0(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80300100:	0d 00 00 02 	svlcx 
80300104:	02 f4       	mov %d4,%d15
80300106:	91 00 04 28 	movh.a %a2,32832
8030010a:	d9 22 ae 69 	lea %a2,[%a2]-26194 <803f99ae <IfxCpu_Trap_memoryManagementError>>
8030010e:	dc 02       	ji %a2
80300110:	00 80       	rfe 
	...
8030011e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80300120:	0d 00 00 02 	svlcx 
80300124:	02 f4       	mov %d4,%d15
80300126:	91 00 04 28 	movh.a %a2,32832
8030012a:	d9 22 b0 89 	lea %a2,[%a2]-26064 <803f9a30 <IfxCpu_Trap_internalProtectionError>>
8030012e:	dc 02       	ji %a2
80300130:	00 80       	rfe 
	...
8030013e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80300140:	0d 00 00 02 	svlcx 
80300144:	02 f4       	mov %d4,%d15
80300146:	91 00 04 28 	movh.a %a2,32832
8030014a:	d9 22 b2 a9 	lea %a2,[%a2]-25934 <803f9ab2 <IfxCpu_Trap_instructionError>>
8030014e:	dc 02       	ji %a2
80300150:	00 80       	rfe 
	...
8030015e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80300160:	02 f4       	mov %d4,%d15
80300162:	91 00 04 28 	movh.a %a2,32832
80300166:	d9 22 b4 c9 	lea %a2,[%a2]-25804 <803f9b34 <IfxCpu_Trap_contextManagementError>>
8030016a:	dc 02       	ji %a2
8030016c:	00 80       	rfe 
	...
8030017e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80300180:	0d 00 00 02 	svlcx 
80300184:	02 f4       	mov %d4,%d15
80300186:	91 00 04 28 	movh.a %a2,32832
8030018a:	d9 22 b6 e9 	lea %a2,[%a2]-25674 <803f9bb6 <IfxCpu_Trap_busError>>
8030018e:	dc 02       	ji %a2
80300190:	00 80       	rfe 
	...
8030019e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
803001a0:	0d 00 00 02 	svlcx 
803001a4:	02 f4       	mov %d4,%d15
803001a6:	91 00 04 28 	movh.a %a2,32832
803001aa:	d9 22 f8 09 	lea %a2,[%a2]-25544 <803f9c38 <IfxCpu_Trap_assertion>>
803001ae:	dc 02       	ji %a2
803001b0:	00 80       	rfe 
	...
803001be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu0);
803001c0:	0d 00 00 02 	svlcx 
803001c4:	02 f4       	mov %d4,%d15
803001c6:	91 00 04 28 	movh.a %a2,32832
803001ca:	d9 22 fa 29 	lea %a2,[%a2]-25414 <803f9cba <IfxCpu_Trap_systemCall_Cpu0>>
803001ce:	dc 02       	ji %a2
803001d0:	00 80       	rfe 
	...
803001de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
803001e0:	0d 00 00 02 	svlcx 
803001e4:	02 f4       	mov %d4,%d15
803001e6:	91 00 04 28 	movh.a %a2,32832
803001ea:	d9 22 f4 89 	lea %a2,[%a2]-25036 <803f9e34 <IfxCpu_Trap_nonMaskableInterrupt>>
803001ee:	dc 02       	ji %a2
803001f0:	00 80       	rfe 
}
803001f2:	00 90       	ret 

803001f4 <IfxCpu_Trap_vectorTable0_end>:
	...

Disassembly of section .traptab_tc1:

80300200 <IfxCpu_Trap_vectorTable1>:
#pragma ghs section
#pragma ghs section text=".traptab_cpu1"
#endif
void IfxCpu_Trap_vectorTable1(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80300200:	0d 00 00 02 	svlcx 
80300204:	02 f4       	mov %d4,%d15
80300206:	91 00 04 28 	movh.a %a2,32832
8030020a:	d9 22 ae 69 	lea %a2,[%a2]-26194 <803f99ae <IfxCpu_Trap_memoryManagementError>>
8030020e:	dc 02       	ji %a2
80300210:	00 80       	rfe 
	...
8030021e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80300220:	0d 00 00 02 	svlcx 
80300224:	02 f4       	mov %d4,%d15
80300226:	91 00 04 28 	movh.a %a2,32832
8030022a:	d9 22 b0 89 	lea %a2,[%a2]-26064 <803f9a30 <IfxCpu_Trap_internalProtectionError>>
8030022e:	dc 02       	ji %a2
80300230:	00 80       	rfe 
	...
8030023e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80300240:	0d 00 00 02 	svlcx 
80300244:	02 f4       	mov %d4,%d15
80300246:	91 00 04 28 	movh.a %a2,32832
8030024a:	d9 22 b2 a9 	lea %a2,[%a2]-25934 <803f9ab2 <IfxCpu_Trap_instructionError>>
8030024e:	dc 02       	ji %a2
80300250:	00 80       	rfe 
	...
8030025e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80300260:	02 f4       	mov %d4,%d15
80300262:	91 00 04 28 	movh.a %a2,32832
80300266:	d9 22 b4 c9 	lea %a2,[%a2]-25804 <803f9b34 <IfxCpu_Trap_contextManagementError>>
8030026a:	dc 02       	ji %a2
8030026c:	00 80       	rfe 
	...
8030027e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80300280:	0d 00 00 02 	svlcx 
80300284:	02 f4       	mov %d4,%d15
80300286:	91 00 04 28 	movh.a %a2,32832
8030028a:	d9 22 b6 e9 	lea %a2,[%a2]-25674 <803f9bb6 <IfxCpu_Trap_busError>>
8030028e:	dc 02       	ji %a2
80300290:	00 80       	rfe 
	...
8030029e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
803002a0:	0d 00 00 02 	svlcx 
803002a4:	02 f4       	mov %d4,%d15
803002a6:	91 00 04 28 	movh.a %a2,32832
803002aa:	d9 22 f8 09 	lea %a2,[%a2]-25544 <803f9c38 <IfxCpu_Trap_assertion>>
803002ae:	dc 02       	ji %a2
803002b0:	00 80       	rfe 
	...
803002be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu1);
803002c0:	0d 00 00 02 	svlcx 
803002c4:	02 f4       	mov %d4,%d15
803002c6:	91 00 04 28 	movh.a %a2,32832
803002ca:	d9 22 f8 49 	lea %a2,[%a2]-25288 <803f9d38 <IfxCpu_Trap_systemCall_Cpu1>>
803002ce:	dc 02       	ji %a2
803002d0:	00 80       	rfe 
	...
803002de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
803002e0:	0d 00 00 02 	svlcx 
803002e4:	02 f4       	mov %d4,%d15
803002e6:	91 00 04 28 	movh.a %a2,32832
803002ea:	d9 22 f4 89 	lea %a2,[%a2]-25036 <803f9e34 <IfxCpu_Trap_nonMaskableInterrupt>>
803002ee:	dc 02       	ji %a2
803002f0:	00 80       	rfe 
}
803002f2:	00 90       	ret 

803002f4 <IfxCpu_Trap_vectorTable1_end>:
	...

Disassembly of section .traptab_tc2:

80300300 <IfxCpu_Trap_vectorTable2>:
#pragma ghs section text=".traptab_cpu2"
#endif

void IfxCpu_Trap_vectorTable2(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80300300:	0d 00 00 02 	svlcx 
80300304:	02 f4       	mov %d4,%d15
80300306:	91 00 04 28 	movh.a %a2,32832
8030030a:	d9 22 ae 69 	lea %a2,[%a2]-26194 <803f99ae <IfxCpu_Trap_memoryManagementError>>
8030030e:	dc 02       	ji %a2
80300310:	00 80       	rfe 
	...
8030031e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80300320:	0d 00 00 02 	svlcx 
80300324:	02 f4       	mov %d4,%d15
80300326:	91 00 04 28 	movh.a %a2,32832
8030032a:	d9 22 b0 89 	lea %a2,[%a2]-26064 <803f9a30 <IfxCpu_Trap_internalProtectionError>>
8030032e:	dc 02       	ji %a2
80300330:	00 80       	rfe 
	...
8030033e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80300340:	0d 00 00 02 	svlcx 
80300344:	02 f4       	mov %d4,%d15
80300346:	91 00 04 28 	movh.a %a2,32832
8030034a:	d9 22 b2 a9 	lea %a2,[%a2]-25934 <803f9ab2 <IfxCpu_Trap_instructionError>>
8030034e:	dc 02       	ji %a2
80300350:	00 80       	rfe 
	...
8030035e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80300360:	02 f4       	mov %d4,%d15
80300362:	91 00 04 28 	movh.a %a2,32832
80300366:	d9 22 b4 c9 	lea %a2,[%a2]-25804 <803f9b34 <IfxCpu_Trap_contextManagementError>>
8030036a:	dc 02       	ji %a2
8030036c:	00 80       	rfe 
	...
8030037e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80300380:	0d 00 00 02 	svlcx 
80300384:	02 f4       	mov %d4,%d15
80300386:	91 00 04 28 	movh.a %a2,32832
8030038a:	d9 22 b6 e9 	lea %a2,[%a2]-25674 <803f9bb6 <IfxCpu_Trap_busError>>
8030038e:	dc 02       	ji %a2
80300390:	00 80       	rfe 
	...
8030039e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
803003a0:	0d 00 00 02 	svlcx 
803003a4:	02 f4       	mov %d4,%d15
803003a6:	91 00 04 28 	movh.a %a2,32832
803003aa:	d9 22 f8 09 	lea %a2,[%a2]-25544 <803f9c38 <IfxCpu_Trap_assertion>>
803003ae:	dc 02       	ji %a2
803003b0:	00 80       	rfe 
	...
803003be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu2);
803003c0:	0d 00 00 02 	svlcx 
803003c4:	02 f4       	mov %d4,%d15
803003c6:	91 00 04 28 	movh.a %a2,32832
803003ca:	d9 22 f6 69 	lea %a2,[%a2]-25162 <803f9db6 <IfxCpu_Trap_systemCall_Cpu2>>
803003ce:	dc 02       	ji %a2
803003d0:	00 80       	rfe 
	...
803003de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
803003e0:	0d 00 00 02 	svlcx 
803003e4:	02 f4       	mov %d4,%d15
803003e6:	91 00 04 28 	movh.a %a2,32832
803003ea:	d9 22 f4 89 	lea %a2,[%a2]-25036 <803f9e34 <IfxCpu_Trap_nonMaskableInterrupt>>
803003ee:	dc 02       	ji %a2
803003f0:	00 80       	rfe 
}
803003f2:	00 90       	ret 

803003f4 <IfxCpu_Trap_vectorTable2_end>:
	...

Disassembly of section .start_tc1:

a03f6400 <_START1>:
a03f6400:	91 f0 03 28 	movh.a %a2,32831
a03f6404:	d9 22 c8 26 	lea %a2,[%a2]27784 <803f6c88 <__Core1_start>>
a03f6408:	dc 02       	ji %a2
#endif

void _START1(void)
{
    Ifx_Ssw_jumpToFunction(__Core1_start);
}
a03f640a:	00 90       	ret 

Disassembly of section .start_tc2:

a03f6420 <_START2>:
a03f6420:	91 f0 03 28 	movh.a %a2,32831
a03f6424:	d9 22 c6 a6 	lea %a2,[%a2]28294 <803f6e86 <__Core2_start>>
a03f6428:	dc 02       	ji %a2
#endif

void _START2(void)
{
    Ifx_Ssw_jumpToFunction(__Core2_start);
}
a03f642a:	00 90       	ret 

Disassembly of section .CPU0.text:

803f68a8 <hardware_init_hook>:
{}
803f68a8:	00 90       	ret 

803f68aa <software_init_hook>:
{}
803f68aa:	00 90       	ret 

803f68ac <__StartUpSoftware>:
    Ifx_Ssw_setAddressReg(a1, __SDATA2(0));
803f68ac:	91 10 00 18 	movh.a %a1,32769
803f68b0:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
803f68b4:	3b 00 98 20 	mov %d2,2432
803f68b8:	cd 42 e0 0f 	mtcr $psw,%d2
#endif

IFX_SSW_INLINE unsigned char Ifx_Ssw_isApplicationReset(void)
{
    unsigned char returnVal;
    unsigned int  tempValue = SCU_RSTSTAT.U;
803f68bc:	91 30 00 2f 	movh.a %a2,61443
803f68c0:	19 22 10 16 	ld.w %d2,[%a2]24656 <f0036050 <_START2_end+0x4fc3fc24>>

    if ((tempValue & IFX_SSW_POWERONRESET_MASK) > 0U)
803f68c4:	7b d0 38 31 	movh %d3,5005
803f68c8:	26 23       	and %d3,%d2
    unsigned int  tempValue = SCU_RSTSTAT.U;
803f68ca:	d9 22 10 16 	lea %a2,[%a2]24656 <f0036050 <_START2_end+0x4fc3fc24>>
    if ((tempValue & IFX_SSW_POWERONRESET_MASK) > 0U)
803f68ce:	df 03 15 80 	jne %d3,0,803f68f8 <__StartUpSoftware+0x4c>
    {
        returnVal = 0U;
    }
    else if ((tempValue & IFX_SSW_APPLICATIONRESET_MASK) > 0U)
803f68d2:	8f b2 0f 31 	and %d3,%d2,251
803f68d6:	df 03 17 00 	jeq %d3,0,803f6904 <__StartUpSoftware+0x58>
    {
        /* get the bit which is set at RSTSTAT (assumption: RSTSTAT register was cleared before and only one bit can be set) */
        tempValue = tempValue & IFX_SSW_APPLICATIONRESET_MASK;
        tempValue = (SCU_RSTCON.U >> ((31U - Ifx_Ssw_CLZ(tempValue)) << 1U)) & 3U;
803f68da:	91 30 00 2f 	movh.a %a2,61443
803f68de:	0f 03 b0 21 	clz %d2,%d3
803f68e2:	8b f2 01 21 	rsub %d2,%d2,31
803f68e6:	19 23 18 16 	ld.w %d3,[%a2]24664 <f0036058 <_START2_end+0x4fc3fc2c>>
803f68ea:	06 12       	sh %d2,1
803f68ec:	57 03 62 22 	extr.u %d2,%d3,%d2,2
803f68f0:	d9 22 18 16 	lea %a2,[%a2]24664 <f0036058 <_START2_end+0x4fc3fc2c>>

        if (tempValue == IFX_SSW_APPLICATIONRESET)
803f68f4:	df 22 0a 00 	jeq %d2,2,803f6908 <__StartUpSoftware+0x5c>
803f68f8:	91 f0 03 28 	movh.a %a2,32831
803f68fc:	d9 22 ac 46 	lea %a2,[%a2]26924 <803f692c <__StartUpSoftware_Phase2>>
803f6900:	dc 02       	ji %a2
}
803f6902:	00 90       	ret 
        else
        {
            returnVal = 0U;
        }
    }
    else if (((unsigned int)tempValue & ((unsigned int)IFX_SCU_RSTSTAT_CB3_MSK << IFX_SCU_RSTSTAT_CB3_OFF)))
803f6904:	ef 42 08 00 	jz.t %d2,20,803f6914 <__StartUpSoftware+0x68>
    __asm__ volatile ("ji %0" ::"a" (fun));
803f6908:	91 f0 03 28 	movh.a %a2,32831
803f690c:	d9 22 b6 76 	lea %a2,[%a2]27126 <803f69f6 <__StartUpSoftware_Phase3ApplicationResetPath>>
803f6910:	dc 02       	ji %a2
}
803f6912:	00 90       	ret 
    {
        /* CB3 reset is not configurable and is always application reset */
        returnVal = 1U;
    }
    else if (CPU0_KRST0.B.RSTSTAT != 0)   /*CPU0 KRST status */
803f6914:	91 10 88 2f 	movh.a %a2,63617
803f6918:	19 22 00 0d 	ld.w %d2,[%a2]-12288 <f880d000 <_START2_end+0x58416bd4>>
803f691c:	d9 22 00 0d 	lea %a2,[%a2]-12288 <f880d000 <_START2_end+0x58416bd4>>
803f6920:	37 02 e2 20 	extr.u %d2,%d2,1,2
803f6924:	df 02 f2 ff 	jne %d2,0,803f6908 <__StartUpSoftware+0x5c>
803f6928:	1d ff e8 ff 	j 803f68f8 <__StartUpSoftware+0x4c>

803f692c <__StartUpSoftware_Phase2>:


IFX_SSW_INLINE void Ifx_Ssw_jumpToFunctionWithLink(void *fun)
{
    __asm__ volatile ("jli %0" ::"a" (fun));
803f692c:	91 00 04 28 	movh.a %a2,32832
803f6930:	d9 22 b6 7a 	lea %a2,[%a2]-22026 <803fa9f6 <Ifx_Ssw_Pms_Init>>
803f6934:	2d 02 20 00 	jli %a2
803f6938:	91 00 04 28 	movh.a %a2,32832
803f693c:	d9 22 9c ca 	lea %a2,[%a2]-21732 <803fab1c <Ifx_Ssw_Pms_InitCheck>>
803f6940:	2d 02 20 00 	jli %a2
    __asm__ volatile ("ji %0" ::"a" (fun));
803f6944:	91 f0 03 28 	movh.a %a2,32831
803f6948:	d9 22 90 56 	lea %a2,[%a2]26960 <803f6950 <__StartUpSoftware_Phase3PowerOnResetPath>>
803f694c:	dc 02       	ji %a2
}
803f694e:	00 90       	ret 

803f6950 <__StartUpSoftware_Phase3PowerOnResetPath>:
    IFX_SSW_INIT_CONTEXT();
803f6950:	91 40 00 a7 	movh.a %sp,28676
803f6954:	d9 aa 40 89 	lea %sp,[%sp]-27136 <70039600 <__USTACK0>>
    __asm__ volatile ("dsync" : : : "memory");
803f6958:	0d 00 80 04 	dsync 
{
    unsigned int  k;
    unsigned int  nxt_cxi_val = 0U;
    unsigned int *prvCsa      = csaBegin;
    unsigned int *nxtCsa      = csaBegin;
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
803f695c:	91 40 00 37 	movh.a %a3,28676
803f6960:	91 40 00 27 	movh.a %a2,28676
803f6964:	d9 33 c0 09 	lea %a3,[%a3]-25600 <70039c00 <__CSA0>>
803f6968:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <7003bc00 <__CSA0_END>>
803f696c:	01 32 20 20 	sub.a %a2,%a2,%a3
803f6970:	80 22       	mov.d %d2,%a2
803f6972:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
803f6976:	40 32       	mov.aa %a2,%a3
        else
        {
            *prvCsa = nxt_cxi_val;
        }

        if (k == (numOfCsa - 3U))
803f6978:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
803f697c:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
803f697e:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
803f6980:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
803f6984:	df 06 2d 00 	jeq %d6,0,803f69de <__StartUpSoftware_Phase3PowerOnResetPath+0x8e>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
803f6988:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
803f698c:	8f 42 1f 50 	sh %d5,%d2,-12
803f6990:	26 75       	and %d5,%d7
803f6992:	a6 54       	or %d4,%d5
        if (k == 0U)
803f6994:	df 03 14 00 	jeq %d3,0,803f69bc <__StartUpSoftware_Phase3PowerOnResetPath+0x6c>
            *prvCsa = nxt_cxi_val;
803f6998:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
803f699a:	5f 03 15 00 	jeq %d3,%d0,803f69c4 <__StartUpSoftware_Phase3PowerOnResetPath+0x74>
    for (k = 0U; k < numOfCsa; k++)
803f699e:	c2 13       	add %d3,1
803f69a0:	60 22       	mov.a %a2,%d2
        {
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
        }

        prvCsa  = (unsigned int *)nxtCsa;
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
803f69a2:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
803f69a6:	5f 36 17 00 	jeq %d6,%d3,803f69d4 <__StartUpSoftware_Phase3PowerOnResetPath+0x84>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
803f69aa:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
803f69ac:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
803f69b0:	8f 42 1f 50 	sh %d5,%d2,-12
803f69b4:	26 75       	and %d5,%d7
803f69b6:	a6 54       	or %d4,%d5
        if (k == 0U)
803f69b8:	df 03 f0 ff 	jne %d3,0,803f6998 <__StartUpSoftware_Phase3PowerOnResetPath+0x48>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
803f69bc:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
803f69c0:	5f 03 ef ff 	jne %d3,%d0,803f699e <__StartUpSoftware_Phase3PowerOnResetPath+0x4e>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
803f69c4:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
803f69c8:	c2 13       	add %d3,1
803f69ca:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
803f69cc:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
803f69d0:	5f 36 ed ff 	jne %d6,%d3,803f69aa <__StartUpSoftware_Phase3PowerOnResetPath+0x5a>
803f69d4:	1b f6 ff 2f 	addi %d2,%d6,-1
803f69d8:	06 62       	sh %d2,6
803f69da:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    }

    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
803f69de:	82 02       	mov %d2,0
803f69e0:	74 22       	st.w [%a2],%d2
803f69e2:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
803f69e6:	0d 00 c0 04 	isync 
    __asm__ volatile ("ji %0" ::"a" (fun));
803f69ea:	91 f0 03 28 	movh.a %a2,32831
803f69ee:	d9 22 9c a6 	lea %a2,[%a2]27292 <803f6a9c <__StartUpSoftware_Phase4>>
803f69f2:	dc 02       	ji %a2
}
803f69f4:	00 90       	ret 

803f69f6 <__StartUpSoftware_Phase3ApplicationResetPath>:
    IFX_SSW_INIT_CONTEXT();
803f69f6:	91 40 00 a7 	movh.a %sp,28676
803f69fa:	d9 aa 40 89 	lea %sp,[%sp]-27136 <70039600 <__USTACK0>>
    __asm__ volatile ("dsync" : : : "memory");
803f69fe:	0d 00 80 04 	dsync 
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
803f6a02:	91 40 00 37 	movh.a %a3,28676
803f6a06:	91 40 00 27 	movh.a %a2,28676
803f6a0a:	d9 33 c0 09 	lea %a3,[%a3]-25600 <70039c00 <__CSA0>>
803f6a0e:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <7003bc00 <__CSA0_END>>
803f6a12:	01 32 20 20 	sub.a %a2,%a2,%a3
803f6a16:	80 22       	mov.d %d2,%a2
803f6a18:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
803f6a1c:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
803f6a1e:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
803f6a22:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
803f6a24:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
803f6a26:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
803f6a2a:	df 06 2d 00 	jeq %d6,0,803f6a84 <__StartUpSoftware_Phase3ApplicationResetPath+0x8e>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
803f6a2e:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
803f6a32:	8f 42 1f 50 	sh %d5,%d2,-12
803f6a36:	26 75       	and %d5,%d7
803f6a38:	a6 54       	or %d4,%d5
        if (k == 0U)
803f6a3a:	df 03 14 00 	jeq %d3,0,803f6a62 <__StartUpSoftware_Phase3ApplicationResetPath+0x6c>
            *prvCsa = nxt_cxi_val;
803f6a3e:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
803f6a40:	5f 03 15 00 	jeq %d3,%d0,803f6a6a <__StartUpSoftware_Phase3ApplicationResetPath+0x74>
    for (k = 0U; k < numOfCsa; k++)
803f6a44:	c2 13       	add %d3,1
803f6a46:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
803f6a48:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
803f6a4c:	5f 36 17 00 	jeq %d6,%d3,803f6a7a <__StartUpSoftware_Phase3ApplicationResetPath+0x84>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
803f6a50:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
803f6a52:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
803f6a56:	8f 42 1f 50 	sh %d5,%d2,-12
803f6a5a:	26 75       	and %d5,%d7
803f6a5c:	a6 54       	or %d4,%d5
        if (k == 0U)
803f6a5e:	df 03 f0 ff 	jne %d3,0,803f6a3e <__StartUpSoftware_Phase3ApplicationResetPath+0x48>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
803f6a62:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
803f6a66:	5f 03 ef ff 	jne %d3,%d0,803f6a44 <__StartUpSoftware_Phase3ApplicationResetPath+0x4e>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
803f6a6a:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
803f6a6e:	c2 13       	add %d3,1
803f6a70:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
803f6a72:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
803f6a76:	5f 36 ed ff 	jne %d6,%d3,803f6a50 <__StartUpSoftware_Phase3ApplicationResetPath+0x5a>
803f6a7a:	1b f6 ff 2f 	addi %d2,%d6,-1
803f6a7e:	06 62       	sh %d2,6
803f6a80:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
803f6a84:	82 02       	mov %d2,0
803f6a86:	74 22       	st.w [%a2],%d2
803f6a88:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
803f6a8c:	0d 00 c0 04 	isync 
    __asm__ volatile ("ji %0" ::"a" (fun));
803f6a90:	91 f0 03 28 	movh.a %a2,32831
803f6a94:	d9 22 aa b6 	lea %a2,[%a2]27370 <803f6aea <__StartUpSoftware_Phase5>>
803f6a98:	dc 02       	ji %a2
}
803f6a9a:	00 90       	ret 

803f6a9c <__StartUpSoftware_Phase4>:
    password  = watchdog->CON0.B.PW;
803f6a9c:	91 30 00 4f 	movh.a %a4,61443
803f6aa0:	19 44 0c 96 	ld.w %d4,[%a4]25164 <f003624c <_START2_end+0x4fc3fe20>>
    password  = watchdog->CON0.B.PW;
803f6aa4:	91 30 00 2f 	movh.a %a2,61443
803f6aa8:	19 28 28 a6 	ld.w %d8,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
    password  = watchdog->CON0.B.PW;
803f6aac:	37 04 6e 41 	extr.u %d4,%d4,2,14
803f6ab0:	d9 44 0c 96 	lea %a4,[%a4]25164 <f003624c <_START2_end+0x4fc3fe20>>
    password  = watchdog->CON0.B.PW;
803f6ab4:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
        Ifx_Ssw_serviceCpuWatchdog(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
803f6ab8:	8f f4 83 41 	xor %d4,%d4,63
803f6abc:	37 08 6e 81 	extr.u %d8,%d8,2,14
803f6ac0:	6d 00 9c 1c 	call 803fa3f8 <Ifx_Ssw_serviceCpuWatchdog>
        Ifx_Ssw_serviceSafetyWatchdog(safetyWdtPassword);
803f6ac4:	8f f8 83 41 	xor %d4,%d8,63
803f6ac8:	6d 00 db 1c 	call 803fa47e <Ifx_Ssw_serviceSafetyWatchdog>
    IFX_CFG_SSW_CALLOUT_PLL_INIT();
803f6acc:	91 f0 03 48 	movh.a %a4,32831
803f6ad0:	d9 44 78 16 	lea %a4,[%a4]25720 <803f6478 <IfxScuCcu_defaultClockConfig>>
803f6ad4:	6d 00 f1 0a 	call 803f80b6 <IfxScuCcu_init>
803f6ad8:	df 12 03 80 	jne %d2,1,803f6ade <__StartUpSoftware_Phase4+0x42>

/** Insert DEBUG instruction
 */
IFX_INLINE void Ifx__debug(void)
{
    __asm__ volatile ("debug" : : : "memory");
803f6adc:	00 a0       	debug 
803f6ade:	91 f0 03 28 	movh.a %a2,32831
803f6ae2:	d9 22 aa b6 	lea %a2,[%a2]27370 <803f6aea <__StartUpSoftware_Phase5>>
803f6ae6:	dc 02       	ji %a2
}
803f6ae8:	00 90       	ret 

803f6aea <__StartUpSoftware_Phase5>:
803f6aea:	91 f0 03 28 	movh.a %a2,32831
803f6aee:	d9 22 b6 b6 	lea %a2,[%a2]27382 <803f6af6 <__StartUpSoftware_Phase6>>
803f6af2:	dc 02       	ji %a2
}
803f6af4:	00 90       	ret 

803f6af6 <__StartUpSoftware_Phase6>:
    Ifx_Ssw_startCore(&MODULE_CPU1, (unsigned int)__START(1));           /*The status returned by function call is ignored */
803f6af6:	91 f0 03 2a 	movh.a %a2,41023
803f6afa:	80 22       	mov.d %d2,%a2
803f6afc:	1b 02 40 46 	addi %d4,%d2,25600
803f6b00:	91 20 88 4f 	movh.a %a4,63618
803f6b04:	6d 00 ce 1d 	call 803fa6a0 <Ifx_Ssw_startCore>
803f6b08:	91 f0 03 28 	movh.a %a2,32831
803f6b0c:	d9 22 94 c6 	lea %a2,[%a2]27412 <803f6b14 <__Core0_start>>
803f6b10:	dc 02       	ji %a2
}
803f6b12:	00 90       	ret 

803f6b14 <__Core0_start>:
    password  = watchdog->CON0.B.PW;
803f6b14:	91 30 00 2f 	movh.a %a2,61443
    password  = watchdog->CON0.B.PW;
803f6b18:	91 30 00 3f 	movh.a %a3,61443
    password  = watchdog->CON0.B.PW;
803f6b1c:	19 23 0c 96 	ld.w %d3,[%a2]25164 <f003624c <_START2_end+0x4fc3fe20>>
    password  = watchdog->CON0.B.PW;
803f6b20:	19 32 28 a6 	ld.w %d2,[%a3]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
    password  = watchdog->CON0.B.PW;
803f6b24:	37 03 6e 31 	extr.u %d3,%d3,2,14
    password  = watchdog->CON0.B.PW;
803f6b28:	37 02 6e 21 	extr.u %d2,%d2,2,14
    if (watchdog->CON0.B.LCK)
803f6b2c:	19 24 0c 96 	ld.w %d4,[%a2]25164 <f003624c <_START2_end+0x4fc3fe20>>
803f6b30:	8f f3 83 81 	xor %d8,%d3,63
    password  = watchdog->CON0.B.PW;
803f6b34:	d9 22 0c 96 	lea %a2,[%a2]25164 <f003624c <_START2_end+0x4fc3fe20>>
    password  = watchdog->CON0.B.PW;
803f6b38:	d9 33 28 a6 	lea %a3,[%a3]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f6b3c:	8f f2 83 91 	xor %d9,%d2,63
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f6b40:	8f 28 00 20 	sh %d2,%d8,2
    if (watchdog->CON0.B.LCK)
803f6b44:	6f 14 0b 00 	jz.t %d4,1,803f6b5a <__Core0_start+0x46>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f6b48:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f6b4a:	8f 28 00 20 	sh %d2,%d8,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f6b4e:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f6b52:	a6 23       	or %d3,%d2
803f6b54:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f6b58:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f6b5a:	91 30 00 2f 	movh.a %a2,61443
803f6b5e:	19 24 0c 96 	ld.w %d4,[%a2]25164 <f003624c <_START2_end+0x4fc3fe20>>
803f6b62:	d9 22 0c 96 	lea %a2,[%a2]25164 <f003624c <_START2_end+0x4fc3fe20>>
803f6b66:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
803f6b6a:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f6b6c:	a6 24       	or %d4,%d2
803f6b6e:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f6b72:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
803f6b74:	54 24       	ld.w %d4,[%a2]
803f6b76:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
803f6b7a:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
803f6b7e:	cd 03 04 09 	mtcr $dcon0,%d3
803f6b82:	0d 00 c0 04 	isync 
    Ifx_Ssw_setAddressReg(a0, __SDATA1(0));
803f6b86:	91 10 00 07 	movh.a %a0,28673
803f6b8a:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(0));
803f6b8e:	91 10 00 88 	movh.a %a8,32769
803f6b92:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(0));
803f6b96:	91 10 00 99 	movh.a %a9,36865
803f6b9a:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(0));
803f6b9e:	91 00 03 38 	movh.a %a3,32816
803f6ba2:	80 33       	mov.d %d3,%a3
803f6ba4:	1b 03 10 30 	addi %d3,%d3,256
803f6ba8:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(0));
803f6bac:	91 00 03 38 	movh.a %a3,32816
803f6bb0:	80 33       	mov.d %d3,%a3
803f6bb2:	1b 03 40 30 	addi %d3,%d3,1024
803f6bb6:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(0));
803f6bba:	91 40 00 37 	movh.a %a3,28676
803f6bbe:	80 33       	mov.d %d3,%a3
803f6bc0:	1b 03 b0 39 	addi %d3,%d3,-25856
803f6bc4:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
803f6bc8:	54 23       	ld.w %d3,[%a2]
803f6bca:	6f 13 09 00 	jz.t %d3,1,803f6bdc <__Core0_start+0xc8>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f6bce:	54 23       	ld.w %d3,[%a2]
803f6bd0:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f6bd4:	a6 23       	or %d3,%d2
803f6bd6:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f6bda:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f6bdc:	91 30 00 cf 	movh.a %a12,61443
803f6be0:	19 c3 0c 96 	ld.w %d3,[%a12]25164 <f003624c <_START2_end+0x4fc3fe20>>
803f6be4:	d9 cc 0c 96 	lea %a12,[%a12]25164 <f003624c <_START2_end+0x4fc3fe20>>
803f6be8:	b7 03 10 30 	insert %d3,%d3,0,0,16
    Ifx_Ssw_disableCpuWatchdog(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
803f6bec:	40 c4       	mov.aa %a4,%a12
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f6bee:	a6 32       	or %d2,%d3
803f6bf0:	8f 32 40 21 	or %d2,%d2,3
803f6bf4:	02 84       	mov %d4,%d8
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f6bf6:	74 c2       	st.w [%a12],%d2
    watchdog->CON0.U;
803f6bf8:	54 c2       	ld.w %d2,[%a12]
803f6bfa:	6d 00 8b 1c 	call 803fa510 <Ifx_Ssw_disableCpuWatchdog>
    Ifx_Ssw_disableSafetyWatchdog(safetyWdtPassword);
803f6bfe:	02 94       	mov %d4,%d9
803f6c00:	6d 00 1e 1d 	call 803fa63c <Ifx_Ssw_disableSafetyWatchdog>
		hardware_init_hook();
803f6c04:	6d ff 52 fe 	call 803f68a8 <hardware_init_hook>
		software_init_hook();
803f6c08:	6d ff 51 fe 	call 803f68aa <software_init_hook>
	(void)Ifx_Ssw_doCppInit();
803f6c0c:	6d 00 05 1e 	call 803fa816 <Ifx_Ssw_doCppInit>
    Ifx_Ssw_enableSafetyWatchdog(safetyWdtPassword);
803f6c10:	02 94       	mov %d4,%d9
803f6c12:	6d 00 2e 1d 	call 803fa66e <Ifx_Ssw_enableSafetyWatchdog>
    Ifx_Ssw_enableCpuWatchdog(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
803f6c16:	02 84       	mov %d4,%d8
803f6c18:	40 c4       	mov.aa %a4,%a12
803f6c1a:	6d 00 c6 1c 	call 803fa5a6 <Ifx_Ssw_enableCpuWatchdog>
    __asm__ volatile ("ji %0" ::"a" (fun));
803f6c1e:	91 f0 03 28 	movh.a %a2,32831
803f6c22:	d9 22 ee 06 	lea %a2,[%a2]27694 <803f6c2e <core0_main>>
803f6c26:	dc 02       	ji %a2

803f6c28 <x>:
    __asm__ volatile ("ji %a11");
}

IFX_SSW_INLINE void Ifx_Ssw_infiniteLoop(void)
{
    __asm("x: loopu\t x");
803f6c28:	fd 00 00 80 	loopu 803f6c28 <x>
}
803f6c2c:	00 90       	ret 

803f6c2e <core0_main>:
#include "Blinky_LED.h"

IFX_ALIGN(4) IfxCpu_syncEvent g_cpuSyncEvent = 0;

void core0_main(void)
{
803f6c2e:	40 ae       	mov.aa %a14,%sp
}


IFX_INLINE void IfxCpu_enableInterrupts(void)
{
    __enable();
803f6c30:	0d 00 00 03 	enable 
}
803f6c34:	00 00       	nop 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
803f6c36:	6d 00 6c 15 	call 803f970e <IfxScuWdt_getCpuWatchdogPassword>
803f6c3a:	02 24       	mov %d4,%d2
803f6c3c:	6d 00 2a 14 	call 803f9490 <IfxScuWdt_disableCpuWatchdog>
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
803f6c40:	6d 00 91 15 	call 803f9762 <IfxScuWdt_getSafetyWatchdogPassword>
803f6c44:	02 24       	mov %d4,%d2
803f6c46:	6d 00 ca 14 	call 803f95da <IfxScuWdt_disableSafetyWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
803f6c4a:	91 00 00 27 	movh.a %a2,28672
803f6c4e:	d9 24 08 00 	lea %a4,[%a2]8 <70000008 <g_cpuSyncEvent>>
803f6c52:	6d 00 9c 19 	call 803f9f8a <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
803f6c56:	82 14       	mov %d4,1
803f6c58:	91 00 00 27 	movh.a %a2,28672
803f6c5c:	d9 24 08 00 	lea %a4,[%a2]8 <70000008 <g_cpuSyncEvent>>
803f6c60:	6d 00 29 19 	call 803f9eb2 <IfxCpu_waitEvent>
    
    initLED();
803f6c64:	6d 00 90 1f 	call 803fab84 <initLED>
    
    while(1)
    {
        blinkLED();
803f6c68:	6d 00 d1 1f 	call 803fac0a <blinkLED>
803f6c6c:	1d ff fe ff 	j 803f6c68 <core0_main+0x3a>

Disassembly of section .init:

803f6c70 <_init>:
803f6c70:	6d 00 66 02 	call 803f713c <frame_dummy>
803f6c74:	6d 00 5d 07 	call 803f7b2e <__do_global_ctors_aux>
803f6c78:	00 90       	ret 
803f6c7a:	00 00       	nop 
803f6c7c:	00 00       	nop 
	...

Disassembly of section .fini:

803f6c80 <_fini>:
803f6c80:	6d 00 2b 02 	call 803f70d6 <__do_global_dtors_aux>
803f6c84:	00 90       	ret 
	...

Disassembly of section .CPU1.text:

803f6c88 <__Core1_start>:
    password  = watchdog->CON0.B.PW;
803f6c88:	91 30 00 2f 	movh.a %a2,61443
803f6c8c:	d9 22 18 96 	lea %a2,[%a2]25176 <f0036258 <_START2_end+0x4fc3fe2c>>
    unsigned int   stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
803f6c90:	85 f8 10 01 	ld.w %d8,f0001010 <_START2_end+0x4fc0abe4>
803f6c94:	54 22       	ld.w %d2,[%a2]
803f6c96:	37 02 6e 21 	extr.u %d2,%d2,2,14
803f6c9a:	8f f2 83 21 	xor %d2,%d2,63
    Ifx_Ssw_setAddressReg(sp, __USTACK(1));
803f6c9e:	91 40 00 a6 	movh.a %sp,24580
803f6ca2:	d9 aa 40 89 	lea %sp,[%sp]-27136 <60039600 <__USTACK1>>
    __asm__ volatile ("dsync" : : : "memory");
803f6ca6:	0d 00 80 04 	dsync 
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
803f6caa:	3b 00 98 30 	mov %d3,2432
803f6cae:	cd 43 e0 0f 	mtcr $psw,%d3
    if (watchdog->CON0.B.LCK)
803f6cb2:	54 23       	ld.w %d3,[%a2]
803f6cb4:	6f 13 c7 80 	jnz.t %d3,1,803f6e42 <x+0x6>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f6cb8:	06 22       	sh %d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f6cba:	91 30 00 2f 	movh.a %a2,61443
803f6cbe:	19 24 18 96 	ld.w %d4,[%a2]25176 <f0036258 <_START2_end+0x4fc3fe2c>>
803f6cc2:	d9 22 18 96 	lea %a2,[%a2]25176 <f0036258 <_START2_end+0x4fc3fe2c>>
803f6cc6:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
803f6cca:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f6ccc:	a6 24       	or %d4,%d2
803f6cce:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f6cd2:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
803f6cd4:	54 24       	ld.w %d4,[%a2]
803f6cd6:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
803f6cda:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
803f6cde:	cd 03 04 09 	mtcr $dcon0,%d3
803f6ce2:	0d 00 c0 04 	isync 
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(1));
803f6ce6:	91 00 03 38 	movh.a %a3,32816
803f6cea:	80 33       	mov.d %d3,%a3
803f6cec:	1b 03 20 30 	addi %d3,%d3,512
803f6cf0:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(1));
803f6cf4:	91 00 03 38 	movh.a %a3,32816
803f6cf8:	80 33       	mov.d %d3,%a3
803f6cfa:	1b 03 40 32 	addi %d3,%d3,9216
803f6cfe:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(1));
803f6d02:	91 40 00 36 	movh.a %a3,24580
803f6d06:	80 33       	mov.d %d3,%a3
803f6d08:	1b 03 b0 39 	addi %d3,%d3,-25856
803f6d0c:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
803f6d10:	54 23       	ld.w %d3,[%a2]
803f6d12:	6f 13 09 00 	jz.t %d3,1,803f6d24 <__Core1_start+0x9c>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f6d16:	54 23       	ld.w %d3,[%a2]
803f6d18:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f6d1c:	a6 23       	or %d3,%d2
803f6d1e:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f6d22:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f6d24:	91 30 00 2f 	movh.a %a2,61443
803f6d28:	19 23 18 96 	ld.w %d3,[%a2]25176 <f0036258 <_START2_end+0x4fc3fe2c>>
803f6d2c:	d9 22 18 96 	lea %a2,[%a2]25176 <f0036258 <_START2_end+0x4fc3fe2c>>
803f6d30:	b7 03 10 30 	insert %d3,%d3,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f6d34:	a6 32       	or %d2,%d3
803f6d36:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f6d3a:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
803f6d3c:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setAddressReg(a0, __SDATA1(1));
803f6d3e:	91 10 00 07 	movh.a %a0,28673
803f6d42:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a1, __SDATA2(1));
803f6d46:	91 10 00 18 	movh.a %a1,32769
803f6d4a:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(1));
803f6d4e:	91 10 00 88 	movh.a %a8,32769
803f6d52:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(1));
803f6d56:	91 10 00 99 	movh.a %a9,36865
803f6d5a:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
803f6d5e:	91 40 00 36 	movh.a %a3,24580
803f6d62:	91 40 00 26 	movh.a %a2,24580
803f6d66:	d9 33 c0 09 	lea %a3,[%a3]-25600 <60039c00 <__CSA1>>
803f6d6a:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <6003bc00 <__CSA1_END>>
803f6d6e:	01 32 20 20 	sub.a %a2,%a2,%a3
803f6d72:	80 22       	mov.d %d2,%a2
803f6d74:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
803f6d78:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
803f6d7a:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
803f6d7e:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
803f6d80:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
803f6d82:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
803f6d86:	df 06 2d 00 	jeq %d6,0,803f6de0 <__Core1_start+0x158>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
803f6d8a:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
803f6d8e:	8f 42 1f 50 	sh %d5,%d2,-12
803f6d92:	26 75       	and %d5,%d7
803f6d94:	a6 54       	or %d4,%d5
        if (k == 0U)
803f6d96:	df 03 14 00 	jeq %d3,0,803f6dbe <__Core1_start+0x136>
            *prvCsa = nxt_cxi_val;
803f6d9a:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
803f6d9c:	5f 03 15 00 	jeq %d3,%d0,803f6dc6 <__Core1_start+0x13e>
    for (k = 0U; k < numOfCsa; k++)
803f6da0:	c2 13       	add %d3,1
803f6da2:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
803f6da4:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
803f6da8:	5f 36 17 00 	jeq %d6,%d3,803f6dd6 <__Core1_start+0x14e>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
803f6dac:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
803f6dae:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
803f6db2:	8f 42 1f 50 	sh %d5,%d2,-12
803f6db6:	26 75       	and %d5,%d7
803f6db8:	a6 54       	or %d4,%d5
        if (k == 0U)
803f6dba:	df 03 f0 ff 	jne %d3,0,803f6d9a <__Core1_start+0x112>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
803f6dbe:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
803f6dc2:	5f 03 ef ff 	jne %d3,%d0,803f6da0 <__Core1_start+0x118>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
803f6dc6:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
803f6dca:	c2 13       	add %d3,1
803f6dcc:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
803f6dce:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
803f6dd2:	5f 36 ed ff 	jne %d6,%d3,803f6dac <__Core1_start+0x124>
803f6dd6:	1b f6 ff 2f 	addi %d2,%d6,-1
803f6dda:	06 62       	sh %d2,6
803f6ddc:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
803f6de0:	82 02       	mov %d2,0
803f6de2:	74 22       	st.w [%a2],%d2
    __asm__ volatile ("dsync" : : : "memory");
803f6de4:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
803f6de8:	0d 00 c0 04 	isync 
    stmCount = (unsigned int)(Ifx_Ssw_getStmFrequency() * IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS);
803f6dec:	6d 00 97 1c 	call 803fa71a <Ifx_Ssw_getStmFrequency>
803f6df0:	02 24       	mov %d4,%d2
803f6df2:	6d 00 c5 01 	call 803f717c <__extendsfdf2>
803f6df6:	0b 23 10 48 	mov %e4,%d3,%d2
803f6dfa:	7b c0 b1 6e 	movh %d6,60188
803f6dfe:	7b a0 f1 73 	movh %d7,16154
803f6e02:	1b d6 32 64 	addi %d6,%d6,17197
803f6e06:	1b 27 6e 73 	addi %d7,%d7,14050
803f6e0a:	6d 00 3e 03 	call 803f7486 <__muldf3>
803f6e0e:	0b 23 10 48 	mov %e4,%d3,%d2
803f6e12:	6d 00 99 01 	call 803f7144 <__fixunsdfsi>
    while ((unsigned int)(STM0_TIM0.U - stmCountBegin) < stmCount)
803f6e16:	85 f3 10 01 	ld.w %d3,f0001010 <_START2_end+0x4fc0abe4>
803f6e1a:	a2 83       	sub %d3,%d8
803f6e1c:	3f 23 fd ff 	jlt.u %d3,%d2,803f6e16 <__Core1_start+0x18e>
    (void)Ifx_Ssw_startCore(&MODULE_CPU2, (unsigned int)__START(2));       /*The status returned by function call is ignored */
803f6e20:	91 f0 03 2a 	movh.a %a2,41023
803f6e24:	80 22       	mov.d %d2,%a2
803f6e26:	1b 02 42 46 	addi %d4,%d2,25632
803f6e2a:	91 40 88 4f 	movh.a %a4,63620
803f6e2e:	6d 00 39 1c 	call 803fa6a0 <Ifx_Ssw_startCore>
    __asm__ volatile ("ji %0" ::"a" (fun));
803f6e32:	91 f0 03 28 	movh.a %a2,32831
803f6e36:	d9 22 d6 96 	lea %a2,[%a2]28246 <803f6e56 <core1_main>>
803f6e3a:	dc 02       	ji %a2

803f6e3c <x>:
    __asm("x: loopu\t x");
803f6e3c:	fd 00 00 80 	loopu 803f6e3c <x>
}
803f6e40:	00 90       	ret 
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f6e42:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f6e44:	06 22       	sh %d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f6e46:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f6e4a:	a6 23       	or %d3,%d2
803f6e4c:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f6e50:	74 23       	st.w [%a2],%d3
803f6e52:	1d ff 34 ff 	j 803f6cba <__Core1_start+0x32>

803f6e56 <core1_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core1_main(void)
{
803f6e56:	40 ae       	mov.aa %a14,%sp
    __enable();
803f6e58:	0d 00 00 03 	enable 
}
803f6e5c:	00 00       	nop 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG1 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
803f6e5e:	6d 00 58 14 	call 803f970e <IfxScuWdt_getCpuWatchdogPassword>
803f6e62:	02 24       	mov %d4,%d2
803f6e64:	6d 00 16 13 	call 803f9490 <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
803f6e68:	91 00 00 27 	movh.a %a2,28672
803f6e6c:	d9 24 08 00 	lea %a4,[%a2]8 <70000008 <g_cpuSyncEvent>>
803f6e70:	6d 00 8d 18 	call 803f9f8a <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
803f6e74:	82 14       	mov %d4,1
803f6e76:	91 00 00 27 	movh.a %a2,28672
803f6e7a:	d9 24 08 00 	lea %a4,[%a2]8 <70000008 <g_cpuSyncEvent>>
803f6e7e:	6d 00 1a 18 	call 803f9eb2 <IfxCpu_waitEvent>
    
    while(1)
803f6e82:	1d 00 00 00 	j 803f6e82 <core1_main+0x2c>

Disassembly of section .CPU2.text:

803f6e86 <__Core2_start>:
    password  = watchdog->CON0.B.PW;
803f6e86:	91 30 00 2f 	movh.a %a2,61443
803f6e8a:	d9 22 24 96 	lea %a2,[%a2]25188 <f0036264 <_START2_end+0x4fc3fe38>>
    unsigned int   stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
803f6e8e:	85 f8 10 01 	ld.w %d8,f0001010 <_START2_end+0x4fc0abe4>
803f6e92:	54 22       	ld.w %d2,[%a2]
803f6e94:	37 02 6e 21 	extr.u %d2,%d2,2,14
803f6e98:	8f f2 83 21 	xor %d2,%d2,63
    Ifx_Ssw_setAddressReg(sp, __USTACK(2));
803f6e9c:	91 10 00 a5 	movh.a %sp,20481
803f6ea0:	d9 aa 40 85 	lea %sp,[%sp]22016 <50015600 <__USTACK2>>
    __asm__ volatile ("dsync" : : : "memory");
803f6ea4:	0d 00 80 04 	dsync 
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
803f6ea8:	3b 00 98 30 	mov %d3,2432
803f6eac:	cd 43 e0 0f 	mtcr $psw,%d3
    if (watchdog->CON0.B.LCK)
803f6eb0:	54 23       	ld.w %d3,[%a2]
803f6eb2:	6f 13 be 80 	jnz.t %d3,1,803f702e <x+0x6>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f6eb6:	06 22       	sh %d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f6eb8:	91 30 00 2f 	movh.a %a2,61443
803f6ebc:	19 24 24 96 	ld.w %d4,[%a2]25188 <f0036264 <_START2_end+0x4fc3fe38>>
803f6ec0:	d9 22 24 96 	lea %a2,[%a2]25188 <f0036264 <_START2_end+0x4fc3fe38>>
803f6ec4:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
803f6ec8:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f6eca:	a6 24       	or %d4,%d2
803f6ecc:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f6ed0:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
803f6ed2:	54 24       	ld.w %d4,[%a2]
803f6ed4:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
803f6ed8:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
803f6edc:	cd 03 04 09 	mtcr $dcon0,%d3
803f6ee0:	0d 00 c0 04 	isync 
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(2));
803f6ee4:	91 00 03 38 	movh.a %a3,32816
803f6ee8:	80 33       	mov.d %d3,%a3
803f6eea:	1b 03 30 30 	addi %d3,%d3,768
803f6eee:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(2));
803f6ef2:	91 f0 03 38 	movh.a %a3,32831
803f6ef6:	80 33       	mov.d %d3,%a3
803f6ef8:	1b 03 40 34 	addi %d3,%d3,17408
803f6efc:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(2));
803f6f00:	91 10 00 35 	movh.a %a3,20481
803f6f04:	80 33       	mov.d %d3,%a3
803f6f06:	1b 03 b0 35 	addi %d3,%d3,23296
803f6f0a:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
803f6f0e:	54 23       	ld.w %d3,[%a2]
803f6f10:	6f 13 09 00 	jz.t %d3,1,803f6f22 <__Core2_start+0x9c>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f6f14:	54 23       	ld.w %d3,[%a2]
803f6f16:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f6f1a:	a6 23       	or %d3,%d2
803f6f1c:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f6f20:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f6f22:	91 30 00 2f 	movh.a %a2,61443
803f6f26:	19 23 24 96 	ld.w %d3,[%a2]25188 <f0036264 <_START2_end+0x4fc3fe38>>
803f6f2a:	d9 22 24 96 	lea %a2,[%a2]25188 <f0036264 <_START2_end+0x4fc3fe38>>
803f6f2e:	b7 03 10 30 	insert %d3,%d3,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f6f32:	a6 32       	or %d2,%d3
803f6f34:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f6f38:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
803f6f3a:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setAddressReg(a0, __SDATA1(2));
803f6f3c:	91 10 00 07 	movh.a %a0,28673
803f6f40:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a1, __SDATA2(2));
803f6f44:	91 10 00 18 	movh.a %a1,32769
803f6f48:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(2));
803f6f4c:	91 10 00 88 	movh.a %a8,32769
803f6f50:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(2));
803f6f54:	91 10 00 99 	movh.a %a9,36865
803f6f58:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
803f6f5c:	91 10 00 35 	movh.a %a3,20481
803f6f60:	91 10 00 25 	movh.a %a2,20481
803f6f64:	d9 33 c0 05 	lea %a3,[%a3]23552 <50015c00 <__CSA2>>
803f6f68:	d9 22 c0 07 	lea %a2,[%a2]31744 <50017c00 <__CSA2_END>>
803f6f6c:	01 32 20 20 	sub.a %a2,%a2,%a3
803f6f70:	80 22       	mov.d %d2,%a2
803f6f72:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
803f6f76:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
803f6f78:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
803f6f7c:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
803f6f7e:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
803f6f80:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
803f6f84:	df 06 2d 00 	jeq %d6,0,803f6fde <__Core2_start+0x158>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
803f6f88:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
803f6f8c:	8f 42 1f 50 	sh %d5,%d2,-12
803f6f90:	26 75       	and %d5,%d7
803f6f92:	a6 54       	or %d4,%d5
        if (k == 0U)
803f6f94:	df 03 14 00 	jeq %d3,0,803f6fbc <__Core2_start+0x136>
            *prvCsa = nxt_cxi_val;
803f6f98:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
803f6f9a:	5f 03 15 00 	jeq %d3,%d0,803f6fc4 <__Core2_start+0x13e>
    for (k = 0U; k < numOfCsa; k++)
803f6f9e:	c2 13       	add %d3,1
803f6fa0:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
803f6fa2:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
803f6fa6:	5f 36 17 00 	jeq %d6,%d3,803f6fd4 <__Core2_start+0x14e>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
803f6faa:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
803f6fac:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
803f6fb0:	8f 42 1f 50 	sh %d5,%d2,-12
803f6fb4:	26 75       	and %d5,%d7
803f6fb6:	a6 54       	or %d4,%d5
        if (k == 0U)
803f6fb8:	df 03 f0 ff 	jne %d3,0,803f6f98 <__Core2_start+0x112>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
803f6fbc:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
803f6fc0:	5f 03 ef ff 	jne %d3,%d0,803f6f9e <__Core2_start+0x118>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
803f6fc4:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
803f6fc8:	c2 13       	add %d3,1
803f6fca:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
803f6fcc:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
803f6fd0:	5f 36 ed ff 	jne %d6,%d3,803f6faa <__Core2_start+0x124>
803f6fd4:	1b f6 ff 2f 	addi %d2,%d6,-1
803f6fd8:	06 62       	sh %d2,6
803f6fda:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
803f6fde:	82 02       	mov %d2,0
803f6fe0:	74 22       	st.w [%a2],%d2
    __asm__ volatile ("dsync" : : : "memory");
803f6fe2:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
803f6fe6:	0d 00 c0 04 	isync 
    stmCount = (unsigned int)(Ifx_Ssw_getStmFrequency() * IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS);
803f6fea:	6d 00 98 1b 	call 803fa71a <Ifx_Ssw_getStmFrequency>
803f6fee:	02 24       	mov %d4,%d2
803f6ff0:	6d 00 c6 00 	call 803f717c <__extendsfdf2>
803f6ff4:	0b 23 10 48 	mov %e4,%d3,%d2
803f6ff8:	7b c0 b1 6e 	movh %d6,60188
803f6ffc:	7b a0 f1 73 	movh %d7,16154
803f7000:	1b d6 32 64 	addi %d6,%d6,17197
803f7004:	1b 27 6e 73 	addi %d7,%d7,14050
803f7008:	6d 00 3f 02 	call 803f7486 <__muldf3>
803f700c:	0b 23 10 48 	mov %e4,%d3,%d2
803f7010:	6d 00 9a 00 	call 803f7144 <__fixunsdfsi>
    while ((unsigned int)(STM0_TIM0.U - stmCountBegin) < stmCount)
803f7014:	85 f3 10 01 	ld.w %d3,f0001010 <_START2_end+0x4fc0abe4>
803f7018:	a2 83       	sub %d3,%d8
803f701a:	3f 23 fd ff 	jlt.u %d3,%d2,803f7014 <__Core2_start+0x18e>
    __asm__ volatile ("ji %0" ::"a" (fun));
803f701e:	91 f0 03 28 	movh.a %a2,32831
803f7022:	d9 22 02 17 	lea %a2,[%a2]28738 <803f7042 <core2_main>>
803f7026:	dc 02       	ji %a2

803f7028 <x>:
    __asm("x: loopu\t x");
803f7028:	fd 00 00 80 	loopu 803f7028 <x>
}
803f702c:	00 90       	ret 
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f702e:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f7030:	06 22       	sh %d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f7032:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f7036:	a6 23       	or %d3,%d2
803f7038:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f703c:	74 23       	st.w [%a2],%d3
803f703e:	1d ff 3d ff 	j 803f6eb8 <__Core2_start+0x32>

803f7042 <core2_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core2_main(void)
{
803f7042:	40 ae       	mov.aa %a14,%sp
    __enable();
803f7044:	0d 00 00 03 	enable 
}
803f7048:	00 00       	nop 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG2 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
803f704a:	6d 00 62 13 	call 803f970e <IfxScuWdt_getCpuWatchdogPassword>
803f704e:	02 24       	mov %d4,%d2
803f7050:	6d 00 20 12 	call 803f9490 <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
803f7054:	91 00 00 27 	movh.a %a2,28672
803f7058:	d9 24 08 00 	lea %a4,[%a2]8 <70000008 <g_cpuSyncEvent>>
803f705c:	6d 00 97 17 	call 803f9f8a <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
803f7060:	82 14       	mov %d4,1
803f7062:	91 00 00 27 	movh.a %a2,28672
803f7066:	d9 24 08 00 	lea %a4,[%a2]8 <70000008 <g_cpuSyncEvent>>
803f706a:	6d 00 24 17 	call 803f9eb2 <IfxCpu_waitEvent>
    
    while(1)
803f706e:	1d 00 00 00 	j 803f706e <core2_main+0x2c>

Disassembly of section .text:

803f7072 <deregister_tm_clones>:
803f7072:	7b 00 00 27 	movh %d2,28672
803f7076:	1b 02 00 20 	addi %d2,%d2,0
803f707a:	91 00 00 47 	movh.a %a4,28672
803f707e:	60 22       	mov.a %a2,%d2
803f7080:	d9 44 00 00 	lea %a4,[%a4]0 <70000000 <__TMC_END__>>
803f7084:	7d 42 0a 00 	jeq.a %a2,%a4,803f7098 <deregister_tm_clones+0x26>
803f7088:	91 00 00 20 	movh.a %a2,0
803f708c:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x380>>
803f7090:	bd 02 04 00 	jz.a %a2,803f7098 <deregister_tm_clones+0x26>
803f7094:	2d 02 00 00 	calli %a2
803f7098:	00 90       	ret 

803f709a <register_tm_clones>:
803f709a:	7b 00 00 27 	movh %d2,28672
803f709e:	1b 02 00 20 	addi %d2,%d2,0
803f70a2:	91 00 00 47 	movh.a %a4,28672
803f70a6:	60 22       	mov.a %a2,%d2
803f70a8:	d9 44 00 00 	lea %a4,[%a4]0 <70000000 <__TMC_END__>>
803f70ac:	01 42 20 20 	sub.a %a2,%a2,%a4
803f70b0:	80 22       	mov.d %d2,%a2
803f70b2:	8f e2 3f 30 	sha %d3,%d2,-2
803f70b6:	8f 12 1e 20 	sh %d2,%d2,-31
803f70ba:	42 32       	add %d2,%d3
803f70bc:	8f f2 3f 40 	sha %d4,%d2,-1
803f70c0:	df 04 0a 00 	jeq %d4,0,803f70d4 <register_tm_clones+0x3a>
803f70c4:	91 00 00 20 	movh.a %a2,0
803f70c8:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x380>>
803f70cc:	bd 02 04 00 	jz.a %a2,803f70d4 <register_tm_clones+0x3a>
803f70d0:	2d 02 00 00 	calli %a2
803f70d4:	00 90       	ret 

803f70d6 <__do_global_dtors_aux>:
803f70d6:	91 00 00 e7 	movh.a %a14,28672
803f70da:	39 e2 00 00 	ld.bu %d2,[%a14]0 <70000000 <__TMC_END__>>
803f70de:	df 02 2d 80 	jne %d2,0,803f7138 <__do_global_dtors_aux+0x62>
803f70e2:	91 00 04 38 	movh.a %a3,32832
803f70e6:	91 00 04 28 	movh.a %a2,32832
803f70ea:	d9 33 f8 3a 	lea %a3,[%a3]-21256 <803facf8 <__DTOR_END__>>
803f70ee:	d9 22 ec 3a 	lea %a2,[%a2]-21268 <803facec <__DTOR_LIST__>>
803f70f2:	01 23 20 20 	sub.a %a2,%a3,%a2
803f70f6:	80 22       	mov.d %d2,%a2
803f70f8:	86 e2       	sha %d2,-2
803f70fa:	1b f2 ff 8f 	addi %d8,%d2,-1
803f70fe:	91 00 00 c7 	movh.a %a12,28672
803f7102:	7b 00 04 28 	movh %d2,32832
803f7106:	1b c2 ce 2a 	addi %d2,%d2,-21268
803f710a:	60 2d       	mov.a %a13,%d2
803f710c:	19 c2 04 00 	ld.w %d2,[%a12]4 <70000004 <dtor_idx.0>>
803f7110:	7f 82 0f 80 	jge.u %d2,%d8,803f712e <__do_global_dtors_aux+0x58>
803f7114:	d9 cc 04 00 	lea %a12,[%a12]4 <70000004 <dtor_idx.0>>
803f7118:	c2 12       	add %d2,1
803f711a:	74 c2       	st.w [%a12],%d2
803f711c:	06 22       	sh %d2,2
803f711e:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
803f7122:	d4 22       	ld.a %a2,[%a2]
803f7124:	2d 02 00 00 	calli %a2
803f7128:	54 c2       	ld.w %d2,[%a12]
803f712a:	3f 82 f7 ff 	jlt.u %d2,%d8,803f7118 <__do_global_dtors_aux+0x42>
803f712e:	6d ff a2 ff 	call 803f7072 <deregister_tm_clones>
803f7132:	82 12       	mov %d2,1
803f7134:	e9 e2 00 00 	st.b [%a14]0 <70000000 <__TMC_END__>>,%d2
803f7138:	00 90       	ret 

803f713a <call___do_global_dtors_aux>:
803f713a:	00 90       	ret 

803f713c <frame_dummy>:
803f713c:	6d ff af ff 	call 803f709a <register_tm_clones>
803f7140:	00 90       	ret 

803f7142 <call_frame_dummy>:
803f7142:	00 90       	ret 

803f7144 <__fixunsdfsi>:
803f7144:	82 06       	mov %d6,0
803f7146:	7b 00 1e 74 	movh %d7,16864
803f714a:	60 4d       	mov.a %a13,%d4
803f714c:	60 5c       	mov.a %a12,%d5
803f714e:	6d 00 ae 02 	call 803f76aa <__gedf2>
803f7152:	ff 02 07 00 	jge %d2,0,803f7160 <__fixunsdfsi+0x1c>
803f7156:	80 d4       	mov.d %d4,%a13
803f7158:	80 c5       	mov.d %d5,%a12
803f715a:	6d 00 c8 02 	call 803f76ea <__fixdfsi>
803f715e:	00 90       	ret 
803f7160:	82 06       	mov %d6,0
803f7162:	7b 00 1e 74 	movh %d7,16864
803f7166:	80 d4       	mov.d %d4,%a13
803f7168:	80 c5       	mov.d %d5,%a12
803f716a:	6d 00 6b 01 	call 803f7440 <__subdf3>
803f716e:	0b 23 10 48 	mov %e4,%d3,%d2
803f7172:	6d 00 bc 02 	call 803f76ea <__fixdfsi>
803f7176:	9b 02 00 28 	addih %d2,%d2,32768
803f717a:	00 90       	ret 

803f717c <__extendsfdf2>:
803f717c:	20 20       	sub.a %sp,32
803f717e:	d9 a5 10 00 	lea %a5,[%sp]16
803f7182:	d9 a4 0c 00 	lea %a4,[%sp]12
803f7186:	59 a4 0c 00 	st.w [%sp]12,%d4
803f718a:	6d 00 fe 02 	call 803f7786 <__unpack_f>
803f718e:	19 a2 1c 00 	ld.w %d2,[%sp]28
803f7192:	19 a6 18 00 	ld.w %d6,[%sp]24
803f7196:	53 12 40 40 	mul.u %e4,%d2,1
803f719a:	77 45 00 3f 	dextr %d3,%d5,%d4,30
803f719e:	8f e4 01 20 	sh %d2,%d4,30
803f71a2:	19 a5 14 00 	ld.w %d5,[%sp]20
803f71a6:	19 a4 10 00 	ld.w %d4,[%sp]16
803f71aa:	74 a2       	st.w [%sp],%d2
803f71ac:	59 a3 04 00 	st.w [%sp]4,%d3
803f71b0:	6d 00 db 02 	call 803f7766 <__make_dp>
803f71b4:	00 90       	ret 

803f71b6 <_fpadd_parts>:
803f71b6:	54 42       	ld.w %d2,[%a4]
803f71b8:	40 42       	mov.aa %a2,%a4
803f71ba:	bf 22 c2 80 	jlt.u %d2,2,803f733e <_fpadd_parts+0x188>
803f71be:	54 53       	ld.w %d3,[%a5]
803f71c0:	40 52       	mov.aa %a2,%a5
803f71c2:	bf 23 be 80 	jlt.u %d3,2,803f733e <_fpadd_parts+0x188>
803f71c6:	df 42 e3 00 	jeq %d2,4,803f738c <_fpadd_parts+0x1d6>
803f71ca:	df 43 ba 00 	jeq %d3,4,803f733e <_fpadd_parts+0x188>
803f71ce:	df 23 b9 00 	jeq %d3,2,803f7340 <_fpadd_parts+0x18a>
803f71d2:	df 22 b6 00 	jeq %d2,2,803f733e <_fpadd_parts+0x188>
803f71d6:	19 40 08 00 	ld.w %d0,[%a4]8
803f71da:	19 57 08 00 	ld.w %d7,[%a5]8
803f71de:	09 44 4c 09 	ld.d %e4,[%a4]12
803f71e2:	0b 70 80 60 	sub %d6,%d0,%d7
803f71e6:	09 52 4c 09 	ld.d %e2,[%a5]12
803f71ea:	bf 06 c2 00 	jlt %d6,0,803f736e <_fpadd_parts+0x1b8>
803f71ee:	8b 06 84 12 	ge %d1,%d6,64
803f71f2:	df 01 c4 80 	jne %d1,0,803f737a <_fpadd_parts+0x1c4>
803f71f6:	df 06 2a 00 	jeq %d6,0,803f724a <_fpadd_parts+0x94>
803f71fa:	8b 06 82 72 	ge %d7,%d6,32
803f71fe:	2b 32 50 97 	seln %d9,%d7,%d2,%d3
803f7202:	ab 03 a0 87 	seln %d8,%d7,%d3,0
803f7206:	8f f6 01 71 	and %d7,%d6,31
803f720a:	8b 07 02 11 	rsub %d1,%d7,32
803f720e:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
803f7212:	2b 91 40 17 	sel %d1,%d7,%d1,%d9
803f7216:	8b 06 82 a2 	ge %d10,%d6,32
803f721a:	32 57       	rsub %d7
803f721c:	02 19       	mov %d9,%d1
803f721e:	8f f6 01 61 	and %d6,%d6,31
803f7222:	82 f1       	mov %d1,-1
803f7224:	0f 78 00 80 	sh %d8,%d8,%d7
803f7228:	17 11 80 76 	dextr %d7,%d1,%d1,%d6
803f722c:	0f 61 00 60 	sh %d6,%d1,%d6
803f7230:	2b 67 50 7a 	seln %d7,%d10,%d7,%d6
803f7234:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
803f7238:	0f 62 e0 10 	andn %d1,%d2,%d6
803f723c:	0f 73 e0 60 	andn %d6,%d3,%d7
803f7240:	a6 16       	or %d6,%d1
803f7242:	8b 06 00 95 	or.ne %d9,%d6,0
803f7246:	0b 98 10 28 	mov %e2,%d8,%d9
803f724a:	19 41 04 00 	ld.w %d1,[%a4]4
803f724e:	19 56 04 00 	ld.w %d6,[%a5]4
803f7252:	5f 61 4c 00 	jeq %d1,%d6,803f72ea <_fpadd_parts+0x134>
803f7256:	0b 24 c0 60 	subx %d6,%d4,%d2
803f725a:	0b 35 d0 70 	subc %d7,%d5,%d3
803f725e:	df 01 06 00 	jeq %d1,0,803f726a <_fpadd_parts+0xb4>
803f7262:	0b 42 c0 60 	subx %d6,%d2,%d4
803f7266:	0b 53 d0 70 	subc %d7,%d3,%d5
803f726a:	8b 07 00 31 	rsub %d3,%d7,0
803f726e:	8b 06 00 91 	rsub %d9,%d6,0
803f7272:	ab f3 1f 36 	cadd %d3,%d6,%d3,-1
803f7276:	82 12       	mov %d2,1
803f7278:	bf 07 05 00 	jlt %d7,0,803f7282 <_fpadd_parts+0xcc>
803f727c:	02 69       	mov %d9,%d6
803f727e:	02 73       	mov %d3,%d7
803f7280:	82 02       	mov %d2,0
803f7282:	8b f9 9f 70 	addx %d7,%d9,-1
803f7286:	82 f5       	mov %d5,-1
803f7288:	8b f3 bf 60 	addc %d6,%d3,-1
803f728c:	06 c5       	sh %d5,-4
803f728e:	59 62 04 00 	st.w [%a6]4,%d2
803f7292:	82 e1       	mov %d1,-2
803f7294:	0b 56 00 21 	eq %d2,%d6,%d5
803f7298:	0b 71 30 22 	and.lt.u %d2,%d1,%d7
803f729c:	59 60 08 00 	st.w [%a6]8,%d0
803f72a0:	59 69 0c 00 	st.w [%a6]12,%d9
803f72a4:	59 63 10 00 	st.w [%a6]16,%d3
803f72a8:	0b 65 a0 22 	or.lt.u %d2,%d5,%d6
803f72ac:	df 02 2b 80 	jne %d2,0,803f7302 <_fpadd_parts+0x14c>
803f72b0:	1b f0 ff 7f 	addi %d7,%d0,-1
803f72b4:	77 93 80 30 	dextr %d3,%d3,%d9,1
803f72b8:	06 19       	sh %d9,1
803f72ba:	8b f9 9f 00 	addx %d0,%d9,-1
803f72be:	8b f3 bf 60 	addc %d6,%d3,-1
803f72c2:	0b 56 00 21 	eq %d2,%d6,%d5
803f72c6:	0b 01 50 22 	and.ge.u %d2,%d1,%d0
803f72ca:	0b 56 a0 22 	or.lt.u %d2,%d6,%d5
803f72ce:	02 78       	mov %d8,%d7
803f72d0:	c2 f7       	add %d7,-1
803f72d2:	df 02 f1 ff 	jne %d2,0,803f72b4 <_fpadd_parts+0xfe>
803f72d6:	82 32       	mov %d2,3
803f72d8:	59 69 0c 00 	st.w [%a6]12,%d9
803f72dc:	59 63 10 00 	st.w [%a6]16,%d3
803f72e0:	59 68 08 00 	st.w [%a6]8,%d8
803f72e4:	74 62       	st.w [%a6],%d2
803f72e6:	40 62       	mov.aa %a2,%a6
803f72e8:	00 90       	ret 
803f72ea:	0b 24 40 90 	addx %d9,%d4,%d2
803f72ee:	0b 35 50 30 	addc %d3,%d5,%d3
803f72f2:	59 61 04 00 	st.w [%a6]4,%d1
803f72f6:	59 60 08 00 	st.w [%a6]8,%d0
803f72fa:	59 69 0c 00 	st.w [%a6]12,%d9
803f72fe:	59 63 10 00 	st.w [%a6]16,%d3
803f7302:	82 32       	mov %d2,3
803f7304:	7b 00 00 52 	movh %d5,8192
803f7308:	40 62       	mov.aa %a2,%a6
803f730a:	74 62       	st.w [%a6],%d2
803f730c:	0b 53 00 21 	eq %d2,%d3,%d5
803f7310:	b7 02 01 20 	insert %d2,%d2,0,0,1
803f7314:	0b 53 a0 22 	or.lt.u %d2,%d3,%d5
803f7318:	df 02 13 80 	jne %d2,0,803f733e <_fpadd_parts+0x188>
803f731c:	8f f3 1f 20 	sh %d2,%d3,-1
803f7320:	77 93 80 5f 	dextr %d5,%d3,%d9,31
803f7324:	8f 19 00 31 	and %d3,%d9,1
803f7328:	59 62 10 00 	st.w [%a6]16,%d2
803f732c:	19 62 08 00 	ld.w %d2,[%a6]8
803f7330:	a6 53       	or %d3,%d5
803f7332:	c2 12       	add %d2,1
803f7334:	d9 63 08 00 	lea %a3,[%a6]8
803f7338:	59 63 0c 00 	st.w [%a6]12,%d3
803f733c:	74 32       	st.w [%a3],%d2
803f733e:	00 90       	ret 
803f7340:	40 42       	mov.aa %a2,%a4
803f7342:	df 22 fe ff 	jne %d2,2,803f733e <_fpadd_parts+0x188>
803f7346:	40 63       	mov.aa %a3,%a6
803f7348:	09 44 48 01 	ld.d %e4,[%a4+]8
803f734c:	89 34 48 01 	st.d [%a3+]8,%e4
803f7350:	09 44 48 01 	ld.d %e4,[%a4+]8
803f7354:	89 34 48 01 	st.d [%a3+]8,%e4
803f7358:	44 44       	ld.w %d4,[%a4+]
803f735a:	64 34       	st.w [%a3+],%d4
803f735c:	19 23 04 00 	ld.w %d3,[%a2]4
803f7360:	19 52 04 00 	ld.w %d2,[%a5]4
803f7364:	40 62       	mov.aa %a2,%a6
803f7366:	26 32       	and %d2,%d3
803f7368:	59 62 04 00 	st.w [%a6]4,%d2
803f736c:	00 90       	ret 
803f736e:	0b 07 80 60 	sub %d6,%d7,%d0
803f7372:	8b 06 44 12 	lt %d1,%d6,64
803f7376:	df 01 1d 80 	jne %d1,0,803f73b0 <_fpadd_parts+0x1fa>
803f737a:	3f 07 06 00 	jlt %d7,%d0,803f7386 <_fpadd_parts+0x1d0>
803f737e:	d2 04       	mov %e4,0
803f7380:	02 70       	mov %d0,%d7
803f7382:	1d ff 64 ff 	j 803f724a <_fpadd_parts+0x94>
803f7386:	d2 02       	mov %e2,0
803f7388:	1d ff 61 ff 	j 803f724a <_fpadd_parts+0x94>
803f738c:	40 42       	mov.aa %a2,%a4
803f738e:	df 43 d8 ff 	jne %d3,4,803f733e <_fpadd_parts+0x188>
803f7392:	19 43 04 00 	ld.w %d3,[%a4]4
803f7396:	19 52 04 00 	ld.w %d2,[%a5]4
803f739a:	7b f0 03 48 	movh %d4,32831
803f739e:	0b 23 10 21 	ne %d2,%d3,%d2
803f73a2:	1b c4 42 46 	addi %d4,%d4,25644
803f73a6:	80 43       	mov.d %d3,%a4
803f73a8:	2b 43 50 22 	seln %d2,%d2,%d3,%d4
803f73ac:	60 22       	mov.a %a2,%d2
803f73ae:	00 90       	ret 
803f73b0:	8b 06 82 02 	ge %d0,%d6,32
803f73b4:	2b 54 50 90 	seln %d9,%d0,%d4,%d5
803f73b8:	ab 05 a0 80 	seln %d8,%d0,%d5,0
803f73bc:	8f f6 01 01 	and %d0,%d6,31
803f73c0:	8b 00 02 11 	rsub %d1,%d0,32
803f73c4:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
803f73c8:	2b 91 40 10 	sel %d1,%d0,%d1,%d9
803f73cc:	8b 06 82 a2 	ge %d10,%d6,32
803f73d0:	32 50       	rsub %d0
803f73d2:	02 19       	mov %d9,%d1
803f73d4:	8f f6 01 61 	and %d6,%d6,31
803f73d8:	82 f1       	mov %d1,-1
803f73da:	0f 08 00 80 	sh %d8,%d8,%d0
803f73de:	17 11 80 06 	dextr %d0,%d1,%d1,%d6
803f73e2:	0f 61 00 60 	sh %d6,%d1,%d6
803f73e6:	2b 60 50 0a 	seln %d0,%d10,%d0,%d6
803f73ea:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
803f73ee:	0f 64 e0 10 	andn %d1,%d4,%d6
803f73f2:	0f 05 e0 60 	andn %d6,%d5,%d0
803f73f6:	a6 16       	or %d6,%d1
803f73f8:	8b 06 00 95 	or.ne %d9,%d6,0
803f73fc:	0b 98 10 48 	mov %e4,%d8,%d9
803f7400:	02 70       	mov %d0,%d7
803f7402:	1d ff 24 ff 	j 803f724a <_fpadd_parts+0x94>

803f7406 <__adddf3>:
803f7406:	20 50       	sub.a %sp,80
803f7408:	d9 a5 14 00 	lea %a5,[%sp]20
803f740c:	d9 a4 04 00 	lea %a4,[%sp]4
803f7410:	89 a4 44 09 	st.d [%sp]4,%e4
803f7414:	89 a6 4c 09 	st.d [%sp]12,%e6
803f7418:	6d 00 ca 02 	call 803f79ac <__unpack_d>
803f741c:	d9 a5 28 00 	lea %a5,[%sp]40
803f7420:	d9 a4 0c 00 	lea %a4,[%sp]12
803f7424:	6d 00 c4 02 	call 803f79ac <__unpack_d>
803f7428:	d9 a4 14 00 	lea %a4,[%sp]20
803f742c:	d9 a6 3c 00 	lea %a6,[%sp]60
803f7430:	d9 a5 28 00 	lea %a5,[%sp]40
803f7434:	6d ff c1 fe 	call 803f71b6 <_fpadd_parts>
803f7438:	40 24       	mov.aa %a4,%a2
803f743a:	6d 00 ea 01 	call 803f780e <__pack_d>
803f743e:	00 90       	ret 

803f7440 <__subdf3>:
803f7440:	20 50       	sub.a %sp,80
803f7442:	d9 a5 14 00 	lea %a5,[%sp]20
803f7446:	d9 a4 04 00 	lea %a4,[%sp]4
803f744a:	89 a4 44 09 	st.d [%sp]4,%e4
803f744e:	89 a6 4c 09 	st.d [%sp]12,%e6
803f7452:	6d 00 ad 02 	call 803f79ac <__unpack_d>
803f7456:	d9 a5 28 00 	lea %a5,[%sp]40
803f745a:	d9 a4 0c 00 	lea %a4,[%sp]12
803f745e:	6d 00 a7 02 	call 803f79ac <__unpack_d>
803f7462:	19 a2 2c 00 	ld.w %d2,[%sp]44
803f7466:	d9 a4 14 00 	lea %a4,[%sp]20
803f746a:	8f 12 80 21 	xor %d2,%d2,1
803f746e:	d9 a6 3c 00 	lea %a6,[%sp]60
803f7472:	d9 a5 28 00 	lea %a5,[%sp]40
803f7476:	59 a2 2c 00 	st.w [%sp]44,%d2
803f747a:	6d ff 9e fe 	call 803f71b6 <_fpadd_parts>
803f747e:	40 24       	mov.aa %a4,%a2
803f7480:	6d 00 c7 01 	call 803f780e <__pack_d>
803f7484:	00 90       	ret 

803f7486 <__muldf3>:
803f7486:	20 50       	sub.a %sp,80
803f7488:	d9 a5 14 00 	lea %a5,[%sp]20
803f748c:	d9 a4 04 00 	lea %a4,[%sp]4
803f7490:	89 a4 44 09 	st.d [%sp]4,%e4
803f7494:	89 a6 4c 09 	st.d [%sp]12,%e6
803f7498:	6d 00 8a 02 	call 803f79ac <__unpack_d>
803f749c:	d9 a5 28 00 	lea %a5,[%sp]40
803f74a0:	d9 a4 0c 00 	lea %a4,[%sp]12
803f74a4:	6d 00 84 02 	call 803f79ac <__unpack_d>
803f74a8:	19 a2 14 00 	ld.w %d2,[%sp]20
803f74ac:	ff 22 0f 80 	jge.u %d2,2,803f74ca <__muldf3+0x44>
803f74b0:	19 a3 18 00 	ld.w %d3,[%sp]24
803f74b4:	19 a2 2c 00 	ld.w %d2,[%sp]44
803f74b8:	d9 a4 14 00 	lea %a4,[%sp]20
803f74bc:	0b 23 10 21 	ne %d2,%d3,%d2
803f74c0:	59 a2 18 00 	st.w [%sp]24,%d2
803f74c4:	6d 00 a5 01 	call 803f780e <__pack_d>
803f74c8:	00 90       	ret 
803f74ca:	19 a3 28 00 	ld.w %d3,[%sp]40
803f74ce:	bf 23 14 80 	jlt.u %d3,2,803f74f6 <__muldf3+0x70>
803f74d2:	df 42 0a 80 	jne %d2,4,803f74e6 <__muldf3+0x60>
803f74d6:	91 f0 03 48 	movh.a %a4,32831
803f74da:	d9 44 6c 06 	lea %a4,[%a4]25644 <803f642c <__thenan_df>>
803f74de:	df 23 f3 7f 	jeq %d3,2,803f74c4 <__muldf3+0x3e>
803f74e2:	1d ff e7 ff 	j 803f74b0 <__muldf3+0x2a>
803f74e6:	df 43 15 80 	jne %d3,4,803f7510 <__muldf3+0x8a>
803f74ea:	91 f0 03 48 	movh.a %a4,32831
803f74ee:	d9 44 6c 06 	lea %a4,[%a4]25644 <803f642c <__thenan_df>>
803f74f2:	df 22 e9 7f 	jeq %d2,2,803f74c4 <__muldf3+0x3e>
803f74f6:	19 a2 2c 00 	ld.w %d2,[%sp]44
803f74fa:	19 a3 18 00 	ld.w %d3,[%sp]24
803f74fe:	d9 a4 28 00 	lea %a4,[%sp]40
803f7502:	0b 23 10 21 	ne %d2,%d3,%d2
803f7506:	59 a2 2c 00 	st.w [%sp]44,%d2
803f750a:	6d 00 82 01 	call 803f780e <__pack_d>
803f750e:	00 90       	ret 
803f7510:	19 a5 2c 00 	ld.w %d5,[%sp]44
803f7514:	19 a4 18 00 	ld.w %d4,[%sp]24
803f7518:	0b 45 10 a1 	ne %d10,%d5,%d4
803f751c:	df 22 aa 00 	jeq %d2,2,803f7670 <__muldf3+0x1ea>
803f7520:	df 23 ae 00 	jeq %d3,2,803f767c <__muldf3+0x1f6>
803f7524:	19 a6 34 00 	ld.w %d6,[%sp]52
803f7528:	19 a4 20 00 	ld.w %d4,[%sp]32
803f752c:	82 03       	mov %d3,0
803f752e:	73 46 68 00 	mul.u %e0,%d6,%d4
803f7532:	19 a2 38 00 	ld.w %d2,[%sp]56
803f7536:	82 0b       	mov %d11,0
803f7538:	03 36 0a 11 	madd %d1,%d1,%d6,%d3
803f753c:	02 48       	mov %d8,%d4
803f753e:	19 a7 24 00 	ld.w %d7,[%sp]36
803f7542:	03 4b 0a 11 	madd %d1,%d1,%d11,%d4
803f7546:	73 42 68 40 	mul.u %e4,%d2,%d4
803f754a:	82 0d       	mov %d13,0
803f754c:	82 0c       	mov %d12,0
803f754e:	03 32 0a 55 	madd %d5,%d5,%d2,%d3
803f7552:	03 8d 0a 55 	madd %d5,%d5,%d13,%d8
803f7556:	73 27 68 80 	mul.u %e8,%d7,%d2
803f755a:	03 d7 0a 99 	madd %d9,%d9,%d7,%d13
803f755e:	03 2c 0a 99 	madd %d9,%d9,%d12,%d2
803f7562:	03 67 68 24 	madd.u %e2,%e4,%d7,%d6
803f7566:	03 b7 0a 33 	madd %d3,%d3,%d7,%d11
803f756a:	03 6c 0a 33 	madd %d3,%d3,%d12,%d6
803f756e:	0b 35 00 61 	eq %d6,%d5,%d3
803f7572:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
803f7576:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
803f757a:	02 67       	mov %d7,%d6
803f757c:	82 06       	mov %d6,0
803f757e:	0b 06 40 60 	addx %d6,%d6,%d0
803f7582:	0b 12 50 50 	addc %d5,%d2,%d1
803f7586:	0b 51 00 41 	eq %d4,%d1,%d5
803f758a:	0b 06 50 42 	and.ge.u %d4,%d6,%d0
803f758e:	0b 51 a0 42 	or.lt.u %d4,%d1,%d5
803f7592:	df 04 06 80 	jne %d4,0,803f759e <__muldf3+0x118>
803f7596:	8b 1b 80 b0 	addx %d11,%d11,1
803f759a:	8b 07 a0 70 	addc %d7,%d7,0
803f759e:	82 04       	mov %d4,0
803f75a0:	0b 83 40 30 	addx %d3,%d3,%d8
803f75a4:	0b 94 50 20 	addc %d2,%d4,%d9
803f75a8:	0b b3 40 30 	addx %d3,%d3,%d11
803f75ac:	0b 72 50 20 	addc %d2,%d2,%d7
803f75b0:	19 a4 1c 00 	ld.w %d4,[%sp]28
803f75b4:	19 a7 30 00 	ld.w %d7,[%sp]48
803f75b8:	59 aa 00 10 	st.w [%sp]64,%d10
803f75bc:	0b 74 00 10 	add %d1,%d4,%d7
803f75c0:	7b 00 00 42 	movh %d4,8192
803f75c4:	1b 41 00 00 	addi %d0,%d1,4
803f75c8:	0b 42 00 71 	eq %d7,%d2,%d4
803f75cc:	b7 07 01 70 	insert %d7,%d7,0,0,1
803f75d0:	59 a0 04 10 	st.w [%sp]68,%d0
803f75d4:	0b 42 a0 72 	or.lt.u %d7,%d2,%d4
803f75d8:	df 07 2b 80 	jne %d7,0,803f762e <__muldf3+0x1a8>
803f75dc:	1b 51 00 70 	addi %d7,%d1,5
803f75e0:	8f 13 00 01 	and %d0,%d3,1
803f75e4:	02 71       	mov %d1,%d7
803f75e6:	df 00 07 00 	jeq %d0,0,803f75f4 <__muldf3+0x16e>
803f75ea:	77 65 80 6f 	dextr %d6,%d5,%d6,31
803f75ee:	06 f5       	sh %d5,-1
803f75f0:	b7 f5 81 5f 	insert %d5,%d5,15,31,1
803f75f4:	77 32 80 3f 	dextr %d3,%d2,%d3,31
803f75f8:	06 f2       	sh %d2,-1
803f75fa:	0b 24 30 01 	lt.u %d0,%d4,%d2
803f75fe:	0b 24 70 02 	or.eq %d0,%d4,%d2
803f7602:	c2 17       	add %d7,1
803f7604:	df 00 ee ff 	jne %d0,0,803f75e0 <__muldf3+0x15a>
803f7608:	59 a1 04 10 	st.w [%sp]68,%d1
803f760c:	8f f3 0f 41 	and %d4,%d3,255
803f7610:	8b 04 28 42 	ne %d4,%d4,128
803f7614:	df 04 3a 00 	jeq %d4,0,803f7688 <__muldf3+0x202>
803f7618:	59 a2 0c 10 	st.w [%sp]76,%d2
803f761c:	82 32       	mov %d2,3
803f761e:	59 a3 08 10 	st.w [%sp]72,%d3
803f7622:	d9 a4 3c 00 	lea %a4,[%sp]60
803f7626:	59 a2 3c 00 	st.w [%sp]60,%d2
803f762a:	1d ff 4d ff 	j 803f74c4 <__muldf3+0x3e>
803f762e:	7b 00 00 71 	movh %d7,4096
803f7632:	0b 27 30 41 	lt.u %d4,%d7,%d2
803f7636:	0b 27 70 42 	or.eq %d4,%d7,%d2
803f763a:	df 04 e9 ff 	jne %d4,0,803f760c <__muldf3+0x186>
803f763e:	77 32 80 20 	dextr %d2,%d2,%d3,1
803f7642:	c2 f0       	add %d0,-1
803f7644:	06 13       	sh %d3,1
803f7646:	ff 05 06 00 	jge %d5,0,803f7652 <__muldf3+0x1cc>
803f764a:	8f 13 40 11 	or %d1,%d3,1
803f764e:	0b 21 10 28 	mov %e2,%d1,%d2
803f7652:	0b 72 00 41 	eq %d4,%d2,%d7
803f7656:	b7 04 01 40 	insert %d4,%d4,0,0,1
803f765a:	77 65 80 50 	dextr %d5,%d5,%d6,1
803f765e:	0b 72 a0 42 	or.lt.u %d4,%d2,%d7
803f7662:	06 16       	sh %d6,1
803f7664:	df 04 ed ff 	jne %d4,0,803f763e <__muldf3+0x1b8>
803f7668:	59 a0 04 10 	st.w [%sp]68,%d0
803f766c:	1d ff d0 ff 	j 803f760c <__muldf3+0x186>
803f7670:	59 aa 18 00 	st.w [%sp]24,%d10
803f7674:	d9 a4 14 00 	lea %a4,[%sp]20
803f7678:	1d ff 26 ff 	j 803f74c4 <__muldf3+0x3e>
803f767c:	59 aa 2c 00 	st.w [%sp]44,%d10
803f7680:	d9 a4 28 00 	lea %a4,[%sp]40
803f7684:	1d ff 20 ff 	j 803f74c4 <__muldf3+0x3e>
803f7688:	77 32 00 4c 	dextr %d4,%d2,%d3,24
803f768c:	a6 65       	or %d5,%d6
803f768e:	8b 05 20 52 	ne %d5,%d5,0
803f7692:	0f 45 e0 40 	andn %d4,%d5,%d4
803f7696:	df 04 c1 7f 	jeq %d4,0,803f7618 <__muldf3+0x192>
803f769a:	8b 03 88 30 	addx %d3,%d3,128
803f769e:	8b 02 a0 20 	addc %d2,%d2,0
803f76a2:	8f f3 cf 31 	andn %d3,%d3,255
803f76a6:	1d ff b9 ff 	j 803f7618 <__muldf3+0x192>

803f76aa <__gedf2>:
803f76aa:	20 38       	sub.a %sp,56
803f76ac:	d9 a5 10 00 	lea %a5,[%sp]16
803f76b0:	40 a4       	mov.aa %a4,%sp
803f76b2:	89 a4 40 09 	st.d [%sp],%e4
803f76b6:	89 a6 48 09 	st.d [%sp]8,%e6
803f76ba:	6d 00 79 01 	call 803f79ac <__unpack_d>
803f76be:	d9 a5 24 00 	lea %a5,[%sp]36
803f76c2:	d9 a4 08 00 	lea %a4,[%sp]8
803f76c6:	6d 00 73 01 	call 803f79ac <__unpack_d>
803f76ca:	19 a3 10 00 	ld.w %d3,[%sp]16
803f76ce:	82 f2       	mov %d2,-1
803f76d0:	bf 23 0c 80 	jlt.u %d3,2,803f76e8 <__gedf2+0x3e>
803f76d4:	19 a3 24 00 	ld.w %d3,[%sp]36
803f76d8:	bf 23 08 80 	jlt.u %d3,2,803f76e8 <__gedf2+0x3e>
803f76dc:	d9 a5 24 00 	lea %a5,[%sp]36
803f76e0:	d9 a4 10 00 	lea %a4,[%sp]16
803f76e4:	6d 00 c3 01 	call 803f7a6a <__fpcmp_parts_d>
803f76e8:	00 90       	ret 

803f76ea <__fixdfsi>:
803f76ea:	20 20       	sub.a %sp,32
803f76ec:	d9 a5 0c 00 	lea %a5,[%sp]12
803f76f0:	d9 a4 04 00 	lea %a4,[%sp]4
803f76f4:	89 a4 44 09 	st.d [%sp]4,%e4
803f76f8:	6d 00 5a 01 	call 803f79ac <__unpack_d>
803f76fc:	19 a3 0c 00 	ld.w %d3,[%sp]12
803f7700:	82 02       	mov %d2,0
803f7702:	bf 33 25 80 	jlt.u %d3,3,803f774c <__fixdfsi+0x62>
803f7706:	df 43 29 00 	jeq %d3,4,803f7758 <__fixdfsi+0x6e>
803f770a:	19 a3 14 00 	ld.w %d3,[%sp]20
803f770e:	bf 03 1f 00 	jlt %d3,0,803f774c <__fixdfsi+0x62>
803f7712:	8b f3 41 22 	lt %d2,%d3,31
803f7716:	19 a6 10 00 	ld.w %d6,[%sp]16
803f771a:	df 02 1a 00 	jeq %d2,0,803f774e <__fixdfsi+0x64>
803f771e:	8b c3 03 21 	rsub %d2,%d3,60
803f7722:	19 a5 1c 00 	ld.w %d5,[%sp]28
803f7726:	19 a4 18 00 	ld.w %d4,[%sp]24
803f772a:	8b 02 82 32 	ge %d3,%d2,32
803f772e:	2b 54 50 43 	seln %d4,%d3,%d4,%d5
803f7732:	ab 05 a0 53 	seln %d5,%d3,%d5,0
803f7736:	8f f2 01 31 	and %d3,%d2,31
803f773a:	8b 03 02 21 	rsub %d2,%d3,32
803f773e:	17 45 80 22 	dextr %d2,%d5,%d4,%d2
803f7742:	2b 42 40 23 	sel %d2,%d3,%d2,%d4
803f7746:	df 06 03 00 	jeq %d6,0,803f774c <__fixdfsi+0x62>
803f774a:	32 52       	rsub %d2
803f774c:	00 90       	ret 
803f774e:	82 f2       	mov %d2,-1
803f7750:	06 f2       	sh %d2,-1
803f7752:	ab 12 00 26 	cadd %d2,%d6,%d2,1
803f7756:	00 90       	ret 
803f7758:	19 a3 10 00 	ld.w %d3,[%sp]16
803f775c:	82 f2       	mov %d2,-1
803f775e:	06 f2       	sh %d2,-1
803f7760:	ab 12 00 23 	cadd %d2,%d3,%d2,1
803f7764:	00 90       	ret 

803f7766 <__make_dp>:
803f7766:	20 18       	sub.a %sp,24
803f7768:	09 a2 d8 09 	ld.da %a2,[%sp]24
803f776c:	d9 a4 04 00 	lea %a4,[%sp]4
803f7770:	59 a4 04 00 	st.w [%sp]4,%d4
803f7774:	59 a5 08 00 	st.w [%sp]8,%d5
803f7778:	59 a6 0c 00 	st.w [%sp]12,%d6
803f777c:	89 a2 d0 09 	st.da [%sp]16,%a2
803f7780:	6d 00 47 00 	call 803f780e <__pack_d>
803f7784:	00 90       	ret 

803f7786 <__unpack_f>:
803f7786:	54 42       	ld.w %d2,[%a4]
803f7788:	8f 12 1e 50 	sh %d5,%d2,-31
803f778c:	37 02 e8 3b 	extr.u %d3,%d2,23,8
803f7790:	b7 02 89 4b 	insert %d4,%d2,0,23,9
803f7794:	59 55 04 00 	st.w [%a5]4,%d5
803f7798:	df 03 16 80 	jne %d3,0,803f77c4 <__unpack_f+0x3e>
803f779c:	df 04 25 00 	jeq %d4,0,803f77e6 <__unpack_f+0x60>
803f77a0:	82 33       	mov %d3,3
803f77a2:	8f 74 00 20 	sh %d2,%d4,7
803f77a6:	7b 00 00 54 	movh %d5,16384
803f77aa:	74 53       	st.w [%a5],%d3
803f77ac:	3b 10 f8 3f 	mov %d3,-127
803f77b0:	06 12       	sh %d2,1
803f77b2:	02 34       	mov %d4,%d3
803f77b4:	c2 f3       	add %d3,-1
803f77b6:	3f 52 fd ff 	jlt.u %d2,%d5,803f77b0 <__unpack_f+0x2a>
803f77ba:	59 54 08 00 	st.w [%a5]8,%d4
803f77be:	59 52 0c 00 	st.w [%a5]12,%d2
803f77c2:	00 90       	ret 
803f77c4:	8b f3 2f 52 	ne %d5,%d3,255
803f77c8:	df 05 12 00 	jeq %d5,0,803f77ec <__unpack_f+0x66>
803f77cc:	82 32       	mov %d2,3
803f77ce:	1b 13 f8 3f 	addi %d3,%d3,-127
803f77d2:	74 52       	st.w [%a5],%d2
803f77d4:	8f 74 00 20 	sh %d2,%d4,7
803f77d8:	b7 f2 01 2f 	insert %d2,%d2,15,30,1
803f77dc:	59 53 08 00 	st.w [%a5]8,%d3
803f77e0:	59 52 0c 00 	st.w [%a5]12,%d2
803f77e4:	00 90       	ret 
803f77e6:	82 22       	mov %d2,2
803f77e8:	74 52       	st.w [%a5],%d2
803f77ea:	00 90       	ret 
803f77ec:	df 04 05 80 	jne %d4,0,803f77f6 <__unpack_f+0x70>
803f77f0:	82 42       	mov %d2,4
803f77f2:	74 52       	st.w [%a5],%d2
803f77f4:	00 90       	ret 
803f77f6:	37 02 61 3b 	extr.u %d3,%d2,22,1
803f77fa:	06 72       	sh %d2,7
803f77fc:	74 53       	st.w [%a5],%d3
803f77fe:	7b 00 00 32 	movh %d3,8192
803f7802:	1b 03 f8 3f 	addi %d3,%d3,-128
803f7806:	26 32       	and %d2,%d3
803f7808:	59 52 0c 00 	st.w [%a5]12,%d2
803f780c:	00 90       	ret 

803f780e <__pack_d>:
803f780e:	54 44       	ld.w %d4,[%a4]
803f7810:	19 43 0c 00 	ld.w %d3,[%a4]12
803f7814:	19 42 10 00 	ld.w %d2,[%a4]16
803f7818:	19 41 04 00 	ld.w %d1,[%a4]4
803f781c:	bf 24 56 80 	jlt.u %d4,2,803f78c8 <__pack_d+0xba>
803f7820:	7b 00 ff 57 	movh %d5,32752
803f7824:	d2 06       	mov %e6,0
803f7826:	df 44 0b 00 	jeq %d4,4,803f783c <__pack_d+0x2e>
803f782a:	0f 23 a0 50 	or %d5,%d3,%d2
803f782e:	8b 05 00 02 	eq %d0,%d5,0
803f7832:	8b 24 e0 04 	or.eq %d0,%d4,2
803f7836:	82 05       	mov %d5,0
803f7838:	df 00 0c 00 	jeq %d0,0,803f7850 <__pack_d+0x42>
803f783c:	0b 10 00 28 	mov %e2,%d1
803f7840:	a6 75       	or %d5,%d7
803f7842:	8f f2 01 20 	sh %d2,%d2,31
803f7846:	0f 25 a0 40 	or %d4,%d5,%d2
803f784a:	02 43       	mov %d3,%d4
803f784c:	02 62       	mov %d2,%d6
803f784e:	00 90       	ret 
803f7850:	19 44 08 00 	ld.w %d4,[%a4]8
803f7854:	3b 20 c0 0f 	mov %d0,-1022
803f7858:	3f 04 41 00 	jlt %d4,%d0,803f78da <__pack_d+0xcc>
803f785c:	3b 00 40 00 	mov %d0,1024
803f7860:	7b 00 ff 57 	movh %d5,32752
803f7864:	7f 04 ec 7f 	jge %d4,%d0,803f783c <__pack_d+0x2e>
803f7868:	8f f3 0f 51 	and %d5,%d3,255
803f786c:	8b 05 28 52 	ne %d5,%d5,128
803f7870:	df 05 1b 00 	jeq %d5,0,803f78a6 <__pack_d+0x98>
803f7874:	8b f3 87 30 	addx %d3,%d3,127
803f7878:	8b 02 a0 20 	addc %d2,%d2,0
803f787c:	7b 00 00 52 	movh %d5,8192
803f7880:	0b 25 30 61 	lt.u %d6,%d5,%d2
803f7884:	0b 25 70 62 	or.eq %d6,%d5,%d2
803f7888:	df 06 19 80 	jne %d6,0,803f78ba <__pack_d+0xac>
803f788c:	1b f4 3f 40 	addi %d4,%d4,1023
803f7890:	0b 40 00 48 	mov %e4,%d4
803f7894:	77 32 00 6c 	dextr %d6,%d2,%d3,24
803f7898:	06 82       	sh %d2,-8
803f789a:	b7 02 0c 7a 	insert %d7,%d2,0,20,12
803f789e:	8f 44 01 50 	sh %d5,%d4,20
803f78a2:	1d ff cd ff 	j 803f783c <__pack_d+0x2e>
803f78a6:	8f 03 10 51 	and %d5,%d3,256
803f78aa:	df 05 e9 7f 	jeq %d5,0,803f787c <__pack_d+0x6e>
803f78ae:	8b 03 88 30 	addx %d3,%d3,128
803f78b2:	8b 02 a0 20 	addc %d2,%d2,0
803f78b6:	1d ff e3 ff 	j 803f787c <__pack_d+0x6e>
803f78ba:	77 32 80 3f 	dextr %d3,%d2,%d3,31
803f78be:	1b 04 40 40 	addi %d4,%d4,1024
803f78c2:	06 f2       	sh %d2,-1
803f78c4:	1d ff e6 ff 	j 803f7890 <__pack_d+0x82>
803f78c8:	77 32 00 6c 	dextr %d6,%d2,%d3,24
803f78cc:	06 82       	sh %d2,-8
803f78ce:	b7 12 8d 79 	insert %d7,%d2,1,19,13
803f78d2:	7b 00 ff 57 	movh %d5,32752
803f78d6:	1d ff b3 ff 	j 803f783c <__pack_d+0x2e>
803f78da:	0b 40 80 40 	sub %d4,%d0,%d4
803f78de:	8b 94 83 02 	ge %d0,%d4,57
803f78e2:	df 00 ad ff 	jne %d0,0,803f783c <__pack_d+0x2e>
803f78e6:	8b 04 82 52 	ge %d5,%d4,32
803f78ea:	2b 23 50 05 	seln %d0,%d5,%d3,%d2
803f78ee:	ab 02 a0 75 	seln %d7,%d5,%d2,0
803f78f2:	8f f4 01 51 	and %d5,%d4,31
803f78f6:	8b 05 02 61 	rsub %d6,%d5,32
803f78fa:	17 07 80 66 	dextr %d6,%d7,%d0,%d6
803f78fe:	2b 06 40 65 	sel %d6,%d5,%d6,%d0
803f7902:	8b 04 82 82 	ge %d8,%d4,32
803f7906:	32 55       	rsub %d5
803f7908:	02 60       	mov %d0,%d6
803f790a:	8f f4 01 41 	and %d4,%d4,31
803f790e:	82 f6       	mov %d6,-1
803f7910:	0f 57 00 70 	sh %d7,%d7,%d5
803f7914:	17 66 80 54 	dextr %d5,%d6,%d6,%d4
803f7918:	0f 46 00 40 	sh %d4,%d6,%d4
803f791c:	2b 45 50 58 	seln %d5,%d8,%d5,%d4
803f7920:	ab 04 a0 48 	seln %d4,%d8,%d4,0
803f7924:	0f 43 e0 30 	andn %d3,%d3,%d4
803f7928:	0f 52 e0 20 	andn %d2,%d2,%d5
803f792c:	a6 32       	or %d2,%d3
803f792e:	02 03       	mov %d3,%d0
803f7930:	8b 02 00 35 	or.ne %d3,%d2,0
803f7934:	8f f3 0f 51 	and %d5,%d3,255
803f7938:	82 12       	mov %d2,1
803f793a:	8b 05 08 24 	and.eq %d2,%d5,128
803f793e:	02 74       	mov %d4,%d7
803f7940:	df 02 14 80 	jne %d2,0,803f7968 <__pack_d+0x15a>
803f7944:	8b f3 87 30 	addx %d3,%d3,127
803f7948:	8b 07 a0 20 	addc %d2,%d7,0
803f794c:	77 32 00 6c 	dextr %d6,%d2,%d3,24
803f7950:	7b 00 00 31 	movh %d3,4096
803f7954:	8f 82 1f 70 	sh %d7,%d2,-8
803f7958:	0b 32 50 21 	ge.u %d2,%d2,%d3
803f795c:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
803f7960:	8f 42 01 50 	sh %d5,%d2,20
803f7964:	1d ff 6c ff 	j 803f783c <__pack_d+0x2e>
803f7968:	8b 03 88 60 	addx %d6,%d3,128
803f796c:	8b 07 a0 20 	addc %d2,%d7,0
803f7970:	7b 00 00 a1 	movh %d10,4096
803f7974:	8f 82 1f 70 	sh %d7,%d2,-8
803f7978:	77 62 00 6c 	dextr %d6,%d2,%d6,24
803f797c:	0b a2 50 21 	ge.u %d2,%d2,%d10
803f7980:	53 12 40 80 	mul.u %e8,%d2,1
803f7984:	8f 03 10 01 	and %d0,%d3,256
803f7988:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
803f798c:	8f 48 01 50 	sh %d5,%d8,20
803f7990:	df 00 56 ff 	jne %d0,0,803f783c <__pack_d+0x2e>
803f7994:	8f 84 1f 70 	sh %d7,%d4,-8
803f7998:	0b a4 50 21 	ge.u %d2,%d4,%d10
803f799c:	77 34 00 6c 	dextr %d6,%d4,%d3,24
803f79a0:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
803f79a4:	8f 42 01 50 	sh %d5,%d2,20
803f79a8:	1d ff 4a ff 	j 803f783c <__pack_d+0x2e>

803f79ac <__unpack_d>:
803f79ac:	09 48 40 09 	ld.d %e8,[%a4]
803f79b0:	3b f0 7f 00 	mov %d0,2047
803f79b4:	8f 19 1e 70 	sh %d7,%d9,-31
803f79b8:	37 09 6b 5a 	extr.u %d5,%d9,20,11
803f79bc:	b7 09 0c 6a 	insert %d6,%d9,0,20,12
803f79c0:	59 57 04 00 	st.w [%a5]4,%d7
803f79c4:	df 05 26 80 	jne %d5,0,803f7a10 <__unpack_d+0x64>
803f79c8:	8b 08 20 22 	ne %d2,%d8,0
803f79cc:	8b 06 00 25 	or.ne %d2,%d6,0
803f79d0:	df 02 33 00 	jeq %d2,0,803f7a36 <__unpack_d+0x8a>
803f79d4:	82 32       	mov %d2,3
803f79d6:	77 86 00 34 	dextr %d3,%d6,%d8,8
803f79da:	8f 88 00 40 	sh %d4,%d8,8
803f79de:	74 52       	st.w [%a5],%d2
803f79e0:	3b 10 c0 5f 	mov %d5,-1023
803f79e4:	7b 00 00 61 	movh %d6,4096
803f79e8:	77 43 80 30 	dextr %d3,%d3,%d4,1
803f79ec:	02 57       	mov %d7,%d5
803f79ee:	0b 63 00 21 	eq %d2,%d3,%d6
803f79f2:	b7 02 01 20 	insert %d2,%d2,0,0,1
803f79f6:	06 14       	sh %d4,1
803f79f8:	0b 63 a0 22 	or.lt.u %d2,%d3,%d6
803f79fc:	c2 f5       	add %d5,-1
803f79fe:	df 02 f5 ff 	jne %d2,0,803f79e8 <__unpack_d+0x3c>
803f7a02:	59 57 08 00 	st.w [%a5]8,%d7
803f7a06:	59 54 0c 00 	st.w [%a5]12,%d4
803f7a0a:	59 53 10 00 	st.w [%a5]16,%d3
803f7a0e:	00 90       	ret 
803f7a10:	5f 05 16 00 	jeq %d5,%d0,803f7a3c <__unpack_d+0x90>
803f7a14:	82 32       	mov %d2,3
803f7a16:	1b 15 c0 5f 	addi %d5,%d5,-1023
803f7a1a:	8f 88 00 40 	sh %d4,%d8,8
803f7a1e:	74 52       	st.w [%a5],%d2
803f7a20:	77 86 00 24 	dextr %d2,%d6,%d8,8
803f7a24:	59 55 08 00 	st.w [%a5]8,%d5
803f7a28:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
803f7a2c:	59 54 0c 00 	st.w [%a5]12,%d4
803f7a30:	59 52 10 00 	st.w [%a5]16,%d2
803f7a34:	00 90       	ret 
803f7a36:	82 22       	mov %d2,2
803f7a38:	74 52       	st.w [%a5],%d2
803f7a3a:	00 90       	ret 
803f7a3c:	8b 08 20 52 	ne %d5,%d8,0
803f7a40:	8b 06 00 55 	or.ne %d5,%d6,0
803f7a44:	df 05 05 80 	jne %d5,0,803f7a4e <__unpack_d+0xa2>
803f7a48:	82 42       	mov %d2,4
803f7a4a:	74 52       	st.w [%a5],%d2
803f7a4c:	00 90       	ret 
803f7a4e:	77 89 00 34 	dextr %d3,%d9,%d8,8
803f7a52:	37 09 e1 49 	extr.u %d4,%d9,19,1
803f7a56:	b7 03 85 3d 	insert %d3,%d3,0,27,5
803f7a5a:	8f 88 00 20 	sh %d2,%d8,8
803f7a5e:	74 54       	st.w [%a5],%d4
803f7a60:	59 52 0c 00 	st.w [%a5]12,%d2
803f7a64:	59 53 10 00 	st.w [%a5]16,%d3
803f7a68:	00 90       	ret 

803f7a6a <__fpcmp_parts_d>:
803f7a6a:	54 43       	ld.w %d3,[%a4]
803f7a6c:	82 12       	mov %d2,1
803f7a6e:	bf 23 45 80 	jlt.u %d3,2,803f7af8 <__fpcmp_parts_d+0x8e>
803f7a72:	54 54       	ld.w %d4,[%a5]
803f7a74:	bf 24 42 80 	jlt.u %d4,2,803f7af8 <__fpcmp_parts_d+0x8e>
803f7a78:	8b 44 00 52 	eq %d5,%d4,4
803f7a7c:	8b 43 00 54 	and.eq %d5,%d3,4
803f7a80:	df 05 50 80 	jne %d5,0,803f7b20 <__fpcmp_parts_d+0xb6>
803f7a84:	df 43 45 00 	jeq %d3,4,803f7b0e <__fpcmp_parts_d+0xa4>
803f7a88:	df 44 3d 00 	jeq %d4,4,803f7b02 <__fpcmp_parts_d+0x98>
803f7a8c:	8b 24 00 52 	eq %d5,%d4,2
803f7a90:	8b 23 00 54 	and.eq %d5,%d3,2
803f7a94:	82 02       	mov %d2,0
803f7a96:	df 05 31 80 	jne %d5,0,803f7af8 <__fpcmp_parts_d+0x8e>
803f7a9a:	df 23 34 00 	jeq %d3,2,803f7b02 <__fpcmp_parts_d+0x98>
803f7a9e:	19 42 04 00 	ld.w %d2,[%a4]4
803f7aa2:	df 24 2c 00 	jeq %d4,2,803f7afa <__fpcmp_parts_d+0x90>
803f7aa6:	19 53 04 00 	ld.w %d3,[%a5]4
803f7aaa:	5f 23 28 80 	jne %d3,%d2,803f7afa <__fpcmp_parts_d+0x90>
803f7aae:	19 44 08 00 	ld.w %d4,[%a4]8
803f7ab2:	19 53 08 00 	ld.w %d3,[%a5]8
803f7ab6:	3f 43 22 00 	jlt %d3,%d4,803f7afa <__fpcmp_parts_d+0x90>
803f7aba:	3f 34 2f 00 	jlt %d4,%d3,803f7b18 <__fpcmp_parts_d+0xae>
803f7abe:	19 45 10 00 	ld.w %d5,[%a4]16
803f7ac2:	19 56 10 00 	ld.w %d6,[%a5]16
803f7ac6:	19 40 0c 00 	ld.w %d0,[%a4]12
803f7aca:	0b 65 00 41 	eq %d4,%d5,%d6
803f7ace:	19 57 0c 00 	ld.w %d7,[%a5]12
803f7ad2:	02 43       	mov %d3,%d4
803f7ad4:	0b 07 50 32 	and.ge.u %d3,%d7,%d0
803f7ad8:	0b 70 50 42 	and.ge.u %d4,%d0,%d7
803f7adc:	0b 65 a0 32 	or.lt.u %d3,%d5,%d6
803f7ae0:	0b 56 a0 42 	or.lt.u %d4,%d6,%d5
803f7ae4:	82 f5       	mov %d5,-1
803f7ae6:	ab 15 a0 52 	seln %d5,%d2,%d5,1
803f7aea:	82 16       	mov %d6,1
803f7aec:	ab f6 bf 22 	seln %d2,%d2,%d6,-1
803f7af0:	ab 05 a0 44 	seln %d4,%d4,%d5,0
803f7af4:	2b 24 40 23 	sel %d2,%d3,%d4,%d2
803f7af8:	00 90       	ret 
803f7afa:	82 13       	mov %d3,1
803f7afc:	ab f3 bf 22 	seln %d2,%d2,%d3,-1
803f7b00:	00 90       	ret 
803f7b02:	19 53 04 00 	ld.w %d3,[%a5]4
803f7b06:	82 f2       	mov %d2,-1
803f7b08:	ab 12 a0 23 	seln %d2,%d3,%d2,1
803f7b0c:	00 90       	ret 
803f7b0e:	19 43 04 00 	ld.w %d3,[%a4]4
803f7b12:	ab f2 bf 23 	seln %d2,%d3,%d2,-1
803f7b16:	00 90       	ret 
803f7b18:	82 f3       	mov %d3,-1
803f7b1a:	ab 13 a0 22 	seln %d2,%d2,%d3,1
803f7b1e:	00 90       	ret 
803f7b20:	19 53 04 00 	ld.w %d3,[%a5]4
803f7b24:	19 42 04 00 	ld.w %d2,[%a4]4
803f7b28:	0b 23 80 20 	sub %d2,%d3,%d2
803f7b2c:	00 90       	ret 

803f7b2e <__do_global_ctors_aux>:
803f7b2e:	91 00 04 28 	movh.a %a2,32832
803f7b32:	d9 22 e0 3a 	lea %a2,[%a2]-21280 <803face0 <__CTOR_END__>>
803f7b36:	19 22 fc ff 	ld.w %d2,[%a2]-4 <803ffffc <__DTOR_END__+0x5304>>
803f7b3a:	d9 23 fc ff 	lea %a3,[%a2]-4 <803ffffc <__DTOR_END__+0x5304>>
803f7b3e:	df f2 0a 00 	jeq %d2,-1,803f7b52 <__do_global_ctors_aux+0x24>
803f7b42:	40 3c       	mov.aa %a12,%a3
803f7b44:	60 22       	mov.a %a2,%d2
803f7b46:	b0 cc       	add.a %a12,-4
803f7b48:	2d 02 00 00 	calli %a2
803f7b4c:	54 c2       	ld.w %d2,[%a12]
803f7b4e:	df f2 fb ff 	jne %d2,-1,803f7b44 <__do_global_ctors_aux+0x16>
803f7b52:	00 90       	ret 

803f7b54 <call___do_global_ctors_aux>:
803f7b54:	00 90       	ret 

803f7b56 <IfxScuCcu_calRGainParameters>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxScuCcu_calRGainParameters(IfxScuCcu_ModulationAmplitude modamp, IfxScuCcu_RGain_Values *RGain_P)
{
803f7b56:	40 ae       	mov.aa %a14,%sp
803f7b58:	20 28       	sub.a %sp,40
803f7b5a:	59 e4 dc ff 	st.w [%a14]-36,%d4
803f7b5e:	b5 e4 d8 ff 	st.a [%a14]-40,%a4
    float32  mod_amp       = IfxScuCcu_MA_percent[modamp];
803f7b62:	91 f0 03 28 	movh.a %a2,32831
803f7b66:	d9 22 60 16 	lea %a2,[%a2]25696 <803f6460 <IfxScuCcu_MA_percent>>
803f7b6a:	19 e2 dc ff 	ld.w %d2,[%a14]-36 <803f6460 <IfxScuCcu_MA_percent>>
803f7b6e:	06 22       	sh %d2,2
803f7b70:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
803f7b74:	54 22       	ld.w %d2,[%a2]
803f7b76:	59 e2 fc ff 	st.w [%a14]-4,%d2
    float32 *RGainNom_Temp = &(RGain_P->RGainNom);
803f7b7a:	19 e2 d8 ff 	ld.w %d2,[%a14]-40
803f7b7e:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    uint16  *RGain_Temp    = &(RGain_P->RGainHex);
803f7b82:	19 e2 d8 ff 	ld.w %d2,[%a14]-40
803f7b86:	c2 42       	add %d2,4
803f7b88:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    Ifx_SCU *scu           = &MODULE_SCU;
803f7b8c:	7b 30 00 2f 	movh %d2,61443
803f7b90:	1b 02 00 26 	addi %d2,%d2,24576
803f7b94:	59 e2 f0 ff 	st.w [%a14]-16,%d2

IFX_INLINE float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
803f7b98:	91 30 00 2f 	movh.a %a2,61443
803f7b9c:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803f7ba0:	54 22       	ld.w %d2,[%a2]
803f7ba2:	37 02 62 2f 	extr.u %d2,%d2,30,2
803f7ba6:	8f f2 0f 21 	and %d2,%d2,255
803f7baa:	df 02 0a 80 	jne %d2,0,803f7bbe <IfxScuCcu_calRGainParameters+0x68>
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
803f7bae:	7b f0 cb 24 	movh %d2,19647
803f7bb2:	1b 02 c2 2b 	addi %d2,%d2,-17376
803f7bb6:	59 e2 e4 ff 	st.w [%a14]-28,%d2
803f7bba:	1d 00 2b 00 	j 803f7c10 <IfxScuCcu_calRGainParameters+0xba>
    }
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
803f7bbe:	91 30 00 2f 	movh.a %a2,61443
803f7bc2:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803f7bc6:	54 22       	ld.w %d2,[%a2]
803f7bc8:	37 02 62 2f 	extr.u %d2,%d2,30,2
803f7bcc:	8f f2 0f 21 	and %d2,%d2,255
803f7bd0:	df 12 0a 80 	jne %d2,1,803f7be4 <IfxScuCcu_calRGainParameters+0x8e>
    {
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
803f7bd4:	7b 90 b9 24 	movh %d2,19353
803f7bd8:	1b 02 68 29 	addi %d2,%d2,-27008
803f7bdc:	59 e2 e4 ff 	st.w [%a14]-28,%d2
803f7be0:	1d 00 18 00 	j 803f7c10 <IfxScuCcu_calRGainParameters+0xba>
    }
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
803f7be4:	91 30 00 2f 	movh.a %a2,61443
803f7be8:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803f7bec:	54 22       	ld.w %d2,[%a2]
803f7bee:	37 02 62 2f 	extr.u %d2,%d2,30,2
803f7bf2:	8f f2 0f 21 	and %d2,%d2,255
803f7bf6:	df 22 0a 80 	jne %d2,2,803f7c0a <IfxScuCcu_calRGainParameters+0xb4>
    {
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
803f7bfa:	7b 90 b9 24 	movh %d2,19353
803f7bfe:	1b 02 68 29 	addi %d2,%d2,-27008
803f7c02:	59 e2 e4 ff 	st.w [%a14]-28,%d2
803f7c06:	1d 00 05 00 	j 803f7c10 <IfxScuCcu_calRGainParameters+0xba>
    }
    else
    {
        /* Reserved values, this */
        freq = 0.0f;
803f7c0a:	82 02       	mov %d2,0
803f7c0c:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    }

    return freq;
803f7c10:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
    float32  Fosc_Hz       = IfxScuCcu_getOscFrequency();
803f7c14:	59 e2 ec ff 	st.w [%a14]-20,%d2
    float32  Fdco_hz       = (Fosc_Hz * (scu->SYSPLLCON0.B.NDIV + 1)) / (scu->SYSPLLCON0.B.PDIV + 1);
803f7c18:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803f7c1c:	d9 22 18 00 	lea %a2,[%a2]24
803f7c20:	54 22       	ld.w %d2,[%a2]
803f7c22:	37 02 e7 24 	extr.u %d2,%d2,9,7
803f7c26:	8f f2 0f 21 	and %d2,%d2,255
803f7c2a:	c2 12       	add %d2,1
803f7c2c:	4b 02 41 31 	itof %d3,%d2
803f7c30:	19 e2 ec ff 	ld.w %d2,[%a14]-20
803f7c34:	4b 23 41 30 	mul.f %d3,%d3,%d2
803f7c38:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803f7c3c:	d9 22 18 00 	lea %a2,[%a2]24
803f7c40:	54 22       	ld.w %d2,[%a2]
803f7c42:	37 02 63 2c 	extr.u %d2,%d2,24,3
803f7c46:	8f f2 0f 21 	and %d2,%d2,255
803f7c4a:	c2 12       	add %d2,1
803f7c4c:	4b 02 41 21 	itof %d2,%d2
803f7c50:	4b 23 51 20 	div.f %d2,%d3,%d2
803f7c54:	59 e2 e8 ff 	st.w [%a14]-24,%d2

    *RGainNom_Temp = IFXSCUCCU_GET_RGAIN_NOM(mod_amp, Fdco_hz);
803f7c58:	19 e2 fc ff 	ld.w %d2,[%a14]-4
803f7c5c:	7b 80 2c 34 	movh %d3,17096
803f7c60:	4b 32 51 20 	div.f %d2,%d2,%d3
803f7c64:	6b 02 21 32 	add.f %d3,%d2,%d2
803f7c68:	19 e2 e8 ff 	ld.w %d2,[%a14]-24
803f7c6c:	7b c0 a5 44 	movh %d4,19036
803f7c70:	1b 04 a0 4b 	addi %d4,%d4,-17920
803f7c74:	4b 42 51 20 	div.f %d2,%d2,%d4
803f7c78:	4b 23 41 20 	mul.f %d2,%d3,%d2
803f7c7c:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
803f7c80:	74 22       	st.w [%a2],%d2
    *RGain_Temp    = IFXSCUCCU_GET_RGAIN_HEX(*RGainNom_Temp);
803f7c82:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
803f7c86:	54 22       	ld.w %d2,[%a2]
803f7c88:	7b 00 20 34 	movh %d3,16896
803f7c8c:	4b 32 41 20 	mul.f %d2,%d2,%d3
803f7c90:	7b 00 f0 33 	movh %d3,16128
803f7c94:	6b 03 21 22 	add.f %d2,%d2,%d3
803f7c98:	4b 02 71 21 	ftouz %d2,%d2
803f7c9c:	37 02 70 20 	extr.u %d2,%d2,0,16
803f7ca0:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
803f7ca4:	b4 22       	st.h [%a2],%d2
}
803f7ca6:	00 00       	nop 
803f7ca8:	00 90       	ret 

803f7caa <IfxScuCcu_getPerPllFrequency1>:
    return mscFreq;
}


float32 IfxScuCcu_getPerPllFrequency1(void)
{
803f7caa:	40 ae       	mov.aa %a14,%sp
803f7cac:	20 10       	sub.a %sp,16
    Ifx_SCU *scu = &MODULE_SCU;
803f7cae:	7b 30 00 2f 	movh %d2,61443
803f7cb2:	1b 02 00 26 	addi %d2,%d2,24576
803f7cb6:	59 e2 fc ff 	st.w [%a14]-4,%d2
    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
803f7cba:	91 30 00 2f 	movh.a %a2,61443
803f7cbe:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803f7cc2:	54 22       	ld.w %d2,[%a2]
803f7cc4:	37 02 62 2f 	extr.u %d2,%d2,30,2
803f7cc8:	8f f2 0f 21 	and %d2,%d2,255
803f7ccc:	df 02 0a 80 	jne %d2,0,803f7ce0 <IfxScuCcu_getPerPllFrequency1+0x36>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
803f7cd0:	7b f0 cb 24 	movh %d2,19647
803f7cd4:	1b 02 c2 2b 	addi %d2,%d2,-17376
803f7cd8:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803f7cdc:	1d 00 2b 00 	j 803f7d32 <IfxScuCcu_getPerPllFrequency1+0x88>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
803f7ce0:	91 30 00 2f 	movh.a %a2,61443
803f7ce4:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803f7ce8:	54 22       	ld.w %d2,[%a2]
803f7cea:	37 02 62 2f 	extr.u %d2,%d2,30,2
803f7cee:	8f f2 0f 21 	and %d2,%d2,255
803f7cf2:	df 12 0a 80 	jne %d2,1,803f7d06 <IfxScuCcu_getPerPllFrequency1+0x5c>
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
803f7cf6:	7b 90 b9 24 	movh %d2,19353
803f7cfa:	1b 02 68 29 	addi %d2,%d2,-27008
803f7cfe:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803f7d02:	1d 00 18 00 	j 803f7d32 <IfxScuCcu_getPerPllFrequency1+0x88>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
803f7d06:	91 30 00 2f 	movh.a %a2,61443
803f7d0a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803f7d0e:	54 22       	ld.w %d2,[%a2]
803f7d10:	37 02 62 2f 	extr.u %d2,%d2,30,2
803f7d14:	8f f2 0f 21 	and %d2,%d2,255
803f7d18:	df 22 0a 80 	jne %d2,2,803f7d2c <IfxScuCcu_getPerPllFrequency1+0x82>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
803f7d1c:	7b 90 b9 24 	movh %d2,19353
803f7d20:	1b 02 68 29 	addi %d2,%d2,-27008
803f7d24:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803f7d28:	1d 00 05 00 	j 803f7d32 <IfxScuCcu_getPerPllFrequency1+0x88>
        freq = 0.0f;
803f7d2c:	82 02       	mov %d2,0
803f7d2e:	59 e2 f0 ff 	st.w [%a14]-16,%d2
    return freq;
803f7d32:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
    float32  pllFrequency1;
    float32  oscFreq;
    oscFreq       = IfxScuCcu_getOscFrequency();
803f7d36:	59 e2 f8 ff 	st.w [%a14]-8,%d2

    pllFrequency1 = (oscFreq * (scu->PERPLLCON0.B.NDIV + 1)) / ((scu->PERPLLCON0.B.PDIV + 1) * (scu->PERPLLCON1.B.K2DIV + 1));
803f7d3a:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f7d3e:	d9 22 28 00 	lea %a2,[%a2]40
803f7d42:	54 22       	ld.w %d2,[%a2]
803f7d44:	37 02 e7 24 	extr.u %d2,%d2,9,7
803f7d48:	8f f2 0f 21 	and %d2,%d2,255
803f7d4c:	c2 12       	add %d2,1
803f7d4e:	4b 02 41 31 	itof %d3,%d2
803f7d52:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803f7d56:	4b 23 41 30 	mul.f %d3,%d3,%d2
803f7d5a:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f7d5e:	d9 22 28 00 	lea %a2,[%a2]40
803f7d62:	54 22       	ld.w %d2,[%a2]
803f7d64:	37 02 63 2c 	extr.u %d2,%d2,24,3
803f7d68:	8f f2 0f 21 	and %d2,%d2,255
803f7d6c:	1b 12 00 40 	addi %d4,%d2,1
803f7d70:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f7d74:	d9 22 2c 00 	lea %a2,[%a2]44
803f7d78:	54 22       	ld.w %d2,[%a2]
803f7d7a:	37 02 63 20 	extr.u %d2,%d2,0,3
803f7d7e:	8f f2 0f 21 	and %d2,%d2,255
803f7d82:	c2 12       	add %d2,1
803f7d84:	e2 42       	mul %d2,%d4
803f7d86:	4b 02 41 21 	itof %d2,%d2
803f7d8a:	4b 23 51 20 	div.f %d2,%d3,%d2
803f7d8e:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    return pllFrequency1;
803f7d92:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
}
803f7d96:	00 90       	ret 

803f7d98 <IfxScuCcu_getPerPllFrequency2>:


float32 IfxScuCcu_getPerPllFrequency2(void)
{
803f7d98:	40 ae       	mov.aa %a14,%sp
803f7d9a:	20 10       	sub.a %sp,16
    Ifx_SCU *scu = &MODULE_SCU;
803f7d9c:	7b 30 00 2f 	movh %d2,61443
803f7da0:	1b 02 00 26 	addi %d2,%d2,24576
803f7da4:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
803f7da8:	91 30 00 2f 	movh.a %a2,61443
803f7dac:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803f7db0:	54 22       	ld.w %d2,[%a2]
803f7db2:	37 02 62 2f 	extr.u %d2,%d2,30,2
803f7db6:	8f f2 0f 21 	and %d2,%d2,255
803f7dba:	df 02 0a 80 	jne %d2,0,803f7dce <IfxScuCcu_getPerPllFrequency2+0x36>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
803f7dbe:	7b f0 cb 24 	movh %d2,19647
803f7dc2:	1b 02 c2 2b 	addi %d2,%d2,-17376
803f7dc6:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803f7dca:	1d 00 2b 00 	j 803f7e20 <IfxScuCcu_getPerPllFrequency2+0x88>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
803f7dce:	91 30 00 2f 	movh.a %a2,61443
803f7dd2:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803f7dd6:	54 22       	ld.w %d2,[%a2]
803f7dd8:	37 02 62 2f 	extr.u %d2,%d2,30,2
803f7ddc:	8f f2 0f 21 	and %d2,%d2,255
803f7de0:	df 12 0a 80 	jne %d2,1,803f7df4 <IfxScuCcu_getPerPllFrequency2+0x5c>
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
803f7de4:	7b 90 b9 24 	movh %d2,19353
803f7de8:	1b 02 68 29 	addi %d2,%d2,-27008
803f7dec:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803f7df0:	1d 00 18 00 	j 803f7e20 <IfxScuCcu_getPerPllFrequency2+0x88>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
803f7df4:	91 30 00 2f 	movh.a %a2,61443
803f7df8:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803f7dfc:	54 22       	ld.w %d2,[%a2]
803f7dfe:	37 02 62 2f 	extr.u %d2,%d2,30,2
803f7e02:	8f f2 0f 21 	and %d2,%d2,255
803f7e06:	df 22 0a 80 	jne %d2,2,803f7e1a <IfxScuCcu_getPerPllFrequency2+0x82>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
803f7e0a:	7b 90 b9 24 	movh %d2,19353
803f7e0e:	1b 02 68 29 	addi %d2,%d2,-27008
803f7e12:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803f7e16:	1d 00 05 00 	j 803f7e20 <IfxScuCcu_getPerPllFrequency2+0x88>
        freq = 0.0f;
803f7e1a:	82 02       	mov %d2,0
803f7e1c:	59 e2 f0 ff 	st.w [%a14]-16,%d2
    return freq;
803f7e20:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
    float32  pllFrequency2;
    float32  oscFreq;
    oscFreq = IfxScuCcu_getOscFrequency();
803f7e24:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    if (!(scu->PERPLLCON0.B.DIVBY))
803f7e28:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
803f7e2c:	d9 22 28 00 	lea %a2,[%a2]40
803f7e30:	54 22       	ld.w %d2,[%a2]
803f7e32:	37 02 61 20 	extr.u %d2,%d2,0,1
803f7e36:	8f f2 0f 21 	and %d2,%d2,255
803f7e3a:	df 02 36 80 	jne %d2,0,803f7ea6 <IfxScuCcu_getPerPllFrequency2+0x10e>
    {
        pllFrequency2 = (oscFreq * (scu->PERPLLCON0.B.NDIV + 1)) / ((scu->PERPLLCON0.B.PDIV + 1) * (scu->PERPLLCON1.B.K3DIV + 1) * 1.6f);
803f7e3e:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
803f7e42:	d9 22 28 00 	lea %a2,[%a2]40
803f7e46:	54 22       	ld.w %d2,[%a2]
803f7e48:	37 02 e7 24 	extr.u %d2,%d2,9,7
803f7e4c:	8f f2 0f 21 	and %d2,%d2,255
803f7e50:	c2 12       	add %d2,1
803f7e52:	4b 02 41 31 	itof %d3,%d2
803f7e56:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
803f7e5a:	4b 23 41 30 	mul.f %d3,%d3,%d2
803f7e5e:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
803f7e62:	d9 22 28 00 	lea %a2,[%a2]40
803f7e66:	54 22       	ld.w %d2,[%a2]
803f7e68:	37 02 63 2c 	extr.u %d2,%d2,24,3
803f7e6c:	8f f2 0f 21 	and %d2,%d2,255
803f7e70:	1b 12 00 40 	addi %d4,%d2,1
803f7e74:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
803f7e78:	d9 22 2c 00 	lea %a2,[%a2]44
803f7e7c:	54 22       	ld.w %d2,[%a2]
803f7e7e:	37 02 63 24 	extr.u %d2,%d2,8,3
803f7e82:	8f f2 0f 21 	and %d2,%d2,255
803f7e86:	c2 12       	add %d2,1
803f7e88:	e2 42       	mul %d2,%d4
803f7e8a:	4b 02 41 21 	itof %d2,%d2
803f7e8e:	7b d0 fc 43 	movh %d4,16333
803f7e92:	1b d4 cc 4c 	addi %d4,%d4,-13107
803f7e96:	4b 42 41 20 	mul.f %d2,%d2,%d4
803f7e9a:	4b 23 51 20 	div.f %d2,%d3,%d2
803f7e9e:	59 e2 fc ff 	st.w [%a14]-4,%d2
803f7ea2:	1d 00 2f 00 	j 803f7f00 <IfxScuCcu_getPerPllFrequency2+0x168>
    }
    else
    {
        pllFrequency2 = (oscFreq * (scu->PERPLLCON0.B.NDIV + 1)) / ((scu->PERPLLCON0.B.PDIV + 1) * (scu->PERPLLCON1.B.K3DIV + 1) * 2);
803f7ea6:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
803f7eaa:	d9 22 28 00 	lea %a2,[%a2]40
803f7eae:	54 22       	ld.w %d2,[%a2]
803f7eb0:	37 02 e7 24 	extr.u %d2,%d2,9,7
803f7eb4:	8f f2 0f 21 	and %d2,%d2,255
803f7eb8:	c2 12       	add %d2,1
803f7eba:	4b 02 41 31 	itof %d3,%d2
803f7ebe:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
803f7ec2:	4b 23 41 30 	mul.f %d3,%d3,%d2
803f7ec6:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
803f7eca:	d9 22 28 00 	lea %a2,[%a2]40
803f7ece:	54 22       	ld.w %d2,[%a2]
803f7ed0:	37 02 63 2c 	extr.u %d2,%d2,24,3
803f7ed4:	8f f2 0f 21 	and %d2,%d2,255
803f7ed8:	1b 12 00 40 	addi %d4,%d2,1
803f7edc:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
803f7ee0:	d9 22 2c 00 	lea %a2,[%a2]44
803f7ee4:	54 22       	ld.w %d2,[%a2]
803f7ee6:	37 02 63 24 	extr.u %d2,%d2,8,3
803f7eea:	8f f2 0f 21 	and %d2,%d2,255
803f7eee:	c2 12       	add %d2,1
803f7ef0:	e2 42       	mul %d2,%d4
803f7ef2:	06 12       	sh %d2,1
803f7ef4:	4b 02 41 21 	itof %d2,%d2
803f7ef8:	4b 23 51 20 	div.f %d2,%d3,%d2
803f7efc:	59 e2 fc ff 	st.w [%a14]-4,%d2
    }

    return pllFrequency2;
803f7f00:	19 e2 fc ff 	ld.w %d2,[%a14]-4
}
803f7f04:	00 90       	ret 

803f7f06 <IfxScuCcu_getPllFrequency>:


float32 IfxScuCcu_getPllFrequency(void)
{
803f7f06:	40 ae       	mov.aa %a14,%sp
803f7f08:	20 10       	sub.a %sp,16
    Ifx_SCU *scu = &MODULE_SCU;
803f7f0a:	7b 30 00 2f 	movh %d2,61443
803f7f0e:	1b 02 00 26 	addi %d2,%d2,24576
803f7f12:	59 e2 fc ff 	st.w [%a14]-4,%d2
    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
803f7f16:	91 30 00 2f 	movh.a %a2,61443
803f7f1a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803f7f1e:	54 22       	ld.w %d2,[%a2]
803f7f20:	37 02 62 2f 	extr.u %d2,%d2,30,2
803f7f24:	8f f2 0f 21 	and %d2,%d2,255
803f7f28:	df 02 0a 80 	jne %d2,0,803f7f3c <IfxScuCcu_getPllFrequency+0x36>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
803f7f2c:	7b f0 cb 24 	movh %d2,19647
803f7f30:	1b 02 c2 2b 	addi %d2,%d2,-17376
803f7f34:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803f7f38:	1d 00 2b 00 	j 803f7f8e <IfxScuCcu_getPllFrequency+0x88>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
803f7f3c:	91 30 00 2f 	movh.a %a2,61443
803f7f40:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803f7f44:	54 22       	ld.w %d2,[%a2]
803f7f46:	37 02 62 2f 	extr.u %d2,%d2,30,2
803f7f4a:	8f f2 0f 21 	and %d2,%d2,255
803f7f4e:	df 12 0a 80 	jne %d2,1,803f7f62 <IfxScuCcu_getPllFrequency+0x5c>
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
803f7f52:	7b 90 b9 24 	movh %d2,19353
803f7f56:	1b 02 68 29 	addi %d2,%d2,-27008
803f7f5a:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803f7f5e:	1d 00 18 00 	j 803f7f8e <IfxScuCcu_getPllFrequency+0x88>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
803f7f62:	91 30 00 2f 	movh.a %a2,61443
803f7f66:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803f7f6a:	54 22       	ld.w %d2,[%a2]
803f7f6c:	37 02 62 2f 	extr.u %d2,%d2,30,2
803f7f70:	8f f2 0f 21 	and %d2,%d2,255
803f7f74:	df 22 0a 80 	jne %d2,2,803f7f88 <IfxScuCcu_getPllFrequency+0x82>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
803f7f78:	7b 90 b9 24 	movh %d2,19353
803f7f7c:	1b 02 68 29 	addi %d2,%d2,-27008
803f7f80:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803f7f84:	1d 00 05 00 	j 803f7f8e <IfxScuCcu_getPllFrequency+0x88>
        freq = 0.0f;
803f7f88:	82 02       	mov %d2,0
803f7f8a:	59 e2 f0 ff 	st.w [%a14]-16,%d2
    return freq;
803f7f8e:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
803f7f92:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    freq    = (oscFreq * (scu->SYSPLLCON0.B.NDIV + 1)) / ((scu->SYSPLLCON1.B.K2DIV + 1) * (scu->SYSPLLCON0.B.PDIV + 1));
803f7f96:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f7f9a:	d9 22 18 00 	lea %a2,[%a2]24
803f7f9e:	54 22       	ld.w %d2,[%a2]
803f7fa0:	37 02 e7 24 	extr.u %d2,%d2,9,7
803f7fa4:	8f f2 0f 21 	and %d2,%d2,255
803f7fa8:	c2 12       	add %d2,1
803f7faa:	4b 02 41 31 	itof %d3,%d2
803f7fae:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803f7fb2:	4b 23 41 30 	mul.f %d3,%d3,%d2
803f7fb6:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f7fba:	d9 22 1c 00 	lea %a2,[%a2]28
803f7fbe:	54 22       	ld.w %d2,[%a2]
803f7fc0:	37 02 63 20 	extr.u %d2,%d2,0,3
803f7fc4:	8f f2 0f 21 	and %d2,%d2,255
803f7fc8:	1b 12 00 40 	addi %d4,%d2,1
803f7fcc:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f7fd0:	d9 22 18 00 	lea %a2,[%a2]24
803f7fd4:	54 22       	ld.w %d2,[%a2]
803f7fd6:	37 02 63 2c 	extr.u %d2,%d2,24,3
803f7fda:	8f f2 0f 21 	and %d2,%d2,255
803f7fde:	c2 12       	add %d2,1
803f7fe0:	e2 42       	mul %d2,%d4
803f7fe2:	4b 02 41 21 	itof %d2,%d2
803f7fe6:	4b 23 51 20 	div.f %d2,%d3,%d2
803f7fea:	59 e2 f4 ff 	st.w [%a14]-12,%d2
    return freq;
803f7fee:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
}
803f7ff2:	00 90       	ret 

803f7ff4 <IfxScuCcu_getSourceFrequency>:
    return freq;
}


float32 IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource fsource)
{
803f7ff4:	40 ae       	mov.aa %a14,%sp
803f7ff6:	20 10       	sub.a %sp,16
803f7ff8:	59 e4 f4 ff 	st.w [%a14]-12,%d4
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
803f7ffc:	91 30 00 2f 	movh.a %a2,61443
803f8000:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fc3fc04>>
803f8004:	54 22       	ld.w %d2,[%a2]
803f8006:	37 02 62 2e 	extr.u %d2,%d2,28,2
803f800a:	8f f2 0f 21 	and %d2,%d2,255
803f800e:	df 02 06 00 	jeq %d2,0,803f801a <IfxScuCcu_getSourceFrequency+0x26>
803f8012:	df 12 0c 00 	jeq %d2,1,803f802a <IfxScuCcu_getSourceFrequency+0x36>
803f8016:	1d 00 49 00 	j 803f80a8 <IfxScuCcu_getSourceFrequency+0xb4>
    return IFXSCU_EVR_OSC_FREQUENCY;
803f801a:	7b f0 cb 24 	movh %d2,19647
803f801e:	1b 02 c2 2b 	addi %d2,%d2,-17376
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
803f8022:	59 e2 fc ff 	st.w [%a14]-4,%d2
        break;
803f8026:	1d 00 45 00 	j 803f80b0 <IfxScuCcu_getSourceFrequency+0xbc>
803f802a:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
803f802e:	df 22 2f 00 	jeq %d2,2,803f808c <IfxScuCcu_getSourceFrequency+0x98>
803f8032:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
803f8036:	ff 32 31 80 	jge.u %d2,3,803f8098 <IfxScuCcu_getSourceFrequency+0xa4>
803f803a:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
803f803e:	df 02 08 00 	jeq %d2,0,803f804e <IfxScuCcu_getSourceFrequency+0x5a>
803f8042:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
803f8046:	df 12 0a 00 	jeq %d2,1,803f805a <IfxScuCcu_getSourceFrequency+0x66>
803f804a:	1d 00 27 00 	j 803f8098 <IfxScuCcu_getSourceFrequency+0xa4>
    case IfxScu_CCUCON0_CLKSEL_fPll:

        switch (fsource)
        {
        case IfxScuCcu_Fsource_0:
            sourcefreq = IfxScuCcu_getPllFrequency();
803f804e:	6d ff 5c ff 	call 803f7f06 <IfxScuCcu_getPllFrequency>
803f8052:	59 e2 fc ff 	st.w [%a14]-4,%d2
            break;
803f8056:	1d 00 27 00 	j 803f80a4 <IfxScuCcu_getSourceFrequency+0xb0>
        case IfxScuCcu_Fsource_1:
            sourcefreq = IfxScuCcu_getPerPllFrequency1();
803f805a:	6d ff 28 fe 	call 803f7caa <IfxScuCcu_getPerPllFrequency1>
803f805e:	59 e2 fc ff 	st.w [%a14]-4,%d2

            if (SCU_CCUCON1.B.PLL1DIVDIS == 0)
803f8062:	91 30 00 2f 	movh.a %a2,61443
803f8066:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fc3fc08>>
803f806a:	54 22       	ld.w %d2,[%a2]
803f806c:	37 02 e1 23 	extr.u %d2,%d2,7,1
803f8070:	8f f2 0f 21 	and %d2,%d2,255
803f8074:	df 02 17 80 	jne %d2,0,803f80a2 <IfxScuCcu_getSourceFrequency+0xae>
            {
                sourcefreq = sourcefreq / 2.0f;
803f8078:	19 e2 fc ff 	ld.w %d2,[%a14]-4
803f807c:	7b 00 00 34 	movh %d3,16384
803f8080:	4b 32 51 20 	div.f %d2,%d2,%d3
803f8084:	59 e2 fc ff 	st.w [%a14]-4,%d2
            }

            break;
803f8088:	1d 00 0d 00 	j 803f80a2 <IfxScuCcu_getSourceFrequency+0xae>
        case IfxScuCcu_Fsource_2:
            sourcefreq = IfxScuCcu_getPerPllFrequency2();
803f808c:	6d ff 86 fe 	call 803f7d98 <IfxScuCcu_getPerPllFrequency2>
803f8090:	59 e2 fc ff 	st.w [%a14]-4,%d2
            break;
803f8094:	1d 00 08 00 	j 803f80a4 <IfxScuCcu_getSourceFrequency+0xb0>
        default:
            sourcefreq = 0;
803f8098:	82 02       	mov %d2,0
803f809a:	59 e2 fc ff 	st.w [%a14]-4,%d2
            break;
803f809e:	1d 00 03 00 	j 803f80a4 <IfxScuCcu_getSourceFrequency+0xb0>
            break;
803f80a2:	00 00       	nop 
        }

        break;
803f80a4:	1d 00 06 00 	j 803f80b0 <IfxScuCcu_getSourceFrequency+0xbc>
    default:
        sourcefreq = 0;
803f80a8:	82 02       	mov %d2,0
803f80aa:	59 e2 fc ff 	st.w [%a14]-4,%d2
        break;
803f80ae:	00 00       	nop 
    }

    return sourcefreq;
803f80b0:	19 e2 fc ff 	ld.w %d2,[%a14]-4
}
803f80b4:	00 90       	ret 

803f80b6 <IfxScuCcu_init>:
    return sriFrequency;
}


boolean IfxScuCcu_init(const IfxScuCcu_Config *config)
{
803f80b6:	40 ae       	mov.aa %a14,%sp
803f80b8:	20 a8       	sub.a %sp,168
803f80ba:	b5 e4 dc df 	st.a [%a14]-164,%a4
    boolean status = 0;
803f80be:	82 02       	mov %d2,0
803f80c0:	e9 e2 ff ff 	st.b [%a14]-1,%d2
    status = IfxScuCcu_configureCcuInitialStep(&config->pllInitialStepConfig);
803f80c4:	19 e2 dc df 	ld.w %d2,[%a14]-164
803f80c8:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    uint8                                initError = 0;
803f80cc:	82 02       	mov %d2,0
803f80ce:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
    pllsParamCfg   = &pllInitStepCfg->pllsParameters;
803f80d2:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803f80d6:	59 e2 f0 ff 	st.w [%a14]-16,%d2


IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void)
{
    uint16        password;
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
803f80da:	7b 30 00 2f 	movh %d2,61443
803f80de:	1b 82 2a 26 	addi %d2,%d2,25256
803f80e2:	59 e2 ec ff 	st.w [%a14]-20,%d2

    /* Read Password from Safety WDT CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
803f80e6:	99 e2 ec ff 	ld.a %a2,[%a14]-20
803f80ea:	54 22       	ld.w %d2,[%a2]
803f80ec:	37 02 6e 21 	extr.u %d2,%d2,2,14
803f80f0:	37 02 70 20 	extr.u %d2,%d2,0,16
803f80f4:	f9 e2 ea ff 	st.h [%a14]-22,%d2
    password ^= 0x003F;
803f80f8:	c9 e2 ea ff 	ld.h %d2,[%a14]-22
803f80fc:	8f f2 83 21 	xor %d2,%d2,63
803f8100:	f9 e2 ea ff 	st.h [%a14]-22,%d2

    return password;
803f8104:	b9 e2 ea ff 	ld.hu %d2,[%a14]-22
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
803f8108:	f9 e2 e8 ff 	st.h [%a14]-24,%d2
    IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
803f810c:	b9 e2 e8 ff 	ld.hu %d2,[%a14]-24
803f8110:	f9 e2 e6 ff 	st.h [%a14]-26,%d2
    if (SCU_WDTS_CON0.B.LCK)
803f8114:	91 30 00 2f 	movh.a %a2,61443
803f8118:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f811c:	54 22       	ld.w %d2,[%a2]
803f811e:	37 02 e1 20 	extr.u %d2,%d2,1,1
803f8122:	8f f2 0f 21 	and %d2,%d2,255
803f8126:	df 02 18 00 	jeq %d2,0,803f8156 <IfxScuCcu_init+0xa0>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f812a:	b9 e2 e6 ff 	ld.hu %d2,[%a14]-26
803f812e:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f8130:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f8134:	91 30 00 2f 	movh.a %a2,61443
803f8138:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f813c:	54 22       	ld.w %d2,[%a2]
803f813e:	37 02 70 28 	extr.u %d2,%d2,16,16
803f8142:	37 02 70 20 	extr.u %d2,%d2,0,16
803f8146:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f814a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f814c:	91 30 00 2f 	movh.a %a2,61443
803f8150:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f8154:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f8156:	b9 e2 e6 ff 	ld.hu %d2,[%a14]-26 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f815a:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f815c:	8f 22 40 31 	or %d3,%d2,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f8160:	91 30 00 2f 	movh.a %a2,61443
803f8164:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f8168:	54 22       	ld.w %d2,[%a2]
803f816a:	37 02 70 28 	extr.u %d2,%d2,16,16
803f816e:	37 02 70 20 	extr.u %d2,%d2,0,16
803f8172:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f8176:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f8178:	91 30 00 2f 	movh.a %a2,61443
803f817c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f8180:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
803f8182:	00 00       	nop 
803f8184:	91 30 00 2f 	movh.a %a2,61443
803f8188:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f818c:	54 22       	ld.w %d2,[%a2]
803f818e:	37 02 61 20 	extr.u %d2,%d2,0,1
803f8192:	8f f2 0f 21 	and %d2,%d2,255
803f8196:	df 12 f7 7f 	jeq %d2,1,803f8184 <IfxScuCcu_init+0xce>
}
803f819a:	00 00       	nop 
    timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
803f819c:	3b 00 00 21 	mov %d2,4096
803f81a0:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while (SCU_CCUCON0.B.LCK != 0U)
803f81a4:	1d 00 10 00 	j 803f81c4 <IfxScuCcu_init+0x10e>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f81a8:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f81ac:	c2 f2       	add %d2,-1
803f81ae:	59 e2 e0 ff 	st.w [%a14]-32,%d2
803f81b2:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f81b6:	ff 12 07 00 	jge %d2,1,803f81c4 <IfxScuCcu_init+0x10e>
803f81ba:	82 12       	mov %d2,1
803f81bc:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
803f81c0:	1d 00 0d 00 	j 803f81da <IfxScuCcu_init+0x124>
    while (SCU_CCUCON0.B.LCK != 0U)
803f81c4:	91 30 00 2f 	movh.a %a2,61443
803f81c8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fc3fc04>>
803f81cc:	54 22       	ld.w %d2,[%a2]
803f81ce:	37 02 e1 2f 	extr.u %d2,%d2,31,1
803f81d2:	8f f2 0f 21 	and %d2,%d2,255
803f81d6:	df 02 e9 ff 	jne %d2,0,803f81a8 <IfxScuCcu_init+0xf2>
        scuCcucon0.U        = SCU_CCUCON0.U;
803f81da:	91 30 00 2f 	movh.a %a2,61443
803f81de:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fc3fc04>>
803f81e2:	54 22       	ld.w %d2,[%a2]
803f81e4:	59 e2 f8 df 	st.w [%a14]-136 <f0036030 <_START2_end+0x4fc3fc04>>,%d2
        scuCcucon0.B.CLKSEL = 0; /*Select the EVR as fsource0/1/2 for the clock distribution */
803f81e8:	19 e2 f8 df 	ld.w %d2,[%a14]-136 <f0036030 <_START2_end+0x4fc3fc04>>
803f81ec:	7b 00 00 3d 	movh %d3,53248
803f81f0:	c2 f3       	add %d3,-1
803f81f2:	26 32       	and %d2,%d3
803f81f4:	59 e2 f8 df 	st.w [%a14]-136,%d2
        scuCcucon0.B.UP     = 1; /*Update the ccucon0 register */
803f81f8:	19 e2 f8 df 	ld.w %d2,[%a14]-136
803f81fc:	b7 12 01 2f 	insert %d2,%d2,1,30,1
803f8200:	59 e2 f8 df 	st.w [%a14]-136,%d2
        SCU_CCUCON0.U       = scuCcucon0.U;
803f8204:	91 30 00 2f 	movh.a %a2,61443
803f8208:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fc3fc04>>
803f820c:	19 e2 f8 df 	ld.w %d2,[%a14]-136 <f0036030 <_START2_end+0x4fc3fc04>>
803f8210:	74 22       	st.w [%a2],%d2
    timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
803f8212:	3b 00 00 21 	mov %d2,4096
803f8216:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while (SCU_CCUCON0.B.LCK != 0U)
803f821a:	1d 00 10 00 	j 803f823a <IfxScuCcu_init+0x184>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f821e:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f8222:	c2 f2       	add %d2,-1
803f8224:	59 e2 e0 ff 	st.w [%a14]-32,%d2
803f8228:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f822c:	ff 12 07 00 	jge %d2,1,803f823a <IfxScuCcu_init+0x184>
803f8230:	82 12       	mov %d2,1
803f8232:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
803f8236:	1d 00 0d 00 	j 803f8250 <IfxScuCcu_init+0x19a>
    while (SCU_CCUCON0.B.LCK != 0U)
803f823a:	91 30 00 2f 	movh.a %a2,61443
803f823e:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fc3fc04>>
803f8242:	54 22       	ld.w %d2,[%a2]
803f8244:	37 02 e1 2f 	extr.u %d2,%d2,31,1
803f8248:	8f f2 0f 21 	and %d2,%d2,255
803f824c:	df 02 e9 ff 	jne %d2,0,803f821e <IfxScuCcu_init+0x168>
        SMU_KEYS.U    = (uint32)0xBCU;        /* Enable access to SMU registers */
803f8250:	91 30 00 2f 	movh.a %a2,61443
803f8254:	d9 22 b4 06 	lea %a2,[%a2]26676 <f0036834 <_START2_end+0x4fc40408>>
803f8258:	3b c0 0b 20 	mov %d2,188
803f825c:	74 22       	st.w [%a2],%d2
        SMU_AG8CF0.U &= ~IFXSCUCCU_SMUALARM_MASK;
803f825e:	91 30 00 2f 	movh.a %a2,61443
803f8262:	d9 22 a0 56 	lea %a2,[%a2]26976 <f0036960 <_START2_end+0x4fc40534>>
803f8266:	54 22       	ld.w %d2,[%a2]
803f8268:	91 30 00 2f 	movh.a %a2,61443
803f826c:	d9 22 a0 56 	lea %a2,[%a2]26976 <f0036960 <_START2_end+0x4fc40534>>
803f8270:	8f d2 c1 21 	andn %d2,%d2,29
803f8274:	74 22       	st.w [%a2],%d2
        SMU_AG8CF1.U &= ~IFXSCUCCU_SMUALARM_MASK;
803f8276:	91 30 00 2f 	movh.a %a2,61443
803f827a:	d9 22 a4 56 	lea %a2,[%a2]26980 <f0036964 <_START2_end+0x4fc40538>>
803f827e:	54 22       	ld.w %d2,[%a2]
803f8280:	91 30 00 2f 	movh.a %a2,61443
803f8284:	d9 22 a4 56 	lea %a2,[%a2]26980 <f0036964 <_START2_end+0x4fc40538>>
803f8288:	8f d2 c1 21 	andn %d2,%d2,29
803f828c:	74 22       	st.w [%a2],%d2
        SMU_AG8CF2.U &= ~IFXSCUCCU_SMUALARM_MASK;
803f828e:	91 30 00 2f 	movh.a %a2,61443
803f8292:	d9 22 a8 56 	lea %a2,[%a2]26984 <f0036968 <_START2_end+0x4fc4053c>>
803f8296:	54 22       	ld.w %d2,[%a2]
803f8298:	91 30 00 2f 	movh.a %a2,61443
803f829c:	d9 22 a8 56 	lea %a2,[%a2]26984 <f0036968 <_START2_end+0x4fc4053c>>
803f82a0:	8f d2 c1 21 	andn %d2,%d2,29
803f82a4:	74 22       	st.w [%a2],%d2
        SMU_KEYS.U    = (uint32)0U;
803f82a6:	91 30 00 2f 	movh.a %a2,61443
803f82aa:	d9 22 b4 06 	lea %a2,[%a2]26676 <f0036834 <_START2_end+0x4fc40408>>
803f82ae:	82 02       	mov %d2,0
803f82b0:	74 22       	st.w [%a2],%d2
    SCU_SYSPLLCON0.B.PLLPWD = 0;
803f82b2:	91 30 00 2f 	movh.a %a2,61443
803f82b6:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803f82ba:	54 22       	ld.w %d2,[%a2]
803f82bc:	7b f0 ff 3f 	movh %d3,65535
803f82c0:	c2 f3       	add %d3,-1
803f82c2:	26 32       	and %d2,%d3
803f82c4:	74 22       	st.w [%a2],%d2
    SCU_PERPLLCON0.B.PLLPWD = 0;
803f82c6:	91 30 00 2f 	movh.a %a2,61443
803f82ca:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <_START2_end+0x4fc3fbfc>>
803f82ce:	54 22       	ld.w %d2,[%a2]
803f82d0:	7b f0 ff 3f 	movh %d3,65535
803f82d4:	c2 f3       	add %d3,-1
803f82d6:	26 32       	and %d2,%d3
803f82d8:	74 22       	st.w [%a2],%d2
    timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
803f82da:	3b 00 00 23 	mov %d2,12288
803f82de:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
803f82e2:	1d 00 10 00 	j 803f8302 <IfxScuCcu_init+0x24c>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f82e6:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f82ea:	c2 f2       	add %d2,-1
803f82ec:	59 e2 e0 ff 	st.w [%a14]-32,%d2
803f82f0:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f82f4:	ff 12 07 00 	jge %d2,1,803f8302 <IfxScuCcu_init+0x24c>
803f82f8:	82 12       	mov %d2,1
803f82fa:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
803f82fe:	1d 00 18 00 	j 803f832e <IfxScuCcu_init+0x278>
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
803f8302:	91 30 00 2f 	movh.a %a2,61443
803f8306:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_START2_end+0x4fc3fbe8>>
803f830a:	54 22       	ld.w %d2,[%a2]
803f830c:	37 02 e1 20 	extr.u %d2,%d2,1,1
803f8310:	8f f2 0f 21 	and %d2,%d2,255
803f8314:	df 02 e9 7f 	jeq %d2,0,803f82e6 <IfxScuCcu_init+0x230>
803f8318:	91 30 00 2f 	movh.a %a2,61443
803f831c:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fc3fbf8>>
803f8320:	54 22       	ld.w %d2,[%a2]
803f8322:	37 02 e1 20 	extr.u %d2,%d2,1,1
803f8326:	8f f2 0f 21 	and %d2,%d2,255
803f832a:	df 02 de 7f 	jeq %d2,0,803f82e6 <IfxScuCcu_init+0x230>
    if ((pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fOsc0) || (pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fSysclk))
803f832e:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803f8332:	b0 42       	add.a %a2,4
803f8334:	54 22       	ld.w %d2,[%a2]
803f8336:	df 12 08 00 	jeq %d2,1,803f8346 <IfxScuCcu_init+0x290>
803f833a:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803f833e:	b0 42       	add.a %a2,4
803f8340:	54 22       	ld.w %d2,[%a2]
803f8342:	df 22 31 80 	jne %d2,2,803f83a4 <IfxScuCcu_init+0x2ee>
        scuOsccon.U      = SCU_OSCCON.U;
803f8346:	91 30 00 2f 	movh.a %a2,61443
803f834a:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_START2_end+0x4fc3fbe4>>
803f834e:	54 22       	ld.w %d2,[%a2]
803f8350:	59 e2 f4 df 	st.w [%a14]-140 <f0036010 <_START2_end+0x4fc3fbe4>>,%d2
        scuOsccon.B.MODE = 0U;
803f8354:	19 e2 f4 df 	ld.w %d2,[%a14]-140 <f0036010 <_START2_end+0x4fc3fbe4>>
803f8358:	8f 02 c6 21 	andn %d2,%d2,96
803f835c:	59 e2 f4 df 	st.w [%a14]-140,%d2
        scuOsccon.B.OSCVAL = (uint32)(pllsParamCfg->xtalFrequency / 1000000U) - 15; /*XTAL range 16MHz to 40MHz*/
803f8360:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803f8364:	54 22       	ld.w %d2,[%a2]
803f8366:	7b c0 31 34 	movh %d3,17180
803f836a:	1b 33 e8 3d 	addi %d3,%d3,-8573
803f836e:	73 32 68 20 	mul.u %e2,%d2,%d3
803f8372:	8f e3 1e 20 	sh %d2,%d3,-18
803f8376:	8f f2 0f 21 	and %d2,%d2,255
803f837a:	1b 12 ff 2f 	addi %d2,%d2,-15
803f837e:	8f f2 0f 21 	and %d2,%d2,255
803f8382:	8f f2 01 21 	and %d2,%d2,31
803f8386:	8f f2 0f 31 	and %d3,%d2,255
803f838a:	19 e2 f4 df 	ld.w %d2,[%a14]-140
803f838e:	37 32 05 28 	insert %d2,%d2,%d3,16,5
803f8392:	59 e2 f4 df 	st.w [%a14]-140,%d2
        SCU_OSCCON.U       = scuOsccon.U;
803f8396:	91 30 00 2f 	movh.a %a2,61443
803f839a:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_START2_end+0x4fc3fbe4>>
803f839e:	19 e2 f4 df 	ld.w %d2,[%a14]-140 <f0036010 <_START2_end+0x4fc3fbe4>>
803f83a2:	74 22       	st.w [%a2],%d2
        sysPllCon0.U       = SCU_SYSPLLCON0.U;
803f83a4:	91 30 00 2f 	movh.a %a2,61443
803f83a8:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803f83ac:	54 22       	ld.w %d2,[%a2]
803f83ae:	59 e2 f0 df 	st.w [%a14]-144 <f0036018 <_START2_end+0x4fc3fbec>>,%d2
        sysPllCon0.B.PDIV  = pllsParamCfg->sysPllConfig.pDivider;
803f83b2:	99 e2 f0 ff 	ld.a %a2,[%a14]-16 <f0036018 <_START2_end+0x4fc3fbec>>
803f83b6:	39 22 08 00 	ld.bu %d2,[%a2]8 <f0036018 <_START2_end+0x4fc3fbec>>
803f83ba:	8f 72 00 21 	and %d2,%d2,7
803f83be:	8f f2 0f 31 	and %d3,%d2,255
803f83c2:	19 e2 f0 df 	ld.w %d2,[%a14]-144
803f83c6:	37 32 03 2c 	insert %d2,%d2,%d3,24,3
803f83ca:	59 e2 f0 df 	st.w [%a14]-144,%d2
        sysPllCon0.B.NDIV  = pllsParamCfg->sysPllConfig.nDivider;
803f83ce:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803f83d2:	39 22 09 00 	ld.bu %d2,[%a2]9
803f83d6:	8f f2 07 21 	and %d2,%d2,127
803f83da:	8f f2 0f 31 	and %d3,%d2,255
803f83de:	19 e2 f0 df 	ld.w %d2,[%a14]-144
803f83e2:	37 32 87 24 	insert %d2,%d2,%d3,9,7
803f83e6:	59 e2 f0 df 	st.w [%a14]-144,%d2
        sysPllCon0.B.INSEL = pllsParamCfg->pllInputClockSelection;
803f83ea:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803f83ee:	b0 42       	add.a %a2,4
803f83f0:	54 22       	ld.w %d2,[%a2]
803f83f2:	8f 32 00 21 	and %d2,%d2,3
803f83f6:	8f f2 0f 31 	and %d3,%d2,255
803f83fa:	19 e2 f0 df 	ld.w %d2,[%a14]-144
803f83fe:	37 32 02 2f 	insert %d2,%d2,%d3,30,2
803f8402:	59 e2 f0 df 	st.w [%a14]-144,%d2
        SCU_SYSPLLCON0.U   = sysPllCon0.U;
803f8406:	91 30 00 2f 	movh.a %a2,61443
803f840a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803f840e:	19 e2 f0 df 	ld.w %d2,[%a14]-144 <f0036018 <_START2_end+0x4fc3fbec>>
803f8412:	74 22       	st.w [%a2],%d2
        scuPerPllCon0.U       = SCU_PERPLLCON0.U;
803f8414:	91 30 00 2f 	movh.a %a2,61443
803f8418:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <_START2_end+0x4fc3fbfc>>
803f841c:	54 22       	ld.w %d2,[%a2]
803f841e:	59 e2 ec df 	st.w [%a14]-148 <f0036028 <_START2_end+0x4fc3fbfc>>,%d2
        scuPerPllCon0.B.DIVBY = pllsParamCfg->perPllConfig.k3DividerBypass;
803f8422:	99 e2 f0 ff 	ld.a %a2,[%a14]-16 <f0036028 <_START2_end+0x4fc3fbfc>>
803f8426:	39 22 10 00 	ld.bu %d2,[%a2]16 <f0036028 <_START2_end+0x4fc3fbfc>>
803f842a:	8f 12 00 21 	and %d2,%d2,1
803f842e:	8f f2 0f 31 	and %d3,%d2,255
803f8432:	19 e2 ec df 	ld.w %d2,[%a14]-148
803f8436:	67 32 00 20 	ins.t %d2,%d2,0,%d3,0
803f843a:	59 e2 ec df 	st.w [%a14]-148,%d2
        scuPerPllCon0.B.PDIV  = pllsParamCfg->perPllConfig.pDivider;
803f843e:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803f8442:	39 22 0c 00 	ld.bu %d2,[%a2]12
803f8446:	8f 72 00 21 	and %d2,%d2,7
803f844a:	8f f2 0f 31 	and %d3,%d2,255
803f844e:	19 e2 ec df 	ld.w %d2,[%a14]-148
803f8452:	37 32 03 2c 	insert %d2,%d2,%d3,24,3
803f8456:	59 e2 ec df 	st.w [%a14]-148,%d2
        scuPerPllCon0.B.NDIV  = pllsParamCfg->perPllConfig.nDivider;
803f845a:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803f845e:	39 22 0d 00 	ld.bu %d2,[%a2]13
803f8462:	8f f2 07 21 	and %d2,%d2,127
803f8466:	8f f2 0f 31 	and %d3,%d2,255
803f846a:	19 e2 ec df 	ld.w %d2,[%a14]-148
803f846e:	37 32 87 24 	insert %d2,%d2,%d3,9,7
803f8472:	59 e2 ec df 	st.w [%a14]-148,%d2
        SCU_PERPLLCON0.U      = scuPerPllCon0.U;
803f8476:	91 30 00 2f 	movh.a %a2,61443
803f847a:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <_START2_end+0x4fc3fbfc>>
803f847e:	19 e2 ec df 	ld.w %d2,[%a14]-148 <f0036028 <_START2_end+0x4fc3fbfc>>
803f8482:	74 22       	st.w [%a2],%d2
    SCU_SYSPLLCON0.B.PLLPWD = 1;
803f8484:	91 30 00 2f 	movh.a %a2,61443
803f8488:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803f848c:	54 22       	ld.w %d2,[%a2]
803f848e:	b7 12 01 28 	insert %d2,%d2,1,16,1
803f8492:	74 22       	st.w [%a2],%d2
    SCU_PERPLLCON0.B.PLLPWD = 1;
803f8494:	91 30 00 2f 	movh.a %a2,61443
803f8498:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <_START2_end+0x4fc3fbfc>>
803f849c:	54 22       	ld.w %d2,[%a2]
803f849e:	b7 12 01 28 	insert %d2,%d2,1,16,1
803f84a2:	74 22       	st.w [%a2],%d2
    timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
803f84a4:	3b 00 00 23 	mov %d2,12288
803f84a8:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
803f84ac:	1d 00 10 00 	j 803f84cc <IfxScuCcu_init+0x416>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f84b0:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f84b4:	c2 f2       	add %d2,-1
803f84b6:	59 e2 e0 ff 	st.w [%a14]-32,%d2
803f84ba:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f84be:	ff 12 07 00 	jge %d2,1,803f84cc <IfxScuCcu_init+0x416>
803f84c2:	82 12       	mov %d2,1
803f84c4:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
803f84c8:	1d 00 18 00 	j 803f84f8 <IfxScuCcu_init+0x442>
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
803f84cc:	91 30 00 2f 	movh.a %a2,61443
803f84d0:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_START2_end+0x4fc3fbe8>>
803f84d4:	54 22       	ld.w %d2,[%a2]
803f84d6:	37 02 e1 20 	extr.u %d2,%d2,1,1
803f84da:	8f f2 0f 21 	and %d2,%d2,255
803f84de:	df 12 e9 7f 	jeq %d2,1,803f84b0 <IfxScuCcu_init+0x3fa>
803f84e2:	91 30 00 2f 	movh.a %a2,61443
803f84e6:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fc3fbf8>>
803f84ea:	54 22       	ld.w %d2,[%a2]
803f84ec:	37 02 e1 20 	extr.u %d2,%d2,1,1
803f84f0:	8f f2 0f 21 	and %d2,%d2,255
803f84f4:	df 12 de 7f 	jeq %d2,1,803f84b0 <IfxScuCcu_init+0x3fa>
    timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
803f84f8:	3b 00 00 26 	mov %d2,24576
803f84fc:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
803f8500:	1d 00 10 00 	j 803f8520 <IfxScuCcu_init+0x46a>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f8504:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f8508:	c2 f2       	add %d2,-1
803f850a:	59 e2 e0 ff 	st.w [%a14]-32,%d2
803f850e:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f8512:	ff 12 07 00 	jge %d2,1,803f8520 <IfxScuCcu_init+0x46a>
803f8516:	82 12       	mov %d2,1
803f8518:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
803f851c:	1d 00 23 00 	j 803f8562 <IfxScuCcu_init+0x4ac>
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
803f8520:	91 30 00 2f 	movh.a %a2,61443
803f8524:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_START2_end+0x4fc3fbe8>>
803f8528:	54 22       	ld.w %d2,[%a2]
803f852a:	37 02 e1 22 	extr.u %d2,%d2,5,1
803f852e:	8f f2 0f 21 	and %d2,%d2,255
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
803f8532:	df 02 e9 7f 	jeq %d2,0,803f8504 <IfxScuCcu_init+0x44e>
803f8536:	91 30 00 2f 	movh.a %a2,61443
803f853a:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fc3fbf8>>
803f853e:	54 22       	ld.w %d2,[%a2]
803f8540:	37 02 e1 22 	extr.u %d2,%d2,5,1
803f8544:	8f f2 0f 21 	and %d2,%d2,255
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
803f8548:	df 02 de 7f 	jeq %d2,0,803f8504 <IfxScuCcu_init+0x44e>
           (SCU_PERPLLSTAT.B.K3RDY == 0U))
803f854c:	91 30 00 2f 	movh.a %a2,61443
803f8550:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fc3fbf8>>
803f8554:	54 22       	ld.w %d2,[%a2]
803f8556:	37 02 61 22 	extr.u %d2,%d2,4,1
803f855a:	8f f2 0f 21 	and %d2,%d2,255
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
803f855e:	df 02 d3 7f 	jeq %d2,0,803f8504 <IfxScuCcu_init+0x44e>
    SCU_SYSPLLCON1.B.K2DIV = pllsParamCfg->sysPllConfig.k2Divider;
803f8562:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803f8566:	39 22 0a 00 	ld.bu %d2,[%a2]10
803f856a:	91 30 00 2f 	movh.a %a2,61443
803f856e:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_START2_end+0x4fc3fbf0>>
803f8572:	8f 72 00 21 	and %d2,%d2,7
803f8576:	8f f2 0f 31 	and %d3,%d2,255
803f857a:	54 22       	ld.w %d2,[%a2]
803f857c:	37 32 03 20 	insert %d2,%d2,%d3,0,3
803f8580:	74 22       	st.w [%a2],%d2
        scuPerPllCon1.U       = SCU_PERPLLCON1.U;
803f8582:	91 30 00 2f 	movh.a %a2,61443
803f8586:	d9 22 2c 06 	lea %a2,[%a2]24620 <f003602c <_START2_end+0x4fc3fc00>>
803f858a:	54 22       	ld.w %d2,[%a2]
803f858c:	59 e2 e8 df 	st.w [%a14]-152 <f003602c <_START2_end+0x4fc3fc00>>,%d2
        scuPerPllCon1.B.K2DIV = pllsParamCfg->perPllConfig.k2Divider;
803f8590:	99 e2 f0 ff 	ld.a %a2,[%a14]-16 <f003602c <_START2_end+0x4fc3fc00>>
803f8594:	39 22 0e 00 	ld.bu %d2,[%a2]14 <f003602c <_START2_end+0x4fc3fc00>>
803f8598:	8f 72 00 21 	and %d2,%d2,7
803f859c:	8f f2 0f 31 	and %d3,%d2,255
803f85a0:	19 e2 e8 df 	ld.w %d2,[%a14]-152
803f85a4:	37 32 03 20 	insert %d2,%d2,%d3,0,3
803f85a8:	59 e2 e8 df 	st.w [%a14]-152,%d2
        scuPerPllCon1.B.K3DIV = pllsParamCfg->perPllConfig.k3Divider;
803f85ac:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803f85b0:	39 22 0f 00 	ld.bu %d2,[%a2]15
803f85b4:	8f 72 00 21 	and %d2,%d2,7
803f85b8:	8f f2 0f 31 	and %d3,%d2,255
803f85bc:	19 e2 e8 df 	ld.w %d2,[%a14]-152
803f85c0:	37 32 03 24 	insert %d2,%d2,%d3,8,3
803f85c4:	59 e2 e8 df 	st.w [%a14]-152,%d2
        SCU_PERPLLCON1.U      = scuPerPllCon1.U;
803f85c8:	91 30 00 2f 	movh.a %a2,61443
803f85cc:	d9 22 2c 06 	lea %a2,[%a2]24620 <f003602c <_START2_end+0x4fc3fc00>>
803f85d0:	19 e2 e8 df 	ld.w %d2,[%a14]-152 <f003602c <_START2_end+0x4fc3fc00>>
803f85d4:	74 22       	st.w [%a2],%d2
    timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
803f85d6:	3b 00 00 26 	mov %d2,24576
803f85da:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
803f85de:	1d 00 10 00 	j 803f85fe <IfxScuCcu_init+0x548>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f85e2:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f85e6:	c2 f2       	add %d2,-1
803f85e8:	59 e2 e0 ff 	st.w [%a14]-32,%d2
803f85ec:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f85f0:	ff 12 07 00 	jge %d2,1,803f85fe <IfxScuCcu_init+0x548>
803f85f4:	82 12       	mov %d2,1
803f85f6:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
803f85fa:	1d 00 23 00 	j 803f8640 <IfxScuCcu_init+0x58a>
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
803f85fe:	91 30 00 2f 	movh.a %a2,61443
803f8602:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_START2_end+0x4fc3fbe8>>
803f8606:	54 22       	ld.w %d2,[%a2]
803f8608:	37 02 e1 22 	extr.u %d2,%d2,5,1
803f860c:	8f f2 0f 21 	and %d2,%d2,255
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
803f8610:	df 02 e9 7f 	jeq %d2,0,803f85e2 <IfxScuCcu_init+0x52c>
803f8614:	91 30 00 2f 	movh.a %a2,61443
803f8618:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fc3fbf8>>
803f861c:	54 22       	ld.w %d2,[%a2]
803f861e:	37 02 e1 22 	extr.u %d2,%d2,5,1
803f8622:	8f f2 0f 21 	and %d2,%d2,255
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
803f8626:	df 02 de 7f 	jeq %d2,0,803f85e2 <IfxScuCcu_init+0x52c>
           (SCU_PERPLLSTAT.B.K3RDY == 0U))
803f862a:	91 30 00 2f 	movh.a %a2,61443
803f862e:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fc3fbf8>>
803f8632:	54 22       	ld.w %d2,[%a2]
803f8634:	37 02 61 22 	extr.u %d2,%d2,4,1
803f8638:	8f f2 0f 21 	and %d2,%d2,255
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
803f863c:	df 02 d3 7f 	jeq %d2,0,803f85e2 <IfxScuCcu_init+0x52c>
    timeoutCycleCount = IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT;
803f8640:	7b 50 00 20 	movh %d2,5
803f8644:	1b 02 3e 29 	addi %d2,%d2,-27680
803f8648:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
803f864c:	1d 00 10 00 	j 803f866c <IfxScuCcu_init+0x5b6>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f8650:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f8654:	c2 f2       	add %d2,-1
803f8656:	59 e2 e0 ff 	st.w [%a14]-32,%d2
803f865a:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f865e:	ff 12 07 00 	jge %d2,1,803f866c <IfxScuCcu_init+0x5b6>
803f8662:	82 12       	mov %d2,1
803f8664:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
803f8668:	1d 00 18 00 	j 803f8698 <IfxScuCcu_init+0x5e2>
    while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
803f866c:	91 30 00 2f 	movh.a %a2,61443
803f8670:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_START2_end+0x4fc3fbe4>>
803f8674:	54 22       	ld.w %d2,[%a2]
803f8676:	37 02 e1 20 	extr.u %d2,%d2,1,1
803f867a:	8f f2 0f 21 	and %d2,%d2,255
803f867e:	df 02 0d 80 	jne %d2,0,803f8698 <IfxScuCcu_init+0x5e2>
803f8682:	91 30 00 2f 	movh.a %a2,61443
803f8686:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_START2_end+0x4fc3fbe4>>
803f868a:	54 22       	ld.w %d2,[%a2]
803f868c:	37 02 61 24 	extr.u %d2,%d2,8,1
803f8690:	8f f2 0f 21 	and %d2,%d2,255
803f8694:	df 02 de 7f 	jeq %d2,0,803f8650 <IfxScuCcu_init+0x59a>
        SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart Sys PLL lock detection */
803f8698:	91 30 00 2f 	movh.a %a2,61443
803f869c:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803f86a0:	54 22       	ld.w %d2,[%a2]
803f86a2:	b7 12 01 29 	insert %d2,%d2,1,18,1
803f86a6:	74 22       	st.w [%a2],%d2
        SCU_PERPLLCON0.B.RESLD = 1;             /* Restart Per PLL lock detection */
803f86a8:	91 30 00 2f 	movh.a %a2,61443
803f86ac:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <_START2_end+0x4fc3fbfc>>
803f86b0:	54 22       	ld.w %d2,[%a2]
803f86b2:	b7 12 01 29 	insert %d2,%d2,1,18,1
803f86b6:	74 22       	st.w [%a2],%d2
        timeoutCycleCount      = IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT;
803f86b8:	3b 00 00 23 	mov %d2,12288
803f86bc:	59 e2 e0 ff 	st.w [%a14]-32,%d2
        while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
803f86c0:	1d 00 10 00 	j 803f86e0 <IfxScuCcu_init+0x62a>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f86c4:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f86c8:	c2 f2       	add %d2,-1
803f86ca:	59 e2 e0 ff 	st.w [%a14]-32,%d2
803f86ce:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f86d2:	ff 12 07 00 	jge %d2,1,803f86e0 <IfxScuCcu_init+0x62a>
803f86d6:	82 12       	mov %d2,1
803f86d8:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
803f86dc:	1d 00 18 00 	j 803f870c <IfxScuCcu_init+0x656>
        while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
803f86e0:	91 30 00 2f 	movh.a %a2,61443
803f86e4:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_START2_end+0x4fc3fbe8>>
803f86e8:	54 22       	ld.w %d2,[%a2]
803f86ea:	37 02 61 21 	extr.u %d2,%d2,2,1
803f86ee:	8f f2 0f 21 	and %d2,%d2,255
803f86f2:	df 02 e9 7f 	jeq %d2,0,803f86c4 <IfxScuCcu_init+0x60e>
803f86f6:	91 30 00 2f 	movh.a %a2,61443
803f86fa:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_START2_end+0x4fc3fbf8>>
803f86fe:	54 22       	ld.w %d2,[%a2]
803f8700:	37 02 61 21 	extr.u %d2,%d2,2,1
803f8704:	8f f2 0f 21 	and %d2,%d2,255
803f8708:	df 02 de 7f 	jeq %d2,0,803f86c4 <IfxScuCcu_init+0x60e>
        SMU_KEYS.U = (uint32)0xBCU;           /* Enable access to SMU registers */
803f870c:	91 30 00 2f 	movh.a %a2,61443
803f8710:	d9 22 b4 06 	lea %a2,[%a2]26676 <f0036834 <_START2_end+0x4fc40408>>
803f8714:	3b c0 0b 20 	mov %d2,188
803f8718:	74 22       	st.w [%a2],%d2
        SMU_CMD.U  = (uint32)0x00000005;
803f871a:	91 30 00 2f 	movh.a %a2,61443
803f871e:	d9 22 a0 06 	lea %a2,[%a2]26656 <f0036820 <_START2_end+0x4fc403f4>>
803f8722:	82 52       	mov %d2,5
803f8724:	74 22       	st.w [%a2],%d2
        SMU_AG8.U  = IFXSCUCCU_SMUALARM_MASK; /* Clear SMU Alarms*/
803f8726:	91 30 00 2f 	movh.a %a2,61443
803f872a:	d9 22 a0 76 	lea %a2,[%a2]27104 <f00369e0 <_START2_end+0x4fc405b4>>
803f872e:	3b d0 01 20 	mov %d2,29
803f8732:	74 22       	st.w [%a2],%d2
        SMU_KEYS.U = (uint32)0U;
803f8734:	91 30 00 2f 	movh.a %a2,61443
803f8738:	d9 22 b4 06 	lea %a2,[%a2]26676 <f0036834 <_START2_end+0x4fc40408>>
803f873c:	82 02       	mov %d2,0
803f873e:	74 22       	st.w [%a2],%d2
        scu_ccucon0.U        = SCU_CCUCON0.U;
803f8740:	91 30 00 2f 	movh.a %a2,61443
803f8744:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fc3fc04>>
803f8748:	54 22       	ld.w %d2,[%a2]
803f874a:	59 e2 e4 df 	st.w [%a14]-156 <f0036030 <_START2_end+0x4fc3fc04>>,%d2
        scu_ccucon0.B.CLKSEL = 1; /*Select the PLLs for fsource0/1/2 */
803f874e:	19 e2 e4 df 	ld.w %d2,[%a14]-156 <f0036030 <_START2_end+0x4fc3fc04>>
803f8752:	b7 12 02 2e 	insert %d2,%d2,1,28,2
803f8756:	59 e2 e4 df 	st.w [%a14]-156,%d2
        scu_ccucon0.B.UP     = 1; /*Update the ccucon0 register */
803f875a:	19 e2 e4 df 	ld.w %d2,[%a14]-156
803f875e:	b7 12 01 2f 	insert %d2,%d2,1,30,1
803f8762:	59 e2 e4 df 	st.w [%a14]-156,%d2
        timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
803f8766:	3b 00 00 21 	mov %d2,4096
803f876a:	59 e2 e0 ff 	st.w [%a14]-32,%d2
        while (SCU_CCUCON0.B.LCK != 0U)
803f876e:	1d 00 10 00 	j 803f878e <IfxScuCcu_init+0x6d8>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f8772:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f8776:	c2 f2       	add %d2,-1
803f8778:	59 e2 e0 ff 	st.w [%a14]-32,%d2
803f877c:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f8780:	ff 12 07 00 	jge %d2,1,803f878e <IfxScuCcu_init+0x6d8>
803f8784:	82 12       	mov %d2,1
803f8786:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
803f878a:	1d 00 0d 00 	j 803f87a4 <IfxScuCcu_init+0x6ee>
        while (SCU_CCUCON0.B.LCK != 0U)
803f878e:	91 30 00 2f 	movh.a %a2,61443
803f8792:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fc3fc04>>
803f8796:	54 22       	ld.w %d2,[%a2]
803f8798:	37 02 e1 2f 	extr.u %d2,%d2,31,1
803f879c:	8f f2 0f 21 	and %d2,%d2,255
803f87a0:	df 02 e9 ff 	jne %d2,0,803f8772 <IfxScuCcu_init+0x6bc>
        SCU_CCUCON0.U     = scu_ccucon0.U;
803f87a4:	91 30 00 2f 	movh.a %a2,61443
803f87a8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fc3fc04>>
803f87ac:	19 e2 e4 df 	ld.w %d2,[%a14]-156 <f0036030 <_START2_end+0x4fc3fc04>>
803f87b0:	74 22       	st.w [%a2],%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
803f87b2:	3b 00 00 21 	mov %d2,4096
803f87b6:	59 e2 e0 ff 	st.w [%a14]-32,%d2
        while (SCU_CCUCON0.B.LCK != 0U)
803f87ba:	1d 00 10 00 	j 803f87da <IfxScuCcu_init+0x724>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f87be:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f87c2:	c2 f2       	add %d2,-1
803f87c4:	59 e2 e0 ff 	st.w [%a14]-32,%d2
803f87c8:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f87cc:	ff 12 07 00 	jge %d2,1,803f87da <IfxScuCcu_init+0x724>
803f87d0:	82 12       	mov %d2,1
803f87d2:	e9 e2 f7 ff 	st.b [%a14]-9,%d2
803f87d6:	1d 00 0d 00 	j 803f87f0 <IfxScuCcu_init+0x73a>
        while (SCU_CCUCON0.B.LCK != 0U)
803f87da:	91 30 00 2f 	movh.a %a2,61443
803f87de:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fc3fc04>>
803f87e2:	54 22       	ld.w %d2,[%a2]
803f87e4:	37 02 e1 2f 	extr.u %d2,%d2,31,1
803f87e8:	8f f2 0f 21 	and %d2,%d2,255
803f87ec:	df 02 e9 ff 	jne %d2,0,803f87be <IfxScuCcu_init+0x708>
    IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
803f87f0:	b9 e2 e8 ff 	ld.hu %d2,[%a14]-24
803f87f4:	f9 e2 de ff 	st.h [%a14]-34,%d2
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
803f87f8:	91 30 00 2f 	movh.a %a2,61443
803f87fc:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f8800:	54 22       	ld.w %d2,[%a2]
803f8802:	37 02 e1 20 	extr.u %d2,%d2,1,1
803f8806:	8f f2 0f 21 	and %d2,%d2,255
803f880a:	df 02 18 00 	jeq %d2,0,803f883a <IfxScuCcu_init+0x784>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f880e:	b9 e2 de ff 	ld.hu %d2,[%a14]-34
803f8812:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f8814:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f8818:	91 30 00 2f 	movh.a %a2,61443
803f881c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f8820:	54 22       	ld.w %d2,[%a2]
803f8822:	37 02 70 28 	extr.u %d2,%d2,16,16
803f8826:	37 02 70 20 	extr.u %d2,%d2,0,16
803f882a:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f882e:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f8830:	91 30 00 2f 	movh.a %a2,61443
803f8834:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f8838:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f883a:	b9 e2 de ff 	ld.hu %d2,[%a14]-34 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f883e:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f8840:	8f 32 40 31 	or %d3,%d2,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f8844:	91 30 00 2f 	movh.a %a2,61443
803f8848:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f884c:	54 22       	ld.w %d2,[%a2]
803f884e:	37 02 70 28 	extr.u %d2,%d2,16,16
803f8852:	37 02 70 20 	extr.u %d2,%d2,0,16
803f8856:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f885a:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f885c:	91 30 00 2f 	movh.a %a2,61443
803f8860:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f8864:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
803f8866:	00 00       	nop 
803f8868:	91 30 00 2f 	movh.a %a2,61443
803f886c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f8870:	54 22       	ld.w %d2,[%a2]
803f8872:	37 02 61 20 	extr.u %d2,%d2,0,1
803f8876:	8f f2 0f 21 	and %d2,%d2,255
803f887a:	df 02 f7 7f 	jeq %d2,0,803f8868 <IfxScuCcu_init+0x7b2>
    {}
}
803f887e:	00 00       	nop 
    return (boolean)initError;
803f8880:	39 e2 f7 ff 	ld.bu %d2,[%a14]-9
803f8884:	e9 e2 ff ff 	st.b [%a14]-1,%d2

    if (!status)
803f8888:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
803f888c:	df 02 0a 80 	jne %d2,0,803f88a0 <IfxScuCcu_init+0x7ea>
    {
        IfxScuCcu_modulation_init(config->modulationConfig);  /* initialize modulation */
803f8890:	99 e2 dc df 	ld.a %a2,[%a14]-164
803f8894:	d9 22 1c 10 	lea %a2,[%a2]92
803f8898:	54 22       	ld.w %d2,[%a2]
803f889a:	60 24       	mov.a %a4,%d2
803f889c:	6d 00 03 05 	call 803f92a2 <IfxScuCcu_modulation_init>
    }

    if (!status)
803f88a0:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
803f88a4:	df 02 c3 83 	jne %d2,0,803f902a <IfxScuCcu_init+0xf74>
    {
        status = IfxScuCcu_distributeClockInline(&config->clockDistribution);
803f88a8:	19 e2 dc df 	ld.w %d2,[%a14]-164
803f88ac:	1b 02 02 20 	addi %d2,%d2,32
803f88b0:	59 e2 d8 ff 	st.w [%a14]-40,%d2
    uint32 initError = 0;
803f88b4:	82 02       	mov %d2,0
803f88b6:	59 e2 d4 ff 	st.w [%a14]-44,%d2
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
803f88ba:	7b 30 00 2f 	movh %d2,61443
803f88be:	1b 82 2a 26 	addi %d2,%d2,25256
803f88c2:	59 e2 d0 ff 	st.w [%a14]-48,%d2
    password  = watchdog->CON0.B.PW;
803f88c6:	99 e2 d0 ff 	ld.a %a2,[%a14]-48
803f88ca:	54 22       	ld.w %d2,[%a2]
803f88cc:	37 02 6e 21 	extr.u %d2,%d2,2,14
803f88d0:	37 02 70 20 	extr.u %d2,%d2,0,16
803f88d4:	f9 e2 ce ff 	st.h [%a14]-50,%d2
    password ^= 0x003F;
803f88d8:	c9 e2 ce ff 	ld.h %d2,[%a14]-50
803f88dc:	8f f2 83 21 	xor %d2,%d2,63
803f88e0:	f9 e2 ce ff 	st.h [%a14]-50,%d2
    return password;
803f88e4:	b9 e2 ce ff 	ld.hu %d2,[%a14]-50
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
803f88e8:	f9 e2 cc ff 	st.h [%a14]-52,%d2
    IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
803f88ec:	b9 e2 cc ff 	ld.hu %d2,[%a14]-52
803f88f0:	f9 e2 ca ff 	st.h [%a14]-54,%d2
    if (SCU_WDTS_CON0.B.LCK)
803f88f4:	91 30 00 2f 	movh.a %a2,61443
803f88f8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f88fc:	54 22       	ld.w %d2,[%a2]
803f88fe:	37 02 e1 20 	extr.u %d2,%d2,1,1
803f8902:	8f f2 0f 21 	and %d2,%d2,255
803f8906:	df 02 18 00 	jeq %d2,0,803f8936 <IfxScuCcu_init+0x880>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f890a:	b9 e2 ca ff 	ld.hu %d2,[%a14]-54
803f890e:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f8910:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f8914:	91 30 00 2f 	movh.a %a2,61443
803f8918:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f891c:	54 22       	ld.w %d2,[%a2]
803f891e:	37 02 70 28 	extr.u %d2,%d2,16,16
803f8922:	37 02 70 20 	extr.u %d2,%d2,0,16
803f8926:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f892a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f892c:	91 30 00 2f 	movh.a %a2,61443
803f8930:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f8934:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f8936:	b9 e2 ca ff 	ld.hu %d2,[%a14]-54 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f893a:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f893c:	8f 22 40 31 	or %d3,%d2,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f8940:	91 30 00 2f 	movh.a %a2,61443
803f8944:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f8948:	54 22       	ld.w %d2,[%a2]
803f894a:	37 02 70 28 	extr.u %d2,%d2,16,16
803f894e:	37 02 70 20 	extr.u %d2,%d2,0,16
803f8952:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f8956:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f8958:	91 30 00 2f 	movh.a %a2,61443
803f895c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f8960:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
803f8962:	00 00       	nop 
803f8964:	91 30 00 2f 	movh.a %a2,61443
803f8968:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f896c:	54 22       	ld.w %d2,[%a2]
803f896e:	37 02 61 20 	extr.u %d2,%d2,0,1
803f8972:	8f f2 0f 21 	and %d2,%d2,255
803f8976:	df 12 f7 7f 	jeq %d2,1,803f8964 <IfxScuCcu_init+0x8ae>
}
803f897a:	00 00       	nop 
        ccucon0.U         = SCU_CCUCON0.U & ~clockDistributionConfig->ccucon0.mask;
803f897c:	91 30 00 2f 	movh.a %a2,61443
803f8980:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fc3fc04>>
803f8984:	54 23       	ld.w %d3,[%a2]
803f8986:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036030 <_START2_end+0x4fc3fc04>>
803f898a:	b0 42       	add.a %a2,4
803f898c:	54 22       	ld.w %d2,[%a2]
803f898e:	46 02       	not %d2
803f8990:	26 32       	and %d2,%d3
803f8992:	59 e2 d4 ef 	st.w [%a14]-108,%d2
        ccucon0.U        |= (clockDistributionConfig->ccucon0.mask & clockDistributionConfig->ccucon0.value);
803f8996:	19 e3 d4 ef 	ld.w %d3,[%a14]-108
803f899a:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
803f899e:	b0 42       	add.a %a2,4
803f89a0:	54 24       	ld.w %d4,[%a2]
803f89a2:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
803f89a6:	54 22       	ld.w %d2,[%a2]
803f89a8:	26 42       	and %d2,%d4
803f89aa:	a6 32       	or %d2,%d3
803f89ac:	59 e2 d4 ef 	st.w [%a14]-108,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
803f89b0:	3b 00 00 21 	mov %d2,4096
803f89b4:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON0.B.LCK != 0U)
803f89b8:	1d 00 10 00 	j 803f89d8 <IfxScuCcu_init+0x922>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f89bc:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f89c0:	c2 f2       	add %d2,-1
803f89c2:	59 e2 c4 ff 	st.w [%a14]-60,%d2
803f89c6:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f89ca:	ff 12 07 00 	jge %d2,1,803f89d8 <IfxScuCcu_init+0x922>
803f89ce:	82 12       	mov %d2,1
803f89d0:	59 e2 d4 ff 	st.w [%a14]-44,%d2
803f89d4:	1d 00 0d 00 	j 803f89ee <IfxScuCcu_init+0x938>
        while (SCU_CCUCON0.B.LCK != 0U)
803f89d8:	91 30 00 2f 	movh.a %a2,61443
803f89dc:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fc3fc04>>
803f89e0:	54 22       	ld.w %d2,[%a2]
803f89e2:	37 02 e1 2f 	extr.u %d2,%d2,31,1
803f89e6:	8f f2 0f 21 	and %d2,%d2,255
803f89ea:	df 02 e9 ff 	jne %d2,0,803f89bc <IfxScuCcu_init+0x906>
        SCU_CCUCON0.U     = ccucon0.U;      /*Set update bit explicitly to make above configurations effective */
803f89ee:	91 30 00 2f 	movh.a %a2,61443
803f89f2:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fc3fc04>>
803f89f6:	19 e2 d4 ef 	ld.w %d2,[%a14]-108 <f0036030 <_START2_end+0x4fc3fc04>>
803f89fa:	74 22       	st.w [%a2],%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
803f89fc:	3b 00 00 21 	mov %d2,4096
803f8a00:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON0.B.LCK != 0U)
803f8a04:	1d 00 10 00 	j 803f8a24 <IfxScuCcu_init+0x96e>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f8a08:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8a0c:	c2 f2       	add %d2,-1
803f8a0e:	59 e2 c4 ff 	st.w [%a14]-60,%d2
803f8a12:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8a16:	ff 12 07 00 	jge %d2,1,803f8a24 <IfxScuCcu_init+0x96e>
803f8a1a:	82 12       	mov %d2,1
803f8a1c:	59 e2 d4 ff 	st.w [%a14]-44,%d2
803f8a20:	1d 00 0d 00 	j 803f8a3a <IfxScuCcu_init+0x984>
        while (SCU_CCUCON0.B.LCK != 0U)
803f8a24:	91 30 00 2f 	movh.a %a2,61443
803f8a28:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fc3fc04>>
803f8a2c:	54 22       	ld.w %d2,[%a2]
803f8a2e:	37 02 e1 2f 	extr.u %d2,%d2,31,1
803f8a32:	8f f2 0f 21 	and %d2,%d2,255
803f8a36:	df 02 e9 ff 	jne %d2,0,803f8a08 <IfxScuCcu_init+0x952>
        ccucon1.U = SCU_CCUCON1.U;
803f8a3a:	91 30 00 2f 	movh.a %a2,61443
803f8a3e:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fc3fc08>>
803f8a42:	54 22       	ld.w %d2,[%a2]
803f8a44:	59 e2 d0 ef 	st.w [%a14]-112 <f0036034 <_START2_end+0x4fc3fc08>>,%d2
        if (ccucon1.B.CLKSELMCAN
803f8a48:	19 e2 d0 ef 	ld.w %d2,[%a14]-112 <f0036034 <_START2_end+0x4fc3fc08>>
803f8a4c:	8f 02 03 21 	and %d2,%d2,48
803f8a50:	df 02 10 80 	jne %d2,0,803f8a70 <IfxScuCcu_init+0x9ba>
            || ccucon1.B.CLKSELMSC
803f8a54:	19 e2 d0 ef 	ld.w %d2,[%a14]-112
803f8a58:	7b 00 03 30 	movh %d3,48
803f8a5c:	26 32       	and %d2,%d3
803f8a5e:	df 02 09 80 	jne %d2,0,803f8a70 <IfxScuCcu_init+0x9ba>
            || ccucon1.B.CLKSELQSPI)
803f8a62:	19 e2 d0 ef 	ld.w %d2,[%a14]-112
803f8a66:	7b 00 00 33 	movh %d3,12288
803f8a6a:	26 32       	and %d2,%d3
803f8a6c:	df 02 7b 00 	jeq %d2,0,803f8b62 <IfxScuCcu_init+0xaac>
            ccucon1.U  = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
803f8a70:	91 30 00 2f 	movh.a %a2,61443
803f8a74:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fc3fc08>>
803f8a78:	54 23       	ld.w %d3,[%a2]
803f8a7a:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036034 <_START2_end+0x4fc3fc08>>
803f8a7e:	d9 22 0c 00 	lea %a2,[%a2]12 <f0036034 <_START2_end+0x4fc3fc08>>
803f8a82:	54 22       	ld.w %d2,[%a2]
803f8a84:	46 02       	not %d2
803f8a86:	26 32       	and %d2,%d3
803f8a88:	59 e2 d0 ef 	st.w [%a14]-112,%d2
            ccucon1.U |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
803f8a8c:	19 e3 d0 ef 	ld.w %d3,[%a14]-112
803f8a90:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
803f8a94:	d9 22 0c 00 	lea %a2,[%a2]12
803f8a98:	54 24       	ld.w %d4,[%a2]
803f8a9a:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
803f8a9e:	d9 22 08 00 	lea %a2,[%a2]8
803f8aa2:	54 22       	ld.w %d2,[%a2]
803f8aa4:	26 42       	and %d2,%d4
803f8aa6:	a6 32       	or %d2,%d3
803f8aa8:	59 e2 d0 ef 	st.w [%a14]-112,%d2
            ccucon1.B.CLKSELMCAN = (uint32)0;
803f8aac:	19 e2 d0 ef 	ld.w %d2,[%a14]-112
803f8ab0:	8f 02 c3 21 	andn %d2,%d2,48
803f8ab4:	59 e2 d0 ef 	st.w [%a14]-112,%d2
            ccucon1.B.CLKSELMSC  = (uint32)0;
803f8ab8:	19 e2 d0 ef 	ld.w %d2,[%a14]-112
803f8abc:	7b 00 fd 3f 	movh %d3,65488
803f8ac0:	c2 f3       	add %d3,-1
803f8ac2:	26 32       	and %d2,%d3
803f8ac4:	59 e2 d0 ef 	st.w [%a14]-112,%d2
            ccucon1.B.CLKSELQSPI = (uint32)0;
803f8ac8:	19 e2 d0 ef 	ld.w %d2,[%a14]-112
803f8acc:	7b 00 00 3d 	movh %d3,53248
803f8ad0:	c2 f3       	add %d3,-1
803f8ad2:	26 32       	and %d2,%d3
803f8ad4:	59 e2 d0 ef 	st.w [%a14]-112,%d2
            timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
803f8ad8:	3b 00 00 21 	mov %d2,4096
803f8adc:	59 e2 c4 ff 	st.w [%a14]-60,%d2
            while (SCU_CCUCON1.B.LCK != 0U)
803f8ae0:	1d 00 10 00 	j 803f8b00 <IfxScuCcu_init+0xa4a>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f8ae4:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8ae8:	c2 f2       	add %d2,-1
803f8aea:	59 e2 c4 ff 	st.w [%a14]-60,%d2
803f8aee:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8af2:	ff 12 07 00 	jge %d2,1,803f8b00 <IfxScuCcu_init+0xa4a>
803f8af6:	82 12       	mov %d2,1
803f8af8:	59 e2 d4 ff 	st.w [%a14]-44,%d2
803f8afc:	1d 00 0d 00 	j 803f8b16 <IfxScuCcu_init+0xa60>
            while (SCU_CCUCON1.B.LCK != 0U)
803f8b00:	91 30 00 2f 	movh.a %a2,61443
803f8b04:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fc3fc08>>
803f8b08:	54 22       	ld.w %d2,[%a2]
803f8b0a:	37 02 e1 2f 	extr.u %d2,%d2,31,1
803f8b0e:	8f f2 0f 21 	and %d2,%d2,255
803f8b12:	df 02 e9 ff 	jne %d2,0,803f8ae4 <IfxScuCcu_init+0xa2e>
            SCU_CCUCON1.U     = ccucon1.U;
803f8b16:	91 30 00 2f 	movh.a %a2,61443
803f8b1a:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fc3fc08>>
803f8b1e:	19 e2 d0 ef 	ld.w %d2,[%a14]-112 <f0036034 <_START2_end+0x4fc3fc08>>
803f8b22:	74 22       	st.w [%a2],%d2
            timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
803f8b24:	3b 00 00 21 	mov %d2,4096
803f8b28:	59 e2 c4 ff 	st.w [%a14]-60,%d2
            while (SCU_CCUCON1.B.LCK != 0U)
803f8b2c:	1d 00 10 00 	j 803f8b4c <IfxScuCcu_init+0xa96>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f8b30:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8b34:	c2 f2       	add %d2,-1
803f8b36:	59 e2 c4 ff 	st.w [%a14]-60,%d2
803f8b3a:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8b3e:	ff 12 07 00 	jge %d2,1,803f8b4c <IfxScuCcu_init+0xa96>
803f8b42:	82 12       	mov %d2,1
803f8b44:	59 e2 d4 ff 	st.w [%a14]-44,%d2
803f8b48:	1d 00 0d 00 	j 803f8b62 <IfxScuCcu_init+0xaac>
            while (SCU_CCUCON1.B.LCK != 0U)
803f8b4c:	91 30 00 2f 	movh.a %a2,61443
803f8b50:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fc3fc08>>
803f8b54:	54 22       	ld.w %d2,[%a2]
803f8b56:	37 02 e1 2f 	extr.u %d2,%d2,31,1
803f8b5a:	8f f2 0f 21 	and %d2,%d2,255
803f8b5e:	df 02 e9 ff 	jne %d2,0,803f8b30 <IfxScuCcu_init+0xa7a>
        ccucon1.U         = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
803f8b62:	91 30 00 2f 	movh.a %a2,61443
803f8b66:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fc3fc08>>
803f8b6a:	54 23       	ld.w %d3,[%a2]
803f8b6c:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036034 <_START2_end+0x4fc3fc08>>
803f8b70:	d9 22 0c 00 	lea %a2,[%a2]12 <f0036034 <_START2_end+0x4fc3fc08>>
803f8b74:	54 22       	ld.w %d2,[%a2]
803f8b76:	46 02       	not %d2
803f8b78:	26 32       	and %d2,%d3
803f8b7a:	59 e2 d0 ef 	st.w [%a14]-112,%d2
        ccucon1.U        |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
803f8b7e:	19 e3 d0 ef 	ld.w %d3,[%a14]-112
803f8b82:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
803f8b86:	d9 22 0c 00 	lea %a2,[%a2]12
803f8b8a:	54 24       	ld.w %d4,[%a2]
803f8b8c:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
803f8b90:	d9 22 08 00 	lea %a2,[%a2]8
803f8b94:	54 22       	ld.w %d2,[%a2]
803f8b96:	26 42       	and %d2,%d4
803f8b98:	a6 32       	or %d2,%d3
803f8b9a:	59 e2 d0 ef 	st.w [%a14]-112,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
803f8b9e:	3b 00 00 21 	mov %d2,4096
803f8ba2:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON1.B.LCK != 0U)
803f8ba6:	1d 00 10 00 	j 803f8bc6 <IfxScuCcu_init+0xb10>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f8baa:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8bae:	c2 f2       	add %d2,-1
803f8bb0:	59 e2 c4 ff 	st.w [%a14]-60,%d2
803f8bb4:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8bb8:	ff 12 07 00 	jge %d2,1,803f8bc6 <IfxScuCcu_init+0xb10>
803f8bbc:	82 12       	mov %d2,1
803f8bbe:	59 e2 d4 ff 	st.w [%a14]-44,%d2
803f8bc2:	1d 00 0d 00 	j 803f8bdc <IfxScuCcu_init+0xb26>
        while (SCU_CCUCON1.B.LCK != 0U)
803f8bc6:	91 30 00 2f 	movh.a %a2,61443
803f8bca:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fc3fc08>>
803f8bce:	54 22       	ld.w %d2,[%a2]
803f8bd0:	37 02 e1 2f 	extr.u %d2,%d2,31,1
803f8bd4:	8f f2 0f 21 	and %d2,%d2,255
803f8bd8:	df 02 e9 ff 	jne %d2,0,803f8baa <IfxScuCcu_init+0xaf4>
        SCU_CCUCON1.U     = ccucon1.U;
803f8bdc:	91 30 00 2f 	movh.a %a2,61443
803f8be0:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fc3fc08>>
803f8be4:	19 e2 d0 ef 	ld.w %d2,[%a14]-112 <f0036034 <_START2_end+0x4fc3fc08>>
803f8be8:	74 22       	st.w [%a2],%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
803f8bea:	3b 00 00 21 	mov %d2,4096
803f8bee:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON1.B.LCK != 0U)
803f8bf2:	1d 00 10 00 	j 803f8c12 <IfxScuCcu_init+0xb5c>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f8bf6:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8bfa:	c2 f2       	add %d2,-1
803f8bfc:	59 e2 c4 ff 	st.w [%a14]-60,%d2
803f8c00:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8c04:	ff 12 07 00 	jge %d2,1,803f8c12 <IfxScuCcu_init+0xb5c>
803f8c08:	82 12       	mov %d2,1
803f8c0a:	59 e2 d4 ff 	st.w [%a14]-44,%d2
803f8c0e:	1d 00 0d 00 	j 803f8c28 <IfxScuCcu_init+0xb72>
        while (SCU_CCUCON1.B.LCK != 0U)
803f8c12:	91 30 00 2f 	movh.a %a2,61443
803f8c16:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_START2_end+0x4fc3fc08>>
803f8c1a:	54 22       	ld.w %d2,[%a2]
803f8c1c:	37 02 e1 2f 	extr.u %d2,%d2,31,1
803f8c20:	8f f2 0f 21 	and %d2,%d2,255
803f8c24:	df 02 e9 ff 	jne %d2,0,803f8bf6 <IfxScuCcu_init+0xb40>
        ccucon2.U = SCU_CCUCON2.U;
803f8c28:	91 30 00 2f 	movh.a %a2,61443
803f8c2c:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fc3fc14>>
803f8c30:	54 22       	ld.w %d2,[%a2]
803f8c32:	59 e2 cc ef 	st.w [%a14]-116 <f0036040 <_START2_end+0x4fc3fc14>>,%d2
        if (ccucon2.B.CLKSELASCLINS)
803f8c36:	19 e2 cc ef 	ld.w %d2,[%a14]-116 <f0036040 <_START2_end+0x4fc3fc14>>
803f8c3a:	3b 00 00 33 	mov %d3,12288
803f8c3e:	26 32       	and %d2,%d3
803f8c40:	df 02 6c 00 	jeq %d2,0,803f8d18 <IfxScuCcu_init+0xc62>
            ccucon2.U               = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
803f8c44:	91 30 00 2f 	movh.a %a2,61443
803f8c48:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fc3fc14>>
803f8c4c:	54 23       	ld.w %d3,[%a2]
803f8c4e:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036040 <_START2_end+0x4fc3fc14>>
803f8c52:	d9 22 14 00 	lea %a2,[%a2]20 <f0036040 <_START2_end+0x4fc3fc14>>
803f8c56:	54 22       	ld.w %d2,[%a2]
803f8c58:	46 02       	not %d2
803f8c5a:	26 32       	and %d2,%d3
803f8c5c:	59 e2 cc ef 	st.w [%a14]-116,%d2
            ccucon2.U              |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
803f8c60:	19 e3 cc ef 	ld.w %d3,[%a14]-116
803f8c64:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
803f8c68:	d9 22 14 00 	lea %a2,[%a2]20
803f8c6c:	54 24       	ld.w %d4,[%a2]
803f8c6e:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
803f8c72:	d9 22 10 00 	lea %a2,[%a2]16
803f8c76:	54 22       	ld.w %d2,[%a2]
803f8c78:	26 42       	and %d2,%d4
803f8c7a:	a6 32       	or %d2,%d3
803f8c7c:	59 e2 cc ef 	st.w [%a14]-116,%d2
            ccucon2.B.CLKSELASCLINS = (uint32)0;
803f8c80:	19 e2 cc ef 	ld.w %d2,[%a14]-116
803f8c84:	3b f0 ff 3c 	mov %d3,-12289
803f8c88:	26 32       	and %d2,%d3
803f8c8a:	59 e2 cc ef 	st.w [%a14]-116,%d2
            timeoutCycleCount       = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
803f8c8e:	3b 00 00 21 	mov %d2,4096
803f8c92:	59 e2 c4 ff 	st.w [%a14]-60,%d2
            while (SCU_CCUCON2.B.LCK != 0U)
803f8c96:	1d 00 10 00 	j 803f8cb6 <IfxScuCcu_init+0xc00>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f8c9a:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8c9e:	c2 f2       	add %d2,-1
803f8ca0:	59 e2 c4 ff 	st.w [%a14]-60,%d2
803f8ca4:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8ca8:	ff 12 07 00 	jge %d2,1,803f8cb6 <IfxScuCcu_init+0xc00>
803f8cac:	82 12       	mov %d2,1
803f8cae:	59 e2 d4 ff 	st.w [%a14]-44,%d2
803f8cb2:	1d 00 0d 00 	j 803f8ccc <IfxScuCcu_init+0xc16>
            while (SCU_CCUCON2.B.LCK != 0U)
803f8cb6:	91 30 00 2f 	movh.a %a2,61443
803f8cba:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fc3fc14>>
803f8cbe:	54 22       	ld.w %d2,[%a2]
803f8cc0:	37 02 e1 2f 	extr.u %d2,%d2,31,1
803f8cc4:	8f f2 0f 21 	and %d2,%d2,255
803f8cc8:	df 02 e9 ff 	jne %d2,0,803f8c9a <IfxScuCcu_init+0xbe4>
            SCU_CCUCON2.U     = ccucon2.U;
803f8ccc:	91 30 00 2f 	movh.a %a2,61443
803f8cd0:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fc3fc14>>
803f8cd4:	19 e2 cc ef 	ld.w %d2,[%a14]-116 <f0036040 <_START2_end+0x4fc3fc14>>
803f8cd8:	74 22       	st.w [%a2],%d2
            timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
803f8cda:	3b 00 00 21 	mov %d2,4096
803f8cde:	59 e2 c4 ff 	st.w [%a14]-60,%d2
            while (SCU_CCUCON2.B.LCK != 0U)
803f8ce2:	1d 00 10 00 	j 803f8d02 <IfxScuCcu_init+0xc4c>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f8ce6:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8cea:	c2 f2       	add %d2,-1
803f8cec:	59 e2 c4 ff 	st.w [%a14]-60,%d2
803f8cf0:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8cf4:	ff 12 07 00 	jge %d2,1,803f8d02 <IfxScuCcu_init+0xc4c>
803f8cf8:	82 12       	mov %d2,1
803f8cfa:	59 e2 d4 ff 	st.w [%a14]-44,%d2
803f8cfe:	1d 00 0d 00 	j 803f8d18 <IfxScuCcu_init+0xc62>
            while (SCU_CCUCON2.B.LCK != 0U)
803f8d02:	91 30 00 2f 	movh.a %a2,61443
803f8d06:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fc3fc14>>
803f8d0a:	54 22       	ld.w %d2,[%a2]
803f8d0c:	37 02 e1 2f 	extr.u %d2,%d2,31,1
803f8d10:	8f f2 0f 21 	and %d2,%d2,255
803f8d14:	df 02 e9 ff 	jne %d2,0,803f8ce6 <IfxScuCcu_init+0xc30>
        ccucon2.U         = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
803f8d18:	91 30 00 2f 	movh.a %a2,61443
803f8d1c:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fc3fc14>>
803f8d20:	54 23       	ld.w %d3,[%a2]
803f8d22:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036040 <_START2_end+0x4fc3fc14>>
803f8d26:	d9 22 14 00 	lea %a2,[%a2]20 <f0036040 <_START2_end+0x4fc3fc14>>
803f8d2a:	54 22       	ld.w %d2,[%a2]
803f8d2c:	46 02       	not %d2
803f8d2e:	26 32       	and %d2,%d3
803f8d30:	59 e2 cc ef 	st.w [%a14]-116,%d2
        ccucon2.U        |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
803f8d34:	19 e3 cc ef 	ld.w %d3,[%a14]-116
803f8d38:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
803f8d3c:	d9 22 14 00 	lea %a2,[%a2]20
803f8d40:	54 24       	ld.w %d4,[%a2]
803f8d42:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
803f8d46:	d9 22 10 00 	lea %a2,[%a2]16
803f8d4a:	54 22       	ld.w %d2,[%a2]
803f8d4c:	26 42       	and %d2,%d4
803f8d4e:	a6 32       	or %d2,%d3
803f8d50:	59 e2 cc ef 	st.w [%a14]-116,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
803f8d54:	3b 00 00 21 	mov %d2,4096
803f8d58:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON2.B.LCK != 0U)
803f8d5c:	1d 00 10 00 	j 803f8d7c <IfxScuCcu_init+0xcc6>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f8d60:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8d64:	c2 f2       	add %d2,-1
803f8d66:	59 e2 c4 ff 	st.w [%a14]-60,%d2
803f8d6a:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8d6e:	ff 12 07 00 	jge %d2,1,803f8d7c <IfxScuCcu_init+0xcc6>
803f8d72:	82 12       	mov %d2,1
803f8d74:	59 e2 d4 ff 	st.w [%a14]-44,%d2
803f8d78:	1d 00 0d 00 	j 803f8d92 <IfxScuCcu_init+0xcdc>
        while (SCU_CCUCON2.B.LCK != 0U)
803f8d7c:	91 30 00 2f 	movh.a %a2,61443
803f8d80:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fc3fc14>>
803f8d84:	54 22       	ld.w %d2,[%a2]
803f8d86:	37 02 e1 2f 	extr.u %d2,%d2,31,1
803f8d8a:	8f f2 0f 21 	and %d2,%d2,255
803f8d8e:	df 02 e9 ff 	jne %d2,0,803f8d60 <IfxScuCcu_init+0xcaa>
        SCU_CCUCON2.U     = ccucon2.U;
803f8d92:	91 30 00 2f 	movh.a %a2,61443
803f8d96:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fc3fc14>>
803f8d9a:	19 e2 cc ef 	ld.w %d2,[%a14]-116 <f0036040 <_START2_end+0x4fc3fc14>>
803f8d9e:	74 22       	st.w [%a2],%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
803f8da0:	3b 00 00 21 	mov %d2,4096
803f8da4:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON2.B.LCK != 0U)
803f8da8:	1d 00 10 00 	j 803f8dc8 <IfxScuCcu_init+0xd12>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f8dac:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8db0:	c2 f2       	add %d2,-1
803f8db2:	59 e2 c4 ff 	st.w [%a14]-60,%d2
803f8db6:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8dba:	ff 12 07 00 	jge %d2,1,803f8dc8 <IfxScuCcu_init+0xd12>
803f8dbe:	82 12       	mov %d2,1
803f8dc0:	59 e2 d4 ff 	st.w [%a14]-44,%d2
803f8dc4:	1d 00 0d 00 	j 803f8dde <IfxScuCcu_init+0xd28>
        while (SCU_CCUCON2.B.LCK != 0U)
803f8dc8:	91 30 00 2f 	movh.a %a2,61443
803f8dcc:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_START2_end+0x4fc3fc14>>
803f8dd0:	54 22       	ld.w %d2,[%a2]
803f8dd2:	37 02 e1 2f 	extr.u %d2,%d2,31,1
803f8dd6:	8f f2 0f 21 	and %d2,%d2,255
803f8dda:	df 02 e9 ff 	jne %d2,0,803f8dac <IfxScuCcu_init+0xcf6>
        ccucon5.U         = SCU_CCUCON5.U & ~clockDistributionConfig->ccucon5.mask;
803f8dde:	91 30 00 2f 	movh.a %a2,61443
803f8de2:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_START2_end+0x4fc3fc20>>
803f8de6:	54 23       	ld.w %d3,[%a2]
803f8de8:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f003604c <_START2_end+0x4fc3fc20>>
803f8dec:	d9 22 1c 00 	lea %a2,[%a2]28 <f003604c <_START2_end+0x4fc3fc20>>
803f8df0:	54 22       	ld.w %d2,[%a2]
803f8df2:	46 02       	not %d2
803f8df4:	26 32       	and %d2,%d3
803f8df6:	59 e2 c8 ef 	st.w [%a14]-120,%d2
        ccucon5.U        |= (clockDistributionConfig->ccucon5.mask & clockDistributionConfig->ccucon5.value);
803f8dfa:	19 e3 c8 ef 	ld.w %d3,[%a14]-120
803f8dfe:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
803f8e02:	d9 22 1c 00 	lea %a2,[%a2]28
803f8e06:	54 24       	ld.w %d4,[%a2]
803f8e08:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
803f8e0c:	d9 22 18 00 	lea %a2,[%a2]24
803f8e10:	54 22       	ld.w %d2,[%a2]
803f8e12:	26 42       	and %d2,%d4
803f8e14:	a6 32       	or %d2,%d3
803f8e16:	59 e2 c8 ef 	st.w [%a14]-120,%d2
        ccucon5.B.UP      = 1;
803f8e1a:	19 e2 c8 ef 	ld.w %d2,[%a14]-120
803f8e1e:	b7 12 01 2f 	insert %d2,%d2,1,30,1
803f8e22:	59 e2 c8 ef 	st.w [%a14]-120,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
803f8e26:	3b 00 00 21 	mov %d2,4096
803f8e2a:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON5.B.LCK != 0U)
803f8e2e:	1d 00 10 00 	j 803f8e4e <IfxScuCcu_init+0xd98>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f8e32:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8e36:	c2 f2       	add %d2,-1
803f8e38:	59 e2 c4 ff 	st.w [%a14]-60,%d2
803f8e3c:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8e40:	ff 12 07 00 	jge %d2,1,803f8e4e <IfxScuCcu_init+0xd98>
803f8e44:	82 12       	mov %d2,1
803f8e46:	59 e2 d4 ff 	st.w [%a14]-44,%d2
803f8e4a:	1d 00 0d 00 	j 803f8e64 <IfxScuCcu_init+0xdae>
        while (SCU_CCUCON5.B.LCK != 0U)
803f8e4e:	91 30 00 2f 	movh.a %a2,61443
803f8e52:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_START2_end+0x4fc3fc20>>
803f8e56:	54 22       	ld.w %d2,[%a2]
803f8e58:	37 02 e1 2f 	extr.u %d2,%d2,31,1
803f8e5c:	8f f2 0f 21 	and %d2,%d2,255
803f8e60:	df 02 e9 ff 	jne %d2,0,803f8e32 <IfxScuCcu_init+0xd7c>
        SCU_CCUCON5.U     = ccucon5.U;
803f8e64:	91 30 00 2f 	movh.a %a2,61443
803f8e68:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_START2_end+0x4fc3fc20>>
803f8e6c:	19 e2 c8 ef 	ld.w %d2,[%a14]-120 <f003604c <_START2_end+0x4fc3fc20>>
803f8e70:	74 22       	st.w [%a2],%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
803f8e72:	3b 00 00 21 	mov %d2,4096
803f8e76:	59 e2 c4 ff 	st.w [%a14]-60,%d2
        while (SCU_CCUCON5.B.LCK != 0U)
803f8e7a:	1d 00 10 00 	j 803f8e9a <IfxScuCcu_init+0xde4>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f8e7e:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8e82:	c2 f2       	add %d2,-1
803f8e84:	59 e2 c4 ff 	st.w [%a14]-60,%d2
803f8e88:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
803f8e8c:	ff 12 07 00 	jge %d2,1,803f8e9a <IfxScuCcu_init+0xde4>
803f8e90:	82 12       	mov %d2,1
803f8e92:	59 e2 d4 ff 	st.w [%a14]-44,%d2
803f8e96:	1d 00 0d 00 	j 803f8eb0 <IfxScuCcu_init+0xdfa>
        while (SCU_CCUCON5.B.LCK != 0U)
803f8e9a:	91 30 00 2f 	movh.a %a2,61443
803f8e9e:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_START2_end+0x4fc3fc20>>
803f8ea2:	54 22       	ld.w %d2,[%a2]
803f8ea4:	37 02 e1 2f 	extr.u %d2,%d2,31,1
803f8ea8:	8f f2 0f 21 	and %d2,%d2,255
803f8eac:	df 02 e9 ff 	jne %d2,0,803f8e7e <IfxScuCcu_init+0xdc8>
        ccucon6.U     = SCU_CCUCON6.U & ~clockDistributionConfig->ccucon6.mask;
803f8eb0:	91 30 00 2f 	movh.a %a2,61443
803f8eb4:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_START2_end+0x4fc3fc54>>
803f8eb8:	54 23       	ld.w %d3,[%a2]
803f8eba:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036080 <_START2_end+0x4fc3fc54>>
803f8ebe:	d9 22 24 00 	lea %a2,[%a2]36 <f0036080 <_START2_end+0x4fc3fc54>>
803f8ec2:	54 22       	ld.w %d2,[%a2]
803f8ec4:	46 02       	not %d2
803f8ec6:	26 32       	and %d2,%d3
803f8ec8:	59 e2 c4 ef 	st.w [%a14]-124,%d2
        ccucon6.U    |= (clockDistributionConfig->ccucon6.mask & clockDistributionConfig->ccucon6.value);
803f8ecc:	19 e3 c4 ef 	ld.w %d3,[%a14]-124
803f8ed0:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
803f8ed4:	d9 22 24 00 	lea %a2,[%a2]36
803f8ed8:	54 24       	ld.w %d4,[%a2]
803f8eda:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
803f8ede:	d9 22 20 00 	lea %a2,[%a2]32
803f8ee2:	54 22       	ld.w %d2,[%a2]
803f8ee4:	26 42       	and %d2,%d4
803f8ee6:	a6 32       	or %d2,%d3
803f8ee8:	59 e2 c4 ef 	st.w [%a14]-124,%d2
        SCU_CCUCON6.U = ccucon6.U;
803f8eec:	91 30 00 2f 	movh.a %a2,61443
803f8ef0:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_START2_end+0x4fc3fc54>>
803f8ef4:	19 e2 c4 ef 	ld.w %d2,[%a14]-124 <f0036080 <_START2_end+0x4fc3fc54>>
803f8ef8:	74 22       	st.w [%a2],%d2
        ccucon7.U     = SCU_CCUCON7.U & ~clockDistributionConfig->ccucon7.mask;
803f8efa:	91 30 00 2f 	movh.a %a2,61443
803f8efe:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_START2_end+0x4fc3fc58>>
803f8f02:	54 23       	ld.w %d3,[%a2]
803f8f04:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036084 <_START2_end+0x4fc3fc58>>
803f8f08:	d9 22 2c 00 	lea %a2,[%a2]44 <f0036084 <_START2_end+0x4fc3fc58>>
803f8f0c:	54 22       	ld.w %d2,[%a2]
803f8f0e:	46 02       	not %d2
803f8f10:	26 32       	and %d2,%d3
803f8f12:	59 e2 c0 ef 	st.w [%a14]-128,%d2
        ccucon7.U    |= (clockDistributionConfig->ccucon7.mask & clockDistributionConfig->ccucon7.value);
803f8f16:	19 e3 c0 ef 	ld.w %d3,[%a14]-128
803f8f1a:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
803f8f1e:	d9 22 2c 00 	lea %a2,[%a2]44
803f8f22:	54 24       	ld.w %d4,[%a2]
803f8f24:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
803f8f28:	d9 22 28 00 	lea %a2,[%a2]40
803f8f2c:	54 22       	ld.w %d2,[%a2]
803f8f2e:	26 42       	and %d2,%d4
803f8f30:	a6 32       	or %d2,%d3
803f8f32:	59 e2 c0 ef 	st.w [%a14]-128,%d2
        SCU_CCUCON7.U = ccucon7.U;
803f8f36:	91 30 00 2f 	movh.a %a2,61443
803f8f3a:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_START2_end+0x4fc3fc58>>
803f8f3e:	19 e2 c0 ef 	ld.w %d2,[%a14]-128 <f0036084 <_START2_end+0x4fc3fc58>>
803f8f42:	74 22       	st.w [%a2],%d2
        ccucon8.U     = SCU_CCUCON8.U & ~clockDistributionConfig->ccucon8.mask;
803f8f44:	91 30 00 2f 	movh.a %a2,61443
803f8f48:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_START2_end+0x4fc3fc5c>>
803f8f4c:	54 23       	ld.w %d3,[%a2]
803f8f4e:	99 e2 d8 ff 	ld.a %a2,[%a14]-40 <f0036088 <_START2_end+0x4fc3fc5c>>
803f8f52:	d9 22 34 00 	lea %a2,[%a2]52 <f0036088 <_START2_end+0x4fc3fc5c>>
803f8f56:	54 22       	ld.w %d2,[%a2]
803f8f58:	46 02       	not %d2
803f8f5a:	26 32       	and %d2,%d3
803f8f5c:	59 e2 fc df 	st.w [%a14]-132,%d2
        ccucon8.U    |= (clockDistributionConfig->ccucon8.mask & clockDistributionConfig->ccucon8.value);
803f8f60:	19 e3 fc df 	ld.w %d3,[%a14]-132
803f8f64:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
803f8f68:	d9 22 34 00 	lea %a2,[%a2]52
803f8f6c:	54 24       	ld.w %d4,[%a2]
803f8f6e:	99 e2 d8 ff 	ld.a %a2,[%a14]-40
803f8f72:	d9 22 30 00 	lea %a2,[%a2]48
803f8f76:	54 22       	ld.w %d2,[%a2]
803f8f78:	26 42       	and %d2,%d4
803f8f7a:	a6 32       	or %d2,%d3
803f8f7c:	59 e2 fc df 	st.w [%a14]-132,%d2
        SCU_CCUCON8.U = ccucon8.U;
803f8f80:	91 30 00 2f 	movh.a %a2,61443
803f8f84:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_START2_end+0x4fc3fc5c>>
803f8f88:	19 e2 fc df 	ld.w %d2,[%a14]-132 <f0036088 <_START2_end+0x4fc3fc5c>>
803f8f8c:	74 22       	st.w [%a2],%d2
    IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
803f8f8e:	b9 e2 cc ff 	ld.hu %d2,[%a14]-52 <f0036088 <_START2_end+0x4fc3fc5c>>
803f8f92:	f9 e2 c2 ff 	st.h [%a14]-62 <f0036088 <_START2_end+0x4fc3fc5c>>,%d2
    if (SCU_WDTS_CON0.B.LCK)
803f8f96:	91 30 00 2f 	movh.a %a2,61443
803f8f9a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f8f9e:	54 22       	ld.w %d2,[%a2]
803f8fa0:	37 02 e1 20 	extr.u %d2,%d2,1,1
803f8fa4:	8f f2 0f 21 	and %d2,%d2,255
803f8fa8:	df 02 18 00 	jeq %d2,0,803f8fd8 <IfxScuCcu_init+0xf22>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f8fac:	b9 e2 c2 ff 	ld.hu %d2,[%a14]-62
803f8fb0:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f8fb2:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f8fb6:	91 30 00 2f 	movh.a %a2,61443
803f8fba:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f8fbe:	54 22       	ld.w %d2,[%a2]
803f8fc0:	37 02 70 28 	extr.u %d2,%d2,16,16
803f8fc4:	37 02 70 20 	extr.u %d2,%d2,0,16
803f8fc8:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f8fcc:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f8fce:	91 30 00 2f 	movh.a %a2,61443
803f8fd2:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f8fd6:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f8fd8:	b9 e2 c2 ff 	ld.hu %d2,[%a14]-62 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f8fdc:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f8fde:	8f 32 40 31 	or %d3,%d2,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f8fe2:	91 30 00 2f 	movh.a %a2,61443
803f8fe6:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f8fea:	54 22       	ld.w %d2,[%a2]
803f8fec:	37 02 70 28 	extr.u %d2,%d2,16,16
803f8ff0:	37 02 70 20 	extr.u %d2,%d2,0,16
803f8ff4:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f8ff8:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f8ffa:	91 30 00 2f 	movh.a %a2,61443
803f8ffe:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f9002:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
803f9004:	00 00       	nop 
803f9006:	91 30 00 2f 	movh.a %a2,61443
803f900a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f900e:	54 22       	ld.w %d2,[%a2]
803f9010:	37 02 61 20 	extr.u %d2,%d2,0,1
803f9014:	8f f2 0f 21 	and %d2,%d2,255
803f9018:	df 02 f7 7f 	jeq %d2,0,803f9006 <IfxScuCcu_init+0xf50>
}
803f901c:	00 00       	nop 
    return (boolean)initError;
803f901e:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
803f9022:	8f f2 0f 21 	and %d2,%d2,255
803f9026:	e9 e2 ff ff 	st.b [%a14]-1,%d2
        IfxScuWdt_setCpuEndinit(endInitPW);
    }

#endif

    if (!status)
803f902a:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
803f902e:	df 02 37 81 	jne %d2,0,803f929c <IfxScuCcu_init+0x11e6>
    {
        status = IfxScuCcu_throttleSysPllClockInline(&config->sysPllThrottleConfig);
803f9032:	19 e2 dc df 	ld.w %d2,[%a14]-164
803f9036:	1b 82 01 20 	addi %d2,%d2,24
803f903a:	59 e2 fc ef 	st.w [%a14]-68,%d2
}


IFX_INLINE boolean IfxScuCcu_throttleSysPllClockInline(const IfxScuCcu_PllThrottleConfig *pllThrottleConfig)
{
    uint8  initError = 0;
803f903e:	82 02       	mov %d2,0
803f9040:	e9 e2 fb ef 	st.b [%a14]-69,%d2
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
803f9044:	7b 30 00 2f 	movh %d2,61443
803f9048:	1b 82 2a 26 	addi %d2,%d2,25256
803f904c:	59 e2 f4 ef 	st.w [%a14]-76,%d2
    password  = watchdog->CON0.B.PW;
803f9050:	99 e2 f4 ef 	ld.a %a2,[%a14]-76
803f9054:	54 22       	ld.w %d2,[%a2]
803f9056:	37 02 6e 21 	extr.u %d2,%d2,2,14
803f905a:	37 02 70 20 	extr.u %d2,%d2,0,16
803f905e:	f9 e2 f2 ef 	st.h [%a14]-78,%d2
    password ^= 0x003F;
803f9062:	c9 e2 f2 ef 	ld.h %d2,[%a14]-78
803f9066:	8f f2 83 21 	xor %d2,%d2,63
803f906a:	f9 e2 f2 ef 	st.h [%a14]-78,%d2
    return password;
803f906e:	b9 e2 f2 ef 	ld.hu %d2,[%a14]-78
    uint8  pllStepsCount;
    uint16 endinitSfty_pw;
    uint32 timeoutCycleCount;

    /*get the watch-dog passwords for usage with this function*/
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
803f9072:	f9 e2 f0 ef 	st.h [%a14]-80,%d2

    /*Start Pll ramp up sequence */
    for (pllStepsCount = 0; pllStepsCount < pllThrottleConfig->numOfSteps; pllStepsCount++)
803f9076:	82 02       	mov %d2,0
803f9078:	e9 e2 ef ef 	st.b [%a14]-81,%d2
803f907c:	1d 00 05 01 	j 803f9286 <IfxScuCcu_init+0x11d0>
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
803f9080:	b9 e2 f0 ef 	ld.hu %d2,[%a14]-80
803f9084:	f9 e2 ec ef 	st.h [%a14]-84,%d2
    if (SCU_WDTS_CON0.B.LCK)
803f9088:	91 30 00 2f 	movh.a %a2,61443
803f908c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f9090:	54 22       	ld.w %d2,[%a2]
803f9092:	37 02 e1 20 	extr.u %d2,%d2,1,1
803f9096:	8f f2 0f 21 	and %d2,%d2,255
803f909a:	df 02 18 00 	jeq %d2,0,803f90ca <IfxScuCcu_init+0x1014>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f909e:	b9 e2 ec ef 	ld.hu %d2,[%a14]-84
803f90a2:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f90a4:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f90a8:	91 30 00 2f 	movh.a %a2,61443
803f90ac:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f90b0:	54 22       	ld.w %d2,[%a2]
803f90b2:	37 02 70 28 	extr.u %d2,%d2,16,16
803f90b6:	37 02 70 20 	extr.u %d2,%d2,0,16
803f90ba:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f90be:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f90c0:	91 30 00 2f 	movh.a %a2,61443
803f90c4:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f90c8:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f90ca:	b9 e2 ec ef 	ld.hu %d2,[%a14]-84 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f90ce:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f90d0:	8f 22 40 31 	or %d3,%d2,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f90d4:	91 30 00 2f 	movh.a %a2,61443
803f90d8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f90dc:	54 22       	ld.w %d2,[%a2]
803f90de:	37 02 70 28 	extr.u %d2,%d2,16,16
803f90e2:	37 02 70 20 	extr.u %d2,%d2,0,16
803f90e6:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f90ea:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f90ec:	91 30 00 2f 	movh.a %a2,61443
803f90f0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f90f4:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
803f90f6:	00 00       	nop 
803f90f8:	91 30 00 2f 	movh.a %a2,61443
803f90fc:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f9100:	54 22       	ld.w %d2,[%a2]
803f9102:	37 02 61 20 	extr.u %d2,%d2,0,1
803f9106:	8f f2 0f 21 	and %d2,%d2,255
803f910a:	df 12 f7 7f 	jeq %d2,1,803f90f8 <IfxScuCcu_init+0x1042>
}
803f910e:	00 00       	nop 

            /*Configure K2 divider */
            timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
803f9110:	3b 00 00 26 	mov %d2,24576
803f9114:	59 e2 e8 ef 	st.w [%a14]-88,%d2

            while (SCU_SYSPLLSTAT.B.K2RDY == 0U)
803f9118:	1d 00 10 00 	j 803f9138 <IfxScuCcu_init+0x1082>
            {
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
803f911c:	19 e2 e8 ef 	ld.w %d2,[%a14]-88
803f9120:	c2 f2       	add %d2,-1
803f9122:	59 e2 e8 ef 	st.w [%a14]-88,%d2
803f9126:	19 e2 e8 ef 	ld.w %d2,[%a14]-88
803f912a:	ff 12 07 00 	jge %d2,1,803f9138 <IfxScuCcu_init+0x1082>
803f912e:	82 12       	mov %d2,1
803f9130:	e9 e2 fb ef 	st.b [%a14]-69,%d2
803f9134:	1d 00 0d 00 	j 803f914e <IfxScuCcu_init+0x1098>
            while (SCU_SYSPLLSTAT.B.K2RDY == 0U)
803f9138:	91 30 00 2f 	movh.a %a2,61443
803f913c:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_START2_end+0x4fc3fbe8>>
803f9140:	54 22       	ld.w %d2,[%a2]
803f9142:	37 02 e1 22 	extr.u %d2,%d2,5,1
803f9146:	8f f2 0f 21 	and %d2,%d2,255
803f914a:	df 02 e9 7f 	jeq %d2,0,803f911c <IfxScuCcu_init+0x1066>
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_SYSPLLCON1.B.K2DIV = pllThrottleConfig->pllSteps[pllStepsCount].k2Step;
803f914e:	99 e2 fc ef 	ld.a %a2,[%a14]-68
803f9152:	b0 42       	add.a %a2,4
803f9154:	54 23       	ld.w %d3,[%a2]
803f9156:	39 e2 ef ef 	ld.bu %d2,[%a14]-81
803f915a:	06 32       	sh %d2,3
803f915c:	60 32       	mov.a %a2,%d3
803f915e:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
803f9162:	14 22       	ld.bu %d2,[%a2]
803f9164:	91 30 00 2f 	movh.a %a2,61443
803f9168:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_START2_end+0x4fc3fbf0>>
803f916c:	8f 72 00 21 	and %d2,%d2,7
803f9170:	8f f2 0f 31 	and %d3,%d2,255
803f9174:	54 22       	ld.w %d2,[%a2]
803f9176:	37 32 03 20 	insert %d2,%d2,%d3,0,3
803f917a:	74 22       	st.w [%a2],%d2
            IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
803f917c:	b9 e2 f0 ef 	ld.hu %d2,[%a14]-80
803f9180:	f9 e2 e6 ef 	st.h [%a14]-90,%d2
    if (SCU_WDTS_CON0.B.LCK)
803f9184:	91 30 00 2f 	movh.a %a2,61443
803f9188:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f918c:	54 22       	ld.w %d2,[%a2]
803f918e:	37 02 e1 20 	extr.u %d2,%d2,1,1
803f9192:	8f f2 0f 21 	and %d2,%d2,255
803f9196:	df 02 18 00 	jeq %d2,0,803f91c6 <IfxScuCcu_init+0x1110>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f919a:	b9 e2 e6 ef 	ld.hu %d2,[%a14]-90
803f919e:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f91a0:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f91a4:	91 30 00 2f 	movh.a %a2,61443
803f91a8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f91ac:	54 22       	ld.w %d2,[%a2]
803f91ae:	37 02 70 28 	extr.u %d2,%d2,16,16
803f91b2:	37 02 70 20 	extr.u %d2,%d2,0,16
803f91b6:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f91ba:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f91bc:	91 30 00 2f 	movh.a %a2,61443
803f91c0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f91c4:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f91c6:	b9 e2 e6 ef 	ld.hu %d2,[%a14]-90 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f91ca:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f91cc:	8f 32 40 31 	or %d3,%d2,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f91d0:	91 30 00 2f 	movh.a %a2,61443
803f91d4:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f91d8:	54 22       	ld.w %d2,[%a2]
803f91da:	37 02 70 28 	extr.u %d2,%d2,16,16
803f91de:	37 02 70 20 	extr.u %d2,%d2,0,16
803f91e2:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f91e6:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f91e8:	91 30 00 2f 	movh.a %a2,61443
803f91ec:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f91f0:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
803f91f2:	00 00       	nop 
803f91f4:	91 30 00 2f 	movh.a %a2,61443
803f91f8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f91fc:	54 22       	ld.w %d2,[%a2]
803f91fe:	37 02 61 20 	extr.u %d2,%d2,0,1
803f9202:	8f f2 0f 21 	and %d2,%d2,255
803f9206:	df 02 f7 7f 	jeq %d2,0,803f91f4 <IfxScuCcu_init+0x113e>
}
803f920a:	00 00       	nop 
        }

        /*Wait for waitCounter corresponding to the pll step */
        IfxScuCcu_wait(pllThrottleConfig->pllSteps[pllStepsCount].waitTime);
803f920c:	99 e2 fc ef 	ld.a %a2,[%a14]-68
803f9210:	b0 42       	add.a %a2,4
803f9212:	54 23       	ld.w %d3,[%a2]
803f9214:	39 e2 ef ef 	ld.bu %d2,[%a14]-81
803f9218:	06 32       	sh %d2,3
803f921a:	60 32       	mov.a %a2,%d3
803f921c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
803f9220:	b0 42       	add.a %a2,4
803f9222:	54 22       	ld.w %d2,[%a2]
803f9224:	59 e2 e0 ef 	st.w [%a14]-96,%d2
    return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON0.B.STMDIV;
803f9228:	82 04       	mov %d4,0
803f922a:	6d ff e5 f6 	call 803f7ff4 <IfxScuCcu_getSourceFrequency>
803f922e:	02 23       	mov %d3,%d2
803f9230:	91 30 00 2f 	movh.a %a2,61443
803f9234:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fc3fc04>>
803f9238:	54 22       	ld.w %d2,[%a2]
803f923a:	37 02 64 20 	extr.u %d2,%d2,0,4
803f923e:	8f f2 0f 21 	and %d2,%d2,255
803f9242:	4b 02 41 21 	itof %d2,%d2
803f9246:	4b 23 51 30 	div.f %d3,%d3,%d2
}


IFX_INLINE void IfxScuCcu_wait(float32 timeSec)
{
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
803f924a:	19 e2 e0 ef 	ld.w %d2,[%a14]-96
803f924e:	4b 23 41 20 	mul.f %d2,%d3,%d2
803f9252:	4b 02 71 21 	ftouz %d2,%d2
803f9256:	59 e2 dc ef 	st.w [%a14]-100,%d2
    uint32 stmCountBegin = STM0_TIM0.U;
803f925a:	c5 f2 10 01 	lea %a2,f0001010 <_START2_end+0x4fc0abe4>
803f925e:	54 22       	ld.w %d2,[%a2]
803f9260:	59 e2 d8 ef 	st.w [%a14]-104,%d2

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
803f9264:	00 00       	nop 
803f9266:	c5 f2 10 01 	lea %a2,f0001010 <_START2_end+0x4fc0abe4>
803f926a:	54 23       	ld.w %d3,[%a2]
803f926c:	19 e2 d8 ef 	ld.w %d2,[%a14]-104
803f9270:	a2 23       	sub %d3,%d2
803f9272:	19 e2 dc ef 	ld.w %d2,[%a14]-100
803f9276:	3f 23 f8 ff 	jlt.u %d3,%d2,803f9266 <IfxScuCcu_init+0x11b0>
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
803f927a:	00 00       	nop 
    for (pllStepsCount = 0; pllStepsCount < pllThrottleConfig->numOfSteps; pllStepsCount++)
803f927c:	39 e2 ef ef 	ld.bu %d2,[%a14]-81
803f9280:	c2 12       	add %d2,1
803f9282:	e9 e2 ef ef 	st.b [%a14]-81,%d2
803f9286:	99 e2 fc ef 	ld.a %a2,[%a14]-68
803f928a:	14 22       	ld.bu %d2,[%a2]
803f928c:	39 e3 ef ef 	ld.bu %d3,[%a14]-81
803f9290:	3f 23 f8 fe 	jlt.u %d3,%d2,803f9080 <IfxScuCcu_init+0xfca>
    return (boolean)initError;
803f9294:	39 e2 fb ef 	ld.bu %d2,[%a14]-69
803f9298:	e9 e2 ff ff 	st.b [%a14]-1,%d2
    }

    return status;
803f929c:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
}
803f92a0:	00 90       	ret 

803f92a2 <IfxScuCcu_modulation_init>:
    *cfg = IfxScuCcu_defaultClockConfig;
}


void IfxScuCcu_modulation_init(const IfxScuCcu_Mod_Config *Mod_Cfg)
{
803f92a2:	40 ae       	mov.aa %a14,%sp
803f92a4:	20 28       	sub.a %sp,40
803f92a6:	b5 e4 dc ff 	st.a [%a14]-36,%a4
    uint16                        endinitSfty_pw;
    IfxScuCcu_RGain_Values        RGain_P;
    IfxScuCcu_ModEn               mod_enable = Mod_Cfg->Mod_Enable;
803f92aa:	99 e2 dc ff 	ld.a %a2,[%a14]-36
803f92ae:	54 22       	ld.w %d2,[%a2]
803f92b0:	59 e2 fc ff 	st.w [%a14]-4,%d2
    IfxScuCcu_ModulationAmplitude Mod_Amp    = Mod_Cfg->Mod_Amp;
803f92b4:	99 e2 dc ff 	ld.a %a2,[%a14]-36
803f92b8:	b0 42       	add.a %a2,4
803f92ba:	54 22       	ld.w %d2,[%a2]
803f92bc:	59 e2 f8 ff 	st.w [%a14]-8,%d2

    Ifx_SCU_SYSPLLCON0            syspllcon0;
    Ifx_SCU_SYSPLLCON2            syspllcon2;

    if (mod_enable == IfxScuCcu_ModEn_enabled)  /* do this only if modulation is enabled */
803f92c0:	19 e2 fc ff 	ld.w %d2,[%a14]-4
803f92c4:	df 12 42 80 	jne %d2,1,803f9348 <IfxScuCcu_modulation_init+0xa6>
    {
        /* Get the parameters */
        IfxScuCcu_calRGainParameters(Mod_Amp, &RGain_P);
803f92c8:	d9 e2 ec ff 	lea %a2,[%a14]-20
803f92cc:	40 24       	mov.aa %a4,%a2
803f92ce:	19 e4 f8 ff 	ld.w %d4,[%a14]-8
803f92d2:	6d ff 42 f4 	call 803f7b56 <IfxScuCcu_calRGainParameters>

        /* clear endinit protection */
        endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
803f92d6:	6d 00 46 02 	call 803f9762 <IfxScuWdt_getSafetyWatchdogPassword>
803f92da:	f9 e2 f6 ff 	st.h [%a14]-10,%d2
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
803f92de:	b9 e2 f6 ff 	ld.hu %d2,[%a14]-10
803f92e2:	02 24       	mov %d4,%d2
803f92e4:	6d 00 8a 00 	call 803f93f8 <IfxScuWdt_clearSafetyEndinit>

        /* write all registers here */

        /* Write SYSPLLCON2 with RGain */
        syspllcon2.U        = SCU_SYSPLLCON2.U;
803f92e8:	91 30 00 2f 	movh.a %a2,61443
803f92ec:	d9 22 20 06 	lea %a2,[%a2]24608 <f0036020 <_START2_end+0x4fc3fbf4>>
803f92f0:	54 22       	ld.w %d2,[%a2]
803f92f2:	59 e2 e4 ff 	st.w [%a14]-28 <f0036020 <_START2_end+0x4fc3fbf4>>,%d2
        syspllcon2.B.MODCFG = IFXSCUCCU_GET_MODCFG(RGain_P.RGainHex);
803f92f6:	b9 e2 f0 ff 	ld.hu %d2,[%a14]-16 <f0036020 <_START2_end+0x4fc3fbf4>>
803f92fa:	3b 00 40 3f 	mov %d3,-3072
803f92fe:	a6 32       	or %d2,%d3
803f9300:	37 02 70 20 	extr.u %d2,%d2,0,16
803f9304:	f9 e2 e4 ff 	st.h [%a14]-28,%d2
        SCU_SYSPLLCON2.U    = syspllcon2.U;
803f9308:	91 30 00 2f 	movh.a %a2,61443
803f930c:	d9 22 20 06 	lea %a2,[%a2]24608 <f0036020 <_START2_end+0x4fc3fbf4>>
803f9310:	19 e2 e4 ff 	ld.w %d2,[%a14]-28 <f0036020 <_START2_end+0x4fc3fbf4>>
803f9314:	74 22       	st.w [%a2],%d2

        /* enable modulation now */
        syspllcon0.U       = SCU_SYSPLLCON0.U;
803f9316:	91 30 00 2f 	movh.a %a2,61443
803f931a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803f931e:	54 22       	ld.w %d2,[%a2]
803f9320:	59 e2 e8 ff 	st.w [%a14]-24 <f0036018 <_START2_end+0x4fc3fbec>>,%d2
        syspllcon0.B.MODEN = (uint32)IfxScuCcu_ModEn_enabled;
803f9324:	19 e2 e8 ff 	ld.w %d2,[%a14]-24 <f0036018 <_START2_end+0x4fc3fbec>>
803f9328:	b7 12 01 21 	insert %d2,%d2,1,2,1
803f932c:	59 e2 e8 ff 	st.w [%a14]-24,%d2
        SCU_SYSPLLCON0.U   = syspllcon0.U;
803f9330:	91 30 00 2f 	movh.a %a2,61443
803f9334:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803f9338:	19 e2 e8 ff 	ld.w %d2,[%a14]-24 <f0036018 <_START2_end+0x4fc3fbec>>
803f933c:	74 22       	st.w [%a2],%d2

        /* set the endinit protection again */
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
803f933e:	b9 e2 f6 ff 	ld.hu %d2,[%a14]-10 <f0036018 <_START2_end+0x4fc3fbec>>
803f9342:	02 24       	mov %d4,%d2
803f9344:	6d 00 7f 02 	call 803f9842 <IfxScuWdt_setSafetyEndinit>
    }
}
803f9348:	00 00       	nop 
803f934a:	00 90       	ret 

803f934c <IfxScuWdt_clearCpuEndinit>:
    {}
}


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
803f934c:	40 ae       	mov.aa %a14,%sp
803f934e:	20 18       	sub.a %sp,24
803f9350:	02 42       	mov %d2,%d4
803f9352:	f9 e2 ec ff 	st.h [%a14]-20,%d2


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
803f9356:	4d c0 e1 2f 	mfcr %d2,$core_id
803f935a:	59 e2 f4 ff 	st.w [%a14]-12,%d2
803f935e:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
803f9362:	59 e2 f0 ff 	st.w [%a14]-16,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
803f9366:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
803f936a:	37 02 63 20 	extr.u %d2,%d2,0,3
803f936e:	8f f2 0f 21 	and %d2,%d2,255
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
803f9372:	53 c2 20 20 	mul %d2,%d2,12
803f9376:	1b c2 24 36 	addi %d3,%d2,25164
803f937a:	9b 33 00 3f 	addih %d3,%d3,61443
803f937e:	b9 e2 ec ff 	ld.hu %d2,[%a14]-20
803f9382:	59 e3 fc ff 	st.w [%a14]-4,%d3
803f9386:	f9 e2 fa ff 	st.h [%a14]-6,%d2
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
803f938a:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f938e:	54 22       	ld.w %d2,[%a2]
803f9390:	37 02 e1 20 	extr.u %d2,%d2,1,1
803f9394:	8f f2 0f 21 	and %d2,%d2,255
803f9398:	df 02 14 00 	jeq %d2,0,803f93c0 <IfxScuWdt_clearCpuEndinit+0x74>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f939c:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
803f93a0:	06 22       	sh %d2,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
803f93a2:	8f 12 40 31 	or %d3,%d2,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f93a6:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f93aa:	54 22       	ld.w %d2,[%a2]
803f93ac:	37 02 70 28 	extr.u %d2,%d2,16,16
803f93b0:	37 02 70 20 	extr.u %d2,%d2,0,16
803f93b4:	8f 02 01 20 	sh %d2,%d2,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f93b8:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f93ba:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f93be:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f93c0:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
803f93c4:	06 22       	sh %d2,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
803f93c6:	8f 22 40 31 	or %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f93ca:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f93ce:	54 22       	ld.w %d2,[%a2]
803f93d0:	37 02 70 28 	extr.u %d2,%d2,16,16
803f93d4:	37 02 70 20 	extr.u %d2,%d2,0,16
803f93d8:	8f 02 01 20 	sh %d2,%d2,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f93dc:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f93de:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f93e2:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
803f93e4:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f93e8:	54 22       	ld.w %d2,[%a2]
803f93ea:	37 02 61 20 	extr.u %d2,%d2,0,1
803f93ee:	8f f2 0f 21 	and %d2,%d2,255
803f93f2:	df 12 f9 7f 	jeq %d2,1,803f93e4 <IfxScuWdt_clearCpuEndinit+0x98>
}
803f93f6:	00 90       	ret 

803f93f8 <IfxScuWdt_clearSafetyEndinit>:
    {}
}


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
803f93f8:	40 ae       	mov.aa %a14,%sp
803f93fa:	20 10       	sub.a %sp,16
803f93fc:	02 42       	mov %d2,%d4
803f93fe:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    IfxScuWdt_clearSafetyEndinitInline(password);
803f9402:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
803f9406:	f9 e2 fe ff 	st.h [%a14]-2,%d2
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
803f940a:	91 30 00 2f 	movh.a %a2,61443
803f940e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f9412:	54 22       	ld.w %d2,[%a2]
803f9414:	37 02 e1 20 	extr.u %d2,%d2,1,1
803f9418:	8f f2 0f 21 	and %d2,%d2,255
803f941c:	df 02 18 00 	jeq %d2,0,803f944c <IfxScuWdt_clearSafetyEndinit+0x54>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f9420:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
803f9424:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f9426:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f942a:	91 30 00 2f 	movh.a %a2,61443
803f942e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f9432:	54 22       	ld.w %d2,[%a2]
803f9434:	37 02 70 28 	extr.u %d2,%d2,16,16
803f9438:	37 02 70 20 	extr.u %d2,%d2,0,16
803f943c:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f9440:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f9442:	91 30 00 2f 	movh.a %a2,61443
803f9446:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f944a:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f944c:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f9450:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f9452:	8f 22 40 31 	or %d3,%d2,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f9456:	91 30 00 2f 	movh.a %a2,61443
803f945a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f945e:	54 22       	ld.w %d2,[%a2]
803f9460:	37 02 70 28 	extr.u %d2,%d2,16,16
803f9464:	37 02 70 20 	extr.u %d2,%d2,0,16
803f9468:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f946c:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f946e:	91 30 00 2f 	movh.a %a2,61443
803f9472:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f9476:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
803f9478:	91 30 00 2f 	movh.a %a2,61443
803f947c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f9480:	54 22       	ld.w %d2,[%a2]
803f9482:	37 02 61 20 	extr.u %d2,%d2,0,1
803f9486:	8f f2 0f 21 	and %d2,%d2,255
803f948a:	df 12 f7 7f 	jeq %d2,1,803f9478 <IfxScuWdt_clearSafetyEndinit+0x80>
}
803f948e:	00 90       	ret 

803f9490 <IfxScuWdt_disableCpuWatchdog>:


void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
803f9490:	40 ae       	mov.aa %a14,%sp
803f9492:	20 28       	sub.a %sp,40
803f9494:	02 42       	mov %d2,%d4
803f9496:	f9 e2 dc ff 	st.h [%a14]-36,%d2
    reg.U = __mfcr(CPU_CORE_ID);
803f949a:	4d c0 e1 2f 	mfcr %d2,$core_id
803f949e:	59 e2 e4 ff 	st.w [%a14]-28,%d2
803f94a2:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
803f94a6:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
803f94aa:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f94ae:	37 02 63 20 	extr.u %d2,%d2,0,3
803f94b2:	8f f2 0f 21 	and %d2,%d2,255
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
803f94b6:	59 e2 fc ff 	st.w [%a14]-4,%d2
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
803f94ba:	19 e2 fc ff 	ld.w %d2,[%a14]-4
803f94be:	53 c2 20 20 	mul %d2,%d2,12
803f94c2:	1b c2 24 26 	addi %d2,%d2,25164
803f94c6:	9b 32 00 2f 	addih %d2,%d2,61443
803f94ca:	59 e2 f8 ff 	st.w [%a14]-8,%d2

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
803f94ce:	b9 e2 dc ff 	ld.hu %d2,[%a14]-36
803f94d2:	19 e3 f8 ff 	ld.w %d3,[%a14]-8
803f94d6:	59 e3 ec ff 	st.w [%a14]-20,%d3
803f94da:	f9 e2 ea ff 	st.h [%a14]-22,%d2
    if (watchdog->CON0.B.LCK)
803f94de:	99 e2 ec ff 	ld.a %a2,[%a14]-20
803f94e2:	54 22       	ld.w %d2,[%a2]
803f94e4:	37 02 e1 20 	extr.u %d2,%d2,1,1
803f94e8:	8f f2 0f 21 	and %d2,%d2,255
803f94ec:	df 02 14 00 	jeq %d2,0,803f9514 <IfxScuWdt_disableCpuWatchdog+0x84>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f94f0:	b9 e2 ea ff 	ld.hu %d2,[%a14]-22
803f94f4:	06 22       	sh %d2,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
803f94f6:	8f 12 40 31 	or %d3,%d2,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f94fa:	99 e2 ec ff 	ld.a %a2,[%a14]-20
803f94fe:	54 22       	ld.w %d2,[%a2]
803f9500:	37 02 70 28 	extr.u %d2,%d2,16,16
803f9504:	37 02 70 20 	extr.u %d2,%d2,0,16
803f9508:	8f 02 01 20 	sh %d2,%d2,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f950c:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f950e:	99 e2 ec ff 	ld.a %a2,[%a14]-20
803f9512:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f9514:	b9 e2 ea ff 	ld.hu %d2,[%a14]-22
803f9518:	06 22       	sh %d2,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
803f951a:	8f 22 40 31 	or %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f951e:	99 e2 ec ff 	ld.a %a2,[%a14]-20
803f9522:	54 22       	ld.w %d2,[%a2]
803f9524:	37 02 70 28 	extr.u %d2,%d2,16,16
803f9528:	37 02 70 20 	extr.u %d2,%d2,0,16
803f952c:	8f 02 01 20 	sh %d2,%d2,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f9530:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f9532:	99 e2 ec ff 	ld.a %a2,[%a14]-20
803f9536:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
803f9538:	99 e2 ec ff 	ld.a %a2,[%a14]-20
803f953c:	54 22       	ld.w %d2,[%a2]
803f953e:	37 02 61 20 	extr.u %d2,%d2,0,1
803f9542:	8f f2 0f 21 	and %d2,%d2,255
803f9546:	df 12 f9 7f 	jeq %d2,1,803f9538 <IfxScuWdt_disableCpuWatchdog+0xa8>
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
803f954a:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
803f954e:	d9 23 04 00 	lea %a3,[%a2]4
803f9552:	54 32       	ld.w %d2,[%a3]
803f9554:	b7 12 81 21 	insert %d2,%d2,1,3,1
803f9558:	b0 42       	add.a %a2,4
803f955a:	74 22       	st.w [%a2],%d2
    IfxScuWdt_setCpuEndinitInline(wdt, password);
803f955c:	b9 e2 dc ff 	ld.hu %d2,[%a14]-36
803f9560:	19 e3 f8 ff 	ld.w %d3,[%a14]-8
803f9564:	59 e3 f4 ff 	st.w [%a14]-12,%d3
803f9568:	f9 e2 f2 ff 	st.h [%a14]-14,%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
803f956c:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
803f9570:	54 22       	ld.w %d2,[%a2]
803f9572:	37 02 e1 20 	extr.u %d2,%d2,1,1
803f9576:	8f f2 0f 21 	and %d2,%d2,255
803f957a:	df 02 14 00 	jeq %d2,0,803f95a2 <IfxScuWdt_disableCpuWatchdog+0x112>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f957e:	b9 e2 f2 ff 	ld.hu %d2,[%a14]-14
803f9582:	06 22       	sh %d2,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
803f9584:	8f 12 40 31 	or %d3,%d2,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f9588:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
803f958c:	54 22       	ld.w %d2,[%a2]
803f958e:	37 02 70 28 	extr.u %d2,%d2,16,16
803f9592:	37 02 70 20 	extr.u %d2,%d2,0,16
803f9596:	8f 02 01 20 	sh %d2,%d2,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f959a:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f959c:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
803f95a0:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f95a2:	b9 e2 f2 ff 	ld.hu %d2,[%a14]-14
803f95a6:	06 22       	sh %d2,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
803f95a8:	8f 32 40 31 	or %d3,%d2,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f95ac:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
803f95b0:	54 22       	ld.w %d2,[%a2]
803f95b2:	37 02 70 28 	extr.u %d2,%d2,16,16
803f95b6:	37 02 70 20 	extr.u %d2,%d2,0,16
803f95ba:	8f 02 01 20 	sh %d2,%d2,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f95be:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f95c0:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
803f95c4:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
803f95c6:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
803f95ca:	54 22       	ld.w %d2,[%a2]
803f95cc:	37 02 61 20 	extr.u %d2,%d2,0,1
803f95d0:	8f f2 0f 21 	and %d2,%d2,255
803f95d4:	df 02 f9 7f 	jeq %d2,0,803f95c6 <IfxScuWdt_disableCpuWatchdog+0x136>
}
803f95d8:	00 90       	ret 

803f95da <IfxScuWdt_disableSafetyWatchdog>:


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
803f95da:	40 ae       	mov.aa %a14,%sp
803f95dc:	20 10       	sub.a %sp,16
803f95de:	02 42       	mov %d2,%d4
803f95e0:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    IfxScuWdt_clearSafetyEndinitInline(password);
803f95e4:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
803f95e8:	f9 e2 fc ff 	st.h [%a14]-4,%d2
    if (SCU_WDTS_CON0.B.LCK)
803f95ec:	91 30 00 2f 	movh.a %a2,61443
803f95f0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f95f4:	54 22       	ld.w %d2,[%a2]
803f95f6:	37 02 e1 20 	extr.u %d2,%d2,1,1
803f95fa:	8f f2 0f 21 	and %d2,%d2,255
803f95fe:	df 02 18 00 	jeq %d2,0,803f962e <IfxScuWdt_disableSafetyWatchdog+0x54>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f9602:	b9 e2 fc ff 	ld.hu %d2,[%a14]-4
803f9606:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f9608:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f960c:	91 30 00 2f 	movh.a %a2,61443
803f9610:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f9614:	54 22       	ld.w %d2,[%a2]
803f9616:	37 02 70 28 	extr.u %d2,%d2,16,16
803f961a:	37 02 70 20 	extr.u %d2,%d2,0,16
803f961e:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f9622:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f9624:	91 30 00 2f 	movh.a %a2,61443
803f9628:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f962c:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f962e:	b9 e2 fc ff 	ld.hu %d2,[%a14]-4 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f9632:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f9634:	8f 22 40 31 	or %d3,%d2,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f9638:	91 30 00 2f 	movh.a %a2,61443
803f963c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f9640:	54 22       	ld.w %d2,[%a2]
803f9642:	37 02 70 28 	extr.u %d2,%d2,16,16
803f9646:	37 02 70 20 	extr.u %d2,%d2,0,16
803f964a:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f964e:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f9650:	91 30 00 2f 	movh.a %a2,61443
803f9654:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f9658:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
803f965a:	91 30 00 2f 	movh.a %a2,61443
803f965e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f9662:	54 22       	ld.w %d2,[%a2]
803f9664:	37 02 61 20 	extr.u %d2,%d2,0,1
803f9668:	8f f2 0f 21 	and %d2,%d2,255
803f966c:	df 12 f7 7f 	jeq %d2,1,803f965a <IfxScuWdt_disableSafetyWatchdog+0x80>
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
803f9670:	91 30 00 2f 	movh.a %a2,61443
803f9674:	d9 22 2c a6 	lea %a2,[%a2]25260 <f00362ac <_START2_end+0x4fc3fe80>>
803f9678:	54 22       	ld.w %d2,[%a2]
803f967a:	b7 12 81 21 	insert %d2,%d2,1,3,1
803f967e:	74 22       	st.w [%a2],%d2
    IfxScuWdt_setSafetyEndinitInline(password);
803f9680:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
803f9684:	f9 e2 fe ff 	st.h [%a14]-2,%d2
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
803f9688:	91 30 00 2f 	movh.a %a2,61443
803f968c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f9690:	54 22       	ld.w %d2,[%a2]
803f9692:	37 02 e1 20 	extr.u %d2,%d2,1,1
803f9696:	8f f2 0f 21 	and %d2,%d2,255
803f969a:	df 02 18 00 	jeq %d2,0,803f96ca <IfxScuWdt_disableSafetyWatchdog+0xf0>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f969e:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
803f96a2:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f96a4:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f96a8:	91 30 00 2f 	movh.a %a2,61443
803f96ac:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f96b0:	54 22       	ld.w %d2,[%a2]
803f96b2:	37 02 70 28 	extr.u %d2,%d2,16,16
803f96b6:	37 02 70 20 	extr.u %d2,%d2,0,16
803f96ba:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f96be:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f96c0:	91 30 00 2f 	movh.a %a2,61443
803f96c4:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f96c8:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f96ca:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f96ce:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f96d0:	8f 32 40 31 	or %d3,%d2,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f96d4:	91 30 00 2f 	movh.a %a2,61443
803f96d8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f96dc:	54 22       	ld.w %d2,[%a2]
803f96de:	37 02 70 28 	extr.u %d2,%d2,16,16
803f96e2:	37 02 70 20 	extr.u %d2,%d2,0,16
803f96e6:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f96ea:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f96ec:	91 30 00 2f 	movh.a %a2,61443
803f96f0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f96f4:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
803f96f6:	91 30 00 2f 	movh.a %a2,61443
803f96fa:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f96fe:	54 22       	ld.w %d2,[%a2]
803f9700:	37 02 61 20 	extr.u %d2,%d2,0,1
803f9704:	8f f2 0f 21 	and %d2,%d2,255
803f9708:	df 02 f7 7f 	jeq %d2,0,803f96f6 <IfxScuWdt_disableSafetyWatchdog+0x11c>
}
803f970c:	00 90       	ret 

803f970e <IfxScuWdt_getCpuWatchdogPassword>:
    IfxScuWdt_setSafetyEndinitInline(password);
}


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
803f970e:	40 ae       	mov.aa %a14,%sp
803f9710:	20 10       	sub.a %sp,16
    reg.U = __mfcr(CPU_CORE_ID);
803f9712:	4d c0 e1 2f 	mfcr %d2,$core_id
803f9716:	59 e2 f4 ff 	st.w [%a14]-12,%d2
803f971a:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
803f971e:	59 e2 f0 ff 	st.w [%a14]-16,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
803f9722:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
803f9726:	37 02 63 20 	extr.u %d2,%d2,0,3
803f972a:	8f f2 0f 21 	and %d2,%d2,255
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
803f972e:	53 c2 20 20 	mul %d2,%d2,12
803f9732:	1b c2 24 26 	addi %d2,%d2,25164
803f9736:	9b 32 00 2f 	addih %d2,%d2,61443
803f973a:	59 e2 fc ff 	st.w [%a14]-4,%d2
    password  = watchdog->CON0.B.PW;
803f973e:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f9742:	54 22       	ld.w %d2,[%a2]
803f9744:	37 02 6e 21 	extr.u %d2,%d2,2,14
803f9748:	37 02 70 20 	extr.u %d2,%d2,0,16
803f974c:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    password ^= 0x003F;
803f9750:	c9 e2 fa ff 	ld.h %d2,[%a14]-6
803f9754:	8f f2 83 21 	xor %d2,%d2,63
803f9758:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    return password;
803f975c:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
}
803f9760:	00 90       	ret 

803f9762 <IfxScuWdt_getSafetyWatchdogPassword>:
    return password;
}


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
803f9762:	40 ae       	mov.aa %a14,%sp
803f9764:	20 08       	sub.a %sp,8
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;
803f9766:	7b 30 00 2f 	movh %d2,61443
803f976a:	1b 82 2a 26 	addi %d2,%d2,25256
803f976e:	59 e2 fc ff 	st.w [%a14]-4,%d2
    password  = watchdog->CON0.B.PW;
803f9772:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f9776:	54 22       	ld.w %d2,[%a2]
803f9778:	37 02 6e 21 	extr.u %d2,%d2,2,14
803f977c:	37 02 70 20 	extr.u %d2,%d2,0,16
803f9780:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    password ^= 0x003F;
803f9784:	c9 e2 fa ff 	ld.h %d2,[%a14]-6
803f9788:	8f f2 83 21 	xor %d2,%d2,63
803f978c:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    return password;
803f9790:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
803f9794:	00 90       	ret 

803f9796 <IfxScuWdt_setCpuEndinit>:
    IfxScuWdt_setSafetyEndinit(password);
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
803f9796:	40 ae       	mov.aa %a14,%sp
803f9798:	20 18       	sub.a %sp,24
803f979a:	02 42       	mov %d2,%d4
803f979c:	f9 e2 ec ff 	st.h [%a14]-20,%d2
    reg.U = __mfcr(CPU_CORE_ID);
803f97a0:	4d c0 e1 2f 	mfcr %d2,$core_id
803f97a4:	59 e2 f4 ff 	st.w [%a14]-12,%d2
803f97a8:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
803f97ac:	59 e2 f0 ff 	st.w [%a14]-16,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
803f97b0:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
803f97b4:	37 02 63 20 	extr.u %d2,%d2,0,3
803f97b8:	8f f2 0f 21 	and %d2,%d2,255
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
803f97bc:	53 c2 20 20 	mul %d2,%d2,12
803f97c0:	1b c2 24 36 	addi %d3,%d2,25164
803f97c4:	9b 33 00 3f 	addih %d3,%d3,61443
803f97c8:	b9 e2 ec ff 	ld.hu %d2,[%a14]-20
803f97cc:	59 e3 fc ff 	st.w [%a14]-4,%d3
803f97d0:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    if (watchdog->CON0.B.LCK)
803f97d4:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f97d8:	54 22       	ld.w %d2,[%a2]
803f97da:	37 02 e1 20 	extr.u %d2,%d2,1,1
803f97de:	8f f2 0f 21 	and %d2,%d2,255
803f97e2:	df 02 14 00 	jeq %d2,0,803f980a <IfxScuWdt_setCpuEndinit+0x74>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f97e6:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
803f97ea:	06 22       	sh %d2,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
803f97ec:	8f 12 40 31 	or %d3,%d2,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f97f0:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f97f4:	54 22       	ld.w %d2,[%a2]
803f97f6:	37 02 70 28 	extr.u %d2,%d2,16,16
803f97fa:	37 02 70 20 	extr.u %d2,%d2,0,16
803f97fe:	8f 02 01 20 	sh %d2,%d2,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f9802:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f9804:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f9808:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f980a:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
803f980e:	06 22       	sh %d2,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
803f9810:	8f 32 40 31 	or %d3,%d2,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803f9814:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f9818:	54 22       	ld.w %d2,[%a2]
803f981a:	37 02 70 28 	extr.u %d2,%d2,16,16
803f981e:	37 02 70 20 	extr.u %d2,%d2,0,16
803f9822:	8f 02 01 20 	sh %d2,%d2,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803f9826:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803f9828:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f982c:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
803f982e:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803f9832:	54 22       	ld.w %d2,[%a2]
803f9834:	37 02 61 20 	extr.u %d2,%d2,0,1
803f9838:	8f f2 0f 21 	and %d2,%d2,255
803f983c:	df 02 f9 7f 	jeq %d2,0,803f982e <IfxScuWdt_setCpuEndinit+0x98>
}
803f9840:	00 90       	ret 

803f9842 <IfxScuWdt_setSafetyEndinit>:
    {}
}


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
803f9842:	40 ae       	mov.aa %a14,%sp
803f9844:	20 10       	sub.a %sp,16
803f9846:	02 42       	mov %d2,%d4
803f9848:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    IfxScuWdt_setSafetyEndinitInline(password);
803f984c:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
803f9850:	f9 e2 fe ff 	st.h [%a14]-2,%d2
    if (SCU_WDTS_CON0.B.LCK)
803f9854:	91 30 00 2f 	movh.a %a2,61443
803f9858:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f985c:	54 22       	ld.w %d2,[%a2]
803f985e:	37 02 e1 20 	extr.u %d2,%d2,1,1
803f9862:	8f f2 0f 21 	and %d2,%d2,255
803f9866:	df 02 18 00 	jeq %d2,0,803f9896 <IfxScuWdt_setSafetyEndinit+0x54>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f986a:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
803f986e:	06 22       	sh %d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f9870:	8f 12 40 31 	or %d3,%d2,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f9874:	91 30 00 2f 	movh.a %a2,61443
803f9878:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f987c:	54 22       	ld.w %d2,[%a2]
803f987e:	37 02 70 28 	extr.u %d2,%d2,16,16
803f9882:	37 02 70 20 	extr.u %d2,%d2,0,16
803f9886:	8f 02 01 20 	sh %d2,%d2,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f988a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f988c:	91 30 00 2f 	movh.a %a2,61443
803f9890:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f9894:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f9896:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f989a:	06 22       	sh %d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
803f989c:	8f 32 40 31 	or %d3,%d2,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803f98a0:	91 30 00 2f 	movh.a %a2,61443
803f98a4:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f98a8:	54 22       	ld.w %d2,[%a2]
803f98aa:	37 02 70 28 	extr.u %d2,%d2,16,16
803f98ae:	37 02 70 20 	extr.u %d2,%d2,0,16
803f98b2:	8f 02 01 20 	sh %d2,%d2,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
803f98b6:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803f98b8:	91 30 00 2f 	movh.a %a2,61443
803f98bc:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f98c0:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
803f98c2:	91 30 00 2f 	movh.a %a2,61443
803f98c6:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803f98ca:	54 22       	ld.w %d2,[%a2]
803f98cc:	37 02 61 20 	extr.u %d2,%d2,0,1
803f98d0:	8f f2 0f 21 	and %d2,%d2,255
803f98d4:	df 02 f7 7f 	jeq %d2,0,803f98c2 <IfxScuWdt_setSafetyEndinit+0x80>
}
803f98d8:	00 90       	ret 

803f98da <IfxPort_setPinMode>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
803f98da:	40 ae       	mov.aa %a14,%sp
803f98dc:	20 28       	sub.a %sp,40
803f98de:	b5 e4 e4 ff 	st.a [%a14]-28,%a4
803f98e2:	02 42       	mov %d2,%d4
803f98e4:	59 e5 dc ff 	st.w [%a14]-36,%d5
803f98e8:	e9 e2 e0 ff 	st.b [%a14]-32,%d2
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
803f98ec:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
803f98f0:	1b 02 01 20 	addi %d2,%d2,16
803f98f4:	59 e2 fc ff 	st.w [%a14]-4,%d2
    uint8                 iocrIndex = (pinIndex / 4);
803f98f8:	39 e2 e0 ff 	ld.bu %d2,[%a14]-32
803f98fc:	06 e2       	sh %d2,-2
803f98fe:	e9 e2 fb ff 	st.b [%a14]-5,%d2
    uint8                 shift     = (pinIndex & 0x3U) * 8;
803f9902:	79 e2 e0 ff 	ld.b %d2,[%a14]-32
803f9906:	8f 32 00 21 	and %d2,%d2,3
803f990a:	8f f2 0f 21 	and %d2,%d2,255
803f990e:	06 32       	sh %d2,3
803f9910:	e9 e2 fa ff 	st.b [%a14]-6,%d2

    if (port == &MODULE_P40)
803f9914:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
803f9918:	7b 40 00 3f 	movh %d3,61444
803f991c:	1b 03 80 3c 	addi %d3,%d3,-14336
803f9920:	5f 32 21 80 	jne %d2,%d3,803f9962 <IfxPort_setPinMode+0x88>
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
803f9924:	6d ff f5 fe 	call 803f970e <IfxScuWdt_getCpuWatchdogPassword>
803f9928:	f9 e2 f8 ff 	st.h [%a14]-8,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
803f992c:	b9 e2 f8 ff 	ld.hu %d2,[%a14]-8
803f9930:	02 24       	mov %d4,%d2
803f9932:	6d ff 0d fd 	call 803f934c <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
803f9936:	99 e2 e4 ff 	ld.a %a2,[%a14]-28
803f993a:	d9 22 20 10 	lea %a2,[%a2]96
803f993e:	54 23       	ld.w %d3,[%a2]
803f9940:	39 e2 e0 ff 	ld.bu %d2,[%a14]-32
803f9944:	82 14       	mov %d4,1
803f9946:	0f 24 00 20 	sh %d2,%d4,%d2
803f994a:	46 02       	not %d2
803f994c:	26 32       	and %d2,%d3
803f994e:	99 e2 e4 ff 	ld.a %a2,[%a14]-28
803f9952:	d9 22 20 10 	lea %a2,[%a2]96
803f9956:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(passwd);
803f9958:	b9 e2 f8 ff 	ld.hu %d2,[%a14]-8
803f995c:	02 24       	mov %d4,%d2
803f995e:	6d ff 1c ff 	call 803f9796 <IfxScuWdt_setCpuEndinit>
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
803f9962:	39 e2 fb ff 	ld.bu %d2,[%a14]-5
803f9966:	06 22       	sh %d2,2
803f9968:	19 e3 fc ff 	ld.w %d3,[%a14]-4
803f996c:	42 32       	add %d2,%d3
803f996e:	02 25       	mov %d5,%d2
803f9970:	39 e2 fa ff 	ld.bu %d2,[%a14]-6
803f9974:	3b f0 0f 30 	mov %d3,255
803f9978:	0f 23 00 30 	sh %d3,%d3,%d2
803f997c:	39 e2 fa ff 	ld.bu %d2,[%a14]-6
803f9980:	19 e4 dc ff 	ld.w %d4,[%a14]-36
803f9984:	0f 24 00 20 	sh %d2,%d4,%d2
803f9988:	59 e5 f4 ff 	st.w [%a14]-12,%d5
803f998c:	59 e3 f0 ff 	st.w [%a14]-16,%d3
803f9990:	59 e2 ec ff 	st.w [%a14]-20,%d2
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
803f9994:	19 e2 ec ff 	ld.w %d2,[%a14]-20
803f9998:	02 22       	mov %d2,%d2
803f999a:	82 03       	mov %d3,0
    __asm__ volatile("mov %H2,%1 \n\
803f999c:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
803f99a0:	19 e4 f0 ff 	ld.w %d4,[%a14]-16
803f99a4:	02 43       	mov %d3,%d4
803f99a6:	49 22 40 08 	ldmst [%a2]0,%e2
}
803f99aa:	00 00       	nop 
803f99ac:	00 90       	ret 

803f99ae <IfxCpu_Trap_memoryManagementError>:
{
803f99ae:	40 ae       	mov.aa %a14,%sp
803f99b0:	20 30       	sub.a %sp,48
803f99b2:	59 e4 d4 ff 	st.w [%a14]-44,%d4
803f99b6:	82 02       	mov %d2,0
803f99b8:	e9 e2 ff ff 	st.b [%a14]-1,%d2
803f99bc:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
803f99c0:	59 e2 f8 ff 	st.w [%a14]-8,%d2
}

IFX_INLINE void* Ifx__getA11(void)
{
    uint32 *res;
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
803f99c4:	40 b2       	mov.aa %a2,%a11
803f99c6:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
803f99ca:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
803f99ce:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
803f99d2:	79 e2 ff ff 	ld.b %d2,[%a14]-1
803f99d6:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
803f99da:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803f99de:	8f f2 0f 21 	and %d2,%d2,255
803f99e2:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
803f99e6:	4d c0 e1 2f 	mfcr %d2,$core_id
803f99ea:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803f99ee:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
803f99f2:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
803f99f6:	19 e2 dc ff 	ld.w %d2,[%a14]-36
803f99fa:	37 02 63 20 	extr.u %d2,%d2,0,3
803f99fe:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
803f9a02:	8f 72 00 21 	and %d2,%d2,7
803f9a06:	8f f2 0f 31 	and %d3,%d2,255
803f9a0a:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
803f9a0e:	37 32 03 28 	insert %d2,%d2,%d3,16,3
803f9a12:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
803f9a16:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
803f9a1a:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_MME_HOOK(trapWatch);
803f9a1e:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm__ volatile ("debug" : : : "memory");
803f9a22:	00 a0       	debug 
}
803f9a24:	00 00       	nop 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
803f9a26:	0d 00 40 02 	rslcx 
    __asm("rfe");
803f9a2a:	00 80       	rfe 
}
803f9a2c:	00 00       	nop 
803f9a2e:	00 90       	ret 

803f9a30 <IfxCpu_Trap_internalProtectionError>:
{
803f9a30:	40 ae       	mov.aa %a14,%sp
803f9a32:	20 30       	sub.a %sp,48
803f9a34:	59 e4 d4 ff 	st.w [%a14]-44,%d4
803f9a38:	82 12       	mov %d2,1
803f9a3a:	e9 e2 ff ff 	st.b [%a14]-1,%d2
803f9a3e:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
803f9a42:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
803f9a46:	40 b2       	mov.aa %a2,%a11
803f9a48:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
803f9a4c:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
803f9a50:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
803f9a54:	79 e2 ff ff 	ld.b %d2,[%a14]-1
803f9a58:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
803f9a5c:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803f9a60:	8f f2 0f 21 	and %d2,%d2,255
803f9a64:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
803f9a68:	4d c0 e1 2f 	mfcr %d2,$core_id
803f9a6c:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803f9a70:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
803f9a74:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
803f9a78:	19 e2 dc ff 	ld.w %d2,[%a14]-36
803f9a7c:	37 02 63 20 	extr.u %d2,%d2,0,3
803f9a80:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
803f9a84:	8f 72 00 21 	and %d2,%d2,7
803f9a88:	8f f2 0f 31 	and %d3,%d2,255
803f9a8c:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
803f9a90:	37 32 03 28 	insert %d2,%d2,%d3,16,3
803f9a94:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
803f9a98:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
803f9a9c:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_IPE_HOOK(trapWatch);
803f9aa0:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm__ volatile ("debug" : : : "memory");
803f9aa4:	00 a0       	debug 
}
803f9aa6:	00 00       	nop 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
803f9aa8:	0d 00 40 02 	rslcx 
    __asm("rfe");
803f9aac:	00 80       	rfe 
}
803f9aae:	00 00       	nop 
803f9ab0:	00 90       	ret 

803f9ab2 <IfxCpu_Trap_instructionError>:
{
803f9ab2:	40 ae       	mov.aa %a14,%sp
803f9ab4:	20 30       	sub.a %sp,48
803f9ab6:	59 e4 d4 ff 	st.w [%a14]-44,%d4
803f9aba:	82 22       	mov %d2,2
803f9abc:	e9 e2 ff ff 	st.b [%a14]-1,%d2
803f9ac0:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
803f9ac4:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
803f9ac8:	40 b2       	mov.aa %a2,%a11
803f9aca:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
803f9ace:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
803f9ad2:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
803f9ad6:	79 e2 ff ff 	ld.b %d2,[%a14]-1
803f9ada:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
803f9ade:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803f9ae2:	8f f2 0f 21 	and %d2,%d2,255
803f9ae6:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
803f9aea:	4d c0 e1 2f 	mfcr %d2,$core_id
803f9aee:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803f9af2:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
803f9af6:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
803f9afa:	19 e2 dc ff 	ld.w %d2,[%a14]-36
803f9afe:	37 02 63 20 	extr.u %d2,%d2,0,3
803f9b02:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
803f9b06:	8f 72 00 21 	and %d2,%d2,7
803f9b0a:	8f f2 0f 31 	and %d3,%d2,255
803f9b0e:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
803f9b12:	37 32 03 28 	insert %d2,%d2,%d3,16,3
803f9b16:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
803f9b1a:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
803f9b1e:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_IE_HOOK(trapWatch);
803f9b22:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm__ volatile ("debug" : : : "memory");
803f9b26:	00 a0       	debug 
}
803f9b28:	00 00       	nop 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
803f9b2a:	0d 00 40 02 	rslcx 
    __asm("rfe");
803f9b2e:	00 80       	rfe 
}
803f9b30:	00 00       	nop 
803f9b32:	00 90       	ret 

803f9b34 <IfxCpu_Trap_contextManagementError>:
{
803f9b34:	40 ae       	mov.aa %a14,%sp
803f9b36:	20 30       	sub.a %sp,48
803f9b38:	59 e4 d4 ff 	st.w [%a14]-44,%d4
803f9b3c:	82 32       	mov %d2,3
803f9b3e:	e9 e2 ff ff 	st.b [%a14]-1,%d2
803f9b42:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
803f9b46:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
803f9b4a:	40 b2       	mov.aa %a2,%a11
803f9b4c:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
803f9b50:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
803f9b54:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
803f9b58:	79 e2 ff ff 	ld.b %d2,[%a14]-1
803f9b5c:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
803f9b60:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803f9b64:	8f f2 0f 21 	and %d2,%d2,255
803f9b68:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
803f9b6c:	4d c0 e1 2f 	mfcr %d2,$core_id
803f9b70:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803f9b74:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
803f9b78:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
803f9b7c:	19 e2 dc ff 	ld.w %d2,[%a14]-36
803f9b80:	37 02 63 20 	extr.u %d2,%d2,0,3
803f9b84:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
803f9b88:	8f 72 00 21 	and %d2,%d2,7
803f9b8c:	8f f2 0f 31 	and %d3,%d2,255
803f9b90:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
803f9b94:	37 32 03 28 	insert %d2,%d2,%d3,16,3
803f9b98:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
803f9b9c:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
803f9ba0:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_CME_HOOK(trapWatch);
803f9ba4:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm__ volatile ("debug" : : : "memory");
803f9ba8:	00 a0       	debug 
}
803f9baa:	00 00       	nop 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
803f9bac:	0d 00 40 02 	rslcx 
    __asm("rfe");
803f9bb0:	00 80       	rfe 
}
803f9bb2:	00 00       	nop 
803f9bb4:	00 90       	ret 

803f9bb6 <IfxCpu_Trap_busError>:
{
803f9bb6:	40 ae       	mov.aa %a14,%sp
803f9bb8:	20 30       	sub.a %sp,48
803f9bba:	59 e4 d4 ff 	st.w [%a14]-44,%d4
803f9bbe:	82 42       	mov %d2,4
803f9bc0:	e9 e2 ff ff 	st.b [%a14]-1,%d2
803f9bc4:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
803f9bc8:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
803f9bcc:	40 b2       	mov.aa %a2,%a11
803f9bce:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
803f9bd2:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
803f9bd6:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
803f9bda:	79 e2 ff ff 	ld.b %d2,[%a14]-1
803f9bde:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
803f9be2:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803f9be6:	8f f2 0f 21 	and %d2,%d2,255
803f9bea:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
803f9bee:	4d c0 e1 2f 	mfcr %d2,$core_id
803f9bf2:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803f9bf6:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
803f9bfa:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
803f9bfe:	19 e2 dc ff 	ld.w %d2,[%a14]-36
803f9c02:	37 02 63 20 	extr.u %d2,%d2,0,3
803f9c06:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
803f9c0a:	8f 72 00 21 	and %d2,%d2,7
803f9c0e:	8f f2 0f 31 	and %d3,%d2,255
803f9c12:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
803f9c16:	37 32 03 28 	insert %d2,%d2,%d3,16,3
803f9c1a:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
803f9c1e:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
803f9c22:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_BE_HOOK(trapWatch);
803f9c26:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm__ volatile ("debug" : : : "memory");
803f9c2a:	00 a0       	debug 
}
803f9c2c:	00 00       	nop 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
803f9c2e:	0d 00 40 02 	rslcx 
    __asm("rfe");
803f9c32:	00 80       	rfe 
}
803f9c34:	00 00       	nop 
803f9c36:	00 90       	ret 

803f9c38 <IfxCpu_Trap_assertion>:
{
803f9c38:	40 ae       	mov.aa %a14,%sp
803f9c3a:	20 30       	sub.a %sp,48
803f9c3c:	59 e4 d4 ff 	st.w [%a14]-44,%d4
803f9c40:	82 52       	mov %d2,5
803f9c42:	e9 e2 ff ff 	st.b [%a14]-1,%d2
803f9c46:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
803f9c4a:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
803f9c4e:	40 b2       	mov.aa %a2,%a11
803f9c50:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
803f9c54:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
803f9c58:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
803f9c5c:	79 e2 ff ff 	ld.b %d2,[%a14]-1
803f9c60:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
803f9c64:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803f9c68:	8f f2 0f 21 	and %d2,%d2,255
803f9c6c:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
803f9c70:	4d c0 e1 2f 	mfcr %d2,$core_id
803f9c74:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803f9c78:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
803f9c7c:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
803f9c80:	19 e2 dc ff 	ld.w %d2,[%a14]-36
803f9c84:	37 02 63 20 	extr.u %d2,%d2,0,3
803f9c88:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
803f9c8c:	8f 72 00 21 	and %d2,%d2,7
803f9c90:	8f f2 0f 31 	and %d3,%d2,255
803f9c94:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
803f9c98:	37 32 03 28 	insert %d2,%d2,%d3,16,3
803f9c9c:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
803f9ca0:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
803f9ca4:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_ASSERT_HOOK(trapWatch);
803f9ca8:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm__ volatile ("debug" : : : "memory");
803f9cac:	00 a0       	debug 
}
803f9cae:	00 00       	nop 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
803f9cb0:	0d 00 40 02 	rslcx 
    __asm("rfe");
803f9cb4:	00 80       	rfe 
}
803f9cb6:	00 00       	nop 
803f9cb8:	00 90       	ret 

803f9cba <IfxCpu_Trap_systemCall_Cpu0>:
{
803f9cba:	40 ae       	mov.aa %a14,%sp
803f9cbc:	20 30       	sub.a %sp,48
803f9cbe:	59 e4 d4 ff 	st.w [%a14]-44,%d4
803f9cc2:	82 62       	mov %d2,6
803f9cc4:	e9 e2 ff ff 	st.b [%a14]-1,%d2
803f9cc8:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
803f9ccc:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
803f9cd0:	40 b2       	mov.aa %a2,%a11
803f9cd2:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
803f9cd6:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
803f9cda:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
803f9cde:	79 e2 ff ff 	ld.b %d2,[%a14]-1
803f9ce2:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
803f9ce6:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803f9cea:	8f f2 0f 21 	and %d2,%d2,255
803f9cee:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
803f9cf2:	4d c0 e1 2f 	mfcr %d2,$core_id
803f9cf6:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803f9cfa:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
803f9cfe:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
803f9d02:	19 e2 dc ff 	ld.w %d2,[%a14]-36
803f9d06:	37 02 63 20 	extr.u %d2,%d2,0,3
803f9d0a:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
803f9d0e:	8f 72 00 21 	and %d2,%d2,7
803f9d12:	8f f2 0f 31 	and %d3,%d2,255
803f9d16:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
803f9d1a:	37 32 03 28 	insert %d2,%d2,%d3,16,3
803f9d1e:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
803f9d22:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
803f9d26:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK(trapWatch);
803f9d2a:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
803f9d2e:	0d 00 40 02 	rslcx 
    __asm("rfe");
803f9d32:	00 80       	rfe 
}
803f9d34:	00 00       	nop 
803f9d36:	00 90       	ret 

803f9d38 <IfxCpu_Trap_systemCall_Cpu1>:
{
803f9d38:	40 ae       	mov.aa %a14,%sp
803f9d3a:	20 30       	sub.a %sp,48
803f9d3c:	59 e4 d4 ff 	st.w [%a14]-44,%d4
803f9d40:	82 62       	mov %d2,6
803f9d42:	e9 e2 ff ff 	st.b [%a14]-1,%d2
803f9d46:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
803f9d4a:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
803f9d4e:	40 b2       	mov.aa %a2,%a11
803f9d50:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
803f9d54:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
803f9d58:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
803f9d5c:	79 e2 ff ff 	ld.b %d2,[%a14]-1
803f9d60:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
803f9d64:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803f9d68:	8f f2 0f 21 	and %d2,%d2,255
803f9d6c:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
803f9d70:	4d c0 e1 2f 	mfcr %d2,$core_id
803f9d74:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803f9d78:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
803f9d7c:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
803f9d80:	19 e2 dc ff 	ld.w %d2,[%a14]-36
803f9d84:	37 02 63 20 	extr.u %d2,%d2,0,3
803f9d88:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
803f9d8c:	8f 72 00 21 	and %d2,%d2,7
803f9d90:	8f f2 0f 31 	and %d3,%d2,255
803f9d94:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
803f9d98:	37 32 03 28 	insert %d2,%d2,%d3,16,3
803f9d9c:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
803f9da0:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
803f9da4:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK(trapWatch);
803f9da8:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
803f9dac:	0d 00 40 02 	rslcx 
    __asm("rfe");
803f9db0:	00 80       	rfe 
}
803f9db2:	00 00       	nop 
803f9db4:	00 90       	ret 

803f9db6 <IfxCpu_Trap_systemCall_Cpu2>:
{
803f9db6:	40 ae       	mov.aa %a14,%sp
803f9db8:	20 30       	sub.a %sp,48
803f9dba:	59 e4 d4 ff 	st.w [%a14]-44,%d4
803f9dbe:	82 62       	mov %d2,6
803f9dc0:	e9 e2 ff ff 	st.b [%a14]-1,%d2
803f9dc4:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
803f9dc8:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
803f9dcc:	40 b2       	mov.aa %a2,%a11
803f9dce:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
803f9dd2:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
803f9dd6:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
803f9dda:	79 e2 ff ff 	ld.b %d2,[%a14]-1
803f9dde:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
803f9de2:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803f9de6:	8f f2 0f 21 	and %d2,%d2,255
803f9dea:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
803f9dee:	4d c0 e1 2f 	mfcr %d2,$core_id
803f9df2:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803f9df6:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
803f9dfa:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
803f9dfe:	19 e2 dc ff 	ld.w %d2,[%a14]-36
803f9e02:	37 02 63 20 	extr.u %d2,%d2,0,3
803f9e06:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
803f9e0a:	8f 72 00 21 	and %d2,%d2,7
803f9e0e:	8f f2 0f 31 	and %d3,%d2,255
803f9e12:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
803f9e16:	37 32 03 28 	insert %d2,%d2,%d3,16,3
803f9e1a:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
803f9e1e:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
803f9e22:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK(trapWatch);
803f9e26:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
803f9e2a:	0d 00 40 02 	rslcx 
    __asm("rfe");
803f9e2e:	00 80       	rfe 
}
803f9e30:	00 00       	nop 
803f9e32:	00 90       	ret 

803f9e34 <IfxCpu_Trap_nonMaskableInterrupt>:
{
803f9e34:	40 ae       	mov.aa %a14,%sp
803f9e36:	20 30       	sub.a %sp,48
803f9e38:	59 e4 d4 ff 	st.w [%a14]-44,%d4
803f9e3c:	82 72       	mov %d2,7
803f9e3e:	e9 e2 ff ff 	st.b [%a14]-1,%d2
803f9e42:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
803f9e46:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
803f9e4a:	40 b2       	mov.aa %a2,%a11
803f9e4c:	b5 e2 f4 ff 	st.a [%a14]-12,%a2
    return res;
803f9e50:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
    trapInfo.tAddr  = (unsigned int)__getA11();
803f9e54:	59 e2 e0 ff 	st.w [%a14]-32,%d2
    trapInfo.tClass = trapClass;
803f9e58:	79 e2 ff ff 	ld.b %d2,[%a14]-1
803f9e5c:	e9 e2 e5 ff 	st.b [%a14]-27,%d2
    trapInfo.tId    = tin;
803f9e60:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803f9e64:	8f f2 0f 21 	and %d2,%d2,255
803f9e68:	e9 e2 e4 ff 	st.b [%a14]-28,%d2
    reg.U = __mfcr(CPU_CORE_ID);
803f9e6c:	4d c0 e1 2f 	mfcr %d2,$core_id
803f9e70:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803f9e74:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
803f9e78:	59 e2 dc ff 	st.w [%a14]-36,%d2
    return (IfxCpu_Id)reg.B.CORE_ID;
803f9e7c:	19 e2 dc ff 	ld.w %d2,[%a14]-36
803f9e80:	37 02 63 20 	extr.u %d2,%d2,0,3
803f9e84:	8f f2 0f 21 	and %d2,%d2,255
    trapInfo.tCpu   = IfxCpu_getCoreId();
803f9e88:	8f 72 00 21 	and %d2,%d2,7
803f9e8c:	8f f2 0f 31 	and %d3,%d2,255
803f9e90:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
803f9e94:	37 32 03 28 	insert %d2,%d2,%d3,16,3
803f9e98:	59 e2 e4 ff 	st.w [%a14]-28,%d2
    return trapInfo;
803f9e9c:	09 e2 e0 f9 	ld.da %a2,[%a14]-32
803f9ea0:	89 e2 e8 f9 	st.da [%a14]-24,%a2
    IFX_CFG_CPU_TRAP_NMI_HOOK(trapWatch);    
803f9ea4:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
803f9ea8:	0d 00 40 02 	rslcx 
    __asm("rfe");
803f9eac:	00 80       	rfe 
}
803f9eae:	00 00       	nop 
803f9eb0:	00 90       	ret 

803f9eb2 <IfxCpu_waitEvent>:
    return retVal;
}


boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec)
{
803f9eb2:	40 ae       	mov.aa %a14,%sp
803f9eb4:	20 20       	sub.a %sp,32
803f9eb6:	b5 e4 e4 ff 	st.a [%a14]-28,%a4
803f9eba:	59 e4 e0 ff 	st.w [%a14]-32,%d4
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
803f9ebe:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
803f9ec2:	7b 00 00 3f 	movh %d3,61440
803f9ec6:	26 32       	and %d2,%d3
803f9ec8:	7b 00 00 3d 	movh %d3,53248
803f9ecc:	5f 32 17 80 	jne %d2,%d3,803f9efa <IfxCpu_waitEvent+0x48>
803f9ed0:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
803f9ed4:	82 f3       	mov %d3,-1
803f9ed6:	8f 43 1f 30 	sh %d3,%d3,-12
803f9eda:	26 32       	and %d2,%d3
803f9edc:	7b 00 00 37 	movh %d3,28672
803f9ee0:	a6 23       	or %d3,%d2
803f9ee2:	4d c0 e1 2f 	mfcr %d2,$core_id
803f9ee6:	59 e2 f8 ff 	st.w [%a14]-8,%d2
803f9eea:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803f9eee:	8f c2 01 20 	sh %d2,%d2,28
803f9ef2:	0b 23 80 20 	sub %d2,%d3,%d2
803f9ef6:	1d 00 04 00 	j 803f9efe <IfxCpu_waitEvent+0x4c>
803f9efa:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
803f9efe:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    boolean          errorcnt      = 0U;
803f9f02:	82 02       	mov %d2,0
803f9f04:	e9 e2 ff ff 	st.b [%a14]-1,%d2
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON0.B.STMDIV;
803f9f08:	82 04       	mov %d4,0
803f9f0a:	6d ff 75 f0 	call 803f7ff4 <IfxScuCcu_getSourceFrequency>
803f9f0e:	02 23       	mov %d3,%d2
803f9f10:	91 30 00 2f 	movh.a %a2,61443
803f9f14:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fc3fc04>>
803f9f18:	54 22       	ld.w %d2,[%a2]
803f9f1a:	37 02 64 20 	extr.u %d2,%d2,0,4
803f9f1e:	8f f2 0f 21 	and %d2,%d2,255
803f9f22:	4b 02 41 21 	itof %d2,%d2
803f9f26:	4b 23 51 20 	div.f %d2,%d3,%d2
    /* Divide with 1000, gives the count value equivalent to milliseconds */
    uint32           stmCount      = (uint32)((IfxScuCcu_getStmFrequency() / 1000) * timeoutMilliSec);
803f9f2a:	7b a0 47 34 	movh %d3,17530
803f9f2e:	4b 32 51 30 	div.f %d3,%d2,%d3
803f9f32:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
803f9f36:	4b 02 61 21 	utof %d2,%d2
803f9f3a:	4b 23 41 20 	mul.f %d2,%d3,%d2
803f9f3e:	4b 02 71 21 	ftouz %d2,%d2
803f9f42:	59 e2 f0 ff 	st.w [%a14]-16,%d2
    uint32           stmCountBegin = STM0_TIM0.U;
803f9f46:	c5 f2 10 01 	lea %a2,f0001010 <_START2_end+0x4fc0abe4>
803f9f4a:	54 22       	ld.w %d2,[%a2]
803f9f4c:	59 e2 ec ff 	st.w [%a14]-20,%d2

    while ((*sync & IFXCPU_CFG_ALLCORE_DONE) != IFXCPU_CFG_ALLCORE_DONE)
803f9f50:	1d 00 13 00 	j 803f9f76 <IfxCpu_waitEvent+0xc4>
    __asm__ volatile ("nop" : : : "memory");
803f9f54:	00 00       	nop 
}
803f9f56:	00 00       	nop 
    {
        __nop();

        if ((uint32)(STM0_TIM0.U - stmCountBegin) >= stmCount)
803f9f58:	c5 f2 10 01 	lea %a2,f0001010 <_START2_end+0x4fc0abe4>
803f9f5c:	54 23       	ld.w %d3,[%a2]
803f9f5e:	19 e2 ec ff 	ld.w %d2,[%a14]-20
803f9f62:	a2 23       	sub %d3,%d2
803f9f64:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
803f9f68:	3f 23 07 80 	jlt.u %d3,%d2,803f9f76 <IfxCpu_waitEvent+0xc4>
        {
            errorcnt = 1;
803f9f6c:	82 12       	mov %d2,1
803f9f6e:	e9 e2 ff ff 	st.b [%a14]-1,%d2
            break;
803f9f72:	1d 00 09 00 	j 803f9f84 <IfxCpu_waitEvent+0xd2>
    while ((*sync & IFXCPU_CFG_ALLCORE_DONE) != IFXCPU_CFG_ALLCORE_DONE)
803f9f76:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
803f9f7a:	54 22       	ld.w %d2,[%a2]
803f9f7c:	8f 72 00 21 	and %d2,%d2,7
803f9f80:	df 72 ea ff 	jne %d2,7,803f9f54 <IfxCpu_waitEvent+0xa2>
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }

    return errorcnt;
803f9f84:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
}
803f9f88:	00 90       	ret 

803f9f8a <IfxCpu_emitEvent>:


void IfxCpu_emitEvent(IfxCpu_syncEvent *event)
{
803f9f8a:	40 ae       	mov.aa %a14,%sp
803f9f8c:	20 18       	sub.a %sp,24
803f9f8e:	b5 e4 ec ff 	st.a [%a14]-20,%a4
    Ifx__imaskldmst(event, 1, __mfcr(CPU_CORE_ID), 1);
803f9f92:	4d c0 e1 2f 	mfcr %d2,$core_id
803f9f96:	59 e2 fc ff 	st.w [%a14]-4,%d2
803f9f9a:	19 e2 fc ff 	ld.w %d2,[%a14]-4
803f9f9e:	82 13       	mov %d3,1
803f9fa0:	57 30 21 22 	imask %e2,%d3,%d2,1
803f9fa4:	89 e2 74 f9 	st.d [%a14]-12,%e2
803f9fa8:	99 e2 ec ff 	ld.a %a2,[%a14]-20
803f9fac:	09 e2 74 f9 	ld.d %e2,[%a14]-12
803f9fb0:	49 22 40 08 	ldmst [%a2]0,%e2
}
803f9fb4:	00 00       	nop 
803f9fb6:	00 90       	ret 

803f9fb8 <waitTime>:
 * \param timeout Specifies the time the function waits for before returning
 *
 * \return None.
 */
void waitTime(Ifx_TickTime timeout)
{
803f9fb8:	40 ae       	mov.aa %a14,%sp
803f9fba:	20 80       	sub.a %sp,128
803f9fbc:	89 e4 40 e9 	st.d [%a14]-128,%e4
803f9fc0:	09 e2 c0 e9 	ld.da %a2,[%a14]-128
803f9fc4:	89 e2 f8 f9 	st.da [%a14]-8,%a2
803f9fc8:	09 e2 f8 f9 	ld.da %a2,[%a14]-8
803f9fcc:	89 e2 f0 f9 	st.da [%a14]-16,%a2
 */
IFX_INLINE Ifx_TickTime getDeadLine(Ifx_TickTime timeout)
{
    Ifx_TickTime deadLine;

    if (timeout == TIME_INFINITE)
803f9fd0:	09 e4 70 f9 	ld.d %e4,[%a14]-16
803f9fd4:	82 fc       	mov %d12,-1
803f9fd6:	06 fc       	sh %d12,-1
803f9fd8:	0b c5 10 c1 	ne %d12,%d5,%d12
803f9fdc:	8b f4 1f c5 	or.ne %d12,%d4,-1
803f9fe0:	df 0c 0b 80 	jne %d12,0,803f9ff6 <waitTime+0x3e>
    {
        deadLine = TIME_INFINITE;
803f9fe4:	a0 02       	mov.a %a2,0
803f9fe6:	b0 f2       	add.a %a2,-1
803f9fe8:	c5 83 00 00 	lea %a3,80000000 <__CSA0_END+0xffc4400>
803f9fec:	b0 f3       	add.a %a3,-1
803f9fee:	89 e2 e8 f9 	st.da [%a14]-24,%a2
803f9ff2:	1d 00 63 00 	j 803fa0b8 <waitTime+0x100>
    reg.U = __mfcr(CPU_ICR);
803f9ff6:	4d c0 e2 4f 	mfcr %d4,$icr
803f9ffa:	59 e4 e4 ff 	st.w [%a14]-28,%d4
803f9ffe:	19 e4 e4 ff 	ld.w %d4,[%a14]-28
803fa002:	59 e4 cc ef 	st.w [%a14]-116,%d4
    return reg.B.IE != 0;
803fa006:	19 e4 cc ef 	ld.w %d4,[%a14]-116
803fa00a:	37 04 e1 47 	extr.u %d4,%d4,15,1
803fa00e:	8f f4 0f 41 	and %d4,%d4,255
    enabled = IfxCpu_areInterruptsEnabled();
803fa012:	e9 e4 e3 ff 	st.b [%a14]-29,%d4
    __disable();
803fa016:	0d 00 40 03 	disable 
    __asm__ volatile ("nop" : : : "memory");
803fa01a:	00 00       	nop 
}
803fa01c:	00 00       	nop 
    return enabled;
803fa01e:	39 e4 e3 ff 	ld.bu %d4,[%a14]-29
    interruptState = disableInterrupts();
803fa022:	e9 e4 e2 ff 	st.b [%a14]-30,%d4
803fa026:	7b 00 00 4f 	movh %d4,61440
803fa02a:	1b 04 00 41 	addi %d4,%d4,4096
803fa02e:	59 e4 dc ff 	st.w [%a14]-36,%d4

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
803fa032:	99 e2 dc ff 	ld.a %a2,[%a14]-36
803fa036:	d9 22 10 00 	lea %a2,[%a2]16
803fa03a:	54 24       	ld.w %d4,[%a2]
803fa03c:	02 44       	mov %d4,%d4
803fa03e:	82 05       	mov %d5,0
803fa040:	89 e4 54 f9 	st.d [%a14]-44,%e4
    result |= ((uint64)stm->CAP.U) << 32;
803fa044:	99 e2 dc ff 	ld.a %a2,[%a14]-36
803fa048:	d9 22 2c 00 	lea %a2,[%a2]44
803fa04c:	54 24       	ld.w %d4,[%a2]
803fa04e:	02 44       	mov %d4,%d4
803fa050:	82 05       	mov %d5,0
803fa052:	02 4b       	mov %d11,%d4
803fa054:	82 0a       	mov %d10,0
803fa056:	19 e4 d4 ff 	ld.w %d4,[%a14]-44
803fa05a:	0f a4 a0 20 	or %d2,%d4,%d10
803fa05e:	19 e4 d8 ff 	ld.w %d4,[%a14]-40
803fa062:	0f b4 a0 30 	or %d3,%d4,%d11
803fa066:	89 e2 54 f9 	st.d [%a14]-44,%e2

    return result;
803fa06a:	09 e2 d4 f9 	ld.da %a2,[%a14]-44
    stmNow         = (Ifx_TickTime)IfxStm_get(BSP_DEFAULT_TIMER) & TIME_INFINITE;
803fa06e:	80 22       	mov.d %d2,%a2
803fa070:	80 33       	mov.d %d3,%a3
803fa072:	02 24       	mov %d4,%d2
803fa074:	59 e4 cc ff 	st.w [%a14]-52,%d4
803fa078:	82 f4       	mov %d4,-1
803fa07a:	06 f4       	sh %d4,-1
803fa07c:	0f 43 80 20 	and %d2,%d3,%d4
803fa080:	59 e2 d0 ff 	st.w [%a14]-48,%d2
    restoreInterrupts(interruptState);
803fa084:	39 e2 e2 ff 	ld.bu %d2,[%a14]-30
803fa088:	e9 e2 cb ff 	st.b [%a14]-53,%d2
    IfxCpu_restoreInterrupts(enabled);
803fa08c:	39 e2 cb ff 	ld.bu %d2,[%a14]-53
803fa090:	e9 e2 ca ff 	st.b [%a14]-54,%d2
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
803fa094:	39 e2 ca ff 	ld.bu %d2,[%a14]-54
803fa098:	df 02 04 00 	jeq %d2,0,803fa0a0 <waitTime+0xe8>
    {
        __enable();
803fa09c:	0d 00 00 03 	enable 
    }
}
803fa0a0:	00 00       	nop 
}
803fa0a2:	00 00       	nop 
    return stmNow;
803fa0a4:	09 e4 4c f9 	ld.d %e4,[%a14]-52
    }
    else
    {
        deadLine = now() + timeout;
803fa0a8:	09 e2 70 f9 	ld.d %e2,[%a14]-16
803fa0ac:	0b 42 40 60 	addx %d6,%d2,%d4
803fa0b0:	0b 53 50 70 	addc %d7,%d3,%d5
803fa0b4:	89 e6 68 f9 	st.d [%a14]-24,%e6
    }

    return deadLine;
803fa0b8:	09 e2 e8 f9 	ld.da %a2,[%a14]-24
 *
 * \return None.
 */
IFX_INLINE void wait(Ifx_TickTime timeout)
{
    Ifx_TickTime deadLine = getDeadLine(timeout);
803fa0bc:	89 e2 c0 f9 	st.da [%a14]-64,%a2

    while (isDeadLine(deadLine) == FALSE)
803fa0c0:	00 00       	nop 
803fa0c2:	09 e2 c0 f9 	ld.da %a2,[%a14]-64
803fa0c6:	89 e2 f8 e9 	st.da [%a14]-72,%a2
    if (deadLine == TIME_INFINITE)
803fa0ca:	09 e2 78 e9 	ld.d %e2,[%a14]-72
803fa0ce:	82 f4       	mov %d4,-1
803fa0d0:	06 f4       	sh %d4,-1
803fa0d2:	0b 43 10 41 	ne %d4,%d3,%d4
803fa0d6:	8b f2 1f 45 	or.ne %d4,%d2,-1
803fa0da:	df 04 07 80 	jne %d4,0,803fa0e8 <waitTime+0x130>
        result = FALSE;
803fa0de:	82 02       	mov %d2,0
803fa0e0:	e9 e2 f7 ef 	st.b [%a14]-73,%d2
803fa0e4:	1d 00 6b 00 	j 803fa1ba <waitTime+0x202>
    reg.U = __mfcr(CPU_ICR);
803fa0e8:	4d c0 e2 2f 	mfcr %d2,$icr
803fa0ec:	59 e2 f0 ef 	st.w [%a14]-80,%d2
803fa0f0:	19 e2 f0 ef 	ld.w %d2,[%a14]-80
803fa0f4:	59 e2 d0 ef 	st.w [%a14]-112,%d2
    return reg.B.IE != 0;
803fa0f8:	19 e2 d0 ef 	ld.w %d2,[%a14]-112
803fa0fc:	37 02 e1 27 	extr.u %d2,%d2,15,1
803fa100:	8f f2 0f 21 	and %d2,%d2,255
    enabled = IfxCpu_areInterruptsEnabled();
803fa104:	e9 e2 ef ef 	st.b [%a14]-81,%d2
    __disable();
803fa108:	0d 00 40 03 	disable 
    __asm__ volatile ("nop" : : : "memory");
803fa10c:	00 00       	nop 
}
803fa10e:	00 00       	nop 
    return enabled;
803fa110:	39 e2 ef ef 	ld.bu %d2,[%a14]-81
    interruptState = disableInterrupts();
803fa114:	e9 e2 ee ef 	st.b [%a14]-82,%d2
803fa118:	7b 00 00 2f 	movh %d2,61440
803fa11c:	1b 02 00 21 	addi %d2,%d2,4096
803fa120:	59 e2 e8 ef 	st.w [%a14]-88,%d2
    result  = stm->TIM0.U;
803fa124:	99 e2 e8 ef 	ld.a %a2,[%a14]-88
803fa128:	d9 22 10 00 	lea %a2,[%a2]16
803fa12c:	54 22       	ld.w %d2,[%a2]
803fa12e:	02 22       	mov %d2,%d2
803fa130:	82 03       	mov %d3,0
803fa132:	89 e2 60 e9 	st.d [%a14]-96,%e2
    result |= ((uint64)stm->CAP.U) << 32;
803fa136:	99 e2 e8 ef 	ld.a %a2,[%a14]-88
803fa13a:	d9 22 2c 00 	lea %a2,[%a2]44
803fa13e:	54 22       	ld.w %d2,[%a2]
803fa140:	02 22       	mov %d2,%d2
803fa142:	82 03       	mov %d3,0
803fa144:	02 29       	mov %d9,%d2
803fa146:	82 08       	mov %d8,0
803fa148:	19 e2 e0 ef 	ld.w %d2,[%a14]-96
803fa14c:	0f 82 a0 00 	or %d0,%d2,%d8
803fa150:	19 e2 e4 ef 	ld.w %d2,[%a14]-92
803fa154:	0f 92 a0 10 	or %d1,%d2,%d9
803fa158:	89 e0 60 e9 	st.d [%a14]-96,%e0
    return result;
803fa15c:	09 e2 e0 e9 	ld.da %a2,[%a14]-96
    stmNow         = (Ifx_TickTime)IfxStm_get(BSP_DEFAULT_TIMER) & TIME_INFINITE;
803fa160:	80 22       	mov.d %d2,%a2
803fa162:	80 33       	mov.d %d3,%a3
803fa164:	02 24       	mov %d4,%d2
803fa166:	59 e4 d8 ef 	st.w [%a14]-104,%d4
803fa16a:	82 f4       	mov %d4,-1
803fa16c:	06 f4       	sh %d4,-1
803fa16e:	0f 43 80 20 	and %d2,%d3,%d4
803fa172:	59 e2 dc ef 	st.w [%a14]-100,%d2
    restoreInterrupts(interruptState);
803fa176:	39 e2 ee ef 	ld.bu %d2,[%a14]-82
803fa17a:	e9 e2 d7 ef 	st.b [%a14]-105,%d2
    IfxCpu_restoreInterrupts(enabled);
803fa17e:	39 e2 d7 ef 	ld.bu %d2,[%a14]-105
803fa182:	e9 e2 d6 ef 	st.b [%a14]-106,%d2
    if (enabled != FALSE)
803fa186:	39 e2 d6 ef 	ld.bu %d2,[%a14]-106
803fa18a:	df 02 04 00 	jeq %d2,0,803fa192 <waitTime+0x1da>
        __enable();
803fa18e:	0d 00 00 03 	enable 
}
803fa192:	00 00       	nop 
}
803fa194:	00 00       	nop 
    return stmNow;
803fa196:	09 e6 58 e9 	ld.d %e6,[%a14]-104
        result = now() >= deadLine;
803fa19a:	09 e2 78 e9 	ld.d %e2,[%a14]-72
803fa19e:	02 74       	mov %d4,%d7
803fa1a0:	0b 43 00 41 	eq %d4,%d3,%d4
803fa1a4:	02 25       	mov %d5,%d2
803fa1a6:	0b 56 50 42 	and.ge.u %d4,%d6,%d5
803fa1aa:	02 75       	mov %d5,%d7
803fa1ac:	0b 53 90 42 	or.lt %d4,%d3,%d5
803fa1b0:	02 42       	mov %d2,%d4
803fa1b2:	8f f2 0f 21 	and %d2,%d2,255
803fa1b6:	e9 e2 f7 ef 	st.b [%a14]-73,%d2
    return result;
803fa1ba:	39 e2 f7 ef 	ld.bu %d2,[%a14]-73
    while (isDeadLine(deadLine) == FALSE)
803fa1be:	df 02 82 7f 	jeq %d2,0,803fa0c2 <waitTime+0x10a>
    {}
}
803fa1c2:	00 00       	nop 
    wait(timeout);
}
803fa1c4:	00 00       	nop 
803fa1c6:	00 90       	ret 

803fa1c8 <Ifx_Ssw_clearCpuEndinit>:
    return Ifx_Ssw_getSafetyWatchdogPasswordInline();
}


void Ifx_Ssw_clearCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
803fa1c8:	40 ae       	mov.aa %a14,%sp
803fa1ca:	20 10       	sub.a %sp,16
803fa1cc:	b5 e4 f4 ff 	st.a [%a14]-12,%a4
803fa1d0:	02 42       	mov %d2,%d4
803fa1d2:	f9 e2 f0 ff 	st.h [%a14]-16,%d2
    Ifx_Ssw_clearCpuEndinitInline(watchdog, password);
803fa1d6:	b9 e2 f0 ff 	ld.hu %d2,[%a14]-16
803fa1da:	19 e3 f4 ff 	ld.w %d3,[%a14]-12
803fa1de:	59 e3 fc ff 	st.w [%a14]-4,%d3
803fa1e2:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    if (watchdog->CON0.B.LCK)
803fa1e6:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa1ea:	54 22       	ld.w %d2,[%a2]
803fa1ec:	37 02 e1 20 	extr.u %d2,%d2,1,1
803fa1f0:	8f f2 0f 21 	and %d2,%d2,255
803fa1f4:	df 02 15 00 	jeq %d2,0,803fa21e <Ifx_Ssw_clearCpuEndinit+0x56>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803fa1f8:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
803fa1fc:	8f 22 00 30 	sh %d3,%d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803fa200:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa204:	54 22       	ld.w %d2,[%a2]
803fa206:	37 02 70 28 	extr.u %d2,%d2,16,16
803fa20a:	37 02 70 20 	extr.u %d2,%d2,0,16
803fa20e:	8f 02 01 20 	sh %d2,%d2,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803fa212:	a6 32       	or %d2,%d3
803fa214:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803fa218:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa21c:	74 22       	st.w [%a2],%d2
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803fa21e:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
803fa222:	8f 22 00 30 	sh %d3,%d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803fa226:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa22a:	54 22       	ld.w %d2,[%a2]
803fa22c:	37 02 70 28 	extr.u %d2,%d2,16,16
803fa230:	37 02 70 20 	extr.u %d2,%d2,0,16
803fa234:	8f 02 01 20 	sh %d2,%d2,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803fa238:	a6 32       	or %d2,%d3
803fa23a:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803fa23e:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa242:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
803fa244:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa248:	54 22       	ld.w %d2,[%a2]
}
803fa24a:	00 00       	nop 
803fa24c:	00 90       	ret 

803fa24e <Ifx_Ssw_setCpuEndinit>:


void Ifx_Ssw_setCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
803fa24e:	40 ae       	mov.aa %a14,%sp
803fa250:	20 10       	sub.a %sp,16
803fa252:	b5 e4 f4 ff 	st.a [%a14]-12,%a4
803fa256:	02 42       	mov %d2,%d4
803fa258:	f9 e2 f0 ff 	st.h [%a14]-16,%d2
    Ifx_Ssw_setCpuEndinitInline(watchdog, password);
803fa25c:	b9 e2 f0 ff 	ld.hu %d2,[%a14]-16
803fa260:	19 e3 f4 ff 	ld.w %d3,[%a14]-12
803fa264:	59 e3 fc ff 	st.w [%a14]-4,%d3
803fa268:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    if (watchdog->CON0.B.LCK)
803fa26c:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa270:	54 22       	ld.w %d2,[%a2]
803fa272:	37 02 e1 20 	extr.u %d2,%d2,1,1
803fa276:	8f f2 0f 21 	and %d2,%d2,255
803fa27a:	df 02 15 00 	jeq %d2,0,803fa2a4 <Ifx_Ssw_setCpuEndinit+0x56>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803fa27e:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
803fa282:	8f 22 00 30 	sh %d3,%d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803fa286:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa28a:	54 22       	ld.w %d2,[%a2]
803fa28c:	37 02 70 28 	extr.u %d2,%d2,16,16
803fa290:	37 02 70 20 	extr.u %d2,%d2,0,16
803fa294:	8f 02 01 20 	sh %d2,%d2,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803fa298:	a6 32       	or %d2,%d3
803fa29a:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803fa29e:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa2a2:	74 22       	st.w [%a2],%d2
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803fa2a4:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
803fa2a8:	8f 22 00 30 	sh %d3,%d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803fa2ac:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa2b0:	54 22       	ld.w %d2,[%a2]
803fa2b2:	37 02 70 28 	extr.u %d2,%d2,16,16
803fa2b6:	37 02 70 20 	extr.u %d2,%d2,0,16
803fa2ba:	8f 02 01 20 	sh %d2,%d2,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803fa2be:	a6 32       	or %d2,%d3
803fa2c0:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803fa2c4:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa2c8:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
803fa2ca:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa2ce:	54 22       	ld.w %d2,[%a2]
}
803fa2d0:	00 00       	nop 
803fa2d2:	00 90       	ret 

803fa2d4 <Ifx_Ssw_clearSafetyEndinit>:


void Ifx_Ssw_clearSafetyEndinit(unsigned short password)
{
803fa2d4:	40 ae       	mov.aa %a14,%sp
803fa2d6:	20 10       	sub.a %sp,16
803fa2d8:	02 42       	mov %d2,%d4
803fa2da:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    Ifx_Ssw_clearSafetyEndinitInline(password);
803fa2de:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
803fa2e2:	f9 e2 fe ff 	st.h [%a14]-2,%d2
    if (SCU_WDTS_CON0.B.LCK)
803fa2e6:	91 30 00 2f 	movh.a %a2,61443
803fa2ea:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803fa2ee:	54 22       	ld.w %d2,[%a2]
803fa2f0:	37 02 e1 20 	extr.u %d2,%d2,1,1
803fa2f4:	8f f2 0f 21 	and %d2,%d2,255
803fa2f8:	df 02 19 00 	jeq %d2,0,803fa32a <Ifx_Ssw_clearSafetyEndinit+0x56>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
803fa2fc:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
803fa300:	8f 22 00 30 	sh %d3,%d2,2
                          ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803fa304:	91 30 00 2f 	movh.a %a2,61443
803fa308:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803fa30c:	54 22       	ld.w %d2,[%a2]
803fa30e:	37 02 70 28 	extr.u %d2,%d2,16,16
803fa312:	37 02 70 20 	extr.u %d2,%d2,0,16
803fa316:	8f 02 01 20 	sh %d2,%d2,16
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
803fa31a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803fa31c:	91 30 00 2f 	movh.a %a2,61443
803fa320:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
803fa324:	8f 12 40 21 	or %d2,%d2,1
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803fa328:	74 22       	st.w [%a2],%d2
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
803fa32a:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
803fa32e:	8f 22 00 30 	sh %d3,%d2,2
                      ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803fa332:	91 30 00 2f 	movh.a %a2,61443
803fa336:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803fa33a:	54 22       	ld.w %d2,[%a2]
803fa33c:	37 02 70 28 	extr.u %d2,%d2,16,16
803fa340:	37 02 70 20 	extr.u %d2,%d2,0,16
803fa344:	8f 02 01 20 	sh %d2,%d2,16
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
803fa348:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803fa34a:	91 30 00 2f 	movh.a %a2,61443
803fa34e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
803fa352:	8f 22 40 21 	or %d2,%d2,2
    SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803fa356:	74 22       	st.w [%a2],%d2
    SCU_WDTS_CON0.U;
803fa358:	91 30 00 2f 	movh.a %a2,61443
803fa35c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803fa360:	54 22       	ld.w %d2,[%a2]
}
803fa362:	00 00       	nop 
803fa364:	00 90       	ret 

803fa366 <Ifx_Ssw_setSafetyEndinit>:


void Ifx_Ssw_setSafetyEndinit(unsigned short password)
{
803fa366:	40 ae       	mov.aa %a14,%sp
803fa368:	20 10       	sub.a %sp,16
803fa36a:	02 42       	mov %d2,%d4
803fa36c:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    Ifx_Ssw_setSafetyEndinitInline(password);
803fa370:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
803fa374:	f9 e2 fe ff 	st.h [%a14]-2,%d2
    if (SCU_WDTS_CON0.B.LCK)
803fa378:	91 30 00 2f 	movh.a %a2,61443
803fa37c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803fa380:	54 22       	ld.w %d2,[%a2]
803fa382:	37 02 e1 20 	extr.u %d2,%d2,1,1
803fa386:	8f f2 0f 21 	and %d2,%d2,255
803fa38a:	df 02 19 00 	jeq %d2,0,803fa3bc <Ifx_Ssw_setSafetyEndinit+0x56>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
803fa38e:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
803fa392:	8f 22 00 30 	sh %d3,%d2,2
                          ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803fa396:	91 30 00 2f 	movh.a %a2,61443
803fa39a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803fa39e:	54 22       	ld.w %d2,[%a2]
803fa3a0:	37 02 70 28 	extr.u %d2,%d2,16,16
803fa3a4:	37 02 70 20 	extr.u %d2,%d2,0,16
803fa3a8:	8f 02 01 20 	sh %d2,%d2,16
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
803fa3ac:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803fa3ae:	91 30 00 2f 	movh.a %a2,61443
803fa3b2:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
803fa3b6:	8f 12 40 21 	or %d2,%d2,1
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803fa3ba:	74 22       	st.w [%a2],%d2
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
803fa3bc:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
803fa3c0:	8f 22 00 30 	sh %d3,%d2,2
                      ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803fa3c4:	91 30 00 2f 	movh.a %a2,61443
803fa3c8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803fa3cc:	54 22       	ld.w %d2,[%a2]
803fa3ce:	37 02 70 28 	extr.u %d2,%d2,16,16
803fa3d2:	37 02 70 20 	extr.u %d2,%d2,0,16
803fa3d6:	8f 02 01 20 	sh %d2,%d2,16
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
803fa3da:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803fa3dc:	91 30 00 2f 	movh.a %a2,61443
803fa3e0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
803fa3e4:	8f 32 40 21 	or %d2,%d2,3
    SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803fa3e8:	74 22       	st.w [%a2],%d2
    SCU_WDTS_CON0.U;
803fa3ea:	91 30 00 2f 	movh.a %a2,61443
803fa3ee:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803fa3f2:	54 22       	ld.w %d2,[%a2]
}
803fa3f4:	00 00       	nop 
803fa3f6:	00 90       	ret 

803fa3f8 <Ifx_Ssw_serviceCpuWatchdog>:


void Ifx_Ssw_serviceCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
803fa3f8:	40 ae       	mov.aa %a14,%sp
803fa3fa:	20 10       	sub.a %sp,16
803fa3fc:	b5 e4 f4 ff 	st.a [%a14]-12,%a4
803fa400:	02 42       	mov %d2,%d4
803fa402:	f9 e2 f0 ff 	st.h [%a14]-16,%d2
    Ifx_Ssw_setCpuEndinitInline(watchdog, password);
803fa406:	b9 e2 f0 ff 	ld.hu %d2,[%a14]-16
803fa40a:	19 e3 f4 ff 	ld.w %d3,[%a14]-12
803fa40e:	59 e3 fc ff 	st.w [%a14]-4,%d3
803fa412:	f9 e2 fa ff 	st.h [%a14]-6,%d2
    if (watchdog->CON0.B.LCK)
803fa416:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa41a:	54 22       	ld.w %d2,[%a2]
803fa41c:	37 02 e1 20 	extr.u %d2,%d2,1,1
803fa420:	8f f2 0f 21 	and %d2,%d2,255
803fa424:	df 02 15 00 	jeq %d2,0,803fa44e <Ifx_Ssw_serviceCpuWatchdog+0x56>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803fa428:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
803fa42c:	8f 22 00 30 	sh %d3,%d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803fa430:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa434:	54 22       	ld.w %d2,[%a2]
803fa436:	37 02 70 28 	extr.u %d2,%d2,16,16
803fa43a:	37 02 70 20 	extr.u %d2,%d2,0,16
803fa43e:	8f 02 01 20 	sh %d2,%d2,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803fa442:	a6 32       	or %d2,%d3
803fa444:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803fa448:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa44c:	74 22       	st.w [%a2],%d2
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803fa44e:	b9 e2 fa ff 	ld.hu %d2,[%a14]-6
803fa452:	8f 22 00 30 	sh %d3,%d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803fa456:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa45a:	54 22       	ld.w %d2,[%a2]
803fa45c:	37 02 70 28 	extr.u %d2,%d2,16,16
803fa460:	37 02 70 20 	extr.u %d2,%d2,0,16
803fa464:	8f 02 01 20 	sh %d2,%d2,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803fa468:	a6 32       	or %d2,%d3
803fa46a:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803fa46e:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa472:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
803fa474:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa478:	54 22       	ld.w %d2,[%a2]
}
803fa47a:	00 00       	nop 
803fa47c:	00 90       	ret 

803fa47e <Ifx_Ssw_serviceSafetyWatchdog>:


void Ifx_Ssw_serviceSafetyWatchdog(unsigned short password)
{
803fa47e:	40 ae       	mov.aa %a14,%sp
803fa480:	20 10       	sub.a %sp,16
803fa482:	02 42       	mov %d2,%d4
803fa484:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    Ifx_Ssw_setSafetyEndinitInline(password);
803fa488:	b9 e2 f4 ff 	ld.hu %d2,[%a14]-12
803fa48c:	f9 e2 fe ff 	st.h [%a14]-2,%d2
    if (SCU_WDTS_CON0.B.LCK)
803fa490:	91 30 00 2f 	movh.a %a2,61443
803fa494:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803fa498:	54 22       	ld.w %d2,[%a2]
803fa49a:	37 02 e1 20 	extr.u %d2,%d2,1,1
803fa49e:	8f f2 0f 21 	and %d2,%d2,255
803fa4a2:	df 02 19 00 	jeq %d2,0,803fa4d4 <Ifx_Ssw_serviceSafetyWatchdog+0x56>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
803fa4a6:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
803fa4aa:	8f 22 00 30 	sh %d3,%d2,2
                          ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803fa4ae:	91 30 00 2f 	movh.a %a2,61443
803fa4b2:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803fa4b6:	54 22       	ld.w %d2,[%a2]
803fa4b8:	37 02 70 28 	extr.u %d2,%d2,16,16
803fa4bc:	37 02 70 20 	extr.u %d2,%d2,0,16
803fa4c0:	8f 02 01 20 	sh %d2,%d2,16
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
803fa4c4:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803fa4c6:	91 30 00 2f 	movh.a %a2,61443
803fa4ca:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
803fa4ce:	8f 12 40 21 	or %d2,%d2,1
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803fa4d2:	74 22       	st.w [%a2],%d2
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
803fa4d4:	b9 e2 fe ff 	ld.hu %d2,[%a14]-2
803fa4d8:	8f 22 00 30 	sh %d3,%d2,2
                      ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
803fa4dc:	91 30 00 2f 	movh.a %a2,61443
803fa4e0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803fa4e4:	54 22       	ld.w %d2,[%a2]
803fa4e6:	37 02 70 28 	extr.u %d2,%d2,16,16
803fa4ea:	37 02 70 20 	extr.u %d2,%d2,0,16
803fa4ee:	8f 02 01 20 	sh %d2,%d2,16
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
803fa4f2:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803fa4f4:	91 30 00 2f 	movh.a %a2,61443
803fa4f8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
803fa4fc:	8f 32 40 21 	or %d2,%d2,3
    SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
803fa500:	74 22       	st.w [%a2],%d2
    SCU_WDTS_CON0.U;
803fa502:	91 30 00 2f 	movh.a %a2,61443
803fa506:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <_START2_end+0x4fc3fe7c>>
803fa50a:	54 22       	ld.w %d2,[%a2]
}
803fa50c:	00 00       	nop 
803fa50e:	00 90       	ret 

803fa510 <Ifx_Ssw_disableCpuWatchdog>:


void Ifx_Ssw_disableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
803fa510:	40 ae       	mov.aa %a14,%sp
803fa512:	20 20       	sub.a %sp,32
803fa514:	b5 e4 e4 ff 	st.a [%a14]-28,%a4
803fa518:	02 42       	mov %d2,%d4
803fa51a:	f9 e2 e0 ff 	st.h [%a14]-32,%d2
    /* Select CPU Watchdog based on Core Id */
    unsigned int    cpuIndex;
    cpuIndex = Ifx_Ssw_MFCR(CPU_CORE_ID);
803fa51e:	4d c0 e1 2f 	mfcr %d2,$core_id
803fa522:	59 e2 fc ff 	st.w [%a14]-4,%d2
803fa526:	19 e2 fc ff 	ld.w %d2,[%a14]-4
803fa52a:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    cpuIndex = (unsigned int)((unsigned int)cpuIndex >> IFX_CPU_CORE_ID_CORE_ID_OFF) & IFX_CPU_CORE_ID_CORE_ID_MSK;
803fa52e:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803fa532:	8f 72 00 21 	and %d2,%d2,7
803fa536:	59 e2 f8 ff 	st.w [%a14]-8,%d2
803fa53a:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803fa53e:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803fa542:	82 52       	mov %d2,5
803fa544:	59 e2 ec ff 	st.w [%a14]-20,%d2
    __asm__ volatile ("min.u %0, %1, %2" : "=d" (res) : "d" (a), "d" (b));
803fa548:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
803fa54c:	19 e3 ec ff 	ld.w %d3,[%a14]-20
803fa550:	0b 32 90 21 	min.u %d2,%d2,%d3
803fa554:	59 e2 e8 ff 	st.w [%a14]-24,%d2
    return res;
803fa558:	19 e2 e8 ff 	ld.w %d2,[%a14]-24
    cpuIndex = Ifx_Ssw_MINU(cpuIndex, 5);
803fa55c:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    Ifx_SCU_WDTCPU *wdt = &MODULE_SCU.WDTCPU[cpuIndex];
803fa560:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803fa564:	53 c2 20 20 	mul %d2,%d2,12
803fa568:	1b c2 24 26 	addi %d2,%d2,25164
803fa56c:	9b 32 00 2f 	addih %d2,%d2,61443
803fa570:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    Ifx_Ssw_clearCpuEndinit(wdt, password);
803fa574:	b9 e2 e0 ff 	ld.hu %d2,[%a14]-32
803fa578:	02 24       	mov %d4,%d2
803fa57a:	99 e4 f4 ff 	ld.a %a4,[%a14]-12
803fa57e:	6d ff 25 fe 	call 803fa1c8 <Ifx_Ssw_clearCpuEndinit>
    wdt->CON1.B.DR = 1U;         /* Set DR bit in Config_1 register */
803fa582:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
803fa586:	d9 23 04 00 	lea %a3,[%a2]4
803fa58a:	54 32       	ld.w %d2,[%a3]
803fa58c:	b7 12 81 21 	insert %d2,%d2,1,3,1
803fa590:	b0 42       	add.a %a2,4
803fa592:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setCpuEndinit(wdt, password);
803fa594:	b9 e2 e0 ff 	ld.hu %d2,[%a14]-32
803fa598:	02 24       	mov %d4,%d2
803fa59a:	99 e4 f4 ff 	ld.a %a4,[%a14]-12
803fa59e:	6d ff 58 fe 	call 803fa24e <Ifx_Ssw_setCpuEndinit>
}
803fa5a2:	00 00       	nop 
803fa5a4:	00 90       	ret 

803fa5a6 <Ifx_Ssw_enableCpuWatchdog>:


void Ifx_Ssw_enableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
803fa5a6:	40 ae       	mov.aa %a14,%sp
803fa5a8:	20 20       	sub.a %sp,32
803fa5aa:	b5 e4 e4 ff 	st.a [%a14]-28,%a4
803fa5ae:	02 42       	mov %d2,%d4
803fa5b0:	f9 e2 e0 ff 	st.h [%a14]-32,%d2
    /* Select CPU Watchdog based on Core Id */
    unsigned int    cpuIndex;
    cpuIndex = Ifx_Ssw_MFCR(CPU_CORE_ID);
803fa5b4:	4d c0 e1 2f 	mfcr %d2,$core_id
803fa5b8:	59 e2 fc ff 	st.w [%a14]-4,%d2
803fa5bc:	19 e2 fc ff 	ld.w %d2,[%a14]-4
803fa5c0:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    cpuIndex = (unsigned int)((unsigned int)cpuIndex >> IFX_CPU_CORE_ID_CORE_ID_OFF) & IFX_CPU_CORE_ID_CORE_ID_MSK;
803fa5c4:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803fa5c8:	8f 72 00 21 	and %d2,%d2,7
803fa5cc:	59 e2 f8 ff 	st.w [%a14]-8,%d2
803fa5d0:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803fa5d4:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803fa5d8:	82 52       	mov %d2,5
803fa5da:	59 e2 ec ff 	st.w [%a14]-20,%d2
    __asm__ volatile ("min.u %0, %1, %2" : "=d" (res) : "d" (a), "d" (b));
803fa5de:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
803fa5e2:	19 e3 ec ff 	ld.w %d3,[%a14]-20
803fa5e6:	0b 32 90 21 	min.u %d2,%d2,%d3
803fa5ea:	59 e2 e8 ff 	st.w [%a14]-24,%d2
    return res;
803fa5ee:	19 e2 e8 ff 	ld.w %d2,[%a14]-24
    cpuIndex = Ifx_Ssw_MINU(cpuIndex, 5);
803fa5f2:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    Ifx_SCU_WDTCPU *wdt = &MODULE_SCU.WDTCPU[cpuIndex];
803fa5f6:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803fa5fa:	53 c2 20 20 	mul %d2,%d2,12
803fa5fe:	1b c2 24 26 	addi %d2,%d2,25164
803fa602:	9b 32 00 2f 	addih %d2,%d2,61443
803fa606:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    Ifx_Ssw_clearCpuEndinit(wdt, password);
803fa60a:	b9 e2 e0 ff 	ld.hu %d2,[%a14]-32
803fa60e:	02 24       	mov %d4,%d2
803fa610:	99 e4 f4 ff 	ld.a %a4,[%a14]-12
803fa614:	6d ff da fd 	call 803fa1c8 <Ifx_Ssw_clearCpuEndinit>
    wdt->CON1.B.DR = 0U;         /* Clear DR bit in Config_1 register */
803fa618:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
803fa61c:	d9 23 04 00 	lea %a3,[%a2]4
803fa620:	54 32       	ld.w %d2,[%a3]
803fa622:	8f 82 c0 21 	andn %d2,%d2,8
803fa626:	b0 42       	add.a %a2,4
803fa628:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setCpuEndinit(wdt, password);
803fa62a:	b9 e2 e0 ff 	ld.hu %d2,[%a14]-32
803fa62e:	02 24       	mov %d4,%d2
803fa630:	99 e4 f4 ff 	ld.a %a4,[%a14]-12
803fa634:	6d ff 0d fe 	call 803fa24e <Ifx_Ssw_setCpuEndinit>
}
803fa638:	00 00       	nop 
803fa63a:	00 90       	ret 

803fa63c <Ifx_Ssw_disableSafetyWatchdog>:


void Ifx_Ssw_disableSafetyWatchdog(unsigned short password)
{
803fa63c:	40 ae       	mov.aa %a14,%sp
803fa63e:	20 08       	sub.a %sp,8
803fa640:	02 42       	mov %d2,%d4
803fa642:	f9 e2 fc ff 	st.h [%a14]-4,%d2
    Ifx_Ssw_clearSafetyEndinit(password);
803fa646:	b9 e2 fc ff 	ld.hu %d2,[%a14]-4
803fa64a:	02 24       	mov %d4,%d2
803fa64c:	6d ff 44 fe 	call 803fa2d4 <Ifx_Ssw_clearSafetyEndinit>
    SCU_WDTS_CON1.B.DR = 1U;     /* Set DR bit in Config_1 register */
803fa650:	91 30 00 2f 	movh.a %a2,61443
803fa654:	d9 22 2c a6 	lea %a2,[%a2]25260 <f00362ac <_START2_end+0x4fc3fe80>>
803fa658:	54 22       	ld.w %d2,[%a2]
803fa65a:	b7 12 81 21 	insert %d2,%d2,1,3,1
803fa65e:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setSafetyEndinit(password);
803fa660:	b9 e2 fc ff 	ld.hu %d2,[%a14]-4
803fa664:	02 24       	mov %d4,%d2
803fa666:	6d ff 80 fe 	call 803fa366 <Ifx_Ssw_setSafetyEndinit>
}
803fa66a:	00 00       	nop 
803fa66c:	00 90       	ret 

803fa66e <Ifx_Ssw_enableSafetyWatchdog>:


void Ifx_Ssw_enableSafetyWatchdog(unsigned short password)
{
803fa66e:	40 ae       	mov.aa %a14,%sp
803fa670:	20 08       	sub.a %sp,8
803fa672:	02 42       	mov %d2,%d4
803fa674:	f9 e2 fc ff 	st.h [%a14]-4,%d2
    Ifx_Ssw_clearSafetyEndinit(password);
803fa678:	b9 e2 fc ff 	ld.hu %d2,[%a14]-4
803fa67c:	02 24       	mov %d4,%d2
803fa67e:	6d ff 2b fe 	call 803fa2d4 <Ifx_Ssw_clearSafetyEndinit>
    SCU_WDTS_CON1.B.DR = 0U;     /* Clear DR bit in Config_1 register */
803fa682:	91 30 00 2f 	movh.a %a2,61443
803fa686:	d9 22 2c a6 	lea %a2,[%a2]25260 <f00362ac <_START2_end+0x4fc3fe80>>
803fa68a:	54 22       	ld.w %d2,[%a2]
803fa68c:	8f 82 c0 21 	andn %d2,%d2,8
803fa690:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setSafetyEndinit(password);
803fa692:	b9 e2 fc ff 	ld.hu %d2,[%a14]-4
803fa696:	02 24       	mov %d4,%d2
803fa698:	6d ff 67 fe 	call 803fa366 <Ifx_Ssw_setSafetyEndinit>
}
803fa69c:	00 00       	nop 
803fa69e:	00 90       	ret 

803fa6a0 <Ifx_Ssw_startCore>:


void Ifx_Ssw_startCore(Ifx_CPU *cpu, unsigned int programCounter)
{
803fa6a0:	40 ae       	mov.aa %a14,%sp
803fa6a2:	20 10       	sub.a %sp,16
803fa6a4:	b5 e4 f4 ff 	st.a [%a14]-12,%a4
803fa6a8:	59 e4 f0 ff 	st.w [%a14]-16,%d4
    /* Set the PC */
    cpu->PC.B.PC = (unsigned int)programCounter >> 1U;
803fa6ac:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
803fa6b0:	06 f2       	sh %d2,-1
803fa6b2:	82 f3       	mov %d3,-1
803fa6b4:	06 f3       	sh %d3,-1
803fa6b6:	26 23       	and %d3,%d2
803fa6b8:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
803fa6bc:	60 22       	mov.a %a2,%d2
803fa6be:	d9 22 c8 8f 	lea %a2,[%a2]-504
803fa6c2:	11 22 00 20 	addih.a %a2,%a2,2
803fa6c6:	54 22       	ld.w %d2,[%a2]
803fa6c8:	37 32 9f 20 	insert %d2,%d2,%d3,1,31
803fa6cc:	74 22       	st.w [%a2],%d2

    /* release boot halt mode if required */
    Ifx_CPU_SYSCON syscon;
    syscon = cpu->SYSCON;
803fa6ce:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
803fa6d2:	60 22       	mov.a %a2,%d2
803fa6d4:	d9 22 d4 8f 	lea %a2,[%a2]-492
803fa6d8:	11 22 00 20 	addih.a %a2,%a2,2
803fa6dc:	54 22       	ld.w %d2,[%a2]
803fa6de:	59 e2 fc ff 	st.w [%a14]-4,%d2

    if (syscon.B.BHALT)
803fa6e2:	19 e2 fc ff 	ld.w %d2,[%a14]-4
803fa6e6:	37 02 61 2c 	extr.u %d2,%d2,24,1
803fa6ea:	8f f2 0f 21 	and %d2,%d2,255
803fa6ee:	df 02 14 00 	jeq %d2,0,803fa716 <Ifx_Ssw_startCore+0x76>
    {
        syscon.B.BHALT = 0U;
803fa6f2:	19 e2 fc ff 	ld.w %d2,[%a14]-4
803fa6f6:	7b 00 f0 3f 	movh %d3,65280
803fa6fa:	c2 f3       	add %d3,-1
803fa6fc:	26 32       	and %d2,%d3
803fa6fe:	59 e2 fc ff 	st.w [%a14]-4,%d2
        cpu->SYSCON    = syscon;
803fa702:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
803fa706:	60 22       	mov.a %a2,%d2
803fa708:	d9 22 d4 8f 	lea %a2,[%a2]-492
803fa70c:	11 22 00 20 	addih.a %a2,%a2,2
803fa710:	19 e2 fc ff 	ld.w %d2,[%a14]-4
803fa714:	74 22       	st.w [%a2],%d2
    }

}
803fa716:	00 00       	nop 
803fa718:	00 90       	ret 

803fa71a <Ifx_Ssw_getStmFrequency>:
    Ifx_Ssw_setCpuEndinit(wdt, cpuWdtPw);
}


float Ifx_Ssw_getStmFrequency(void)
{
803fa71a:	40 ae       	mov.aa %a14,%sp
803fa71c:	20 10       	sub.a %sp,16
    float        oscFreq    = IFX_CFG_SSW_XTAL_FREQUENCY;
803fa71e:	7b 90 b9 24 	movh %d2,19353
803fa722:	1b 02 68 29 	addi %d2,%d2,-27008
803fa726:	59 e2 fc ff 	st.w [%a14]-4,%d2
    float        sourcefreq = IFX_CFG_SSW_EVR_OSC_FREQUENCY;
803fa72a:	7b f0 cb 24 	movh %d2,19647
803fa72e:	1b 02 c2 2b 	addi %d2,%d2,-17376
803fa732:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    unsigned int insel      = SCU_SYSPLLCON0.B.INSEL;
803fa736:	91 30 00 2f 	movh.a %a2,61443
803fa73a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803fa73e:	54 22       	ld.w %d2,[%a2]
803fa740:	37 02 62 2f 	extr.u %d2,%d2,30,2
803fa744:	8f f2 0f 21 	and %d2,%d2,255
803fa748:	59 e2 f4 ff 	st.w [%a14]-12,%d2

    if (insel == 2U)
803fa74c:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
803fa750:	df 22 0a 80 	jne %d2,2,803fa764 <Ifx_Ssw_getStmFrequency+0x4a>
    {
        oscFreq = IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY;
803fa754:	7b 90 b9 24 	movh %d2,19353
803fa758:	1b 02 68 29 	addi %d2,%d2,-27008
803fa75c:	59 e2 fc ff 	st.w [%a14]-4,%d2
803fa760:	1d 00 14 00 	j 803fa788 <Ifx_Ssw_getStmFrequency+0x6e>
    }
    else if (insel == 1U)
803fa764:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
803fa768:	df 12 0a 80 	jne %d2,1,803fa77c <Ifx_Ssw_getStmFrequency+0x62>
    {
        oscFreq = IFX_CFG_SSW_XTAL_FREQUENCY;
803fa76c:	7b 90 b9 24 	movh %d2,19353
803fa770:	1b 02 68 29 	addi %d2,%d2,-27008
803fa774:	59 e2 fc ff 	st.w [%a14]-4,%d2
803fa778:	1d 00 08 00 	j 803fa788 <Ifx_Ssw_getStmFrequency+0x6e>
    }
    else
    {
        oscFreq = IFX_CFG_SSW_EVR_OSC_FREQUENCY;
803fa77c:	7b f0 cb 24 	movh %d2,19647
803fa780:	1b 02 c2 2b 	addi %d2,%d2,-17376
803fa784:	59 e2 fc ff 	st.w [%a14]-4,%d2
    }

    if (SCU_CCUCON0.B.CLKSEL != 0U)
803fa788:	91 30 00 2f 	movh.a %a2,61443
803fa78c:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fc3fc04>>
803fa790:	54 22       	ld.w %d2,[%a2]
803fa792:	37 02 62 2e 	extr.u %d2,%d2,28,2
803fa796:	8f f2 0f 21 	and %d2,%d2,255
803fa79a:	df 02 2e 00 	jeq %d2,0,803fa7f6 <Ifx_Ssw_getStmFrequency+0xdc>
    {
        sourcefreq = (oscFreq * (SCU_SYSPLLCON0.B.NDIV + 1U)) /
803fa79e:	91 30 00 2f 	movh.a %a2,61443
803fa7a2:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803fa7a6:	54 22       	ld.w %d2,[%a2]
803fa7a8:	37 02 e7 24 	extr.u %d2,%d2,9,7
803fa7ac:	8f f2 0f 21 	and %d2,%d2,255
803fa7b0:	c2 12       	add %d2,1
803fa7b2:	4b 02 61 31 	utof %d3,%d2
803fa7b6:	19 e2 fc ff 	ld.w %d2,[%a14]-4
803fa7ba:	4b 23 41 30 	mul.f %d3,%d3,%d2
                     ((SCU_SYSPLLCON0.B.PDIV + 1U) * (SCU_SYSPLLCON1.B.K2DIV + 1U));
803fa7be:	91 30 00 2f 	movh.a %a2,61443
803fa7c2:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_START2_end+0x4fc3fbec>>
803fa7c6:	54 22       	ld.w %d2,[%a2]
803fa7c8:	37 02 63 2c 	extr.u %d2,%d2,24,3
803fa7cc:	8f f2 0f 21 	and %d2,%d2,255
803fa7d0:	1b 12 00 40 	addi %d4,%d2,1
803fa7d4:	91 30 00 2f 	movh.a %a2,61443
803fa7d8:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_START2_end+0x4fc3fbf0>>
803fa7dc:	54 22       	ld.w %d2,[%a2]
803fa7de:	37 02 63 20 	extr.u %d2,%d2,0,3
803fa7e2:	8f f2 0f 21 	and %d2,%d2,255
803fa7e6:	c2 12       	add %d2,1
803fa7e8:	e2 42       	mul %d2,%d4
        sourcefreq = (oscFreq * (SCU_SYSPLLCON0.B.NDIV + 1U)) /
803fa7ea:	4b 02 61 21 	utof %d2,%d2
803fa7ee:	4b 23 51 20 	div.f %d2,%d3,%d2
803fa7f2:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    }

    return sourcefreq / SCU_CCUCON0.B.STMDIV;
803fa7f6:	91 30 00 2f 	movh.a %a2,61443
803fa7fa:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fc3fc04>>
803fa7fe:	54 22       	ld.w %d2,[%a2]
803fa800:	37 02 64 20 	extr.u %d2,%d2,0,4
803fa804:	8f f2 0f 21 	and %d2,%d2,255
803fa808:	4b 02 41 21 	itof %d2,%d2
803fa80c:	19 e3 f8 ff 	ld.w %d3,[%a14]-8
803fa810:	4b 23 51 20 	div.f %d2,%d3,%d2
}
803fa814:	00 90       	ret 

803fa816 <Ifx_Ssw_doCppInit>:

void Ifx_Ssw_doCppInit(void)
{
803fa816:	40 ae       	mov.aa %a14,%sp
803fa818:	20 18       	sub.a %sp,24
{
    Ifx_Ssw_CTablePtr pBlockDest, pBlockSrc;
    unsigned int      uiLength, uiCnt;
    unsigned int     *pTable;
    /* clear table */
    pTable = (unsigned int *)&__clear_table;
803fa81a:	91 f0 03 28 	movh.a %a2,32831
803fa81e:	d9 22 70 c6 	lea %a2,[%a2]26416 <803f6730 <__clear_table>>
803fa822:	b5 e2 fc ff 	st.a [%a14]-4 <803f6730 <__clear_table>>,%a2

    while (pTable)
803fa826:	1d 00 58 00 	j 803fa8d6 <Ifx_Ssw_doCppInit+0xc0>
    {
        pBlockDest.uiPtr = (unsigned int *)*pTable++;
803fa82a:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa82e:	80 22       	mov.d %d2,%a2
803fa830:	c2 42       	add %d2,4
803fa832:	59 e2 fc ff 	st.w [%a14]-4,%d2
803fa836:	54 22       	ld.w %d2,[%a2]
803fa838:	59 e2 f0 ff 	st.w [%a14]-16,%d2
        uiLength         = *pTable++;
803fa83c:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa840:	80 22       	mov.d %d2,%a2
803fa842:	c2 42       	add %d2,4
803fa844:	59 e2 fc ff 	st.w [%a14]-4,%d2
803fa848:	54 22       	ld.w %d2,[%a2]
803fa84a:	59 e2 f8 ff 	st.w [%a14]-8,%d2

        /* we are finished when length == -1 */
        if (uiLength == 0xFFFFFFFF)
803fa84e:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803fa852:	df f2 48 00 	jeq %d2,-1,803fa8e2 <Ifx_Ssw_doCppInit+0xcc>
        {
            break;
        }

        uiCnt = uiLength / 8;
803fa856:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803fa85a:	06 d2       	sh %d2,-3
803fa85c:	59 e2 f4 ff 	st.w [%a14]-12,%d2

        while (uiCnt--)
803fa860:	1d 00 0d 00 	j 803fa87a <Ifx_Ssw_doCppInit+0x64>
        {
            *pBlockDest.ullPtr++ = 0;
803fa864:	99 e4 f0 ff 	ld.a %a4,[%a14]-16
803fa868:	80 42       	mov.d %d2,%a4
803fa86a:	1b 82 00 20 	addi %d2,%d2,8
803fa86e:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803fa872:	a0 02       	mov.a %a2,0
803fa874:	a0 03       	mov.a %a3,0
803fa876:	89 42 c0 09 	st.da [%a4],%a2
        while (uiCnt--)
803fa87a:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
803fa87e:	1b f2 ff 3f 	addi %d3,%d2,-1
803fa882:	59 e3 f4 ff 	st.w [%a14]-12,%d3
803fa886:	df 02 ef ff 	jne %d2,0,803fa864 <Ifx_Ssw_doCppInit+0x4e>
        }

        if (uiLength & 0x4)
803fa88a:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803fa88e:	8f 42 00 21 	and %d2,%d2,4
803fa892:	df 02 0a 00 	jeq %d2,0,803fa8a6 <Ifx_Ssw_doCppInit+0x90>
        {
            *pBlockDest.uiPtr++ = 0;
803fa896:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803fa89a:	80 22       	mov.d %d2,%a2
803fa89c:	c2 42       	add %d2,4
803fa89e:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803fa8a2:	82 02       	mov %d2,0
803fa8a4:	74 22       	st.w [%a2],%d2
        }

        if (uiLength & 0x2)
803fa8a6:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803fa8aa:	8f 22 00 21 	and %d2,%d2,2
803fa8ae:	df 02 0a 00 	jeq %d2,0,803fa8c2 <Ifx_Ssw_doCppInit+0xac>
        {
            *pBlockDest.usPtr++ = 0;
803fa8b2:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803fa8b6:	80 22       	mov.d %d2,%a2
803fa8b8:	c2 22       	add %d2,2
803fa8ba:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803fa8be:	82 02       	mov %d2,0
803fa8c0:	b4 22       	st.h [%a2],%d2
        }

        if (uiLength & 0x1)
803fa8c2:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803fa8c6:	8f 12 00 21 	and %d2,%d2,1
803fa8ca:	df 02 06 00 	jeq %d2,0,803fa8d6 <Ifx_Ssw_doCppInit+0xc0>
        {
            *pBlockDest.ucPtr = 0;
803fa8ce:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803fa8d2:	82 02       	mov %d2,0
803fa8d4:	34 22       	st.b [%a2],%d2
    while (pTable)
803fa8d6:	19 e2 fc ff 	ld.w %d2,[%a14]-4
803fa8da:	df 02 a8 ff 	jne %d2,0,803fa82a <Ifx_Ssw_doCppInit+0x14>
803fa8de:	1d 00 03 00 	j 803fa8e4 <Ifx_Ssw_doCppInit+0xce>
            break;
803fa8e2:	00 00       	nop 
        }
    }

    /* copy table */
    pTable = (unsigned int *)&__copy_table;
803fa8e4:	91 f0 03 28 	movh.a %a2,32831
803fa8e8:	d9 22 78 e6 	lea %a2,[%a2]26552 <803f67b8 <__copy_table>>
803fa8ec:	b5 e2 fc ff 	st.a [%a14]-4 <803f67b8 <__copy_table>>,%a2

    while (pTable)
803fa8f0:	1d 00 77 00 	j 803fa9de <Ifx_Ssw_doCppInit+0x1c8>
    {
        pBlockSrc.uiPtr  = (unsigned int *)*pTable++;
803fa8f4:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa8f8:	80 22       	mov.d %d2,%a2
803fa8fa:	c2 42       	add %d2,4
803fa8fc:	59 e2 fc ff 	st.w [%a14]-4,%d2
803fa900:	54 22       	ld.w %d2,[%a2]
803fa902:	59 e2 ec ff 	st.w [%a14]-20,%d2
        pBlockDest.uiPtr = (unsigned int *)*pTable++;
803fa906:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa90a:	80 22       	mov.d %d2,%a2
803fa90c:	c2 42       	add %d2,4
803fa90e:	59 e2 fc ff 	st.w [%a14]-4,%d2
803fa912:	54 22       	ld.w %d2,[%a2]
803fa914:	59 e2 f0 ff 	st.w [%a14]-16,%d2
        uiLength         = *pTable++;
803fa918:	99 e2 fc ff 	ld.a %a2,[%a14]-4
803fa91c:	80 22       	mov.d %d2,%a2
803fa91e:	c2 42       	add %d2,4
803fa920:	59 e2 fc ff 	st.w [%a14]-4,%d2
803fa924:	54 22       	ld.w %d2,[%a2]
803fa926:	59 e2 f8 ff 	st.w [%a14]-8,%d2

        /* we are finished when length == -1 */
        if (uiLength == 0xFFFFFFFF)
803fa92a:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803fa92e:	df f2 5e 00 	jeq %d2,-1,803fa9ea <Ifx_Ssw_doCppInit+0x1d4>
        {
            break;
        }

        uiCnt = uiLength / 8;
803fa932:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803fa936:	06 d2       	sh %d2,-3
803fa938:	59 e2 f4 ff 	st.w [%a14]-12,%d2

        while (uiCnt--)
803fa93c:	1d 00 14 00 	j 803fa964 <Ifx_Ssw_doCppInit+0x14e>
        {
            *pBlockDest.ullPtr++ = *pBlockSrc.ullPtr++;
803fa940:	99 e2 ec ff 	ld.a %a2,[%a14]-20
803fa944:	80 22       	mov.d %d2,%a2
803fa946:	1b 82 00 20 	addi %d2,%d2,8
803fa94a:	59 e2 ec ff 	st.w [%a14]-20,%d2
803fa94e:	99 e4 f0 ff 	ld.a %a4,[%a14]-16
803fa952:	80 42       	mov.d %d2,%a4
803fa954:	1b 82 00 20 	addi %d2,%d2,8
803fa958:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803fa95c:	09 22 c0 09 	ld.da %a2,[%a2]
803fa960:	89 42 c0 09 	st.da [%a4],%a2
        while (uiCnt--)
803fa964:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
803fa968:	1b f2 ff 3f 	addi %d3,%d2,-1
803fa96c:	59 e3 f4 ff 	st.w [%a14]-12,%d3
803fa970:	df 02 e8 ff 	jne %d2,0,803fa940 <Ifx_Ssw_doCppInit+0x12a>
        }

        if (uiLength & 0x4)
803fa974:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803fa978:	8f 42 00 21 	and %d2,%d2,4
803fa97c:	df 02 10 00 	jeq %d2,0,803fa99c <Ifx_Ssw_doCppInit+0x186>
        {
            *pBlockDest.uiPtr++ = *pBlockSrc.uiPtr++;
803fa980:	99 e3 ec ff 	ld.a %a3,[%a14]-20
803fa984:	80 32       	mov.d %d2,%a3
803fa986:	c2 42       	add %d2,4
803fa988:	59 e2 ec ff 	st.w [%a14]-20,%d2
803fa98c:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803fa990:	80 22       	mov.d %d2,%a2
803fa992:	c2 42       	add %d2,4
803fa994:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803fa998:	54 32       	ld.w %d2,[%a3]
803fa99a:	74 22       	st.w [%a2],%d2
        }

        if (uiLength & 0x2)
803fa99c:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803fa9a0:	8f 22 00 21 	and %d2,%d2,2
803fa9a4:	df 02 11 00 	jeq %d2,0,803fa9c6 <Ifx_Ssw_doCppInit+0x1b0>
        {
            *pBlockDest.usPtr++ = *pBlockSrc.usPtr++;
803fa9a8:	99 e3 ec ff 	ld.a %a3,[%a14]-20
803fa9ac:	80 32       	mov.d %d2,%a3
803fa9ae:	c2 22       	add %d2,2
803fa9b0:	59 e2 ec ff 	st.w [%a14]-20,%d2
803fa9b4:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803fa9b8:	80 22       	mov.d %d2,%a2
803fa9ba:	c2 22       	add %d2,2
803fa9bc:	59 e2 f0 ff 	st.w [%a14]-16,%d2
803fa9c0:	b9 32 00 00 	ld.hu %d2,[%a3]0
803fa9c4:	b4 22       	st.h [%a2],%d2
        }

        if (uiLength & 0x1)
803fa9c6:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803fa9ca:	8f 12 00 21 	and %d2,%d2,1
803fa9ce:	df 02 08 00 	jeq %d2,0,803fa9de <Ifx_Ssw_doCppInit+0x1c8>
        {
            *pBlockDest.ucPtr = *pBlockSrc.ucPtr;
803fa9d2:	99 e3 ec ff 	ld.a %a3,[%a14]-20
803fa9d6:	99 e2 f0 ff 	ld.a %a2,[%a14]-16
803fa9da:	14 32       	ld.bu %d2,[%a3]
803fa9dc:	34 22       	st.b [%a2],%d2
    while (pTable)
803fa9de:	19 e2 fc ff 	ld.w %d2,[%a14]-4
803fa9e2:	df 02 89 ff 	jne %d2,0,803fa8f4 <Ifx_Ssw_doCppInit+0xde>
        }
    }
}
803fa9e6:	1d 00 03 00 	j 803fa9ec <Ifx_Ssw_doCppInit+0x1d6>
            break;
803fa9ea:	00 00       	nop 
}
803fa9ec:	00 00       	nop 
	#elif defined(__HIGHTEC__) && !defined(__clang__)
		extern void _init(void); /* cpp initialization */
		_init();
	#elif defined(__GNUC__) && !defined(__HIGHTEC__)
		extern void _init(void); /* cpp initialization */
		_init();
803fa9ee:	6d ff 41 e1 	call 803f6c70 <_init>
	#elif defined(__ghs__)
		extern void _main(void); /* cpp initialization */
		_main();
	#endif
}
803fa9f2:	00 00       	nop 
803fa9f4:	00 90       	ret 

803fa9f6 <Ifx_Ssw_Pms_Init>:
#pragma GCC optimize ("O1")
#endif

#if (IFX_CFG_SSW_ENABLE_PMS_INIT == 1U)
void Ifx_Ssw_Pms_Init(void)
{
803fa9f6:	40 ae       	mov.aa %a14,%sp
    uint16 password = MODULE_SCU.SEICON0.B.EPW ^ 0x003F;
803fa9f8:	91 30 00 2f 	movh.a %a2,61443
803fa9fc:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_START2_end+0x4fc3fbd4>>
803faa00:	19 22 34 a0 	ld.w %d2,[%a2]692 <f00302b4 <_START2_end+0x4fc39e88>>
803faa04:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint32                                      regVal;
    uint16                                      endinitSfty_pw = IfxScuWdt_getGlobalSafetyEndinitPasswordInline();
    const IfxPmsEvr_initSequencePhase          *phaseConfig;
    const IfxPmsEvr_StepDownRegulatorRegConfig *regConfig;

    if (PMS_EVRSTAT.B.EVRC == 1U)
803faa08:	91 50 02 2f 	movh.a %a2,61477
803faa0c:	d9 22 2c 08 	lea %a2,[%a2]-32724 <f024802c <_START2_end+0x4fe51c00>>
803faa10:	54 23       	ld.w %d3,[%a2]
803faa12:	6f 03 04 80 	jnz.t %d3,0,803faa1a <Ifx_Ssw_Pms_Init+0x24>
}


IFX_SSW_INLINE void Ifx_Ssw_jumpBackToLink(void)
{
    __asm__ volatile ("ji %a11");
803faa16:	dc 0b       	ji %a11
        __debug();
        /* Application may have call to error handling here */
    }

    Ifx_Ssw_jumpBackToLink();
}
803faa18:	00 90       	ret 
    {
        /*Loop through each configured phase*/
        for (phaseConfig = &sequence->phaseConfig[0];
803faa1a:	91 f0 03 28 	movh.a %a2,32831
803faa1e:	d9 23 58 86 	lea %a3,[%a2]26136 <803f6618 <IfxPmsEvr_cfgSequenceDefault>>
803faa22:	b0 43       	add.a %a3,4
803faa24:	d4 33       	ld.a %a3,[%a3]
             phaseConfig < &sequence->phaseConfig[sequence->numOfPhases];
803faa26:	39 27 58 86 	ld.bu %d7,[%a2]26136 <803f6618 <IfxPmsEvr_cfgSequenceDefault>>
803faa2a:	53 c7 20 70 	mul %d7,%d7,12
803faa2e:	80 33       	mov.d %d3,%a3
803faa30:	42 73       	add %d3,%d7
803faa32:	80 34       	mov.d %d4,%a3
803faa34:	7f 34 f1 ff 	jge.u %d4,%d3,803faa16 <Ifx_Ssw_Pms_Init+0x20>
             phaseConfig++)
        {
            IfxScuWdt_clearGlobalSafetyEndinitInline(endinitSfty_pw);
803faa38:	8f f2 83 21 	xor %d2,%d2,63
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
803faa3c:	06 22       	sh %d2,2
803faa3e:	7b c0 ff 0f 	movh %d0,65532
803faa42:	a6 20       	or %d0,%d2
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF) | (1 << IFX_SCU_SEICON0_ENDINIT_OFF);
803faa44:	7b c0 ff 1f 	movh %d1,65532
803faa48:	c2 21       	add %d1,2
803faa4a:	a6 21       	or %d1,%d2
    boolean                                     pmsInitDone    = TRUE;
803faa4c:	82 18       	mov %d8,1
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
803faa4e:	91 30 00 4f 	movh.a %a4,61443
803faa52:	d9 44 00 06 	lea %a4,[%a4]24576 <f0036000 <_START2_end+0x4fc3fbd4>>
    while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
803faa56:	02 84       	mov %d4,%d8
                 * However, for this function, as this is used only with CPU0 startup no wait required
                 */
                (*((volatile uint32 *)regConfig->regAddr)) = regVal; /*Write to the physical register*/
            }

            PMS_EVRSDCTRL0.B.UP = 1;
803faa58:	91 50 02 5f 	movh.a %a5,61477
803faa5c:	d9 55 08 48 	lea %a5,[%a5]-32504 <f0248108 <_START2_end+0x4fe51cdc>>
            /*Now, wait for the UP bit at EVRSDCTRL0 is reset, which is to indicate the configurations are done*/
            do
            {
                if (--timeoutCount <= 0)
                {
                    pmsInitDone = FALSE;
803faa60:	82 09       	mov %d9,0
}


IFX_INLINE void IfxPmsEvr_wait(float32 waitInSec)
{
    uint32 stmCount      = (uint32)((float32)33000000UL * waitInSec);
803faa62:	7b c0 bf 64 	movh %d6,19452
803faa66:	1b 06 52 6c 	addi %d6,%d6,-15072
    uint32 stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
803faa6a:	c5 f6 10 01 	lea %a6,f0001010 <_START2_end+0x4fc0abe4>
             phaseConfig < &sequence->phaseConfig[sequence->numOfPhases];
803faa6e:	d9 2c 58 86 	lea %a12,[%a2]26136 <803f6618 <IfxPmsEvr_cfgSequenceDefault>>
803faa72:	1d 00 15 00 	j 803faa9c <Ifx_Ssw_Pms_Init+0xa6>
    uint32 stmCount      = (uint32)((float32)33000000UL * waitInSec);
803faa76:	19 32 08 00 	ld.w %d2,[%a3]8
803faa7a:	4b 26 41 20 	mul.f %d2,%d6,%d2
803faa7e:	4b 02 71 31 	ftouz %d3,%d2
    uint32 stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
803faa82:	54 65       	ld.w %d5,[%a6]

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
803faa84:	54 62       	ld.w %d2,[%a6]
803faa86:	a2 52       	sub %d2,%d5
803faa88:	3f 32 fe ff 	jlt.u %d2,%d3,803faa84 <Ifx_Ssw_Pms_Init+0x8e>
             phaseConfig++)
803faa8c:	d9 33 0c 00 	lea %a3,[%a3]12
             phaseConfig < &sequence->phaseConfig[sequence->numOfPhases];
803faa90:	19 c2 04 00 	ld.w %d2,[%a12]4
803faa94:	42 72       	add %d2,%d7
803faa96:	80 33       	mov.d %d3,%a3
803faa98:	7f 23 3d 80 	jge.u %d3,%d2,803fab12 <Ifx_Ssw_Pms_Init+0x11c>
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
803faa9c:	59 40 34 a0 	st.w [%a4]692 <f00302b4 <_START2_end+0x4fc39e88>>,%d0
    while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
803faaa0:	19 42 34 a0 	ld.w %d2,[%a4]692 <f00302b4 <_START2_end+0x4fc39e88>>
803faaa4:	37 02 e1 20 	extr.u %d2,%d2,1,1
803faaa8:	5f 42 fc 7f 	jeq %d2,%d4,803faaa0 <Ifx_Ssw_Pms_Init+0xaa>
            for (regConfig = &phaseConfig->regConfig[0];
803faaac:	99 32 04 00 	ld.a %a2,[%a3]4
                 regConfig < &phaseConfig->regConfig[phaseConfig->numOfRegisters];
803faab0:	14 32       	ld.bu %d2,[%a3]
803faab2:	80 23       	mov.d %d3,%a2
803faab4:	13 c2 20 23 	madd %d2,%d3,%d2,12
803faab8:	7f 23 16 80 	jge.u %d3,%d2,803faae4 <Ifx_Ssw_Pms_Init+0xee>
                regVal  = (*((volatile uint32 *)regConfig->regAddr));
803faabc:	d4 27       	ld.a %a7,[%a2]
803faabe:	54 72       	ld.w %d2,[%a7]
                regVal &= ~regConfig->mask;
803faac0:	19 23 08 00 	ld.w %d3,[%a2]8
803faac4:	0f 32 e0 20 	andn %d2,%d2,%d3
                regVal |= regConfig->value;
803faac8:	19 23 04 00 	ld.w %d3,[%a2]4
803faacc:	a6 32       	or %d2,%d3
                (*((volatile uint32 *)regConfig->regAddr)) = regVal; /*Write to the physical register*/
803faace:	74 72       	st.w [%a7],%d2
                 regConfig++)
803faad0:	d9 22 0c 00 	lea %a2,[%a2]12
                 regConfig < &phaseConfig->regConfig[phaseConfig->numOfRegisters];
803faad4:	14 32       	ld.bu %d2,[%a3]
803faad6:	19 33 04 00 	ld.w %d3,[%a3]4
803faada:	13 c2 20 23 	madd %d2,%d3,%d2,12
803faade:	80 23       	mov.d %d3,%a2
803faae0:	3f 23 ee ff 	jlt.u %d3,%d2,803faabc <Ifx_Ssw_Pms_Init+0xc6>
            PMS_EVRSDCTRL0.B.UP = 1;
803faae4:	54 52       	ld.w %d2,[%a5]
803faae6:	b7 12 01 2f 	insert %d2,%d2,1,30,1
803faaea:	74 52       	st.w [%a5],%d2
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF) | (1 << IFX_SCU_SEICON0_ENDINIT_OFF);
803faaec:	59 41 34 a0 	st.w [%a4]692 <f00302b4 <_START2_end+0x4fc39e88>>,%d1
    while (MODULE_SCU.SEICON0.B.ENDINIT == 0)
803faaf0:	19 42 34 a0 	ld.w %d2,[%a4]692 <f00302b4 <_START2_end+0x4fc39e88>>
803faaf4:	6f 12 fe 7f 	jz.t %d2,1,803faaf0 <Ifx_Ssw_Pms_Init+0xfa>
803faaf8:	3b f0 0f 20 	mov %d2,255
            } while (PMS_EVRSDCTRL0.B.UP == 1);
803faafc:	54 53       	ld.w %d3,[%a5]
803faafe:	37 03 61 3f 	extr.u %d3,%d3,30,1
803fab02:	5f 43 ba ff 	jne %d3,%d4,803faa76 <Ifx_Ssw_Pms_Init+0x80>
                if (--timeoutCount <= 0)
803fab06:	c2 f2       	add %d2,-1
803fab08:	df 02 fa ff 	jne %d2,0,803faafc <Ifx_Ssw_Pms_Init+0x106>
                    pmsInitDone = FALSE;
803fab0c:	02 98       	mov %d8,%d9
803fab0e:	1d ff b4 ff 	j 803faa76 <Ifx_Ssw_Pms_Init+0x80>
    if (IfxPmsEvr_runInitSequence(&IfxPmsEvr_cfgSequenceDefault) == 0)
803fab12:	df 08 82 ff 	jne %d8,0,803faa16 <Ifx_Ssw_Pms_Init+0x20>
    __asm__ volatile ("debug" : : : "memory");
803fab16:	00 a0       	debug 
}
803fab18:	1d ff 7f ff 	j 803faa16 <Ifx_Ssw_Pms_Init+0x20>

803fab1c <Ifx_Ssw_Pms_InitCheck>:

#if (IFX_CFG_SSW_ENABLE_PMS_INIT_CHECK == 1U)
void Ifx_Ssw_Pms_InitCheck(void)
{
803fab1c:	40 ae       	mov.aa %a14,%sp
    if (PMS_EVRSTAT.B.EVRC == 1U)
803fab1e:	91 50 02 2f 	movh.a %a2,61477
803fab22:	d9 22 2c 08 	lea %a2,[%a2]-32724 <f024802c <_START2_end+0x4fe51c00>>
803fab26:	54 22       	ld.w %d2,[%a2]
803fab28:	6f 02 04 80 	jnz.t %d2,0,803fab30 <Ifx_Ssw_Pms_InitCheck+0x14>
803fab2c:	dc 0b       	ji %a11
    {
        __debug();
        /* Application may have call to error handling here */
    }
    Ifx_Ssw_jumpBackToLink();
}
803fab2e:	00 90       	ret 
        for (regCfgCount = 0; regCfgCount < checkConfig->numOfRegisters; regCfgCount++)
803fab30:	91 f0 03 28 	movh.a %a2,32831
803fab34:	39 25 68 c6 	ld.bu %d5,[%a2]26408 <803f6728 <IfxPmsEvr_checkRegCfgDefault>>
803fab38:	bf 15 1d 00 	jlt %d5,1,803fab72 <Ifx_Ssw_Pms_InitCheck+0x56>
            const IfxPmsEvr_StepDownRegulatorRegConfig *regConfig = &checkConfig->regConfig[regCfgCount];
803fab3c:	91 f0 03 28 	movh.a %a2,32831
803fab40:	99 22 6c c6 	ld.a %a2,[%a2]26412 <803f672c <IfxPmsEvr_checkRegCfgDefault+0x4>>
    boolean allRight = TRUE;
803fab44:	82 12       	mov %d2,1
        for (regCfgCount = 0; regCfgCount < checkConfig->numOfRegisters; regCfgCount++)
803fab46:	82 03       	mov %d3,0
            regVal  = (*((volatile uint32 *)regConfig->regAddr));
803fab48:	d4 23       	ld.a %a3,[%a2]
803fab4a:	54 34       	ld.w %d4,[%a3]
            regVal &= regConfig->mask;
803fab4c:	19 26 08 00 	ld.w %d6,[%a2]8
803fab50:	26 64       	and %d4,%d6
            if (regVal != regConfig->value)
803fab52:	19 26 04 00 	ld.w %d6,[%a2]4
                allRight = FALSE;
803fab56:	0b 64 00 41 	eq %d4,%d4,%d6
803fab5a:	ab 02 80 24 	sel %d2,%d4,%d2,0
        for (regCfgCount = 0; regCfgCount < checkConfig->numOfRegisters; regCfgCount++)
803fab5e:	c2 13       	add %d3,1
803fab60:	d9 22 0c 00 	lea %a2,[%a2]12
803fab64:	5f 53 f2 ff 	jne %d3,%d5,803fab48 <Ifx_Ssw_Pms_InitCheck+0x2c>
        if (allRight == TRUE)
803fab68:	df 12 05 00 	jeq %d2,1,803fab72 <Ifx_Ssw_Pms_InitCheck+0x56>
    __asm__ volatile ("debug" : : : "memory");
803fab6c:	00 a0       	debug 
}
803fab6e:	1d ff df ff 	j 803fab2c <Ifx_Ssw_Pms_InitCheck+0x10>
            if (PMS_EVRSTAT.B.SDVOK != 1)
803fab72:	91 50 02 2f 	movh.a %a2,61477
803fab76:	d9 22 2c 08 	lea %a2,[%a2]-32724 <f024802c <_START2_end+0x4fe51c00>>
803fab7a:	54 22       	ld.w %d2,[%a2]
803fab7c:	ef 52 d8 ff 	jnz.t %d2,21,803fab2c <Ifx_Ssw_Pms_InitCheck+0x10>
803fab80:	1d ff f6 ff 	j 803fab6c <Ifx_Ssw_Pms_InitCheck+0x50>

803fab84 <initLED>:
/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
/* This function initializes the port pin which drives the LED */
void initLED(void)
{
803fab84:	40 ae       	mov.aa %a14,%sp
803fab86:	20 28       	sub.a %sp,40
803fab88:	7b 40 00 2f 	movh %d2,61444
803fab8c:	1b 02 00 2a 	addi %d2,%d2,-24576
803fab90:	59 e2 e8 ff 	st.w [%a14]-24,%d2
803fab94:	82 52       	mov %d2,5
803fab96:	e9 e2 e7 ff 	st.b [%a14]-25,%d2
803fab9a:	3b 00 08 20 	mov %d2,128
803fab9e:	59 e2 e0 ff 	st.w [%a14]-32,%d2
803faba2:	3b 00 08 20 	mov %d2,128
803faba6:	59 e2 dc ff 	st.w [%a14]-36,%d2
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
803fabaa:	39 e3 e7 ff 	ld.bu %d3,[%a14]-25
803fabae:	19 e4 e0 ff 	ld.w %d4,[%a14]-32
803fabb2:	19 e2 dc ff 	ld.w %d2,[%a14]-36
803fabb6:	a6 42       	or %d2,%d4
803fabb8:	02 25       	mov %d5,%d2
803fabba:	02 34       	mov %d4,%d3
803fabbc:	99 e4 e8 ff 	ld.a %a4,[%a14]-24
803fabc0:	6d ff 8d f6 	call 803f98da <IfxPort_setPinMode>
}
803fabc4:	00 00       	nop 
803fabc6:	7b 40 00 2f 	movh %d2,61444
803fabca:	1b 02 00 2a 	addi %d2,%d2,-24576
803fabce:	59 e2 fc ff 	st.w [%a14]-4,%d2
803fabd2:	82 52       	mov %d2,5
803fabd4:	e9 e2 fb ff 	st.b [%a14]-5,%d2
    IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
803fabd8:	39 e2 fb ff 	ld.bu %d2,[%a14]-5
803fabdc:	19 e3 fc ff 	ld.w %d3,[%a14]-4
803fabe0:	59 e3 f4 ff 	st.w [%a14]-12,%d3
803fabe4:	e9 e2 f3 ff 	st.b [%a14]-13,%d2
803fabe8:	82 12       	mov %d2,1
803fabea:	59 e2 ec ff 	st.w [%a14]-20,%d2


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
803fabee:	39 e2 f3 ff 	ld.bu %d2,[%a14]-13
803fabf2:	19 e3 ec ff 	ld.w %d3,[%a14]-20
803fabf6:	0f 23 00 20 	sh %d2,%d3,%d2
803fabfa:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
803fabfe:	b0 42       	add.a %a2,4
803fac00:	74 22       	st.w [%a2],%d2
}
803fac02:	00 00       	nop 
}
803fac04:	00 00       	nop 
    /* Initialization of the LED used in this example */
    IfxPort_setPinModeOutput(LED, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);

    /* Switch OFF the LED (low-level active) */
    IfxPort_setPinHigh(LED);
}
803fac06:	00 00       	nop 
803fac08:	00 90       	ret 

803fac0a <blinkLED>:

/* This function toggles the port pin and wait 500 milliseconds */
void blinkLED(void)
{
803fac0a:	40 ae       	mov.aa %a14,%sp
803fac0c:	20 28       	sub.a %sp,40
803fac0e:	7b 40 00 2f 	movh %d2,61444
803fac12:	1b 02 00 2a 	addi %d2,%d2,-24576
803fac16:	59 e2 e8 ff 	st.w [%a14]-24,%d2
803fac1a:	82 52       	mov %d2,5
803fac1c:	e9 e2 e7 ff 	st.b [%a14]-25,%d2


IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex)
{
    IfxPort_setPinState(port, pinIndex, IfxPort_State_toggled);
803fac20:	39 e2 e7 ff 	ld.bu %d2,[%a14]-25
803fac24:	19 e3 e8 ff 	ld.w %d3,[%a14]-24
803fac28:	59 e3 e0 ff 	st.w [%a14]-32,%d3
803fac2c:	e9 e2 df ff 	st.b [%a14]-33,%d2
803fac30:	7b 10 00 20 	movh %d2,1
803fac34:	c2 12       	add %d2,1
803fac36:	59 e2 d8 ff 	st.w [%a14]-40,%d2
    port->OMR.U = action << pinIndex;
803fac3a:	39 e2 df ff 	ld.bu %d2,[%a14]-33
803fac3e:	19 e3 d8 ff 	ld.w %d3,[%a14]-40
803fac42:	0f 23 00 20 	sh %d2,%d3,%d2
803fac46:	99 e2 e0 ff 	ld.a %a2,[%a14]-32
803fac4a:	b0 42       	add.a %a2,4
803fac4c:	74 22       	st.w [%a2],%d2
}
803fac4e:	00 00       	nop 
}
803fac50:	00 00       	nop 
803fac52:	7b 00 00 2f 	movh %d2,61440
803fac56:	1b 02 00 21 	addi %d2,%d2,4096
803fac5a:	59 e2 fc ff 	st.w [%a14]-4,%d2
803fac5e:	3b 40 1f 20 	mov %d2,500
803fac62:	59 e2 f8 ff 	st.w [%a14]-8,%d2
803fac66:	19 e2 fc ff 	ld.w %d2,[%a14]-4
803fac6a:	59 e2 f4 ff 	st.w [%a14]-12,%d2
803fac6e:	82 04       	mov %d4,0
803fac70:	6d ff c2 e9 	call 803f7ff4 <IfxScuCcu_getSourceFrequency>
803fac74:	02 23       	mov %d3,%d2
803fac76:	91 30 00 2f 	movh.a %a2,61443
803fac7a:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_START2_end+0x4fc3fc04>>
803fac7e:	54 22       	ld.w %d2,[%a2]
803fac80:	37 02 64 20 	extr.u %d2,%d2,0,4
803fac84:	8f f2 0f 21 	and %d2,%d2,255
803fac88:	4b 02 41 21 	itof %d2,%d2
803fac8c:	4b 23 51 20 	div.f %d2,%d3,%d2
IFX_INLINE float32 IfxStm_getFrequency(Ifx_STM *stm)
{
    IFX_UNUSED_PARAMETER(stm);
    float32 result;

    result = IfxScuCcu_getStmFrequency();
803fac90:	59 e2 f0 ff 	st.w [%a14]-16,%d2

    return result;
803fac94:	19 e2 f0 ff 	ld.w %d2,[%a14]-16
}


IFX_INLINE sint32 IfxStm_getTicksFromMilliseconds(Ifx_STM *stm, uint32 milliSeconds)
{
    sint32 freq = (sint32)IfxStm_getFrequency(stm);
803fac98:	4b 02 31 21 	ftoiz %d2,%d2
803fac9c:	59 e2 ec ff 	st.w [%a14]-20,%d2
    return (freq / (1000)) * milliSeconds;
803faca0:	19 e4 ec ff 	ld.w %d4,[%a14]-20
803faca4:	7b 20 06 21 	movh %d2,4194
803faca8:	1b 32 dd 24 	addi %d2,%d2,19923
803facac:	73 24 6a 20 	mul %e2,%d4,%d2
803facb0:	86 a3       	sha %d3,-6
803facb2:	8f 14 3e 20 	sha %d2,%d4,-31
803facb6:	0b 23 80 20 	sub %d2,%d3,%d2
803facba:	02 23       	mov %d3,%d2
803facbc:	19 e2 f8 ff 	ld.w %d2,[%a14]-8
803facc0:	e2 32       	mul %d2,%d3
    IfxPort_togglePin(LED);                                                     /* Toggle the state of the LED      */
    waitTime(IfxStm_getTicksFromMilliseconds(BSP_DEFAULT_TIMER, WAIT_TIME));    /* Wait 500 milliseconds            */
803facc2:	0b 20 00 28 	mov %e2,%d2
803facc6:	0b 23 10 48 	mov %e4,%d3,%d2
803facca:	6d ff 77 f9 	call 803f9fb8 <waitTime>
}
803facce:	00 00       	nop 
803facd0:	00 90       	ret 

803facd2 <blinkLED_end>:
	...
